import numpy as np

# importing chipy module
from pylmgc90 import chipy

# Initializing
chipy.Initialize()

# checking/creating mandatory subfolders
chipy.checkDirectories()

# logMes
#chipy.utilities_DisableLogMes()

#
# defining some variables
#

# space dimension
dim = 3

# modeling hypothesis ( 1 = plain strain, 2 = plain stress, 3 = axi-symmetry)
mhyp = 0

# time evolution parameters
dt = 1.e-6

t_final = 1000*dt
dt_min = dt
dt_max = dt

NR_max_iter = 50
NR_adapt = 9999999
NR_tol = 1.e-4

forced=True

nb_steps=int(t_final/dt)


# theta integrator parameter
theta = 0.5

# deformable  yes=1, no=0
deformable = 1

# interaction parameters
Rloc_tol = 5.e-2

chipy.CSASp_SkipAutoContact()

# nlgs parameters
tol = 1e-4
relax = 1.0
norm = 'Quad '
gs_it1 = 50
gs_it2 = 5
solver_type='Stored_Delassus_Loops         '

# write parameter
freq_write   = 1 #1000

# display parameters
freq_display = 1 #1000

#
# read and load
#

# Newton loop parameters:
chipy.NewtonRaphson_SetFinalTime(t_final)
chipy.NewtonRaphson_SetMinTimeStep(dt_min)
chipy.NewtonRaphson_SetMaxTimeStep(dt_max)
chipy.NewtonRaphson_SetMaxIter(NR_max_iter)
chipy.NewtonRaphson_SetIncPatience(NR_adapt)


# Set space dimension
chipy.SetDimension(dim,mhyp)
#
chipy.utilities_logMes('INIT TIME STEPPING')
chipy.TimeEvolution_SetTimeStep(dt)
chipy.Integrator_InitTheta(theta)
#
chipy.utilities_logMes('READ BEHAVIOURS')
chipy.ReadBehaviours()
if deformable: chipy.ReadModels()
#
chipy.utilities_logMes('READ BODIES')
chipy.ReadBodies()
#
chipy.utilities_logMes('LOAD BEHAVIOURS')
chipy.LoadBehaviours()
if deformable: chipy.LoadModels()
#
chipy.utilities_logMes('READ INI DOF')
chipy.ReadIniDof()
#
if deformable:
  chipy.utilities_logMes('READ INI GPV')
  chipy.ReadIniGPV()
#
chipy.utilities_logMes('READ DRIVEN DOF')
chipy.ReadDrivenDof()
#
chipy.utilities_logMes('LOAD TACTORS')
chipy.LoadTactors()
#
chipy.utilities_logMes('READ INI Vloc Rloc')
chipy.ReadIniVlocRloc()

#
# paranoid writes
#
chipy.utilities_logMes('WRITE BODIES')
chipy.WriteBodies()
chipy.utilities_logMes('WRITE BEHAVIOURS')
chipy.WriteBehaviours()
chipy.utilities_logMes('WRITE DRIVEN DOF')
chipy.WriteDrivenDof()

#
# open display & postpro
#

chipy.utilities_logMes('DISPLAY & WRITE')
chipy.OpenDisplayFiles()
chipy.OpenPostproFiles()


f=open('gpi.txt','w')

mats=[]
mats.append(chipy.mecaMAILx_GetMaterials(1))

status=[]
# here the nodal field is generated by a built-in function
status.append(chipy.mecaMAILx_GetDofStatus(1))


####
# sorting laws by law type
tact_laws = {}
# creating a data structure where to put results for drawing
law2draw = {}
for i in range( chipy.tact_behav_GetNbTactBehav() ):
  law_type, law_name, law_params = chipy.tact_behav_GetTactBehav(i+1)
  # here are all laws ; normally only one for each type
  tact_laws.setdefault(law_type,[]).append(i+1)
  law2draw[law_type] = [ i, law_params, np.zeros([4,nb_steps]) ]
  
# paranoiac test 
for k,v in tact_laws.items():
  if len(v) > 1:
    print('Error')
    print('for law type',k,'their is more than one declared law !')  
    sys.exit()

# Getting index of some internal parameters beta, surface, etc for each kind of law
beta_index = {}
es_index={}
un_index={}
for k,v in tact_laws.items():
  #
  internal_names = chipy.tact_behav_GetInternalComment(v[0])
  # Replace the one long string by a list of strings
  internal_names = internal_names.split()
  # Find the index in list matching with 'beta' ... 
  beta_index[k] = internal_names.index('beta')
  es_index[k] = internal_names.index('#taille_ele')
  un_index[k] = internal_names.index('saut_de_un')

#
# simulation part ...
#

# ... calls a simulation time loop
# since constant compute elementary mass matrices once
chipy.utilities_logMes('COMPUTE MASS')
chipy.ComputeMass()

chipy.utilities_logMes('COMPUTE BULK')
chipy.ComputeBulk()

# since constant ; compute iteration matrix once
chipy.utilities_logMes('ASSEMB KT')
chipy.mecaMAILx_AssembKT()

while chipy.TimeEvolution_GetTime() < t_final :
  #
  chipy.utilities_logMes('INCREMENT STEP')
  chipy.IncrementStep()

  chipy.utilities_logMes('COMPUTE Fext')
  chipy.ComputeFext()

  # Newton loop
  chipy.NewtonRaphson_Initialize(NR_tol)
  is_converged = 1
  k=0
  #looping until something changes in CheckConvergence
  while is_converged == 1 :
    k+=1
    chipy.utilities_logMes('COMPUTE BULK')
    chipy.ComputeBulk()

    chipy.utilities_logMes('ASSEMB RHS/KT')
    chipy.AssembleMechanicalRHS()
    # chipy.AssembleMechanicalLHS()

    chipy.utilities_logMes('COMPUTE Free Vlocy')
    chipy.ComputeFreeVelocity()
    #
    chipy.utilities_logMes('SELECT PROX TACTORS')
    chipy.SelectProxTactors()
    #
    ### Signorini Coulomb
    chipy.RecupRloc()
    chipy.ExSolver(solver_type, norm, tol, relax, gs_it1, gs_it2)
    chipy.StockRloc()
    ###
    chipy.utilities_logMes('COMPUTE DOF')
    chipy.ComputeDof()
    #
    if k > 1:
      NR_norm = chipy.mecaMAILx_ComputeResidueNorm()
      is_converged = chipy.NewtonRaphson_CheckConvergence(NR_norm)

      if forced and k == NR_max_iter:
        chipy.utilities_logMes('Warning: forced convergence')        
        is_converged=0
      
  ### end while NR

  chipy.utilities_logMes('COMPUTE TIME STEP')
  #istate = 1 => redo step
  #istate = 2 => stop

  istate = chipy.NewtonRaphson_ComputeTimeStep()

  if not istate == 1 :

    chipy.utilities_logMes('UPDATE TACT BEHAV')
    chipy.UpdateTactBehav()
    chipy.StockRloc()

    chipy.utilities_logMes('UPDATE DOF')
    chipy.UpdateStep()

    nstep=chipy.TimeEvolution_GetStep()
    
    tactlawnbs= chipy.inter_handler_3D_getAllTactLawNb( chipy.CSASp_ID )
    inters    = chipy.inter_handler_3D_getAll( chipy.CSASp_ID )
    internals = chipy.inter_handler_3D_getAllInternal( chipy.CSASp_ID )

    # looping on interactions
    for i in range( chipy.inter_handler_3D_getNb(chipy.CSASp_ID)):
      ilaw =  int(tactlawnbs[i])
      law_type, law_name, law_params  = chipy.tact_behav_GetTactBehav(ilaw)

      v = law2draw[ law_type ][2]
      #v[2][0, nstep-1] = all_inter[v[0],6] # gap
      v[1, nstep-1] = -inters[i,3]          # -rln/dt
      #
      v[0, nstep-1] = internals[i,un_index[law_type]]    # [un]
      v[2, nstep-1] = internals[i,beta_index[law_type]]  # beta
      v[3, nstep-1] = internals[i,es_index[law_type]]    # length
    
    #
    ### write results ###
    #
    chipy.WriteOut(freq_write)

    chipy.WriteDisplayFiles(freq=freq_display,DrvDof=('mecafe','node',status),materials=('mecafe','element',mats))
    chipy.WritePostproFiles()


    # first body,element,gp
    gpi=chipy.mecaMAILx_GetGpInternals(1,1,1)
    xx=np.append([chipy.TimeEvolution_GetTime()],gpi,0)
    np.savetxt(f,xx[np.newaxis])
    
    chipy.checkInteractiveCommand()

    if istate == 2 :
      # istate => Stop
      break

### end while time loop ###

#
# close display & postpro
#
chipy.CloseDisplayFiles()
chipy.ClosePostproFiles()

f.close()

# this is the end
chipy.Finalize()

# Save contact law type and associated values
import pickle
f = open("RnGapBeta.p", "wb" )
pickle.dump(law2draw, f )
f.close()

