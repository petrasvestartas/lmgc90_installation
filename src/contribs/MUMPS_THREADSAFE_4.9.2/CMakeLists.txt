PROJECT(MUMPS  CXX C Fortran)
CMAKE_MINIMUM_REQUIRED(VERSION 3.5.0)

if(POLICY CMP0077)
  cmake_policy(SET CMP0077 NEW)
endif(POLICY CMP0077)

SET(CMAKE_VERBOSE_MAKEFILE OFF)
SET(CMAKE_MODULE_PATH ${PROJECT_SOURCE_DIR}/CMakeModules)

if(NOT DEFINED CMAKE_MACOSX_RPATH)
  set(CMAKE_MACOSX_RPATH 0)
endif(NOT DEFINED CMAKE_MACOSX_RPATH)

# some path for output : libs, modules, executables
set(LIBRARY_OUTPUT_PATH            ${CMAKE_BINARY_DIR}/lib)
set(EXECUTABLE_OUTPUT_PATH         ${CMAKE_BINARY_DIR}/bin)
set(CMAKE_Fortran_MODULE_DIRECTORY ${CMAKE_BINARY_DIR}/modules)

# options
OPTION(ENABLE_PORD "enables PORD libary" TRUE)
OPTION(ENABLE_METIS "enables Metis libary" FLASE)
OPTION(ENABLE_SCOTCH "enables Scotch libary" FALSE)
OPTION(ENABLE_SEQUENTIAL "enables sequential version" TRUE)
OPTION(ENABLE_DEBUG "enables debug information" FALSE)
OPTION(ENABLE_SHARED "enables the building of shared libraries instead of static libraries" TRUE)
OPTION(ENABLE_REAL "enables support for real numbers" TRUE)
OPTION(ENABLE_COMPLEX "enables support for complex numbers" FALSE)
OPTION(ENABLE_SINGLE_PRECISION "enables support for single precision" FALSE)
OPTION(ENABLE_DOUBLE_PRECISION "enables support for double precision" TRUE)
OPTION(ENABLE_EXAMPLES "enables the compilation of example files" FALSE)

# set build type
IF(ENABLE_DEBUG)
  SET(CMAKE_BUILD_TYPE "Debug")
ELSE(ENABLE_DEBUG)
  IF(NOT CMAKE_BUILD_TYPE)
    SET(CMAKE_BUILD_TYPE "Release")
  ENDIF(NOT CMAKE_BUILD_TYPE)
ENDIF(ENABLE_DEBUG)

# set mumps versions
SET(MUMPS_BUILD_VERSIONS)
IF(ENABLE_REAL AND ENABLE_SINGLE_PRECISION)
  SET(MUMPS_BUILD_VERSIONS ${MUMPS_BUILD_VERSIONS} "s")
ENDIF(ENABLE_REAL AND ENABLE_SINGLE_PRECISION)
IF(ENABLE_REAL AND ENABLE_DOUBLE_PRECISION)
  SET(MUMPS_BUILD_VERSIONS ${MUMPS_BUILD_VERSIONS} "d")
ENDIF(ENABLE_REAL AND ENABLE_DOUBLE_PRECISION)
IF(ENABLE_COMPLEX AND ENABLE_SINGLE_PRECISION)
  SET(MUMPS_BUILD_VERSIONS ${MUMPS_BUILD_VERSIONS} "c")
ENDIF(ENABLE_COMPLEX AND ENABLE_SINGLE_PRECISION)
IF(ENABLE_COMPLEX AND ENABLE_DOUBLE_PRECISION)
  SET(MUMPS_BUILD_VERSIONS ${MUMPS_BUILD_VERSIONS} "z")
ENDIF(ENABLE_COMPLEX AND ENABLE_DOUBLE_PRECISION)

#ENABLE_LANGUAGE(Fortran)

#  FIND_PACKAGE(OpenMP REQUIRED)
#    SET(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} ${OpenMP_C_FLAGS}")
#    SET(CMAKE_Fortran_FLAGS "${CMAKE_Fortran_FLAGS} ${OpenMP_C_FLAGS}")
#    SET(CMAKE_EXE_LINKER_FLAGS "${CMAKE_EXE_LINKER_FLAGS} ${OpenMP_F_FLAGS}")

# FIND_PACKAGE(Threads REQUIRED)

# in order to link static library with shared libraries
# the static library must be build with the "-fPIC option
# on 64-bit systems
#IF(NOT ENABLE_SHARED AND CMAKE_SYSTEM_PROCESSOR STREQUAL "x86_64" )
# SET(CMAKE_Fortran_FLAGS "${CMAKE_Fortran_FLAGS} -fPIC")
# SET(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} -fPIC")
#ENDIF(NOT ENABLE_SHARED AND CMAKE_SYSTEM_PROCESSOR STREQUAL "x86_64" )

FIND_PACKAGE(BLAS REQUIRED)

SET(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} -DAdd_")

IF(ENABLE_SEQUENTIAL)
  ADD_SUBDIRECTORY(libseq)
ELSE(ENABLE_SEQUENTIAL)
  find_library(BLACS_FOUND blacs)
  find_library(SCALAPACK_FOUND scalapack)
  if(NOT SCALAPACK_FOUND OR NOT BLACS_FOUND)
    if( NOT EXISTS "${CMAKE_CURRENT_SOURCE_DIR}/scalapack-2.0.2/" )
      exec_program(tar ARGS "-xzf ${CMAKE_CURRENT_SOURCE_DIR}/scalapack-2.0.2.tgz -C ${CMAKE_CURRENT_SOURCE_DIR}")
    endif()
    add_subdirectory(scalapack-2.0.2)
    set(BLAS_LIBRARIES ${BLAS_LIBRARIES} scalapack)
  else(NOT SCALAPACK_FOUND)
    set(BLAS_LIBRARIES ${BLAS_LIBRARIES} ${SCALAPACK_FOUND} ${BLACS_FOUND})
  endif(NOT SCALAPACK_FOUND OR NOT BLACS_FOUND)
  message(STATUS "SCALAPACK libraries : ${BLAS_LIBRARIES}")
ENDIF(ENABLE_SEQUENTIAL)

IF(ENABLE_PORD)
  ADD_SUBDIRECTORY(PORD/lib)
  ADD_DEFINITIONS("-Dpord")
ENDIF(ENABLE_PORD)

IF(ENABLE_METIS)
  IF(NOT ENABLE_SHARED)
    SET(Metis_FIND_STATIC_LIBRARY TRUE)
  ENDIF(NOT ENABLE_SHARED)
  FIND_PACKAGE(Metis REQUIRED)
  ADD_DEFINITIONS("-Dmetis")
ENDIF(ENABLE_METIS)

IF(ENABLE_SCOTCH)
  SET(Scotch_FIND_STATIC_LIBRARY TRUE)
  FIND_PACKAGE(Scotch REQUIRED)
  ADD_DEFINITIONS("-Dscotch")
ENDIF(ENABLE_SCOTCH)

#SET(CMAKE_Fortran_FLAGS "${CMAKE_Fortran_FLAGS} -Dintel_ -DALLOW_NON_INIT")
ADD_SUBDIRECTORY(src)
ADD_SUBDIRECTORY(include)

IF(ENABLE_EXAMPLES)
  ENABLE_TESTING()
  ADD_SUBDIRECTORY(examples)
ENDIF(ENABLE_EXAMPLES)

set(MUMPS_INCLUDE_DIR ${CMAKE_CURRENT_SOURCE_DIR}/include)
set(MUMPS_INCLUDE_DIRS ${MUMPS_INCLUDE_DIR} PARENT_SCOPE)
