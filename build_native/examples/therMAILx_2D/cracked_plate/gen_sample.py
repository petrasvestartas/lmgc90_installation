import os,sys
import math
from pylmgc90 import pre

dim=2

#characteristic length from gmsh
l_mesh = 2*5.e-3

#Plate length
L=4.e-2
#Plate width
l=3.e-2
#Area
A=L*l

##Initial velocity
Vini=0.0

##Initial temperature
Tini=0.0

##Imposed temperature on left border
Tleft=20.

##Imposed forces on borders
Fleft=-10000.; Fright=10000.

#Young's Modulus (Pa)
E1   = 2.e11; E2   = 2.e11
#Poisson's Coefficient
nu1  = 0.3  ; nu2  = 0.3
#specific mass (kg/(m*m*m))
rho1 = 8.e3 ; rho2 = 8.e3
#Dilatation's coefficient
alph1= 0.   ; alph2= 0.
#Conductivity
cond1= 3.e6 ; cond2= 3.e6
#Specific's heat
C1   = 1.125; C2   = 1.125
#Reference temperature
Tref1= 0.   ; Tref2= 0.

# Fracture energie
w1=60.;  w2=20.; w3=40.
# Critical stress
sig1=1.5e7; sig2=1.5e7; sig3=1.5e7

# Fluid conductivity in the crack
condfluid = 0.

#############################################################################################
#############################################################################################

bodies = pre.avatars()
mats   = pre.materials()
mods   = pre.models()
tacts  = pre.tact_behavs()
svs    = pre.see_tables()


#Thermal material 1 (matrix)
mat1T = pre.material(name='mat1T', materialType='THERMO_ELAS', density=rho1, elas='standard',
                          young=E1, nu=nu1, anisotropy='isotropic', dilatation=alph1, 
                          T_ref_meca=Tref1, specific_capacity=C1, conductivity=cond1)
mats.addMaterial(mat1T)
#Mechanical material 1 (matrix)
mat1M = pre.material(name='mat1M', materialType='ELAS_DILA', density=rho1, elas='standard',
                          young=E1, nu=nu1, anisotropy='isotropic', dilatation=alph1, 
                          T_ref_meca=Tref1)
mats.addMaterial(mat1M)

#Thermal material 2 (inclusion)
mat2T = pre.material(name='mat2T', materialType='THERMO_ELAS', density=rho2, elas='standard',
                          young=E2, nu=nu2, anisotropy='isotropic', dilatation=alph2, 
                          T_ref_meca=Tref2, specific_capacity=C2, conductivity=cond2)
mats.addMaterial(mat2T)

#Mechanical material 2 (inclusion)
mat2M = pre.material(name='mat2M', materialType='ELAS_DILA', density=rho2, elas='standard',
                          young=E2, nu=nu2, anisotropy='isotropic', dilatation=alph2, 
                          T_ref_meca=Tref2)
mats.addMaterial(mat2M)

#Mechanical model definition
t2Dm = pre.model(name='T2D_M', physics='MECAx', element='T3xxx', dimension=dim,
                      external_model='MatL_', kinematic='small', material='elasd',
                      anisotropy='iso__', mass_storage='lump_', external_fields=['TEMPERATURE'])
#Thermal model definition
t2Dl = pre.model(name='T2D_L', physics='THERx', element='T3xxx', dimension=dim,
                      external_model='no___', formulation='class', capacity_storage='lump_')
mods.addModel(t2Dm)
mods.addModel(t2Dl)

##Mechanial meshes generation
# - reading mesh generated by gmsh
# - associating model, material and color of contactors
# - setting intial conditions

plate   = pre.readMesh('plate.msh',dim)
bodym   = pre.buildMeshedAvatar(mesh=plate, model=t2Dm, material=mat1M)

ccolor  = {'Matri':'BLUEx', 'Matint':'YELLO', 'Granu':'GREEN', 'Graint':'REDxx'}
weights = [0.5-(1/(2*math.sqrt(3))),0.5+(1/(2*math.sqrt(3)))]
bodiesm = pre.explodeMeshedAvatar2D(body=bodym, nbPoints=2, w=weights, color_dict=ccolor)

bodies += bodiesm

##Thermal meshes generation
# - reading mesh generated by gmsh
# - associating model and material
# - setting intial conditions

bodyth   = pre.buildMeshedAvatar(mesh=plate, model=t2Dl, material=mat1T)
bodiesth = pre.explodeMeshedAvatar2D(bodyth)

for b in bodiesth:   
  b.defineGroups()
  if b.hasGroup('Matri'):
    b.defineModel(model=t2Dl)
    b.defineMaterial(material=mat1T)
  if b.hasGroup('Matint'):
    b.defineModel(model=t2Dl)
    b.defineMaterial(material=mat1T)
  if b.hasGroup('Granu'):
    b.defineModel(model=t2Dl)
    b.defineMaterial(material=mat2T)
  if b.hasGroup('Graint'):
    b.defineModel(model=t2Dl)
    b.defineMaterial(material=mat2T)
  b.imposeInitValue(group='all', component=1, value=Tini)
bodies+=bodiesth


#predicates definition for boundary conditions

#left
def l(x):
   return abs(x[0]) < l_mesh/2
#right
def r(x):
   return abs(x[0]) > L-l_mesh/2.

# Boundary conditions
for b in bodiesth:

  b.addGroupUsingPredicate(name='lleft', predicate=l)
  if b.hasGroup('lleft'):
    b.imposeDrivenDof(group='lleft', component=1, dofty='temp', ct=Tleft)

for b in bodiesm:

  b.addGroupUsingPredicate(name='lleft', predicate=l)
  if b.hasGroup('lleft'):
    b.imposeDrivenDof(group='lleft', component=1, dofty='force', ct=Fleft)

  b.addGroupUsingPredicate(name='rrght', predicate=l)
  if b.hasGroup('rrght'):
    b.imposeDrivenDof(group='rrght', component=1, dofty='force', ct=Fright)


#Contact laws parameters computations

Nt = len(bodym.groups['T3xxx'].bulks)

# characteristic length
Lmesh = 2*math.sqrt( A/(math.sqrt(3)*Nt) )

# Cn and Ct from Blal phd
cn1 = 23*E1/(Lmesh*(1-2*nu1))
ct1 = 2*(1-2*nu1)/(1+3*nu1)*cn1

cn2=23*E2/(Lmesh*(1-2*nu2))
ct2=2*(1-2*nu2)/(1+3*nu2)*cn2

# conduction in damaged interface
condendo1 = 3*condfluid*cond1/(cond1+2*condfluid)
condendo2=3*condfluid*cond2/(cond2+2*condfluid)

# conduction in sane interface
cond3=2*cond1*cond2/(cond1+cond2)
condendo3=3*condfluid*cond1*cond2/(cond1*cond2+cond1*condfluid+cond2*condfluid)


law1 = pre.tact_behav(name='law01', law='MP3_CZM_THER', dyfr=0., stfr =0., cn=cn1, ct=ct1, w=w1, 
                      smax=sig1, lambdas=cond1, lambdac=condendo1)
tacts+=law1

law2 = pre.tact_behav(name='law02', law='MP3_CZM_THER', dyfr=0., stfr =0., cn=cn2, ct=ct2, w=w2,
                      smax=sig2, lambdas=cond2, lambdac=condendo2)
tacts+=law2

law3 = pre.tact_behav(name='law03', law='MP3_CZM_THER', dyfr=0., stfr =0., cn=cn1, ct=ct1, w=w3,
                      smax=sig3, lambdas=cond3, lambdac=condendo3)
tacts+=law3


#same a previous, but by identifiyng the contact law, allow to change initial state in command file
law4 = pre.tact_behav(name='law04', law='MP3_CZM_THER', dyfr=0., stfr =0., cn=cn1, ct=ct1, w=w3, 
                      smax=sig3, lambdas=cond3, lambdac=condendo3)
tacts+=law4


# -BLUEx : material 1 (matrice)
# -YELLO : material 1 (matrice)   => with at least one side pre-damaged
# -REDxx : material 2 (inclusion) => with at least one side pre-damaged
# -GREEN : material 2 (inclusion)
#

vt1 = pre.see_table(CorpsCandidat='MAILx'   , candidat='CLxxx'   , colorCandidat='BLUEx',
                    CorpsAntagoniste='MAILx', antagoniste='ALpxx', colorAntagoniste='BLUEx',
                    behav=law1,  alert=l_mesh/2)
svs+=vt1
vt2 = pre.see_table(CorpsCandidat='MAILx'   , candidat='CLxxx'   , colorCandidat='BLUEx',
                    CorpsAntagoniste='MAILx', antagoniste='ALpxx', colorAntagoniste='YELLO',
                    behav=law1,  alert=l_mesh/2 )
svs+=vt2
vt3 = pre.see_table(CorpsCandidat='MAILx'   , candidat='CLxxx'   , colorCandidat='BLUEx',
                    CorpsAntagoniste='MAILx', antagoniste='ALpxx', colorAntagoniste='REDxx',
                    behav=law3,  alert=l_mesh/2 )
svs+=vt3
vt4 = pre.see_table(CorpsCandidat='MAILx'   , candidat='CLxxx'   , colorCandidat='BLUEx',
                    CorpsAntagoniste='MAILx', antagoniste='ALpxx', colorAntagoniste='GREEN',
                    behav=law3,  alert=l_mesh/2 )
svs+=vt4


vt5 = pre.see_table(CorpsCandidat='MAILx'   , candidat='CLxxx'   , colorCandidat='YELLO',
                    CorpsAntagoniste='MAILx', antagoniste='ALpxx', colorAntagoniste='BLUEx',
                    behav=law1,  alert=l_mesh/2 )
svs+=vt5
vt6 = pre.see_table(CorpsCandidat='MAILx'   , candidat='CLxxx'   , colorCandidat='YELLO',
                    CorpsAntagoniste='MAILx', antagoniste='ALpxx', colorAntagoniste='YELLO',
                    behav=law1,  alert=l_mesh/2 )
svs+=vt6
vt7 = pre.see_table(CorpsCandidat='MAILx'   , candidat='CLxxx'   , colorCandidat='YELLO',
                    CorpsAntagoniste='MAILx', antagoniste='ALpxx', colorAntagoniste='REDxx',
                    behav=law4,  alert=l_mesh/2 )
svs+=vt7
vt8 = pre.see_table(CorpsCandidat='MAILx'   , candidat='CLxxx'   , colorCandidat='YELLO',
                    CorpsAntagoniste='MAILx', antagoniste='ALpxx', colorAntagoniste='GREEN',
                    behav=law3,  alert=l_mesh/2 )
svs+=vt8


vt9 = pre.see_table(CorpsCandidat='MAILx'   , candidat='CLxxx'   , colorCandidat='REDxx',
                    CorpsAntagoniste='MAILx', antagoniste='ALpxx', colorAntagoniste='BLUEx',
                    behav=law3,  alert=l_mesh/2 )
svs+=vt9
vt10 = pre.see_table(CorpsCandidat='MAILx'   , candidat='CLxxx'   , colorCandidat='REDxx',
                     CorpsAntagoniste='MAILx', antagoniste='ALpxx', colorAntagoniste='YELLO',
                     behav=law4,  alert=l_mesh/2 )
svs+=vt10
vt11 = pre.see_table(CorpsCandidat='MAILx'   , candidat='CLxxx'   , colorCandidat='REDxx',
                     CorpsAntagoniste='MAILx', antagoniste='ALpxx', colorAntagoniste='REDxx',
                     behav=law2,  alert=l_mesh/2 )
svs+=vt11
vt12 = pre.see_table(CorpsCandidat='MAILx'   , candidat='CLxxx'   , colorCandidat='REDxx',
                     CorpsAntagoniste='MAILx', antagoniste='ALpxx', colorAntagoniste='GREEN',
                     behav=law2,  alert=l_mesh/2 )
svs+=vt12


vt13 = pre.see_table(CorpsCandidat='MAILx'   , candidat='CLxxx'   , colorCandidat='GREEN',
                     CorpsAntagoniste='MAILx', antagoniste='ALpxx', colorAntagoniste='BLUEx',
                     behav=law3,  alert=l_mesh/2 )
svs+=vt13
vt14 = pre.see_table(CorpsCandidat='MAILx'   , candidat='CLxxx'   , colorCandidat='GREEN',
                     CorpsAntagoniste='MAILx', antagoniste='ALpxx', colorAntagoniste='YELLO',
                     behav=law3,  alert=l_mesh/2 )
svs+=vt14
vt15 = pre.see_table(CorpsCandidat='MAILx'   , candidat='CLxxx'   , colorCandidat='GREEN',
                     CorpsAntagoniste='MAILx', antagoniste='ALpxx', colorAntagoniste='REDxx',
                     behav=law2,  alert=l_mesh/2 )
svs+=vt15
vt16 = pre.see_table(CorpsCandidat='MAILx'   , candidat='CLxxx'   , colorCandidat='GREEN',
                     CorpsAntagoniste='MAILx', antagoniste='ALpxx', colorAntagoniste='GREEN',
                     behav=law2,  alert=l_mesh/2 )
svs+=vt16


post = pre.postpro_commands()
nlgs = pre.postpro_command(name='SOLVER INFORMATIONS', step=1)
post.addCommand(nlgs)


if not os.path.isdir('./DATBOX'):
  os.mkdir('./DATBOX')

pre.writeDatbox(dim, mats, mods, bodies, tacts, svs, post=post, gravy=[0., 0., 0.])

