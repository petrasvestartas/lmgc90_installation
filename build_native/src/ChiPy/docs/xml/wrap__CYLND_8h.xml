<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.13.2" xml:lang="en-US">
  <compounddef id="wrap__CYLND_8h" kind="file" language="C++">
    <compoundname>wrap_CYLND.h</compoundname>
    <sectiondef kind="func">
      <memberdef kind="function" id="wrap__CYLND_8h_1a6ce4a1d5449c3c419860492c2b515b52" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void CYLND_LoadTactors</definition>
        <argsstring>(void)</argsstring>
        <name>CYLND_LoadTactors</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>load CYLND from RBDY3 and initialize existing_entites </para>
        </briefdescription>
        <detaileddescription>
<para>python usage : <ref refid="wrap__CYLND_8h_1a6ce4a1d5449c3c419860492c2b515b52" kindref="member">CYLND_LoadTactors()</ref> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/petras/brg/2_code/lmgc90_installation/src/ChiPy/rigid_3D/wrap_CYLND.h" line="52" column="19" declfile="/Users/petras/brg/2_code/lmgc90_installation/src/ChiPy/rigid_3D/wrap_CYLND.h" declline="52" declcolumn="19"/>
      </memberdef>
      <memberdef kind="function" id="wrap__CYLND_8h_1a26ef64a6c921a3ddf475bee255e90f11" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int CYLND_IsVisible</definition>
        <argsstring>(int itacty)</argsstring>
        <name>CYLND_IsVisible</name>
        <param>
          <type>int</type>
          <declname>itacty</declname>
        </param>
        <briefdescription>
<para>return if a given contactor is attached to a visible body </para>
        </briefdescription>
        <detaileddescription>
<para>python usage : visible = CYLND_IsVisible(itacty)</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">itacty</parametername>
</parameternamelist>
<parameterdescription>
<para>(integer) : id of the contactor we want visibility</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>visible (integer) : 1 if body is visible, 0 else </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/petras/brg/2_code/lmgc90_installation/src/ChiPy/rigid_3D/wrap_CYLND.h" line="71" column="18" declfile="/Users/petras/brg/2_code/lmgc90_installation/src/ChiPy/rigid_3D/wrap_CYLND.h" declline="71" declcolumn="18"/>
      </memberdef>
      <memberdef kind="function" id="wrap__CYLND_8h_1a74d6f9845e9a3f4d0acc24c7545b3085" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int CYLND_GetNbCYLND</definition>
        <argsstring>(void)</argsstring>
        <name>CYLND_GetNbCYLND</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Get the number of CYLND. </para>
        </briefdescription>
        <detaileddescription>
<para>python usage : nb_CYLND = <ref refid="wrap__CYLND_8h_1a74d6f9845e9a3f4d0acc24c7545b3085" kindref="member">CYLND_GetNbCYLND()</ref></para>
<para><simplesect kind="return"><para>nb_CYLND (integer) : the number of CYLND </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/petras/brg/2_code/lmgc90_installation/src/ChiPy/rigid_3D/wrap_CYLND.h" line="90" column="18" declfile="/Users/petras/brg/2_code/lmgc90_installation/src/ChiPy/rigid_3D/wrap_CYLND.h" declline="90" declcolumn="18"/>
      </memberdef>
      <memberdef kind="function" id="wrap__CYLND_8h_1adb1384bee54930def02feadd0f28fd21" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void CYLND_GetShape</definition>
        <argsstring>(int itacty, double **r8_vector, int *r8_size)</argsstring>
        <name>CYLND_GetShape</name>
        <param>
          <type>int</type>
          <declname>itacty</declname>
        </param>
        <param>
          <type>double **</type>
          <declname>r8_vector</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>r8_size</declname>
        </param>
        <briefdescription>
<para>Get the shape of a CYLND. </para>
        </briefdescription>
        <detaileddescription>
<para>usage : shape = CYLND_GetShape(itacty) <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">itacty</parametername>
</parameternamelist>
<parameterdescription>
<para>(integer) : rank of CYLND </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>shape (double array) : axis length of the CYLND </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/petras/brg/2_code/lmgc90_installation/src/ChiPy/rigid_3D/wrap_CYLND.h" line="107" column="19" declfile="/Users/petras/brg/2_code/lmgc90_installation/src/ChiPy/rigid_3D/wrap_CYLND.h" declline="107" declcolumn="19"/>
      </memberdef>
      <memberdef kind="function" id="wrap__CYLND_8h_1aa09644828d4fcabe6044bef20dd7d254" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void CYLND_GetPtrCYLND2BDYTY</definition>
        <argsstring>(int **pointer_out, int *dim1, int *dim2)</argsstring>
        <name>CYLND_GetPtrCYLND2BDYTY</name>
        <param>
          <type>int **</type>
          <declname>pointer_out</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>dim1</declname>
          <defname>dim</defname>
        </param>
        <param>
          <type>int *</type>
          <declname>dim2</declname>
        </param>
        <briefdescription>
<para>return a pointer onto the map cylnd2bdyty </para>
        </briefdescription>
        <detaileddescription>
<para>python usage : cylnd2bdyty = <ref refid="wrap__CYLND_8h_1aa09644828d4fcabe6044bef20dd7d254" kindref="member">CYLND_GetPtrCYLND2BDYTY()</ref></para>
<para><simplesect kind="return"><para>cylnd2bdyty (integer array) : reference on map between cylnd rank and body rank </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/petras/brg/2_code/lmgc90_installation/src/ChiPy/rigid_3D/wrap_CYLND.h" line="125" column="19" declfile="/Users/petras/brg/2_code/lmgc90_installation/src/ChiPy/rigid_3D/wrap_CYLND.h" declline="125" declcolumn="19"/>
      </memberdef>
      <memberdef kind="function" id="wrap__CYLND_8h_1acff90beafbd4ba775d5b3b39463edc7b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void CYLND_InitOutlines</definition>
        <argsstring>(double **pointer_out, int *dim1, int *dim2)</argsstring>
        <name>CYLND_InitOutlines</name>
        <param>
          <type>double **</type>
          <declname>pointer_out</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>dim1</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>dim2</declname>
        </param>
        <briefdescription>
<para>Get a reference on the outlines of all CYLND. </para>
        </briefdescription>
        <detaileddescription>
<para>python usage : outlines = <ref refid="wrap__CYLND_8h_1acff90beafbd4ba775d5b3b39463edc7b" kindref="member">CYLND_InitOutlines()</ref></para>
<para><simplesect kind="return"><para>outlines (double array) : a reference on outlines_CYLND </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/petras/brg/2_code/lmgc90_installation/src/ChiPy/rigid_3D/wrap_CYLND.h" line="144" column="19" declfile="/Users/petras/brg/2_code/lmgc90_installation/src/ChiPy/rigid_3D/wrap_CYLND.h" declline="144" declcolumn="19"/>
      </memberdef>
      <memberdef kind="function" id="wrap__CYLND_8h_1a6c3641c87f32f214236c30b50f96657f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void CYLND_InitScalarFields</definition>
        <argsstring>(double **pointer_out, int *dim1, int *dim2)</argsstring>
        <name>CYLND_InitScalarFields</name>
        <param>
          <type>double **</type>
          <declname>pointer_out</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>dim1</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>dim2</declname>
        </param>
        <briefdescription>
<para>Get a reference on the scalar fields of all CYLND. </para>
        </briefdescription>
        <detaileddescription>
<para>python usage : scalarfields = CYLND_InitScalarfields()</para>
<para><simplesect kind="return"><para>scalarfields (double array) : reference on scalarfields_CYLND array </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/petras/brg/2_code/lmgc90_installation/src/ChiPy/rigid_3D/wrap_CYLND.h" line="163" column="19" declfile="/Users/petras/brg/2_code/lmgc90_installation/src/ChiPy/rigid_3D/wrap_CYLND.h" declline="163" declcolumn="19"/>
      </memberdef>
      <memberdef kind="function" id="wrap__CYLND_8h_1a808023916dfd782fa3f08524587668eb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void CYLND_UpdatePostdata</definition>
        <argsstring>(void)</argsstring>
        <name>CYLND_UpdatePostdata</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Update values of outlines_CYLND and scalarfields_CYLND pointers. </para>
        </briefdescription>
        <detaileddescription>
<para>python usage : CYLND_UpdatePostdata </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/petras/brg/2_code/lmgc90_installation/src/ChiPy/rigid_3D/wrap_CYLND.h" line="174" column="19" declfile="/Users/petras/brg/2_code/lmgc90_installation/src/ChiPy/rigid_3D/wrap_CYLND.h" declline="174" declcolumn="19"/>
      </memberdef>
      <memberdef kind="function" id="wrap__CYLND_8h_1ab0571186dfe9dfea0591548f12a01319" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void CYLND_GetNbPointOutlines</definition>
        <argsstring>(int **pointer_out, int *length)</argsstring>
        <name>CYLND_GetNbPointOutlines</name>
        <param>
          <type>int **</type>
          <declname>pointer_out</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>length</declname>
        </param>
        <briefdescription>
<para>Get the list of cumulated outline points number. </para>
        </briefdescription>
        <detaileddescription>
<para>python usage : nb_pointOutlines = <ref refid="wrap__CYLND_8h_1ab0571186dfe9dfea0591548f12a01319" kindref="member">CYLND_GetNbPointOutlines()</ref></para>
<para><simplesect kind="return"><para>nb_pointOutlines (integer array) : the cumulated number of outline points of the CYLND </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/petras/brg/2_code/lmgc90_installation/src/ChiPy/rigid_3D/wrap_CYLND.h" line="191" column="19" declfile="/Users/petras/brg/2_code/lmgc90_installation/src/ChiPy/rigid_3D/wrap_CYLND.h" declline="191" declcolumn="19"/>
      </memberdef>
      <memberdef kind="function" id="wrap__CYLND_8h_1ac619d06070ad9ba6a6418801db1ad6da" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int CYLND_GetNbScalarFields</definition>
        <argsstring>(void)</argsstring>
        <name>CYLND_GetNbScalarFields</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Get the number of scalar fields of a CYLND. </para>
        </briefdescription>
        <detaileddescription>
<para>python usage : nb_scalarfields = <ref refid="wrap__CYLND_8h_1ac619d06070ad9ba6a6418801db1ad6da" kindref="member">CYLND_GetNbScalarFields()</ref></para>
<para><simplesect kind="return"><para>nb_scalarfields (integer) : the number of scalar fields of a CYLND </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/petras/brg/2_code/lmgc90_installation/src/ChiPy/rigid_3D/wrap_CYLND.h" line="207" column="18" declfile="/Users/petras/brg/2_code/lmgc90_installation/src/ChiPy/rigid_3D/wrap_CYLND.h" declline="207" declcolumn="18"/>
      </memberdef>
      <memberdef kind="function" id="wrap__CYLND_8h_1a582715780183e610aedd2c40469f74a2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void CYLND_GetPtrAllConnectivities</definition>
        <argsstring>(int **pointer_out, int *length)</argsstring>
        <name>CYLND_GetPtrAllConnectivities</name>
        <param>
          <type>int **</type>
          <declname>pointer_out</declname>
          <defname>i4_vector</defname>
        </param>
        <param>
          <type>int *</type>
          <declname>length</declname>
          <defname>i4_size</defname>
        </param>
        <briefdescription>
<para>Get a reference on the connectivities of all CYLND. </para>
        </briefdescription>
        <detaileddescription>
<para>python usage : connec = <ref refid="wrap__CYLND_8h_1a582715780183e610aedd2c40469f74a2" kindref="member">CYLND_GetPtrAllConnectivities()</ref></para>
<para><simplesect kind="return"><para>connec (integer array) : a reference on all_connectivities </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/petras/brg/2_code/lmgc90_installation/src/ChiPy/rigid_3D/wrap_CYLND.h" line="225" column="19" declfile="/Users/petras/brg/2_code/lmgc90_installation/src/ChiPy/rigid_3D/wrap_CYLND.h" declline="225" declcolumn="19"/>
      </memberdef>
      <memberdef kind="function" id="wrap__CYLND_8h_1a019496118be9e680314484b1dae3ae3b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void CYLND_CleanMemory</definition>
        <argsstring>(void)</argsstring>
        <name>CYLND_CleanMemory</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Free all memory allocated within CYLND module. </para>
        </briefdescription>
        <detaileddescription>
<para>python usage : <ref refid="wrap__CYLND_8h_1a019496118be9e680314484b1dae3ae3b" kindref="member">CYLND_CleanMemory()</ref> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/petras/brg/2_code/lmgc90_installation/src/ChiPy/rigid_3D/wrap_CYLND.h" line="235" column="20" declfile="/Users/petras/brg/2_code/lmgc90_installation/src/ChiPy/rigid_3D/wrap_CYLND.h" declline="235" declcolumn="20"/>
      </memberdef>
    </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">/*==========================================================================</highlight></codeline>
<codeline lineno="2"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="3"><highlight class="comment"><sp/>*<sp/>Copyright<sp/>2000-2025<sp/>CNRS-UM.</highlight></codeline>
<codeline lineno="4"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="5"><highlight class="comment"><sp/>*<sp/>This<sp/>file<sp/>is<sp/>part<sp/>of<sp/>a<sp/>software<sp/>(LMGC90)<sp/>which<sp/>is<sp/>a<sp/>computer<sp/>program<sp/></highlight></codeline>
<codeline lineno="6"><highlight class="comment"><sp/>*<sp/>which<sp/>purpose<sp/>is<sp/>to<sp/>modelize<sp/>interaction<sp/>problems<sp/>(contact,<sp/>multi-Physics,etc).</highlight></codeline>
<codeline lineno="7"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="8"><highlight class="comment"><sp/>*<sp/>This<sp/>software<sp/>is<sp/>governed<sp/>by<sp/>the<sp/>CeCILL<sp/>license<sp/>under<sp/>French<sp/>law<sp/>and</highlight></codeline>
<codeline lineno="9"><highlight class="comment"><sp/>*<sp/>abiding<sp/>by<sp/>the<sp/>rules<sp/>of<sp/>distribution<sp/>of<sp/>free<sp/>software.<sp/><sp/>You<sp/>can<sp/><sp/>use,<sp/></highlight></codeline>
<codeline lineno="10"><highlight class="comment"><sp/>*<sp/>modify<sp/>and/<sp/>or<sp/>redistribute<sp/>the<sp/>software<sp/>under<sp/>the<sp/>terms<sp/>of<sp/>the<sp/>CeCILL</highlight></codeline>
<codeline lineno="11"><highlight class="comment"><sp/>*<sp/>license<sp/>as<sp/>circulated<sp/>by<sp/>CEA,<sp/>CNRS<sp/>and<sp/>INRIA<sp/>at<sp/>the<sp/>following<sp/>URL</highlight></codeline>
<codeline lineno="12"><highlight class="comment"><sp/>*<sp/>&quot;http://www.cecill.info&quot;.<sp/></highlight></codeline>
<codeline lineno="13"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="14"><highlight class="comment"><sp/>*<sp/>As<sp/>a<sp/>counterpart<sp/>to<sp/>the<sp/>access<sp/>to<sp/>the<sp/>source<sp/>code<sp/>and<sp/><sp/>rights<sp/>to<sp/>copy,</highlight></codeline>
<codeline lineno="15"><highlight class="comment"><sp/>*<sp/>modify<sp/>and<sp/>redistribute<sp/>granted<sp/>by<sp/>the<sp/>license,<sp/>users<sp/>are<sp/>provided<sp/>only</highlight></codeline>
<codeline lineno="16"><highlight class="comment"><sp/>*<sp/>with<sp/>a<sp/>limited<sp/>warranty<sp/><sp/>and<sp/>the<sp/>software&apos;s<sp/>author,<sp/><sp/>the<sp/>holder<sp/>of<sp/>the</highlight></codeline>
<codeline lineno="17"><highlight class="comment"><sp/>*<sp/>economic<sp/>rights,<sp/><sp/>and<sp/>the<sp/>successive<sp/>licensors<sp/><sp/>have<sp/>only<sp/><sp/>limited</highlight></codeline>
<codeline lineno="18"><highlight class="comment"><sp/>*<sp/>liability.<sp/></highlight></codeline>
<codeline lineno="19"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="20"><highlight class="comment"><sp/>*<sp/>In<sp/>this<sp/>respect,<sp/>the<sp/>user&apos;s<sp/>attention<sp/>is<sp/>drawn<sp/>to<sp/>the<sp/>risks<sp/>associated</highlight></codeline>
<codeline lineno="21"><highlight class="comment"><sp/>*<sp/>with<sp/>loading,<sp/><sp/>using,<sp/><sp/>modifying<sp/>and/or<sp/>developing<sp/>or<sp/>reproducing<sp/>the</highlight></codeline>
<codeline lineno="22"><highlight class="comment"><sp/>*<sp/>software<sp/>by<sp/>the<sp/>user<sp/>in<sp/>light<sp/>of<sp/>its<sp/>specific<sp/>status<sp/>of<sp/>free<sp/>software,</highlight></codeline>
<codeline lineno="23"><highlight class="comment"><sp/>*<sp/>that<sp/>may<sp/>mean<sp/><sp/>that<sp/>it<sp/>is<sp/>complicated<sp/>to<sp/>manipulate,<sp/><sp/>and<sp/><sp/>that<sp/><sp/>also</highlight></codeline>
<codeline lineno="24"><highlight class="comment"><sp/>*<sp/>therefore<sp/>means<sp/><sp/>that<sp/>it<sp/>is<sp/>reserved<sp/>for<sp/>developers<sp/><sp/>and<sp/><sp/>experienced</highlight></codeline>
<codeline lineno="25"><highlight class="comment"><sp/>*<sp/>professionals<sp/>having<sp/>in-depth<sp/>computer<sp/>knowledge.<sp/>Users<sp/>are<sp/>therefore</highlight></codeline>
<codeline lineno="26"><highlight class="comment"><sp/>*<sp/>encouraged<sp/>to<sp/>load<sp/>and<sp/>test<sp/>the<sp/>software&apos;s<sp/>suitability<sp/>as<sp/>regards<sp/>their</highlight></codeline>
<codeline lineno="27"><highlight class="comment"><sp/>*<sp/>requirements<sp/>in<sp/>conditions<sp/>enabling<sp/>the<sp/>security<sp/>of<sp/>their<sp/>systems<sp/>and/or<sp/></highlight></codeline>
<codeline lineno="28"><highlight class="comment"><sp/>*<sp/>data<sp/>to<sp/>be<sp/>ensured<sp/>and,<sp/><sp/>more<sp/>generally,<sp/>to<sp/>use<sp/>and<sp/>operate<sp/>it<sp/>in<sp/>the<sp/></highlight></codeline>
<codeline lineno="29"><highlight class="comment"><sp/>*<sp/>same<sp/>conditions<sp/>as<sp/>regards<sp/>security.<sp/></highlight></codeline>
<codeline lineno="30"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="31"><highlight class="comment"><sp/>*<sp/>The<sp/>fact<sp/>that<sp/>you<sp/>are<sp/>presently<sp/>reading<sp/>this<sp/>means<sp/>that<sp/>you<sp/>have<sp/>had</highlight></codeline>
<codeline lineno="32"><highlight class="comment"><sp/>*<sp/>knowledge<sp/>of<sp/>the<sp/>CeCILL<sp/>license<sp/>and<sp/>that<sp/>you<sp/>accept<sp/>its<sp/>terms.</highlight></codeline>
<codeline lineno="33"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="34"><highlight class="comment"><sp/>*<sp/>To<sp/>report<sp/>bugs,<sp/>suggest<sp/>enhancements,<sp/>etc.<sp/>to<sp/>the<sp/>Authors,<sp/>contact</highlight></codeline>
<codeline lineno="35"><highlight class="comment"><sp/>*<sp/>Frederic<sp/>Dubois.</highlight></codeline>
<codeline lineno="36"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="37"><highlight class="comment"><sp/>*<sp/>frederic.dubois@umontpellier.fr</highlight></codeline>
<codeline lineno="38"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="39"><highlight class="comment"><sp/>*=========================================================================*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="40"><highlight class="normal"></highlight></codeline>
<codeline lineno="41"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>wrap_CYLND_h</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="42"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>wrap_CYLND_h</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="43"><highlight class="normal"></highlight></codeline>
<codeline lineno="52" refid="wrap__CYLND_8h_1a6ce4a1d5449c3c419860492c2b515b52" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;C&quot;</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="wrap__CYLND_8h_1a6ce4a1d5449c3c419860492c2b515b52" kindref="member">CYLND_LoadTactors</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="53"><highlight class="normal"></highlight></codeline>
<codeline lineno="71" refid="wrap__CYLND_8h_1a26ef64a6c921a3ddf475bee255e90f11" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;C&quot;</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="wrap__CYLND_8h_1a26ef64a6c921a3ddf475bee255e90f11" kindref="member">CYLND_IsVisible</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>itacty);</highlight></codeline>
<codeline lineno="72"><highlight class="normal"></highlight></codeline>
<codeline lineno="73"><highlight class="normal"></highlight></codeline>
<codeline lineno="74"><highlight class="normal"><sp/></highlight><highlight class="comment">//<sp/>external<sp/>vtk<sp/>visu</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="75"><highlight class="normal"></highlight></codeline>
<codeline lineno="90" refid="wrap__CYLND_8h_1a74d6f9845e9a3f4d0acc24c7545b3085" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;C&quot;</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="wrap__CYLND_8h_1a74d6f9845e9a3f4d0acc24c7545b3085" kindref="member">CYLND_GetNbCYLND</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="91"><highlight class="normal"></highlight></codeline>
<codeline lineno="107" refid="wrap__CYLND_8h_1adb1384bee54930def02feadd0f28fd21" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;C&quot;</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="wrap__CYLND_8h_1adb1384bee54930def02feadd0f28fd21" kindref="member">CYLND_GetShape</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>itacty,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal">**<sp/>r8_vector,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">*<sp/>r8_size);</highlight></codeline>
<codeline lineno="108"><highlight class="normal"></highlight></codeline>
<codeline lineno="125" refid="wrap__CYLND_8h_1aa09644828d4fcabe6044bef20dd7d254" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;C&quot;</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="wrap__CYLND_8h_1aa09644828d4fcabe6044bef20dd7d254" kindref="member">CYLND_GetPtrCYLND2BDYTY</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">**<sp/>pointer_out,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">*<sp/>dim1,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">*<sp/>dim2);</highlight></codeline>
<codeline lineno="126"><highlight class="normal"></highlight></codeline>
<codeline lineno="144" refid="wrap__CYLND_8h_1acff90beafbd4ba775d5b3b39463edc7b" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;C&quot;</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="wrap__CYLND_8h_1acff90beafbd4ba775d5b3b39463edc7b" kindref="member">CYLND_InitOutlines</ref>(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>**<sp/>pointer_out,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*<sp/>dim1,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*<sp/>dim2);</highlight></codeline>
<codeline lineno="145"><highlight class="normal"></highlight></codeline>
<codeline lineno="163" refid="wrap__CYLND_8h_1a6c3641c87f32f214236c30b50f96657f" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;C&quot;</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="wrap__CYLND_8h_1a6c3641c87f32f214236c30b50f96657f" kindref="member">CYLND_InitScalarFields</ref>(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>**<sp/>pointer_out,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*<sp/>dim1,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*<sp/>dim2);</highlight></codeline>
<codeline lineno="164"><highlight class="normal"></highlight></codeline>
<codeline lineno="174" refid="wrap__CYLND_8h_1a808023916dfd782fa3f08524587668eb" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;C&quot;</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="wrap__CYLND_8h_1a808023916dfd782fa3f08524587668eb" kindref="member">CYLND_UpdatePostdata</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="175"><highlight class="normal"></highlight></codeline>
<codeline lineno="191" refid="wrap__CYLND_8h_1ab0571186dfe9dfea0591548f12a01319" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;C&quot;</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="wrap__CYLND_8h_1ab0571186dfe9dfea0591548f12a01319" kindref="member">CYLND_GetNbPointOutlines</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">**<sp/>pointer_out,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">*<sp/>length);</highlight></codeline>
<codeline lineno="192"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="207" refid="wrap__CYLND_8h_1ac619d06070ad9ba6a6418801db1ad6da" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;C&quot;</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="wrap__CYLND_8h_1ac619d06070ad9ba6a6418801db1ad6da" kindref="member">CYLND_GetNbScalarFields</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="208"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="225" refid="wrap__CYLND_8h_1a582715780183e610aedd2c40469f74a2" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;C&quot;</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="wrap__CYLND_8h_1a582715780183e610aedd2c40469f74a2" kindref="member">CYLND_GetPtrAllConnectivities</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>**<sp/>pointer_out,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*<sp/>length);</highlight></codeline>
<codeline lineno="226"><highlight class="normal"></highlight></codeline>
<codeline lineno="235" refid="wrap__CYLND_8h_1a019496118be9e680314484b1dae3ae3b" refkind="member"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;C&quot;</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="wrap__CYLND_8h_1a019496118be9e680314484b1dae3ae3b" kindref="member">CYLND_CleanMemory</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="236"><highlight class="normal"></highlight></codeline>
<codeline lineno="237"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">/*<sp/>wrap_CYLND<sp/>*/</highlight><highlight class="preprocessor"></highlight></codeline>
    </programlisting>
    <location file="/Users/petras/brg/2_code/lmgc90_installation/src/ChiPy/rigid_3D/wrap_CYLND.h"/>
  </compounddef>
</doxygen>
