<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.13.2" xml:lang="en-US">
  <compounddef id="wrap__surface__T3_8h" kind="file" language="C++">
    <compoundname>wrap_surface_T3.h</compoundname>
    <sectiondef kind="func">
      <memberdef kind="function" id="wrap__surface__T3_8h_1a01784d26e70a9ac9b1454845a541d216" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void surface_T3_compute_volume_inertia</definition>
        <argsstring>(double *rvector_in, int rlength_in, int *ivector_inout, int ilength_inout, double *rvector_out, int rlength_out, double *rvector_out2, int rlength_out2, double *res)</argsstring>
        <name>surface_T3_compute_volume_inertia</name>
        <param>
          <type>double *</type>
          <declname>rvector_in</declname>
        </param>
        <param>
          <type>int</type>
          <declname>rlength_in</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>ivector_inout</declname>
          <defname>ivvector_inout</defname>
        </param>
        <param>
          <type>int</type>
          <declname>ilength_inout</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>rvector_out</declname>
        </param>
        <param>
          <type>int</type>
          <declname>rlength_out</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>rvector_out2</declname>
          <defname>vector_out2</defname>
        </param>
        <param>
          <type>int</type>
          <declname>rlength_out2</declname>
          <defname>length_out2</defname>
        </param>
        <param>
          <type>double *</type>
          <declname>res</declname>
        </param>
        <briefdescription>
<para>Computes the volume of an object described by a triangulated surface. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="warning"><para>1) we assume size_coor is three times the number of nodes and size_connec is three times the number of elements python call: x_G, I, vol=surface_T3_compute_volume_inertia(coor, connec, 3, 9) </para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">coor_size</parametername>
</parameternamelist>
<parameterdescription>
<para>(int): size of coor </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">coor</parametername>
</parameternamelist>
<parameterdescription>
<para>(double *): node coordinates </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">connec_size</parametername>
</parameternamelist>
<parameterdescription>
<para>(int): size of connec </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">vol</parametername>
</parameternamelist>
<parameterdescription>
<para>(double *): computed volume </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">x_G</parametername>
</parameternamelist>
<parameterdescription>
<para>(double *): mass center coordinates </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">x_G_size</parametername>
</parameternamelist>
<parameterdescription>
<para>(int): size of x_G </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">I</parametername>
</parameternamelist>
<parameterdescription>
<para>(double *): inertia matrix, stored a a vector </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">I_size</parametername>
</parameternamelist>
<parameterdescription>
<para>(int): size of I </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/petras/brg/2_code/lmgc90_installation/src/ChiPy/pre_tools/wrap_surface_T3.h" line="24" column="20" declfile="/Users/petras/brg/2_code/lmgc90_installation/src/ChiPy/pre_tools/wrap_surface_T3.h" declline="24" declcolumn="20"/>
      </memberdef>
      <memberdef kind="function" id="wrap__surface__T3_8h_1ae92eb970cdfddcb392ec08e7bd8c05ae" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void surface_T3_identify_entities</definition>
        <argsstring>(int nbnode, int max_adj_ele_2_node, int *ivector_in, int ilength_in, int *ivector_out, int ilength_out)</argsstring>
        <name>surface_T3_identify_entities</name>
        <param>
          <type>int</type>
          <declname>nbnode</declname>
        </param>
        <param>
          <type>int</type>
          <declname>max_adj_ele_2_node</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>ivector_in</declname>
        </param>
        <param>
          <type>int</type>
          <declname>ilength_in</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>ivector_out</declname>
        </param>
        <param>
          <type>int</type>
          <declname>ilength_out</declname>
        </param>
        <briefdescription>
<para>Attributes an entity number to triangles, by computing connected components. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="warning"><para>1) we assume size_connec is three times the number of elements and size_ele2entity is the number of elements python call: ele2entity=surface_T3_identify_entities(nbnode, max_adj_ele_2_node, connec, nbele) </para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">nbnode</parametername>
</parameternamelist>
<parameterdescription>
<para>(int): the number of nodes </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">max_adj_ele_2_node</parametername>
</parameternamelist>
<parameterdescription>
<para>(int): the maximal number of adjacent elements per node </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">connec</parametername>
</parameternamelist>
<parameterdescription>
<para>(int *): connecivity of elements </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">connec_size</parametername>
</parameternamelist>
<parameterdescription>
<para>(int): size of connec </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">ele2entity</parametername>
</parameternamelist>
<parameterdescription>
<para>(double *): entity number for each element </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">ele2entity_size</parametername>
</parameternamelist>
<parameterdescription>
<para>(int): size of ele2entity </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/petras/brg/2_code/lmgc90_installation/src/ChiPy/pre_tools/wrap_surface_T3.h" line="40" column="20" declfile="/Users/petras/brg/2_code/lmgc90_installation/src/ChiPy/pre_tools/wrap_surface_T3.h" declline="40" declcolumn="20"/>
      </memberdef>
    </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">/*<sp/>fichier<sp/>d&apos;entÃªte<sp/>C++<sp/>associe<sp/>au<sp/>fichier<sp/>wrap_surface_T3.f90:</highlight></codeline>
<codeline lineno="2"><highlight class="comment"><sp/><sp/><sp/>acces<sp/>en<sp/>C++<sp/>aux<sp/>fonction<sp/>du<sp/>modules<sp/>wrap_surface_T3<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>wrap_surface_T3</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>wrap_surface_T3</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>procedure<sp/>qui<sp/>calcule<sp/>le<sp/>volume,<sp/>les<sp/>coordonnees<sp/>du<sp/>centre<sp/>d&apos;inertie<sp/>et<sp/>la<sp/>matrice<sp/>d&apos;inertie<sp/>d&apos;un<sp/>objet<sp/>decrit<sp/>par<sp/>une<sp/></highlight></codeline>
<codeline lineno="8"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>triangulation<sp/>de<sp/>son<sp/>enveloppe<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="24" refid="wrap__surface__T3_8h_1a01784d26e70a9ac9b1454845a541d216" refkind="member"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;C&quot;</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="wrap__surface__T3_8h_1a01784d26e70a9ac9b1454845a541d216" kindref="member">surface_T3_compute_volume_inertia</ref>(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>*<sp/>rvector_in,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>rlength_in,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*ivector_inout,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ilength_inout,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>*<sp/>rvector_out,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>rlength_out,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>*<sp/>rvector_out2,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>rlength_out2,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>*res);</highlight></codeline>
<codeline lineno="25"><highlight class="normal"></highlight></codeline>
<codeline lineno="26"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>procedure<sp/>qui<sp/>attribue<sp/>un<sp/>numero<sp/>d&apos;entite<sp/>aux<sp/>triangles,<sp/>a<sp/>partir<sp/>d&apos;une<sp/>recherche<sp/>de<sp/>composantes<sp/>connexes<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="40" refid="wrap__surface__T3_8h_1ae92eb970cdfddcb392ec08e7bd8c05ae" refkind="member"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;C&quot;</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="wrap__surface__T3_8h_1ae92eb970cdfddcb392ec08e7bd8c05ae" kindref="member">surface_T3_identify_entities</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nbnode,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>max_adj_ele_2_node,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*<sp/>ivector_in,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ilength_in,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*<sp/>ivector_out,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ilength_out);</highlight></codeline>
<codeline lineno="41"><highlight class="normal"></highlight></codeline>
<codeline lineno="42"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
    </programlisting>
    <location file="/Users/petras/brg/2_code/lmgc90_installation/src/ChiPy/pre_tools/wrap_surface_T3.h"/>
  </compounddef>
</doxygen>
