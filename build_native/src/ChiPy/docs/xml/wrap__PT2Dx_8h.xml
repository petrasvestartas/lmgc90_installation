<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.13.2" xml:lang="en-US">
  <compounddef id="wrap__PT2Dx_8h" kind="file" language="C++">
    <compoundname>wrap_PT2Dx.h</compoundname>
    <sectiondef kind="func">
      <memberdef kind="function" id="wrap__PT2Dx_8h_1a7eebb345c5ae9c3e417deed7428c69f5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void PT2Dx_LoadTactors</definition>
        <argsstring>()</argsstring>
        <name>PT2Dx_LoadTactors</name>
        <briefdescription>
<para>load PT2Dx from RBDY2 and initialize existing_entites </para>
        </briefdescription>
        <detaileddescription>
<para>python usage : <ref refid="wrap__PT2Dx_8h_1a7eebb345c5ae9c3e417deed7428c69f5" kindref="member">PT2Dx_LoadTactors()</ref> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/petras/brg/2_code/lmgc90_installation/src/ChiPy/rigid_2D/wrap_PT2Dx.h" line="52" column="19" declfile="/Users/petras/brg/2_code/lmgc90_installation/src/ChiPy/rigid_2D/wrap_PT2Dx.h" declline="52" declcolumn="19"/>
      </memberdef>
      <memberdef kind="function" id="wrap__PT2Dx_8h_1a5f1fb9032ddb6462ccd424c241097bdf" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int PT2Dx_GetNbPT2Dx</definition>
        <argsstring>(void)</argsstring>
        <name>PT2Dx_GetNbPT2Dx</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Get the number of PT2Dx in the container. </para>
        </briefdescription>
        <detaileddescription>
<para>python usage : nb_pt2d = <ref refid="wrap__PT2Dx_8h_1a5f1fb9032ddb6462ccd424c241097bdf" kindref="member">PT2Dx_GetNbPT2Dx()</ref></para>
<para><simplesect kind="return"><para>nb_pt2d (integer) : the number of PT2Dx in container </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/petras/brg/2_code/lmgc90_installation/src/ChiPy/rigid_2D/wrap_PT2Dx.h" line="68" column="18" declfile="/Users/petras/brg/2_code/lmgc90_installation/src/ChiPy/rigid_2D/wrap_PT2Dx.h" declline="68" declcolumn="18"/>
      </memberdef>
      <memberdef kind="function" id="wrap__PT2Dx_8h_1a3352d3f11c8df36d03664eed4f694168" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void PT2Dx_SetDisplayRadius</definition>
        <argsstring>(double rvalue)</argsstring>
        <name>PT2Dx_SetDisplayRadius</name>
        <param>
          <type>double</type>
          <declname>rvalue</declname>
        </param>
        <briefdescription>
<para>Set a radius to display a pt2dx. </para>
        </briefdescription>
        <detaileddescription>
<para>python usage : PT2Dx_SetDisplayRadius(radius) <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">radius</parametername>
</parameternamelist>
<parameterdescription>
<para>(double) : value of the radius which should be used for display </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/petras/brg/2_code/lmgc90_installation/src/ChiPy/rigid_2D/wrap_PT2Dx.h" line="84" column="19" declfile="/Users/petras/brg/2_code/lmgc90_installation/src/ChiPy/rigid_2D/wrap_PT2Dx.h" declline="84" declcolumn="19"/>
      </memberdef>
      <memberdef kind="function" id="wrap__PT2Dx_8h_1ac7f3536ce63a112c0786363caa18b39f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void PT2Dx_GetPtrPT2Dx2BDYTY</definition>
        <argsstring>(int **pointer_out, int *dim1, int *dim2)</argsstring>
        <name>PT2Dx_GetPtrPT2Dx2BDYTY</name>
        <param>
          <type>int **</type>
          <declname>pointer_out</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>dim1</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>dim2</declname>
        </param>
        <briefdescription>
<para>return a pointer onto the map pt2dx2rbdy2 </para>
        </briefdescription>
        <detaileddescription>
<para>python usage : ptd2x2rbdy2 = <ref refid="wrap__PT2Dx_8h_1ac7f3536ce63a112c0786363caa18b39f" kindref="member">PT2Dx_GetPtrPT2Dx2BDYTY()</ref></para>
<para><simplesect kind="return"><para>pt2dx2rbdy2 (integer array) : reference on map between pt2dx rank and body/tact rank </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/petras/brg/2_code/lmgc90_installation/src/ChiPy/rigid_2D/wrap_PT2Dx.h" line="102" column="19" declfile="/Users/petras/brg/2_code/lmgc90_installation/src/ChiPy/rigid_2D/wrap_PT2Dx.h" declline="102" declcolumn="19"/>
      </memberdef>
      <memberdef kind="function" id="wrap__PT2Dx_8h_1a6a8aa3b3147989f40586fd7ccc342623" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int PT2Dx_IsVisible</definition>
        <argsstring>(int itact)</argsstring>
        <name>PT2Dx_IsVisible</name>
        <param>
          <type>int</type>
          <declname>itact</declname>
        </param>
        <briefdescription>
<para>return if a body visible </para>
        </briefdescription>
        <detaileddescription>
<para>usage : visible = PT2Dx_IsVisible(itact) <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">itact</parametername>
</parameternamelist>
<parameterdescription>
<para>(integer) : rank of PT2Dx </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>visible</parametername>
</parameternamelist>
<parameterdescription>
<para>(integer) : 1 if body is visible, 0 else </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/petras/brg/2_code/lmgc90_installation/src/ChiPy/rigid_2D/wrap_PT2Dx.h" line="119" column="18" declfile="/Users/petras/brg/2_code/lmgc90_installation/src/ChiPy/rigid_2D/wrap_PT2Dx.h" declline="119" declcolumn="18"/>
      </memberdef>
      <memberdef kind="function" id="wrap__PT2Dx_8h_1a6fa263b79a4a6209a14a39b642a464bf" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void PT2Dx_InitOutlines</definition>
        <argsstring>(double **pointer_out, int *dim1, int *dim2)</argsstring>
        <name>PT2Dx_InitOutlines</name>
        <param>
          <type>double **</type>
          <declname>pointer_out</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>dim1</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>dim2</declname>
        </param>
        <briefdescription>
<para>Get a reference on the outlines of all PT2Dx. </para>
        </briefdescription>
        <detaileddescription>
<para>usage : outlines = <ref refid="wrap__PT2Dx_8h_1a6fa263b79a4a6209a14a39b642a464bf" kindref="member">PT2Dx_InitOutlines()</ref> <simplesect kind="return"><para>outlines (double array) : a reference on outlines_PT2Dx </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/petras/brg/2_code/lmgc90_installation/src/ChiPy/rigid_2D/wrap_PT2Dx.h" line="137" column="19" declfile="/Users/petras/brg/2_code/lmgc90_installation/src/ChiPy/rigid_2D/wrap_PT2Dx.h" declline="137" declcolumn="19"/>
      </memberdef>
      <memberdef kind="function" id="wrap__PT2Dx_8h_1a496fea8d641713c1f3ecadcb302081c3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void PT2Dx_InitScalarFields</definition>
        <argsstring>(double **pointer_out, int *dim1, int *dim2)</argsstring>
        <name>PT2Dx_InitScalarFields</name>
        <param>
          <type>double **</type>
          <declname>pointer_out</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>dim1</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>dim2</declname>
        </param>
        <briefdescription>
<para>Get a reference on the scalar fields of all PT2Dx. </para>
        </briefdescription>
        <detaileddescription>
<para>usage : scalarfields = PT2Dx_InitScalarfields() <simplesect kind="return"><para>scalarfields (double array) : reference on scalarfields_PT2Dx array </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/petras/brg/2_code/lmgc90_installation/src/ChiPy/rigid_2D/wrap_PT2Dx.h" line="155" column="19" declfile="/Users/petras/brg/2_code/lmgc90_installation/src/ChiPy/rigid_2D/wrap_PT2Dx.h" declline="155" declcolumn="19"/>
      </memberdef>
      <memberdef kind="function" id="wrap__PT2Dx_8h_1afb5d46273de73d6008ecf41e3cb7ef99" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void PT2Dx_UpdatePostdata</definition>
        <argsstring>(void)</argsstring>
        <name>PT2Dx_UpdatePostdata</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Update values of outlines_PT2Dx and scalarfields_PT2Dx pointers. </para>
        </briefdescription>
        <detaileddescription>
<para>usage : PT2Dx_UpdatePostdata </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/petras/brg/2_code/lmgc90_installation/src/ChiPy/rigid_2D/wrap_PT2Dx.h" line="166" column="19" declfile="/Users/petras/brg/2_code/lmgc90_installation/src/ChiPy/rigid_2D/wrap_PT2Dx.h" declline="166" declcolumn="19"/>
      </memberdef>
      <memberdef kind="function" id="wrap__PT2Dx_8h_1a5244c2f2084de517f1132a98b03c6c62" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void PT2Dx_GetNbPointOutlines</definition>
        <argsstring>(int **pointer_out, int *length)</argsstring>
        <name>PT2Dx_GetNbPointOutlines</name>
        <param>
          <type>int **</type>
          <declname>pointer_out</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>length</declname>
        </param>
        <briefdescription>
<para>Get the list of cumulated outline points number. </para>
        </briefdescription>
        <detaileddescription>
<para>python usage : nb_pointOutlines = <ref refid="wrap__PT2Dx_8h_1a5244c2f2084de517f1132a98b03c6c62" kindref="member">PT2Dx_GetNbPointOutlines()</ref> <simplesect kind="return"><para>nb_pointOutlines (integer array) : the cumulated number of outline points of the PT2Dx </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/petras/brg/2_code/lmgc90_installation/src/ChiPy/rigid_2D/wrap_PT2Dx.h" line="183" column="19" declfile="/Users/petras/brg/2_code/lmgc90_installation/src/ChiPy/rigid_2D/wrap_PT2Dx.h" declline="183" declcolumn="19"/>
      </memberdef>
      <memberdef kind="function" id="wrap__PT2Dx_8h_1a5a312f1f927f8dc2a801da88d0c5504d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int PT2Dx_GetNbScalarFields</definition>
        <argsstring>(void)</argsstring>
        <name>PT2Dx_GetNbScalarFields</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Get the number of scalar fields of a PT2Dx. </para>
        </briefdescription>
        <detaileddescription>
<para>python usage : nb_scalarfields = <ref refid="wrap__PT2Dx_8h_1a5a312f1f927f8dc2a801da88d0c5504d" kindref="member">PT2Dx_GetNbScalarFields()</ref> <simplesect kind="return"><para>nb_scalarfields (integer) : the number of scalar fields of a PT2Dx </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/petras/brg/2_code/lmgc90_installation/src/ChiPy/rigid_2D/wrap_PT2Dx.h" line="199" column="18" declfile="/Users/petras/brg/2_code/lmgc90_installation/src/ChiPy/rigid_2D/wrap_PT2Dx.h" declline="199" declcolumn="18"/>
      </memberdef>
      <memberdef kind="function" id="wrap__PT2Dx_8h_1a463a7dffde70ad50d6e7d1e979de1df6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void PT2Dx_CleanMemory</definition>
        <argsstring>(void)</argsstring>
        <name>PT2Dx_CleanMemory</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Free all memory allocated within PT2Dx module. </para>
        </briefdescription>
        <detaileddescription>
<para>python usage : <ref refid="wrap__PT2Dx_8h_1a463a7dffde70ad50d6e7d1e979de1df6" kindref="member">PT2Dx_CleanMemory()</ref> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/petras/brg/2_code/lmgc90_installation/src/ChiPy/rigid_2D/wrap_PT2Dx.h" line="209" column="20" declfile="/Users/petras/brg/2_code/lmgc90_installation/src/ChiPy/rigid_2D/wrap_PT2Dx.h" declline="209" declcolumn="20"/>
      </memberdef>
    </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">/*==========================================================================</highlight></codeline>
<codeline lineno="2"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="3"><highlight class="comment"><sp/>*<sp/>Copyright<sp/>2000-2025<sp/>CNRS-UM.</highlight></codeline>
<codeline lineno="4"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="5"><highlight class="comment"><sp/>*<sp/>This<sp/>file<sp/>is<sp/>part<sp/>of<sp/>a<sp/>software<sp/>(LMGC90)<sp/>which<sp/>is<sp/>a<sp/>computer<sp/>program<sp/></highlight></codeline>
<codeline lineno="6"><highlight class="comment"><sp/>*<sp/>which<sp/>purpose<sp/>is<sp/>to<sp/>modelize<sp/>interaction<sp/>problems<sp/>(contact,<sp/>multi-Physics,etc).</highlight></codeline>
<codeline lineno="7"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="8"><highlight class="comment"><sp/>*<sp/>This<sp/>software<sp/>is<sp/>governed<sp/>by<sp/>the<sp/>CeCILL<sp/>license<sp/>under<sp/>French<sp/>law<sp/>and</highlight></codeline>
<codeline lineno="9"><highlight class="comment"><sp/>*<sp/>abiding<sp/>by<sp/>the<sp/>rules<sp/>of<sp/>distribution<sp/>of<sp/>free<sp/>software.<sp/><sp/>You<sp/>can<sp/><sp/>use,<sp/></highlight></codeline>
<codeline lineno="10"><highlight class="comment"><sp/>*<sp/>modify<sp/>and/<sp/>or<sp/>redistribute<sp/>the<sp/>software<sp/>under<sp/>the<sp/>terms<sp/>of<sp/>the<sp/>CeCILL</highlight></codeline>
<codeline lineno="11"><highlight class="comment"><sp/>*<sp/>license<sp/>as<sp/>circulated<sp/>by<sp/>CEA,<sp/>CNRS<sp/>and<sp/>INRIA<sp/>at<sp/>the<sp/>following<sp/>URL</highlight></codeline>
<codeline lineno="12"><highlight class="comment"><sp/>*<sp/>&quot;http://www.cecill.info&quot;.<sp/></highlight></codeline>
<codeline lineno="13"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="14"><highlight class="comment"><sp/>*<sp/>As<sp/>a<sp/>counterpart<sp/>to<sp/>the<sp/>access<sp/>to<sp/>the<sp/>source<sp/>code<sp/>and<sp/><sp/>rights<sp/>to<sp/>copy,</highlight></codeline>
<codeline lineno="15"><highlight class="comment"><sp/>*<sp/>modify<sp/>and<sp/>redistribute<sp/>granted<sp/>by<sp/>the<sp/>license,<sp/>users<sp/>are<sp/>provided<sp/>only</highlight></codeline>
<codeline lineno="16"><highlight class="comment"><sp/>*<sp/>with<sp/>a<sp/>limited<sp/>warranty<sp/><sp/>and<sp/>the<sp/>software&apos;s<sp/>author,<sp/><sp/>the<sp/>holder<sp/>of<sp/>the</highlight></codeline>
<codeline lineno="17"><highlight class="comment"><sp/>*<sp/>economic<sp/>rights,<sp/><sp/>and<sp/>the<sp/>successive<sp/>licensors<sp/><sp/>have<sp/>only<sp/><sp/>limited</highlight></codeline>
<codeline lineno="18"><highlight class="comment"><sp/>*<sp/>liability.<sp/></highlight></codeline>
<codeline lineno="19"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="20"><highlight class="comment"><sp/>*<sp/>In<sp/>this<sp/>respect,<sp/>the<sp/>user&apos;s<sp/>attention<sp/>is<sp/>drawn<sp/>to<sp/>the<sp/>risks<sp/>associated</highlight></codeline>
<codeline lineno="21"><highlight class="comment"><sp/>*<sp/>with<sp/>loading,<sp/><sp/>using,<sp/><sp/>modifying<sp/>and/or<sp/>developing<sp/>or<sp/>reproducing<sp/>the</highlight></codeline>
<codeline lineno="22"><highlight class="comment"><sp/>*<sp/>software<sp/>by<sp/>the<sp/>user<sp/>in<sp/>light<sp/>of<sp/>its<sp/>specific<sp/>status<sp/>of<sp/>free<sp/>software,</highlight></codeline>
<codeline lineno="23"><highlight class="comment"><sp/>*<sp/>that<sp/>may<sp/>mean<sp/><sp/>that<sp/>it<sp/>is<sp/>complicated<sp/>to<sp/>manipulate,<sp/><sp/>and<sp/><sp/>that<sp/><sp/>also</highlight></codeline>
<codeline lineno="24"><highlight class="comment"><sp/>*<sp/>therefore<sp/>means<sp/><sp/>that<sp/>it<sp/>is<sp/>reserved<sp/>for<sp/>developers<sp/><sp/>and<sp/><sp/>experienced</highlight></codeline>
<codeline lineno="25"><highlight class="comment"><sp/>*<sp/>professionals<sp/>having<sp/>in-depth<sp/>computer<sp/>knowledge.<sp/>Users<sp/>are<sp/>therefore</highlight></codeline>
<codeline lineno="26"><highlight class="comment"><sp/>*<sp/>encouraged<sp/>to<sp/>load<sp/>and<sp/>test<sp/>the<sp/>software&apos;s<sp/>suitability<sp/>as<sp/>regards<sp/>their</highlight></codeline>
<codeline lineno="27"><highlight class="comment"><sp/>*<sp/>requirements<sp/>in<sp/>conditions<sp/>enabling<sp/>the<sp/>security<sp/>of<sp/>their<sp/>systems<sp/>and/or<sp/></highlight></codeline>
<codeline lineno="28"><highlight class="comment"><sp/>*<sp/>data<sp/>to<sp/>be<sp/>ensured<sp/>and,<sp/><sp/>more<sp/>generally,<sp/>to<sp/>use<sp/>and<sp/>operate<sp/>it<sp/>in<sp/>the<sp/></highlight></codeline>
<codeline lineno="29"><highlight class="comment"><sp/>*<sp/>same<sp/>conditions<sp/>as<sp/>regards<sp/>security.<sp/></highlight></codeline>
<codeline lineno="30"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="31"><highlight class="comment"><sp/>*<sp/>The<sp/>fact<sp/>that<sp/>you<sp/>are<sp/>presently<sp/>reading<sp/>this<sp/>means<sp/>that<sp/>you<sp/>have<sp/>had</highlight></codeline>
<codeline lineno="32"><highlight class="comment"><sp/>*<sp/>knowledge<sp/>of<sp/>the<sp/>CeCILL<sp/>license<sp/>and<sp/>that<sp/>you<sp/>accept<sp/>its<sp/>terms.</highlight></codeline>
<codeline lineno="33"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="34"><highlight class="comment"><sp/>*<sp/>To<sp/>report<sp/>bugs,<sp/>suggest<sp/>enhancements,<sp/>etc.<sp/>to<sp/>the<sp/>Authors,<sp/>contact</highlight></codeline>
<codeline lineno="35"><highlight class="comment"><sp/>*<sp/>Frederic<sp/>Dubois.</highlight></codeline>
<codeline lineno="36"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="37"><highlight class="comment"><sp/>*<sp/>frederic.dubois@umontpellier.fr</highlight></codeline>
<codeline lineno="38"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="39"><highlight class="comment"><sp/>*=========================================================================*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="40"><highlight class="normal"></highlight></codeline>
<codeline lineno="41"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>wrap_PT2Dx_h</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="42"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>wrap_PT2Dx_h</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="43"><highlight class="normal"></highlight></codeline>
<codeline lineno="52" refid="wrap__PT2Dx_8h_1a7eebb345c5ae9c3e417deed7428c69f5" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;C&quot;</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="wrap__PT2Dx_8h_1a7eebb345c5ae9c3e417deed7428c69f5" kindref="member">PT2Dx_LoadTactors</ref>();</highlight></codeline>
<codeline lineno="53"><highlight class="normal"></highlight></codeline>
<codeline lineno="68" refid="wrap__PT2Dx_8h_1a5f1fb9032ddb6462ccd424c241097bdf" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;C&quot;</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="wrap__PT2Dx_8h_1a5f1fb9032ddb6462ccd424c241097bdf" kindref="member">PT2Dx_GetNbPT2Dx</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="69"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="84" refid="wrap__PT2Dx_8h_1a3352d3f11c8df36d03664eed4f694168" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;C&quot;</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="wrap__PT2Dx_8h_1a3352d3f11c8df36d03664eed4f694168" kindref="member">PT2Dx_SetDisplayRadius</ref>(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>rvalue);</highlight></codeline>
<codeline lineno="85"><highlight class="normal"></highlight></codeline>
<codeline lineno="102" refid="wrap__PT2Dx_8h_1ac7f3536ce63a112c0786363caa18b39f" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;C&quot;</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="wrap__PT2Dx_8h_1ac7f3536ce63a112c0786363caa18b39f" kindref="member">PT2Dx_GetPtrPT2Dx2BDYTY</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">**<sp/>pointer_out,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">*<sp/>dim1,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">*<sp/>dim2);</highlight></codeline>
<codeline lineno="103"><highlight class="normal"></highlight></codeline>
<codeline lineno="119" refid="wrap__PT2Dx_8h_1a6a8aa3b3147989f40586fd7ccc342623" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;C&quot;</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="wrap__PT2Dx_8h_1a6a8aa3b3147989f40586fd7ccc342623" kindref="member">PT2Dx_IsVisible</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>itact);</highlight></codeline>
<codeline lineno="120"><highlight class="normal"></highlight></codeline>
<codeline lineno="137" refid="wrap__PT2Dx_8h_1a6fa263b79a4a6209a14a39b642a464bf" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;C&quot;</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="wrap__PT2Dx_8h_1a6fa263b79a4a6209a14a39b642a464bf" kindref="member">PT2Dx_InitOutlines</ref>(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>**<sp/>pointer_out,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*<sp/>dim1,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*<sp/>dim2);</highlight></codeline>
<codeline lineno="138"><highlight class="normal"></highlight></codeline>
<codeline lineno="155" refid="wrap__PT2Dx_8h_1a496fea8d641713c1f3ecadcb302081c3" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;C&quot;</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="wrap__PT2Dx_8h_1a496fea8d641713c1f3ecadcb302081c3" kindref="member">PT2Dx_InitScalarFields</ref>(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>**<sp/>pointer_out,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*<sp/>dim1,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*<sp/>dim2);</highlight></codeline>
<codeline lineno="156"><highlight class="normal"></highlight></codeline>
<codeline lineno="166" refid="wrap__PT2Dx_8h_1afb5d46273de73d6008ecf41e3cb7ef99" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;C&quot;</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="wrap__PT2Dx_8h_1afb5d46273de73d6008ecf41e3cb7ef99" kindref="member">PT2Dx_UpdatePostdata</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="167"><highlight class="normal"></highlight></codeline>
<codeline lineno="183" refid="wrap__PT2Dx_8h_1a5244c2f2084de517f1132a98b03c6c62" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;C&quot;</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="wrap__PT2Dx_8h_1a5244c2f2084de517f1132a98b03c6c62" kindref="member">PT2Dx_GetNbPointOutlines</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">**<sp/>pointer_out,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">*<sp/>length);</highlight></codeline>
<codeline lineno="184"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="199" refid="wrap__PT2Dx_8h_1a5a312f1f927f8dc2a801da88d0c5504d" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;C&quot;</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="wrap__PT2Dx_8h_1a5a312f1f927f8dc2a801da88d0c5504d" kindref="member">PT2Dx_GetNbScalarFields</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="200"><highlight class="normal"></highlight></codeline>
<codeline lineno="209" refid="wrap__PT2Dx_8h_1a463a7dffde70ad50d6e7d1e979de1df6" refkind="member"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;C&quot;</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="wrap__PT2Dx_8h_1a463a7dffde70ad50d6e7d1e979de1df6" kindref="member">PT2Dx_CleanMemory</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="210"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="211"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">/*<sp/>wrap_PT2Dx<sp/>*/</highlight><highlight class="preprocessor"></highlight></codeline>
    </programlisting>
    <location file="/Users/petras/brg/2_code/lmgc90_installation/src/ChiPy/rigid_2D/wrap_PT2Dx.h"/>
  </compounddef>
</doxygen>
