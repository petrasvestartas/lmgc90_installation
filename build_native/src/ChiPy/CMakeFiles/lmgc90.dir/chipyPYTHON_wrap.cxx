/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 3.0.12
 *
 * This file is not intended to be easily readable and contains a number of
 * coding conventions designed to improve portability and efficiency. Do not make
 * changes to this file unless you know what you are doing--modify the SWIG
 * interface file instead.
 * ----------------------------------------------------------------------------- */


#ifndef SWIGPYTHON
#define SWIGPYTHON
#endif

#define SWIG_PYTHON_DIRECTOR_NO_VTABLE


#ifdef __cplusplus
/* SwigValueWrapper is described in swig.swg */
template<typename T> class SwigValueWrapper {
  struct SwigMovePointer {
    T *ptr;
    SwigMovePointer(T *p) : ptr(p) { }
    ~SwigMovePointer() { delete ptr; }
    SwigMovePointer& operator=(SwigMovePointer& rhs) { T* oldptr = ptr; ptr = 0; delete oldptr; ptr = rhs.ptr; rhs.ptr = 0; return *this; }
  } pointer;
  SwigValueWrapper& operator=(const SwigValueWrapper<T>& rhs);
  SwigValueWrapper(const SwigValueWrapper<T>& rhs);
public:
  SwigValueWrapper() : pointer(0) { }
  SwigValueWrapper& operator=(const T& t) { SwigMovePointer tmp(new T(t)); pointer = tmp; return *this; }
  operator T&() const { return *pointer.ptr; }
  T *operator&() { return pointer.ptr; }
};

template <typename T> T SwigValueInit() {
  return T();
}
#endif

/* -----------------------------------------------------------------------------
 *  This section contains generic SWIG labels for method/variable
 *  declarations/attributes, and other compiler dependent labels.
 * ----------------------------------------------------------------------------- */

/* template workaround for compilers that cannot correctly implement the C++ standard */
#ifndef SWIGTEMPLATEDISAMBIGUATOR
# if defined(__SUNPRO_CC) && (__SUNPRO_CC <= 0x560)
#  define SWIGTEMPLATEDISAMBIGUATOR template
# elif defined(__HP_aCC)
/* Needed even with `aCC -AA' when `aCC -V' reports HP ANSI C++ B3910B A.03.55 */
/* If we find a maximum version that requires this, the test would be __HP_aCC <= 35500 for A.03.55 */
#  define SWIGTEMPLATEDISAMBIGUATOR template
# else
#  define SWIGTEMPLATEDISAMBIGUATOR
# endif
#endif

/* inline attribute */
#ifndef SWIGINLINE
# if defined(__cplusplus) || (defined(__GNUC__) && !defined(__STRICT_ANSI__))
#   define SWIGINLINE inline
# else
#   define SWIGINLINE
# endif
#endif

/* attribute recognised by some compilers to avoid 'unused' warnings */
#ifndef SWIGUNUSED
# if defined(__GNUC__)
#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#     define SWIGUNUSED __attribute__ ((__unused__))
#   else
#     define SWIGUNUSED
#   endif
# elif defined(__ICC)
#   define SWIGUNUSED __attribute__ ((__unused__))
# else
#   define SWIGUNUSED
# endif
#endif

#ifndef SWIG_MSC_UNSUPPRESS_4505
# if defined(_MSC_VER)
#   pragma warning(disable : 4505) /* unreferenced local function has been removed */
# endif
#endif

#ifndef SWIGUNUSEDPARM
# ifdef __cplusplus
#   define SWIGUNUSEDPARM(p)
# else
#   define SWIGUNUSEDPARM(p) p SWIGUNUSED
# endif
#endif

/* internal SWIG method */
#ifndef SWIGINTERN
# define SWIGINTERN static SWIGUNUSED
#endif

/* internal inline SWIG method */
#ifndef SWIGINTERNINLINE
# define SWIGINTERNINLINE SWIGINTERN SWIGINLINE
#endif

/* exporting methods */
#if defined(__GNUC__)
#  if (__GNUC__ >= 4) || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4)
#    ifndef GCC_HASCLASSVISIBILITY
#      define GCC_HASCLASSVISIBILITY
#    endif
#  endif
#endif

#ifndef SWIGEXPORT
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   if defined(STATIC_LINKED)
#     define SWIGEXPORT
#   else
#     define SWIGEXPORT __declspec(dllexport)
#   endif
# else
#   if defined(__GNUC__) && defined(GCC_HASCLASSVISIBILITY)
#     define SWIGEXPORT __attribute__ ((visibility("default")))
#   else
#     define SWIGEXPORT
#   endif
# endif
#endif

/* calling conventions for Windows */
#ifndef SWIGSTDCALL
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   define SWIGSTDCALL __stdcall
# else
#   define SWIGSTDCALL
# endif
#endif

/* Deal with Microsoft's attempt at deprecating C standard runtime functions */
#if !defined(SWIG_NO_CRT_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_CRT_SECURE_NO_DEPRECATE)
# define _CRT_SECURE_NO_DEPRECATE
#endif

/* Deal with Microsoft's attempt at deprecating methods in the standard C++ library */
#if !defined(SWIG_NO_SCL_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_SCL_SECURE_NO_DEPRECATE)
# define _SCL_SECURE_NO_DEPRECATE
#endif

/* Deal with Apple's deprecated 'AssertMacros.h' from Carbon-framework */
#if defined(__APPLE__) && !defined(__ASSERT_MACROS_DEFINE_VERSIONS_WITHOUT_UNDERSCORES)
# define __ASSERT_MACROS_DEFINE_VERSIONS_WITHOUT_UNDERSCORES 0
#endif

/* Intel's compiler complains if a variable which was never initialised is
 * cast to void, which is a common idiom which we use to indicate that we
 * are aware a variable isn't used.  So we just silence that warning.
 * See: https://github.com/swig/swig/issues/192 for more discussion.
 */
#ifdef __INTEL_COMPILER
# pragma warning disable 592
#endif


#if defined(_DEBUG) && defined(SWIG_PYTHON_INTERPRETER_NO_DEBUG)
/* Use debug wrappers with the Python release dll */
# undef _DEBUG
# include <Python.h>
# define _DEBUG
#else
# include <Python.h>
#endif

/* -----------------------------------------------------------------------------
 * swigrun.swg
 *
 * This file contains generic C API SWIG runtime support for pointer
 * type checking.
 * ----------------------------------------------------------------------------- */

/* This should only be incremented when either the layout of swig_type_info changes,
   or for whatever reason, the runtime changes incompatibly */
#define SWIG_RUNTIME_VERSION "4"

/* define SWIG_TYPE_TABLE_NAME as "SWIG_TYPE_TABLE" */
#ifdef SWIG_TYPE_TABLE
# define SWIG_QUOTE_STRING(x) #x
# define SWIG_EXPAND_AND_QUOTE_STRING(x) SWIG_QUOTE_STRING(x)
# define SWIG_TYPE_TABLE_NAME SWIG_EXPAND_AND_QUOTE_STRING(SWIG_TYPE_TABLE)
#else
# define SWIG_TYPE_TABLE_NAME
#endif

/*
  You can use the SWIGRUNTIME and SWIGRUNTIMEINLINE macros for
  creating a static or dynamic library from the SWIG runtime code.
  In 99.9% of the cases, SWIG just needs to declare them as 'static'.

  But only do this if strictly necessary, ie, if you have problems
  with your compiler or suchlike.
*/

#ifndef SWIGRUNTIME
# define SWIGRUNTIME SWIGINTERN
#endif

#ifndef SWIGRUNTIMEINLINE
# define SWIGRUNTIMEINLINE SWIGRUNTIME SWIGINLINE
#endif

/*  Generic buffer size */
#ifndef SWIG_BUFFER_SIZE
# define SWIG_BUFFER_SIZE 1024
#endif

/* Flags for pointer conversions */
#define SWIG_POINTER_DISOWN        0x1
#define SWIG_CAST_NEW_MEMORY       0x2

/* Flags for new pointer objects */
#define SWIG_POINTER_OWN           0x1


/*
   Flags/methods for returning states.

   The SWIG conversion methods, as ConvertPtr, return an integer
   that tells if the conversion was successful or not. And if not,
   an error code can be returned (see swigerrors.swg for the codes).

   Use the following macros/flags to set or process the returning
   states.

   In old versions of SWIG, code such as the following was usually written:

     if (SWIG_ConvertPtr(obj,vptr,ty.flags) != -1) {
       // success code
     } else {
       //fail code
     }

   Now you can be more explicit:

    int res = SWIG_ConvertPtr(obj,vptr,ty.flags);
    if (SWIG_IsOK(res)) {
      // success code
    } else {
      // fail code
    }

   which is the same really, but now you can also do

    Type *ptr;
    int res = SWIG_ConvertPtr(obj,(void **)(&ptr),ty.flags);
    if (SWIG_IsOK(res)) {
      // success code
      if (SWIG_IsNewObj(res) {
        ...
	delete *ptr;
      } else {
        ...
      }
    } else {
      // fail code
    }

   I.e., now SWIG_ConvertPtr can return new objects and you can
   identify the case and take care of the deallocation. Of course that
   also requires SWIG_ConvertPtr to return new result values, such as

      int SWIG_ConvertPtr(obj, ptr,...) {
        if (<obj is ok>) {
          if (<need new object>) {
            *ptr = <ptr to new allocated object>;
            return SWIG_NEWOBJ;
          } else {
            *ptr = <ptr to old object>;
            return SWIG_OLDOBJ;
          }
        } else {
          return SWIG_BADOBJ;
        }
      }

   Of course, returning the plain '0(success)/-1(fail)' still works, but you can be
   more explicit by returning SWIG_BADOBJ, SWIG_ERROR or any of the
   SWIG errors code.

   Finally, if the SWIG_CASTRANK_MODE is enabled, the result code
   allows to return the 'cast rank', for example, if you have this

       int food(double)
       int fooi(int);

   and you call

      food(1)   // cast rank '1'  (1 -> 1.0)
      fooi(1)   // cast rank '0'

   just use the SWIG_AddCast()/SWIG_CheckState()
*/

#define SWIG_OK                    (0)
#define SWIG_ERROR                 (-1)
#define SWIG_IsOK(r)               (r >= 0)
#define SWIG_ArgError(r)           ((r != SWIG_ERROR) ? r : SWIG_TypeError)

/* The CastRankLimit says how many bits are used for the cast rank */
#define SWIG_CASTRANKLIMIT         (1 << 8)
/* The NewMask denotes the object was created (using new/malloc) */
#define SWIG_NEWOBJMASK            (SWIG_CASTRANKLIMIT  << 1)
/* The TmpMask is for in/out typemaps that use temporal objects */
#define SWIG_TMPOBJMASK            (SWIG_NEWOBJMASK << 1)
/* Simple returning values */
#define SWIG_BADOBJ                (SWIG_ERROR)
#define SWIG_OLDOBJ                (SWIG_OK)
#define SWIG_NEWOBJ                (SWIG_OK | SWIG_NEWOBJMASK)
#define SWIG_TMPOBJ                (SWIG_OK | SWIG_TMPOBJMASK)
/* Check, add and del mask methods */
#define SWIG_AddNewMask(r)         (SWIG_IsOK(r) ? (r | SWIG_NEWOBJMASK) : r)
#define SWIG_DelNewMask(r)         (SWIG_IsOK(r) ? (r & ~SWIG_NEWOBJMASK) : r)
#define SWIG_IsNewObj(r)           (SWIG_IsOK(r) && (r & SWIG_NEWOBJMASK))
#define SWIG_AddTmpMask(r)         (SWIG_IsOK(r) ? (r | SWIG_TMPOBJMASK) : r)
#define SWIG_DelTmpMask(r)         (SWIG_IsOK(r) ? (r & ~SWIG_TMPOBJMASK) : r)
#define SWIG_IsTmpObj(r)           (SWIG_IsOK(r) && (r & SWIG_TMPOBJMASK))

/* Cast-Rank Mode */
#if defined(SWIG_CASTRANK_MODE)
#  ifndef SWIG_TypeRank
#    define SWIG_TypeRank             unsigned long
#  endif
#  ifndef SWIG_MAXCASTRANK            /* Default cast allowed */
#    define SWIG_MAXCASTRANK          (2)
#  endif
#  define SWIG_CASTRANKMASK          ((SWIG_CASTRANKLIMIT) -1)
#  define SWIG_CastRank(r)           (r & SWIG_CASTRANKMASK)
SWIGINTERNINLINE int SWIG_AddCast(int r) {
  return SWIG_IsOK(r) ? ((SWIG_CastRank(r) < SWIG_MAXCASTRANK) ? (r + 1) : SWIG_ERROR) : r;
}
SWIGINTERNINLINE int SWIG_CheckState(int r) {
  return SWIG_IsOK(r) ? SWIG_CastRank(r) + 1 : 0;
}
#else /* no cast-rank mode */
#  define SWIG_AddCast(r) (r)
#  define SWIG_CheckState(r) (SWIG_IsOK(r) ? 1 : 0)
#endif


#include <string.h>

#ifdef __cplusplus
extern "C" {
#endif

typedef void *(*swig_converter_func)(void *, int *);
typedef struct swig_type_info *(*swig_dycast_func)(void **);

/* Structure to store information on one type */
typedef struct swig_type_info {
  const char             *name;			/* mangled name of this type */
  const char             *str;			/* human readable name of this type */
  swig_dycast_func        dcast;		/* dynamic cast function down a hierarchy */
  struct swig_cast_info  *cast;			/* linked list of types that can cast into this type */
  void                   *clientdata;		/* language specific type data */
  int                    owndata;		/* flag if the structure owns the clientdata */
} swig_type_info;

/* Structure to store a type and conversion function used for casting */
typedef struct swig_cast_info {
  swig_type_info         *type;			/* pointer to type that is equivalent to this type */
  swig_converter_func     converter;		/* function to cast the void pointers */
  struct swig_cast_info  *next;			/* pointer to next cast in linked list */
  struct swig_cast_info  *prev;			/* pointer to the previous cast */
} swig_cast_info;

/* Structure used to store module information
 * Each module generates one structure like this, and the runtime collects
 * all of these structures and stores them in a circularly linked list.*/
typedef struct swig_module_info {
  swig_type_info         **types;		/* Array of pointers to swig_type_info structures that are in this module */
  size_t                 size;		        /* Number of types in this module */
  struct swig_module_info *next;		/* Pointer to next element in circularly linked list */
  swig_type_info         **type_initial;	/* Array of initially generated type structures */
  swig_cast_info         **cast_initial;	/* Array of initially generated casting structures */
  void                    *clientdata;		/* Language specific module data */
} swig_module_info;

/*
  Compare two type names skipping the space characters, therefore
  "char*" == "char *" and "Class<int>" == "Class<int >", etc.

  Return 0 when the two name types are equivalent, as in
  strncmp, but skipping ' '.
*/
SWIGRUNTIME int
SWIG_TypeNameComp(const char *f1, const char *l1,
		  const char *f2, const char *l2) {
  for (;(f1 != l1) && (f2 != l2); ++f1, ++f2) {
    while ((*f1 == ' ') && (f1 != l1)) ++f1;
    while ((*f2 == ' ') && (f2 != l2)) ++f2;
    if (*f1 != *f2) return (*f1 > *f2) ? 1 : -1;
  }
  return (int)((l1 - f1) - (l2 - f2));
}

/*
  Check type equivalence in a name list like <name1>|<name2>|...
  Return 0 if equal, -1 if nb < tb, 1 if nb > tb
*/
SWIGRUNTIME int
SWIG_TypeCmp(const char *nb, const char *tb) {
  int equiv = 1;
  const char* te = tb + strlen(tb);
  const char* ne = nb;
  while (equiv != 0 && *ne) {
    for (nb = ne; *ne; ++ne) {
      if (*ne == '|') break;
    }
    equiv = SWIG_TypeNameComp(nb, ne, tb, te);
    if (*ne) ++ne;
  }
  return equiv;
}

/*
  Check type equivalence in a name list like <name1>|<name2>|...
  Return 0 if not equal, 1 if equal
*/
SWIGRUNTIME int
SWIG_TypeEquiv(const char *nb, const char *tb) {
  return SWIG_TypeCmp(nb, tb) == 0 ? 1 : 0;
}

/*
  Check the typename
*/
SWIGRUNTIME swig_cast_info *
SWIG_TypeCheck(const char *c, swig_type_info *ty) {
  if (ty) {
    swig_cast_info *iter = ty->cast;
    while (iter) {
      if (strcmp(iter->type->name, c) == 0) {
        if (iter == ty->cast)
          return iter;
        /* Move iter to the top of the linked list */
        iter->prev->next = iter->next;
        if (iter->next)
          iter->next->prev = iter->prev;
        iter->next = ty->cast;
        iter->prev = 0;
        if (ty->cast) ty->cast->prev = iter;
        ty->cast = iter;
        return iter;
      }
      iter = iter->next;
    }
  }
  return 0;
}

/*
  Identical to SWIG_TypeCheck, except strcmp is replaced with a pointer comparison
*/
SWIGRUNTIME swig_cast_info *
SWIG_TypeCheckStruct(swig_type_info *from, swig_type_info *ty) {
  if (ty) {
    swig_cast_info *iter = ty->cast;
    while (iter) {
      if (iter->type == from) {
        if (iter == ty->cast)
          return iter;
        /* Move iter to the top of the linked list */
        iter->prev->next = iter->next;
        if (iter->next)
          iter->next->prev = iter->prev;
        iter->next = ty->cast;
        iter->prev = 0;
        if (ty->cast) ty->cast->prev = iter;
        ty->cast = iter;
        return iter;
      }
      iter = iter->next;
    }
  }
  return 0;
}

/*
  Cast a pointer up an inheritance hierarchy
*/
SWIGRUNTIMEINLINE void *
SWIG_TypeCast(swig_cast_info *ty, void *ptr, int *newmemory) {
  return ((!ty) || (!ty->converter)) ? ptr : (*ty->converter)(ptr, newmemory);
}

/*
   Dynamic pointer casting. Down an inheritance hierarchy
*/
SWIGRUNTIME swig_type_info *
SWIG_TypeDynamicCast(swig_type_info *ty, void **ptr) {
  swig_type_info *lastty = ty;
  if (!ty || !ty->dcast) return ty;
  while (ty && (ty->dcast)) {
    ty = (*ty->dcast)(ptr);
    if (ty) lastty = ty;
  }
  return lastty;
}

/*
  Return the name associated with this type
*/
SWIGRUNTIMEINLINE const char *
SWIG_TypeName(const swig_type_info *ty) {
  return ty->name;
}

/*
  Return the pretty name associated with this type,
  that is an unmangled type name in a form presentable to the user.
*/
SWIGRUNTIME const char *
SWIG_TypePrettyName(const swig_type_info *type) {
  /* The "str" field contains the equivalent pretty names of the
     type, separated by vertical-bar characters.  We choose
     to print the last name, as it is often (?) the most
     specific. */
  if (!type) return NULL;
  if (type->str != NULL) {
    const char *last_name = type->str;
    const char *s;
    for (s = type->str; *s; s++)
      if (*s == '|') last_name = s+1;
    return last_name;
  }
  else
    return type->name;
}

/*
   Set the clientdata field for a type
*/
SWIGRUNTIME void
SWIG_TypeClientData(swig_type_info *ti, void *clientdata) {
  swig_cast_info *cast = ti->cast;
  /* if (ti->clientdata == clientdata) return; */
  ti->clientdata = clientdata;

  while (cast) {
    if (!cast->converter) {
      swig_type_info *tc = cast->type;
      if (!tc->clientdata) {
	SWIG_TypeClientData(tc, clientdata);
      }
    }
    cast = cast->next;
  }
}
SWIGRUNTIME void
SWIG_TypeNewClientData(swig_type_info *ti, void *clientdata) {
  SWIG_TypeClientData(ti, clientdata);
  ti->owndata = 1;
}

/*
  Search for a swig_type_info structure only by mangled name
  Search is a O(log #types)

  We start searching at module start, and finish searching when start == end.
  Note: if start == end at the beginning of the function, we go all the way around
  the circular list.
*/
SWIGRUNTIME swig_type_info *
SWIG_MangledTypeQueryModule(swig_module_info *start,
                            swig_module_info *end,
		            const char *name) {
  swig_module_info *iter = start;
  do {
    if (iter->size) {
      size_t l = 0;
      size_t r = iter->size - 1;
      do {
	/* since l+r >= 0, we can (>> 1) instead (/ 2) */
	size_t i = (l + r) >> 1;
	const char *iname = iter->types[i]->name;
	if (iname) {
	  int compare = strcmp(name, iname);
	  if (compare == 0) {
	    return iter->types[i];
	  } else if (compare < 0) {
	    if (i) {
	      r = i - 1;
	    } else {
	      break;
	    }
	  } else if (compare > 0) {
	    l = i + 1;
	  }
	} else {
	  break; /* should never happen */
	}
      } while (l <= r);
    }
    iter = iter->next;
  } while (iter != end);
  return 0;
}

/*
  Search for a swig_type_info structure for either a mangled name or a human readable name.
  It first searches the mangled names of the types, which is a O(log #types)
  If a type is not found it then searches the human readable names, which is O(#types).

  We start searching at module start, and finish searching when start == end.
  Note: if start == end at the beginning of the function, we go all the way around
  the circular list.
*/
SWIGRUNTIME swig_type_info *
SWIG_TypeQueryModule(swig_module_info *start,
                     swig_module_info *end,
		     const char *name) {
  /* STEP 1: Search the name field using binary search */
  swig_type_info *ret = SWIG_MangledTypeQueryModule(start, end, name);
  if (ret) {
    return ret;
  } else {
    /* STEP 2: If the type hasn't been found, do a complete search
       of the str field (the human readable name) */
    swig_module_info *iter = start;
    do {
      size_t i = 0;
      for (; i < iter->size; ++i) {
	if (iter->types[i]->str && (SWIG_TypeEquiv(iter->types[i]->str, name)))
	  return iter->types[i];
      }
      iter = iter->next;
    } while (iter != end);
  }

  /* neither found a match */
  return 0;
}

/*
   Pack binary data into a string
*/
SWIGRUNTIME char *
SWIG_PackData(char *c, void *ptr, size_t sz) {
  static const char hex[17] = "0123456789abcdef";
  const unsigned char *u = (unsigned char *) ptr;
  const unsigned char *eu =  u + sz;
  for (; u != eu; ++u) {
    unsigned char uu = *u;
    *(c++) = hex[(uu & 0xf0) >> 4];
    *(c++) = hex[uu & 0xf];
  }
  return c;
}

/*
   Unpack binary data from a string
*/
SWIGRUNTIME const char *
SWIG_UnpackData(const char *c, void *ptr, size_t sz) {
  unsigned char *u = (unsigned char *) ptr;
  const unsigned char *eu = u + sz;
  for (; u != eu; ++u) {
    char d = *(c++);
    unsigned char uu;
    if ((d >= '0') && (d <= '9'))
      uu = (unsigned char)((d - '0') << 4);
    else if ((d >= 'a') && (d <= 'f'))
      uu = (unsigned char)((d - ('a'-10)) << 4);
    else
      return (char *) 0;
    d = *(c++);
    if ((d >= '0') && (d <= '9'))
      uu |= (unsigned char)(d - '0');
    else if ((d >= 'a') && (d <= 'f'))
      uu |= (unsigned char)(d - ('a'-10));
    else
      return (char *) 0;
    *u = uu;
  }
  return c;
}

/*
   Pack 'void *' into a string buffer.
*/
SWIGRUNTIME char *
SWIG_PackVoidPtr(char *buff, void *ptr, const char *name, size_t bsz) {
  char *r = buff;
  if ((2*sizeof(void *) + 2) > bsz) return 0;
  *(r++) = '_';
  r = SWIG_PackData(r,&ptr,sizeof(void *));
  if (strlen(name) + 1 > (bsz - (r - buff))) return 0;
  strcpy(r,name);
  return buff;
}

SWIGRUNTIME const char *
SWIG_UnpackVoidPtr(const char *c, void **ptr, const char *name) {
  if (*c != '_') {
    if (strcmp(c,"NULL") == 0) {
      *ptr = (void *) 0;
      return name;
    } else {
      return 0;
    }
  }
  return SWIG_UnpackData(++c,ptr,sizeof(void *));
}

SWIGRUNTIME char *
SWIG_PackDataName(char *buff, void *ptr, size_t sz, const char *name, size_t bsz) {
  char *r = buff;
  size_t lname = (name ? strlen(name) : 0);
  if ((2*sz + 2 + lname) > bsz) return 0;
  *(r++) = '_';
  r = SWIG_PackData(r,ptr,sz);
  if (lname) {
    strncpy(r,name,lname+1);
  } else {
    *r = 0;
  }
  return buff;
}

SWIGRUNTIME const char *
SWIG_UnpackDataName(const char *c, void *ptr, size_t sz, const char *name) {
  if (*c != '_') {
    if (strcmp(c,"NULL") == 0) {
      memset(ptr,0,sz);
      return name;
    } else {
      return 0;
    }
  }
  return SWIG_UnpackData(++c,ptr,sz);
}

#ifdef __cplusplus
}
#endif

/*  Errors in SWIG */
#define  SWIG_UnknownError    	   -1
#define  SWIG_IOError        	   -2
#define  SWIG_RuntimeError   	   -3
#define  SWIG_IndexError     	   -4
#define  SWIG_TypeError      	   -5
#define  SWIG_DivisionByZero 	   -6
#define  SWIG_OverflowError  	   -7
#define  SWIG_SyntaxError    	   -8
#define  SWIG_ValueError     	   -9
#define  SWIG_SystemError    	   -10
#define  SWIG_AttributeError 	   -11
#define  SWIG_MemoryError    	   -12
#define  SWIG_NullReferenceError   -13



/* Compatibility macros for Python 3 */
#if PY_VERSION_HEX >= 0x03000000

#define PyClass_Check(obj) PyObject_IsInstance(obj, (PyObject *)&PyType_Type)
#define PyInt_Check(x) PyLong_Check(x)
#define PyInt_AsLong(x) PyLong_AsLong(x)
#define PyInt_FromLong(x) PyLong_FromLong(x)
#define PyInt_FromSize_t(x) PyLong_FromSize_t(x)
#define PyString_Check(name) PyBytes_Check(name)
#define PyString_FromString(x) PyUnicode_FromString(x)
#define PyString_Format(fmt, args)  PyUnicode_Format(fmt, args)
#define PyString_AsString(str) PyBytes_AsString(str)
#define PyString_Size(str) PyBytes_Size(str)	
#define PyString_InternFromString(key) PyUnicode_InternFromString(key)
#define Py_TPFLAGS_HAVE_CLASS Py_TPFLAGS_BASETYPE
#define PyString_AS_STRING(x) PyUnicode_AS_STRING(x)
#define _PyLong_FromSsize_t(x) PyLong_FromSsize_t(x)

#endif

#ifndef Py_TYPE
#  define Py_TYPE(op) ((op)->ob_type)
#endif

/* SWIG APIs for compatibility of both Python 2 & 3 */

#if PY_VERSION_HEX >= 0x03000000
#  define SWIG_Python_str_FromFormat PyUnicode_FromFormat
#else
#  define SWIG_Python_str_FromFormat PyString_FromFormat
#endif


/* Warning: This function will allocate a new string in Python 3,
 * so please call SWIG_Python_str_DelForPy3(x) to free the space.
 */
SWIGINTERN char*
SWIG_Python_str_AsChar(PyObject *str)
{
#if PY_VERSION_HEX >= 0x03000000
  char *cstr;
  char *newstr;
  Py_ssize_t len;
  str = PyUnicode_AsUTF8String(str);
  PyBytes_AsStringAndSize(str, &cstr, &len);
  newstr = (char *) malloc(len+1);
  memcpy(newstr, cstr, len+1);
  Py_XDECREF(str);
  return newstr;
#else
  return PyString_AsString(str);
#endif
}

#if PY_VERSION_HEX >= 0x03000000
#  define SWIG_Python_str_DelForPy3(x) free( (void*) (x) )
#else
#  define SWIG_Python_str_DelForPy3(x) 
#endif


SWIGINTERN PyObject*
SWIG_Python_str_FromChar(const char *c)
{
#if PY_VERSION_HEX >= 0x03000000
  return PyUnicode_FromString(c); 
#else
  return PyString_FromString(c);
#endif
}

/* Add PyOS_snprintf for old Pythons */
#if PY_VERSION_HEX < 0x02020000
# if defined(_MSC_VER) || defined(__BORLANDC__) || defined(_WATCOM)
#  define PyOS_snprintf _snprintf
# else
#  define PyOS_snprintf snprintf
# endif
#endif

/* A crude PyString_FromFormat implementation for old Pythons */
#if PY_VERSION_HEX < 0x02020000

#ifndef SWIG_PYBUFFER_SIZE
# define SWIG_PYBUFFER_SIZE 1024
#endif

static PyObject *
PyString_FromFormat(const char *fmt, ...) {
  va_list ap;
  char buf[SWIG_PYBUFFER_SIZE * 2];
  int res;
  va_start(ap, fmt);
  res = vsnprintf(buf, sizeof(buf), fmt, ap);
  va_end(ap);
  return (res < 0 || res >= (int)sizeof(buf)) ? 0 : PyString_FromString(buf);
}
#endif

#ifndef PyObject_DEL
# define PyObject_DEL PyObject_Del
#endif

/* A crude PyExc_StopIteration exception for old Pythons */
#if PY_VERSION_HEX < 0x02020000
# ifndef PyExc_StopIteration
#  define PyExc_StopIteration PyExc_RuntimeError
# endif
# ifndef PyObject_GenericGetAttr
#  define PyObject_GenericGetAttr 0
# endif
#endif

/* Py_NotImplemented is defined in 2.1 and up. */
#if PY_VERSION_HEX < 0x02010000
# ifndef Py_NotImplemented
#  define Py_NotImplemented PyExc_RuntimeError
# endif
#endif

/* A crude PyString_AsStringAndSize implementation for old Pythons */
#if PY_VERSION_HEX < 0x02010000
# ifndef PyString_AsStringAndSize
#  define PyString_AsStringAndSize(obj, s, len) {*s = PyString_AsString(obj); *len = *s ? strlen(*s) : 0;}
# endif
#endif

/* PySequence_Size for old Pythons */
#if PY_VERSION_HEX < 0x02000000
# ifndef PySequence_Size
#  define PySequence_Size PySequence_Length
# endif
#endif

/* PyBool_FromLong for old Pythons */
#if PY_VERSION_HEX < 0x02030000
static
PyObject *PyBool_FromLong(long ok)
{
  PyObject *result = ok ? Py_True : Py_False;
  Py_INCREF(result);
  return result;
}
#endif

/* Py_ssize_t for old Pythons */
/* This code is as recommended by: */
/* http://www.python.org/dev/peps/pep-0353/#conversion-guidelines */
#if PY_VERSION_HEX < 0x02050000 && !defined(PY_SSIZE_T_MIN)
typedef int Py_ssize_t;
# define PY_SSIZE_T_MAX INT_MAX
# define PY_SSIZE_T_MIN INT_MIN
typedef inquiry lenfunc;
typedef intargfunc ssizeargfunc;
typedef intintargfunc ssizessizeargfunc;
typedef intobjargproc ssizeobjargproc;
typedef intintobjargproc ssizessizeobjargproc;
typedef getreadbufferproc readbufferproc;
typedef getwritebufferproc writebufferproc;
typedef getsegcountproc segcountproc;
typedef getcharbufferproc charbufferproc;
static long PyNumber_AsSsize_t (PyObject *x, void *SWIGUNUSEDPARM(exc))
{
  long result = 0;
  PyObject *i = PyNumber_Int(x);
  if (i) {
    result = PyInt_AsLong(i);
    Py_DECREF(i);
  }
  return result;
}
#endif

#if PY_VERSION_HEX < 0x02050000
#define PyInt_FromSize_t(x) PyInt_FromLong((long)x)
#endif

#if PY_VERSION_HEX < 0x02040000
#define Py_VISIT(op)				\
  do { 						\
    if (op) {					\
      int vret = visit((op), arg);		\
      if (vret)					\
        return vret;				\
    }						\
  } while (0)
#endif

#if PY_VERSION_HEX < 0x02030000
typedef struct {
  PyTypeObject type;
  PyNumberMethods as_number;
  PyMappingMethods as_mapping;
  PySequenceMethods as_sequence;
  PyBufferProcs as_buffer;
  PyObject *name, *slots;
} PyHeapTypeObject;
#endif

#if PY_VERSION_HEX < 0x02030000
typedef destructor freefunc;
#endif

#if ((PY_MAJOR_VERSION == 2 && PY_MINOR_VERSION > 6) || \
     (PY_MAJOR_VERSION == 3 && PY_MINOR_VERSION > 0) || \
     (PY_MAJOR_VERSION > 3))
# define SWIGPY_USE_CAPSULE
# define SWIGPY_CAPSULE_NAME ((char*)"swig_runtime_data" SWIG_RUNTIME_VERSION ".type_pointer_capsule" SWIG_TYPE_TABLE_NAME)
#endif

#if PY_VERSION_HEX < 0x03020000
#define PyDescr_TYPE(x) (((PyDescrObject *)(x))->d_type)
#define PyDescr_NAME(x) (((PyDescrObject *)(x))->d_name)
#define Py_hash_t long
#endif

/* -----------------------------------------------------------------------------
 * error manipulation
 * ----------------------------------------------------------------------------- */

SWIGRUNTIME PyObject*
SWIG_Python_ErrorType(int code) {
  PyObject* type = 0;
  switch(code) {
  case SWIG_MemoryError:
    type = PyExc_MemoryError;
    break;
  case SWIG_IOError:
    type = PyExc_IOError;
    break;
  case SWIG_RuntimeError:
    type = PyExc_RuntimeError;
    break;
  case SWIG_IndexError:
    type = PyExc_IndexError;
    break;
  case SWIG_TypeError:
    type = PyExc_TypeError;
    break;
  case SWIG_DivisionByZero:
    type = PyExc_ZeroDivisionError;
    break;
  case SWIG_OverflowError:
    type = PyExc_OverflowError;
    break;
  case SWIG_SyntaxError:
    type = PyExc_SyntaxError;
    break;
  case SWIG_ValueError:
    type = PyExc_ValueError;
    break;
  case SWIG_SystemError:
    type = PyExc_SystemError;
    break;
  case SWIG_AttributeError:
    type = PyExc_AttributeError;
    break;
  default:
    type = PyExc_RuntimeError;
  }
  return type;
}


SWIGRUNTIME void
SWIG_Python_AddErrorMsg(const char* mesg)
{
  PyObject *type = 0;
  PyObject *value = 0;
  PyObject *traceback = 0;

  if (PyErr_Occurred()) PyErr_Fetch(&type, &value, &traceback);
  if (value) {
    char *tmp;
    PyObject *old_str = PyObject_Str(value);
    PyErr_Clear();
    Py_XINCREF(type);

    PyErr_Format(type, "%s %s", tmp = SWIG_Python_str_AsChar(old_str), mesg);
    SWIG_Python_str_DelForPy3(tmp);
    Py_DECREF(old_str);
    Py_DECREF(value);
  } else {
    PyErr_SetString(PyExc_RuntimeError, mesg);
  }
}

#if defined(SWIG_PYTHON_NO_THREADS)
#  if defined(SWIG_PYTHON_THREADS)
#    undef SWIG_PYTHON_THREADS
#  endif
#endif
#if defined(SWIG_PYTHON_THREADS) /* Threading support is enabled */
#  if !defined(SWIG_PYTHON_USE_GIL) && !defined(SWIG_PYTHON_NO_USE_GIL)
#    if (PY_VERSION_HEX >= 0x02030000) /* For 2.3 or later, use the PyGILState calls */
#      define SWIG_PYTHON_USE_GIL
#    endif
#  endif
#  if defined(SWIG_PYTHON_USE_GIL) /* Use PyGILState threads calls */
#    ifndef SWIG_PYTHON_INITIALIZE_THREADS
#     define SWIG_PYTHON_INITIALIZE_THREADS  PyEval_InitThreads() 
#    endif
#    ifdef __cplusplus /* C++ code */
       class SWIG_Python_Thread_Block {
         bool status;
         PyGILState_STATE state;
       public:
         void end() { if (status) { PyGILState_Release(state); status = false;} }
         SWIG_Python_Thread_Block() : status(true), state(PyGILState_Ensure()) {}
         ~SWIG_Python_Thread_Block() { end(); }
       };
       class SWIG_Python_Thread_Allow {
         bool status;
         PyThreadState *save;
       public:
         void end() { if (status) { PyEval_RestoreThread(save); status = false; }}
         SWIG_Python_Thread_Allow() : status(true), save(PyEval_SaveThread()) {}
         ~SWIG_Python_Thread_Allow() { end(); }
       };
#      define SWIG_PYTHON_THREAD_BEGIN_BLOCK   SWIG_Python_Thread_Block _swig_thread_block
#      define SWIG_PYTHON_THREAD_END_BLOCK     _swig_thread_block.end()
#      define SWIG_PYTHON_THREAD_BEGIN_ALLOW   SWIG_Python_Thread_Allow _swig_thread_allow
#      define SWIG_PYTHON_THREAD_END_ALLOW     _swig_thread_allow.end()
#    else /* C code */
#      define SWIG_PYTHON_THREAD_BEGIN_BLOCK   PyGILState_STATE _swig_thread_block = PyGILState_Ensure()
#      define SWIG_PYTHON_THREAD_END_BLOCK     PyGILState_Release(_swig_thread_block)
#      define SWIG_PYTHON_THREAD_BEGIN_ALLOW   PyThreadState *_swig_thread_allow = PyEval_SaveThread()
#      define SWIG_PYTHON_THREAD_END_ALLOW     PyEval_RestoreThread(_swig_thread_allow)
#    endif
#  else /* Old thread way, not implemented, user must provide it */
#    if !defined(SWIG_PYTHON_INITIALIZE_THREADS)
#      define SWIG_PYTHON_INITIALIZE_THREADS
#    endif
#    if !defined(SWIG_PYTHON_THREAD_BEGIN_BLOCK)
#      define SWIG_PYTHON_THREAD_BEGIN_BLOCK
#    endif
#    if !defined(SWIG_PYTHON_THREAD_END_BLOCK)
#      define SWIG_PYTHON_THREAD_END_BLOCK
#    endif
#    if !defined(SWIG_PYTHON_THREAD_BEGIN_ALLOW)
#      define SWIG_PYTHON_THREAD_BEGIN_ALLOW
#    endif
#    if !defined(SWIG_PYTHON_THREAD_END_ALLOW)
#      define SWIG_PYTHON_THREAD_END_ALLOW
#    endif
#  endif
#else /* No thread support */
#  define SWIG_PYTHON_INITIALIZE_THREADS
#  define SWIG_PYTHON_THREAD_BEGIN_BLOCK
#  define SWIG_PYTHON_THREAD_END_BLOCK
#  define SWIG_PYTHON_THREAD_BEGIN_ALLOW
#  define SWIG_PYTHON_THREAD_END_ALLOW
#endif

/* -----------------------------------------------------------------------------
 * Python API portion that goes into the runtime
 * ----------------------------------------------------------------------------- */

#ifdef __cplusplus
extern "C" {
#endif

/* -----------------------------------------------------------------------------
 * Constant declarations
 * ----------------------------------------------------------------------------- */

/* Constant Types */
#define SWIG_PY_POINTER 4
#define SWIG_PY_BINARY  5

/* Constant information structure */
typedef struct swig_const_info {
  int type;
  char *name;
  long lvalue;
  double dvalue;
  void   *pvalue;
  swig_type_info **ptype;
} swig_const_info;


/* -----------------------------------------------------------------------------
 * Wrapper of PyInstanceMethod_New() used in Python 3
 * It is exported to the generated module, used for -fastproxy
 * ----------------------------------------------------------------------------- */
#if PY_VERSION_HEX >= 0x03000000
SWIGRUNTIME PyObject* SWIG_PyInstanceMethod_New(PyObject *SWIGUNUSEDPARM(self), PyObject *func)
{
  return PyInstanceMethod_New(func);
}
#else
SWIGRUNTIME PyObject* SWIG_PyInstanceMethod_New(PyObject *SWIGUNUSEDPARM(self), PyObject *SWIGUNUSEDPARM(func))
{
  return NULL;
}
#endif

#ifdef __cplusplus
}
#endif


/* -----------------------------------------------------------------------------
 * pyrun.swg
 *
 * This file contains the runtime support for Python modules
 * and includes code for managing global variables and pointer
 * type checking.
 *
 * ----------------------------------------------------------------------------- */

/* Common SWIG API */

/* for raw pointers */
#define SWIG_Python_ConvertPtr(obj, pptr, type, flags)  SWIG_Python_ConvertPtrAndOwn(obj, pptr, type, flags, 0)
#define SWIG_ConvertPtr(obj, pptr, type, flags)         SWIG_Python_ConvertPtr(obj, pptr, type, flags)
#define SWIG_ConvertPtrAndOwn(obj,pptr,type,flags,own)  SWIG_Python_ConvertPtrAndOwn(obj, pptr, type, flags, own)

#ifdef SWIGPYTHON_BUILTIN
#define SWIG_NewPointerObj(ptr, type, flags)            SWIG_Python_NewPointerObj(self, ptr, type, flags)
#else
#define SWIG_NewPointerObj(ptr, type, flags)            SWIG_Python_NewPointerObj(NULL, ptr, type, flags)
#endif

#define SWIG_InternalNewPointerObj(ptr, type, flags)	SWIG_Python_NewPointerObj(NULL, ptr, type, flags)

#define SWIG_CheckImplicit(ty)                          SWIG_Python_CheckImplicit(ty) 
#define SWIG_AcquirePtr(ptr, src)                       SWIG_Python_AcquirePtr(ptr, src)
#define swig_owntype                                    int

/* for raw packed data */
#define SWIG_ConvertPacked(obj, ptr, sz, ty)            SWIG_Python_ConvertPacked(obj, ptr, sz, ty)
#define SWIG_NewPackedObj(ptr, sz, type)                SWIG_Python_NewPackedObj(ptr, sz, type)

/* for class or struct pointers */
#define SWIG_ConvertInstance(obj, pptr, type, flags)    SWIG_ConvertPtr(obj, pptr, type, flags)
#define SWIG_NewInstanceObj(ptr, type, flags)           SWIG_NewPointerObj(ptr, type, flags)

/* for C or C++ function pointers */
#define SWIG_ConvertFunctionPtr(obj, pptr, type)        SWIG_Python_ConvertFunctionPtr(obj, pptr, type)
#define SWIG_NewFunctionPtrObj(ptr, type)               SWIG_Python_NewPointerObj(NULL, ptr, type, 0)

/* for C++ member pointers, ie, member methods */
#define SWIG_ConvertMember(obj, ptr, sz, ty)            SWIG_Python_ConvertPacked(obj, ptr, sz, ty)
#define SWIG_NewMemberObj(ptr, sz, type)                SWIG_Python_NewPackedObj(ptr, sz, type)


/* Runtime API */

#define SWIG_GetModule(clientdata)                      SWIG_Python_GetModule(clientdata)
#define SWIG_SetModule(clientdata, pointer)             SWIG_Python_SetModule(pointer)
#define SWIG_NewClientData(obj)                         SwigPyClientData_New(obj)

#define SWIG_SetErrorObj                                SWIG_Python_SetErrorObj                            
#define SWIG_SetErrorMsg                        	SWIG_Python_SetErrorMsg				   
#define SWIG_ErrorType(code)                    	SWIG_Python_ErrorType(code)                        
#define SWIG_Error(code, msg)            		SWIG_Python_SetErrorMsg(SWIG_ErrorType(code), msg) 
#define SWIG_fail                        		goto fail					   


/* Runtime API implementation */

/* Error manipulation */

SWIGINTERN void 
SWIG_Python_SetErrorObj(PyObject *errtype, PyObject *obj) {
  SWIG_PYTHON_THREAD_BEGIN_BLOCK; 
  PyErr_SetObject(errtype, obj);
  Py_DECREF(obj);
  SWIG_PYTHON_THREAD_END_BLOCK;
}

SWIGINTERN void 
SWIG_Python_SetErrorMsg(PyObject *errtype, const char *msg) {
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  PyErr_SetString(errtype, msg);
  SWIG_PYTHON_THREAD_END_BLOCK;
}

#define SWIG_Python_Raise(obj, type, desc)  SWIG_Python_SetErrorObj(SWIG_Python_ExceptionType(desc), obj)

/* Set a constant value */

#if defined(SWIGPYTHON_BUILTIN)

SWIGINTERN void
SwigPyBuiltin_AddPublicSymbol(PyObject *seq, const char *key) {
  PyObject *s = PyString_InternFromString(key);
  PyList_Append(seq, s);
  Py_DECREF(s);
}

SWIGINTERN void
SWIG_Python_SetConstant(PyObject *d, PyObject *public_interface, const char *name, PyObject *obj) {   
#if PY_VERSION_HEX < 0x02030000
  PyDict_SetItemString(d, (char *)name, obj);
#else
  PyDict_SetItemString(d, name, obj);
#endif
  Py_DECREF(obj);
  if (public_interface)
    SwigPyBuiltin_AddPublicSymbol(public_interface, name);
}

#else

SWIGINTERN void
SWIG_Python_SetConstant(PyObject *d, const char *name, PyObject *obj) {   
#if PY_VERSION_HEX < 0x02030000
  PyDict_SetItemString(d, (char *)name, obj);
#else
  PyDict_SetItemString(d, name, obj);
#endif
  Py_DECREF(obj);                            
}

#endif

/* Append a value to the result obj */

SWIGINTERN PyObject*
SWIG_Python_AppendOutput(PyObject* result, PyObject* obj) {
#if !defined(SWIG_PYTHON_OUTPUT_TUPLE)
  if (!result) {
    result = obj;
  } else if (result == Py_None) {
    Py_DECREF(result);
    result = obj;
  } else {
    if (!PyList_Check(result)) {
      PyObject *o2 = result;
      result = PyList_New(1);
      PyList_SetItem(result, 0, o2);
    }
    PyList_Append(result,obj);
    Py_DECREF(obj);
  }
  return result;
#else
  PyObject*   o2;
  PyObject*   o3;
  if (!result) {
    result = obj;
  } else if (result == Py_None) {
    Py_DECREF(result);
    result = obj;
  } else {
    if (!PyTuple_Check(result)) {
      o2 = result;
      result = PyTuple_New(1);
      PyTuple_SET_ITEM(result, 0, o2);
    }
    o3 = PyTuple_New(1);
    PyTuple_SET_ITEM(o3, 0, obj);
    o2 = result;
    result = PySequence_Concat(o2, o3);
    Py_DECREF(o2);
    Py_DECREF(o3);
  }
  return result;
#endif
}

/* Unpack the argument tuple */

SWIGINTERN Py_ssize_t
SWIG_Python_UnpackTuple(PyObject *args, const char *name, Py_ssize_t min, Py_ssize_t max, PyObject **objs)
{
  if (!args) {
    if (!min && !max) {
      return 1;
    } else {
      PyErr_Format(PyExc_TypeError, "%s expected %s%d arguments, got none", 
		   name, (min == max ? "" : "at least "), (int)min);
      return 0;
    }
  }  
  if (!PyTuple_Check(args)) {
    if (min <= 1 && max >= 1) {
      Py_ssize_t i;
      objs[0] = args;
      for (i = 1; i < max; ++i) {
	objs[i] = 0;
      }
      return 2;
    }
    PyErr_SetString(PyExc_SystemError, "UnpackTuple() argument list is not a tuple");
    return 0;
  } else {
    Py_ssize_t l = PyTuple_GET_SIZE(args);
    if (l < min) {
      PyErr_Format(PyExc_TypeError, "%s expected %s%d arguments, got %d", 
		   name, (min == max ? "" : "at least "), (int)min, (int)l);
      return 0;
    } else if (l > max) {
      PyErr_Format(PyExc_TypeError, "%s expected %s%d arguments, got %d", 
		   name, (min == max ? "" : "at most "), (int)max, (int)l);
      return 0;
    } else {
      Py_ssize_t i;
      for (i = 0; i < l; ++i) {
	objs[i] = PyTuple_GET_ITEM(args, i);
      }
      for (; l < max; ++l) {
	objs[l] = 0;
      }
      return i + 1;
    }    
  }
}

/* A functor is a function object with one single object argument */
#if PY_VERSION_HEX >= 0x02020000
#define SWIG_Python_CallFunctor(functor, obj)	        PyObject_CallFunctionObjArgs(functor, obj, NULL);
#else
#define SWIG_Python_CallFunctor(functor, obj)	        PyObject_CallFunction(functor, "O", obj);
#endif

/*
  Helper for static pointer initialization for both C and C++ code, for example
  static PyObject *SWIG_STATIC_POINTER(MyVar) = NewSomething(...);
*/
#ifdef __cplusplus
#define SWIG_STATIC_POINTER(var)  var
#else
#define SWIG_STATIC_POINTER(var)  var = 0; if (!var) var
#endif

/* -----------------------------------------------------------------------------
 * Pointer declarations
 * ----------------------------------------------------------------------------- */

/* Flags for new pointer objects */
#define SWIG_POINTER_NOSHADOW       (SWIG_POINTER_OWN      << 1)
#define SWIG_POINTER_NEW            (SWIG_POINTER_NOSHADOW | SWIG_POINTER_OWN)

#define SWIG_POINTER_IMPLICIT_CONV  (SWIG_POINTER_DISOWN   << 1)

#define SWIG_BUILTIN_TP_INIT	    (SWIG_POINTER_OWN << 2)
#define SWIG_BUILTIN_INIT	    (SWIG_BUILTIN_TP_INIT | SWIG_POINTER_OWN)

#ifdef __cplusplus
extern "C" {
#endif

/*  How to access Py_None */
#if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#  ifndef SWIG_PYTHON_NO_BUILD_NONE
#    ifndef SWIG_PYTHON_BUILD_NONE
#      define SWIG_PYTHON_BUILD_NONE
#    endif
#  endif
#endif

#ifdef SWIG_PYTHON_BUILD_NONE
#  ifdef Py_None
#   undef Py_None
#   define Py_None SWIG_Py_None()
#  endif
SWIGRUNTIMEINLINE PyObject * 
_SWIG_Py_None(void)
{
  PyObject *none = Py_BuildValue((char*)"");
  Py_DECREF(none);
  return none;
}
SWIGRUNTIME PyObject * 
SWIG_Py_None(void)
{
  static PyObject *SWIG_STATIC_POINTER(none) = _SWIG_Py_None();
  return none;
}
#endif

/* The python void return value */

SWIGRUNTIMEINLINE PyObject * 
SWIG_Py_Void(void)
{
  PyObject *none = Py_None;
  Py_INCREF(none);
  return none;
}

/* SwigPyClientData */

typedef struct {
  PyObject *klass;
  PyObject *newraw;
  PyObject *newargs;
  PyObject *destroy;
  int delargs;
  int implicitconv;
  PyTypeObject *pytype;
} SwigPyClientData;

SWIGRUNTIMEINLINE int 
SWIG_Python_CheckImplicit(swig_type_info *ty)
{
  SwigPyClientData *data = (SwigPyClientData *)ty->clientdata;
  return data ? data->implicitconv : 0;
}

SWIGRUNTIMEINLINE PyObject *
SWIG_Python_ExceptionType(swig_type_info *desc) {
  SwigPyClientData *data = desc ? (SwigPyClientData *) desc->clientdata : 0;
  PyObject *klass = data ? data->klass : 0;
  return (klass ? klass : PyExc_RuntimeError);
}


SWIGRUNTIME SwigPyClientData * 
SwigPyClientData_New(PyObject* obj)
{
  if (!obj) {
    return 0;
  } else {
    SwigPyClientData *data = (SwigPyClientData *)malloc(sizeof(SwigPyClientData));
    /* the klass element */
    data->klass = obj;
    Py_INCREF(data->klass);
    /* the newraw method and newargs arguments used to create a new raw instance */
    if (PyClass_Check(obj)) {
      data->newraw = 0;
      data->newargs = obj;
      Py_INCREF(obj);
    } else {
#if (PY_VERSION_HEX < 0x02020000)
      data->newraw = 0;
#else
      data->newraw = PyObject_GetAttrString(data->klass, (char *)"__new__");
#endif
      if (data->newraw) {
	Py_INCREF(data->newraw);
	data->newargs = PyTuple_New(1);
	PyTuple_SetItem(data->newargs, 0, obj);
      } else {
	data->newargs = obj;
      }
      Py_INCREF(data->newargs);
    }
    /* the destroy method, aka as the C++ delete method */
    data->destroy = PyObject_GetAttrString(data->klass, (char *)"__swig_destroy__");
    if (PyErr_Occurred()) {
      PyErr_Clear();
      data->destroy = 0;
    }
    if (data->destroy) {
      int flags;
      Py_INCREF(data->destroy);
      flags = PyCFunction_GET_FLAGS(data->destroy);
#ifdef METH_O
      data->delargs = !(flags & (METH_O));
#else
      data->delargs = 0;
#endif
    } else {
      data->delargs = 0;
    }
    data->implicitconv = 0;
    data->pytype = 0;
    return data;
  }
}

SWIGRUNTIME void 
SwigPyClientData_Del(SwigPyClientData *data) {
  Py_XDECREF(data->newraw);
  Py_XDECREF(data->newargs);
  Py_XDECREF(data->destroy);
}

/* =============== SwigPyObject =====================*/

typedef struct {
  PyObject_HEAD
  void *ptr;
  swig_type_info *ty;
  int own;
  PyObject *next;
#ifdef SWIGPYTHON_BUILTIN
  PyObject *dict;
#endif
} SwigPyObject;


#ifdef SWIGPYTHON_BUILTIN

SWIGRUNTIME PyObject *
SwigPyObject_get___dict__(PyObject *v, PyObject *SWIGUNUSEDPARM(args))
{
  SwigPyObject *sobj = (SwigPyObject *)v;

  if (!sobj->dict)
    sobj->dict = PyDict_New();

  Py_INCREF(sobj->dict);
  return sobj->dict;
}

#endif

SWIGRUNTIME PyObject *
SwigPyObject_long(SwigPyObject *v)
{
  return PyLong_FromVoidPtr(v->ptr);
}

SWIGRUNTIME PyObject *
SwigPyObject_format(const char* fmt, SwigPyObject *v)
{
  PyObject *res = NULL;
  PyObject *args = PyTuple_New(1);
  if (args) {
    if (PyTuple_SetItem(args, 0, SwigPyObject_long(v)) == 0) {
      PyObject *ofmt = SWIG_Python_str_FromChar(fmt);
      if (ofmt) {
#if PY_VERSION_HEX >= 0x03000000
	res = PyUnicode_Format(ofmt,args);
#else
	res = PyString_Format(ofmt,args);
#endif
	Py_DECREF(ofmt);
      }
      Py_DECREF(args);
    }
  }
  return res;
}

SWIGRUNTIME PyObject *
SwigPyObject_oct(SwigPyObject *v)
{
  return SwigPyObject_format("%o",v);
}

SWIGRUNTIME PyObject *
SwigPyObject_hex(SwigPyObject *v)
{
  return SwigPyObject_format("%x",v);
}

SWIGRUNTIME PyObject *
#ifdef METH_NOARGS
SwigPyObject_repr(SwigPyObject *v)
#else
SwigPyObject_repr(SwigPyObject *v, PyObject *args)
#endif
{
  const char *name = SWIG_TypePrettyName(v->ty);
  PyObject *repr = SWIG_Python_str_FromFormat("<Swig Object of type '%s' at %p>", (name ? name : "unknown"), (void *)v);
  if (v->next) {
# ifdef METH_NOARGS
    PyObject *nrep = SwigPyObject_repr((SwigPyObject *)v->next);
# else
    PyObject *nrep = SwigPyObject_repr((SwigPyObject *)v->next, args);
# endif
# if PY_VERSION_HEX >= 0x03000000
    PyObject *joined = PyUnicode_Concat(repr, nrep);
    Py_DecRef(repr);
    Py_DecRef(nrep);
    repr = joined;
# else
    PyString_ConcatAndDel(&repr,nrep);
# endif
  }
  return repr;  
}

SWIGRUNTIME int
SwigPyObject_compare(SwigPyObject *v, SwigPyObject *w)
{
  void *i = v->ptr;
  void *j = w->ptr;
  return (i < j) ? -1 : ((i > j) ? 1 : 0);
}

/* Added for Python 3.x, would it also be useful for Python 2.x? */
SWIGRUNTIME PyObject*
SwigPyObject_richcompare(SwigPyObject *v, SwigPyObject *w, int op)
{
  PyObject* res;
  if( op != Py_EQ && op != Py_NE ) {
    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
  }
  res = PyBool_FromLong( (SwigPyObject_compare(v, w)==0) == (op == Py_EQ) ? 1 : 0);
  return res;  
}


SWIGRUNTIME PyTypeObject* SwigPyObject_TypeOnce(void);

#ifdef SWIGPYTHON_BUILTIN
static swig_type_info *SwigPyObject_stype = 0;
SWIGRUNTIME PyTypeObject*
SwigPyObject_type(void) {
    SwigPyClientData *cd;
    assert(SwigPyObject_stype);
    cd = (SwigPyClientData*) SwigPyObject_stype->clientdata;
    assert(cd);
    assert(cd->pytype);
    return cd->pytype;
}
#else
SWIGRUNTIME PyTypeObject*
SwigPyObject_type(void) {
  static PyTypeObject *SWIG_STATIC_POINTER(type) = SwigPyObject_TypeOnce();
  return type;
}
#endif

SWIGRUNTIMEINLINE int
SwigPyObject_Check(PyObject *op) {
#ifdef SWIGPYTHON_BUILTIN
  PyTypeObject *target_tp = SwigPyObject_type();
  if (PyType_IsSubtype(op->ob_type, target_tp))
    return 1;
  return (strcmp(op->ob_type->tp_name, "SwigPyObject") == 0);
#else
  return (Py_TYPE(op) == SwigPyObject_type())
    || (strcmp(Py_TYPE(op)->tp_name,"SwigPyObject") == 0);
#endif
}

SWIGRUNTIME PyObject *
SwigPyObject_New(void *ptr, swig_type_info *ty, int own);

SWIGRUNTIME void
SwigPyObject_dealloc(PyObject *v)
{
  SwigPyObject *sobj = (SwigPyObject *) v;
  PyObject *next = sobj->next;
  if (sobj->own == SWIG_POINTER_OWN) {
    swig_type_info *ty = sobj->ty;
    SwigPyClientData *data = ty ? (SwigPyClientData *) ty->clientdata : 0;
    PyObject *destroy = data ? data->destroy : 0;
    if (destroy) {
      /* destroy is always a VARARGS method */
      PyObject *res;

      /* PyObject_CallFunction() has the potential to silently drop
         the active active exception.  In cases of unnamed temporary
         variable or where we just finished iterating over a generator
         StopIteration will be active right now, and this needs to
         remain true upon return from SwigPyObject_dealloc.  So save
         and restore. */
      
      PyObject *val = NULL, *type = NULL, *tb = NULL;
      PyErr_Fetch(&val, &type, &tb);

      if (data->delargs) {
        /* we need to create a temporary object to carry the destroy operation */
        PyObject *tmp = SwigPyObject_New(sobj->ptr, ty, 0);
        res = SWIG_Python_CallFunctor(destroy, tmp);
        Py_DECREF(tmp);
      } else {
        PyCFunction meth = PyCFunction_GET_FUNCTION(destroy);
        PyObject *mself = PyCFunction_GET_SELF(destroy);
        res = ((*meth)(mself, v));
      }
      if (!res)
        PyErr_WriteUnraisable(destroy);

      PyErr_Restore(val, type, tb);

      Py_XDECREF(res);
    } 
#if !defined(SWIG_PYTHON_SILENT_MEMLEAK)
    else {
      const char *name = SWIG_TypePrettyName(ty);
      printf("swig/python detected a memory leak of type '%s', no destructor found.\n", (name ? name : "unknown"));
    }
#endif
  } 
  Py_XDECREF(next);
  PyObject_DEL(v);
}

SWIGRUNTIME PyObject* 
SwigPyObject_append(PyObject* v, PyObject* next)
{
  SwigPyObject *sobj = (SwigPyObject *) v;
#ifndef METH_O
  PyObject *tmp = 0;
  if (!PyArg_ParseTuple(next,(char *)"O:append", &tmp)) return NULL;
  next = tmp;
#endif
  if (!SwigPyObject_Check(next)) {
    PyErr_SetString(PyExc_TypeError, "Attempt to append a non SwigPyObject");
    return NULL;
  }
  sobj->next = next;
  Py_INCREF(next);
  return SWIG_Py_Void();
}

SWIGRUNTIME PyObject* 
#ifdef METH_NOARGS
SwigPyObject_next(PyObject* v)
#else
SwigPyObject_next(PyObject* v, PyObject *SWIGUNUSEDPARM(args))
#endif
{
  SwigPyObject *sobj = (SwigPyObject *) v;
  if (sobj->next) {    
    Py_INCREF(sobj->next);
    return sobj->next;
  } else {
    return SWIG_Py_Void();
  }
}

SWIGINTERN PyObject*
#ifdef METH_NOARGS
SwigPyObject_disown(PyObject *v)
#else
SwigPyObject_disown(PyObject* v, PyObject *SWIGUNUSEDPARM(args))
#endif
{
  SwigPyObject *sobj = (SwigPyObject *)v;
  sobj->own = 0;
  return SWIG_Py_Void();
}

SWIGINTERN PyObject*
#ifdef METH_NOARGS
SwigPyObject_acquire(PyObject *v)
#else
SwigPyObject_acquire(PyObject* v, PyObject *SWIGUNUSEDPARM(args))
#endif
{
  SwigPyObject *sobj = (SwigPyObject *)v;
  sobj->own = SWIG_POINTER_OWN;
  return SWIG_Py_Void();
}

SWIGINTERN PyObject*
SwigPyObject_own(PyObject *v, PyObject *args)
{
  PyObject *val = 0;
#if (PY_VERSION_HEX < 0x02020000)
  if (!PyArg_ParseTuple(args,(char *)"|O:own",&val))
#elif (PY_VERSION_HEX < 0x02050000)
  if (!PyArg_UnpackTuple(args, (char *)"own", 0, 1, &val)) 
#else
  if (!PyArg_UnpackTuple(args, "own", 0, 1, &val)) 
#endif
    {
      return NULL;
    } 
  else
    {
      SwigPyObject *sobj = (SwigPyObject *)v;
      PyObject *obj = PyBool_FromLong(sobj->own);
      if (val) {
#ifdef METH_NOARGS
	if (PyObject_IsTrue(val)) {
	  SwigPyObject_acquire(v);
	} else {
	  SwigPyObject_disown(v);
	}
#else
	if (PyObject_IsTrue(val)) {
	  SwigPyObject_acquire(v,args);
	} else {
	  SwigPyObject_disown(v,args);
	}
#endif
      } 
      return obj;
    }
}

#ifdef METH_O
static PyMethodDef
swigobject_methods[] = {
  {(char *)"disown",  (PyCFunction)SwigPyObject_disown,  METH_NOARGS,  (char *)"releases ownership of the pointer"},
  {(char *)"acquire", (PyCFunction)SwigPyObject_acquire, METH_NOARGS,  (char *)"acquires ownership of the pointer"},
  {(char *)"own",     (PyCFunction)SwigPyObject_own,     METH_VARARGS, (char *)"returns/sets ownership of the pointer"},
  {(char *)"append",  (PyCFunction)SwigPyObject_append,  METH_O,       (char *)"appends another 'this' object"},
  {(char *)"next",    (PyCFunction)SwigPyObject_next,    METH_NOARGS,  (char *)"returns the next 'this' object"},
  {(char *)"__repr__",(PyCFunction)SwigPyObject_repr,    METH_NOARGS,  (char *)"returns object representation"},
  {0, 0, 0, 0}  
};
#else
static PyMethodDef
swigobject_methods[] = {
  {(char *)"disown",  (PyCFunction)SwigPyObject_disown,  METH_VARARGS,  (char *)"releases ownership of the pointer"},
  {(char *)"acquire", (PyCFunction)SwigPyObject_acquire, METH_VARARGS,  (char *)"acquires ownership of the pointer"},
  {(char *)"own",     (PyCFunction)SwigPyObject_own,     METH_VARARGS,  (char *)"returns/sets ownership of the pointer"},
  {(char *)"append",  (PyCFunction)SwigPyObject_append,  METH_VARARGS,  (char *)"appends another 'this' object"},
  {(char *)"next",    (PyCFunction)SwigPyObject_next,    METH_VARARGS,  (char *)"returns the next 'this' object"},
  {(char *)"__repr__",(PyCFunction)SwigPyObject_repr,   METH_VARARGS,  (char *)"returns object representation"},
  {0, 0, 0, 0}  
};
#endif

#if PY_VERSION_HEX < 0x02020000
SWIGINTERN PyObject *
SwigPyObject_getattr(SwigPyObject *sobj,char *name)
{
  return Py_FindMethod(swigobject_methods, (PyObject *)sobj, name);
}
#endif

SWIGRUNTIME PyTypeObject*
SwigPyObject_TypeOnce(void) {
  static char swigobject_doc[] = "Swig object carries a C/C++ instance pointer";

  static PyNumberMethods SwigPyObject_as_number = {
    (binaryfunc)0, /*nb_add*/
    (binaryfunc)0, /*nb_subtract*/
    (binaryfunc)0, /*nb_multiply*/
    /* nb_divide removed in Python 3 */
#if PY_VERSION_HEX < 0x03000000
    (binaryfunc)0, /*nb_divide*/
#endif
    (binaryfunc)0, /*nb_remainder*/
    (binaryfunc)0, /*nb_divmod*/
    (ternaryfunc)0,/*nb_power*/
    (unaryfunc)0,  /*nb_negative*/
    (unaryfunc)0,  /*nb_positive*/
    (unaryfunc)0,  /*nb_absolute*/
    (inquiry)0,    /*nb_nonzero*/
    0,		   /*nb_invert*/
    0,		   /*nb_lshift*/
    0,		   /*nb_rshift*/
    0,		   /*nb_and*/
    0,		   /*nb_xor*/
    0,		   /*nb_or*/
#if PY_VERSION_HEX < 0x03000000
    0,   /*nb_coerce*/
#endif
    (unaryfunc)SwigPyObject_long, /*nb_int*/
#if PY_VERSION_HEX < 0x03000000
    (unaryfunc)SwigPyObject_long, /*nb_long*/
#else
    0, /*nb_reserved*/
#endif
    (unaryfunc)0,                 /*nb_float*/
#if PY_VERSION_HEX < 0x03000000
    (unaryfunc)SwigPyObject_oct,  /*nb_oct*/
    (unaryfunc)SwigPyObject_hex,  /*nb_hex*/
#endif
#if PY_VERSION_HEX >= 0x03050000 /* 3.5 */
    0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 /* nb_inplace_add -> nb_inplace_matrix_multiply */
#elif PY_VERSION_HEX >= 0x03000000 /* 3.0 */
    0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 /* nb_inplace_add -> nb_index, nb_inplace_divide removed */
#elif PY_VERSION_HEX >= 0x02050000 /* 2.5.0 */
    0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 /* nb_inplace_add -> nb_index */
#elif PY_VERSION_HEX >= 0x02020000 /* 2.2.0 */
    0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 /* nb_inplace_add -> nb_inplace_true_divide */
#elif PY_VERSION_HEX >= 0x02000000 /* 2.0.0 */
    0,0,0,0,0,0,0,0,0,0,0 /* nb_inplace_add -> nb_inplace_or */
#endif
  };

  static PyTypeObject swigpyobject_type;
  static int type_init = 0;
  if (!type_init) {
    const PyTypeObject tmp = {
#if PY_VERSION_HEX >= 0x03000000
      PyVarObject_HEAD_INIT(NULL, 0)
#else
      PyObject_HEAD_INIT(NULL)
      0,                                    /* ob_size */
#endif
      (char *)"SwigPyObject",               /* tp_name */
      sizeof(SwigPyObject),                 /* tp_basicsize */
      0,                                    /* tp_itemsize */
      (destructor)SwigPyObject_dealloc,     /* tp_dealloc */
      0,                                    /* tp_print */
#if PY_VERSION_HEX < 0x02020000
      (getattrfunc)SwigPyObject_getattr,    /* tp_getattr */
#else
      (getattrfunc)0,                       /* tp_getattr */
#endif
      (setattrfunc)0,                       /* tp_setattr */
#if PY_VERSION_HEX >= 0x03000000
      0, /* tp_reserved in 3.0.1, tp_compare in 3.0.0 but not used */
#else
      (cmpfunc)SwigPyObject_compare,        /* tp_compare */
#endif
      (reprfunc)SwigPyObject_repr,          /* tp_repr */
      &SwigPyObject_as_number,              /* tp_as_number */
      0,                                    /* tp_as_sequence */
      0,                                    /* tp_as_mapping */
      (hashfunc)0,                          /* tp_hash */
      (ternaryfunc)0,                       /* tp_call */
      0,                                    /* tp_str */
      PyObject_GenericGetAttr,              /* tp_getattro */
      0,                                    /* tp_setattro */
      0,                                    /* tp_as_buffer */
      Py_TPFLAGS_DEFAULT,                   /* tp_flags */
      swigobject_doc,                       /* tp_doc */
      0,                                    /* tp_traverse */
      0,                                    /* tp_clear */
      (richcmpfunc)SwigPyObject_richcompare,/* tp_richcompare */
      0,                                    /* tp_weaklistoffset */
#if PY_VERSION_HEX >= 0x02020000
      0,                                    /* tp_iter */
      0,                                    /* tp_iternext */
      swigobject_methods,                   /* tp_methods */
      0,                                    /* tp_members */
      0,                                    /* tp_getset */
      0,                                    /* tp_base */
      0,                                    /* tp_dict */
      0,                                    /* tp_descr_get */
      0,                                    /* tp_descr_set */
      0,                                    /* tp_dictoffset */
      0,                                    /* tp_init */
      0,                                    /* tp_alloc */
      0,                                    /* tp_new */
      0,                                    /* tp_free */
      0,                                    /* tp_is_gc */
      0,                                    /* tp_bases */
      0,                                    /* tp_mro */
      0,                                    /* tp_cache */
      0,                                    /* tp_subclasses */
      0,                                    /* tp_weaklist */
#endif
#if PY_VERSION_HEX >= 0x02030000
      0,                                    /* tp_del */
#endif
#if PY_VERSION_HEX >= 0x02060000
      0,                                    /* tp_version_tag */
#endif
#if PY_VERSION_HEX >= 0x03040000
      0,                                    /* tp_finalize */
#endif
#ifdef COUNT_ALLOCS
      0,                                    /* tp_allocs */
      0,                                    /* tp_frees */
      0,                                    /* tp_maxalloc */
#if PY_VERSION_HEX >= 0x02050000
      0,                                    /* tp_prev */
#endif
      0                                     /* tp_next */
#endif
    };
    swigpyobject_type = tmp;
    type_init = 1;
#if PY_VERSION_HEX < 0x02020000
    swigpyobject_type.ob_type = &PyType_Type;
#else
    if (PyType_Ready(&swigpyobject_type) < 0)
      return NULL;
#endif
  }
  return &swigpyobject_type;
}

SWIGRUNTIME PyObject *
SwigPyObject_New(void *ptr, swig_type_info *ty, int own)
{
  SwigPyObject *sobj = PyObject_NEW(SwigPyObject, SwigPyObject_type());
  if (sobj) {
    sobj->ptr  = ptr;
    sobj->ty   = ty;
    sobj->own  = own;
    sobj->next = 0;
  }
  return (PyObject *)sobj;
}

/* -----------------------------------------------------------------------------
 * Implements a simple Swig Packed type, and use it instead of string
 * ----------------------------------------------------------------------------- */

typedef struct {
  PyObject_HEAD
  void *pack;
  swig_type_info *ty;
  size_t size;
} SwigPyPacked;

SWIGRUNTIME int
SwigPyPacked_print(SwigPyPacked *v, FILE *fp, int SWIGUNUSEDPARM(flags))
{
  char result[SWIG_BUFFER_SIZE];
  fputs("<Swig Packed ", fp); 
  if (SWIG_PackDataName(result, v->pack, v->size, 0, sizeof(result))) {
    fputs("at ", fp); 
    fputs(result, fp); 
  }
  fputs(v->ty->name,fp); 
  fputs(">", fp);
  return 0; 
}
  
SWIGRUNTIME PyObject *
SwigPyPacked_repr(SwigPyPacked *v)
{
  char result[SWIG_BUFFER_SIZE];
  if (SWIG_PackDataName(result, v->pack, v->size, 0, sizeof(result))) {
    return SWIG_Python_str_FromFormat("<Swig Packed at %s%s>", result, v->ty->name);
  } else {
    return SWIG_Python_str_FromFormat("<Swig Packed %s>", v->ty->name);
  }  
}

SWIGRUNTIME PyObject *
SwigPyPacked_str(SwigPyPacked *v)
{
  char result[SWIG_BUFFER_SIZE];
  if (SWIG_PackDataName(result, v->pack, v->size, 0, sizeof(result))){
    return SWIG_Python_str_FromFormat("%s%s", result, v->ty->name);
  } else {
    return SWIG_Python_str_FromChar(v->ty->name);
  }  
}

SWIGRUNTIME int
SwigPyPacked_compare(SwigPyPacked *v, SwigPyPacked *w)
{
  size_t i = v->size;
  size_t j = w->size;
  int s = (i < j) ? -1 : ((i > j) ? 1 : 0);
  return s ? s : strncmp((char *)v->pack, (char *)w->pack, 2*v->size);
}

SWIGRUNTIME PyTypeObject* SwigPyPacked_TypeOnce(void);

SWIGRUNTIME PyTypeObject*
SwigPyPacked_type(void) {
  static PyTypeObject *SWIG_STATIC_POINTER(type) = SwigPyPacked_TypeOnce();
  return type;
}

SWIGRUNTIMEINLINE int
SwigPyPacked_Check(PyObject *op) {
  return ((op)->ob_type == SwigPyPacked_TypeOnce()) 
    || (strcmp((op)->ob_type->tp_name,"SwigPyPacked") == 0);
}

SWIGRUNTIME void
SwigPyPacked_dealloc(PyObject *v)
{
  if (SwigPyPacked_Check(v)) {
    SwigPyPacked *sobj = (SwigPyPacked *) v;
    free(sobj->pack);
  }
  PyObject_DEL(v);
}

SWIGRUNTIME PyTypeObject*
SwigPyPacked_TypeOnce(void) {
  static char swigpacked_doc[] = "Swig object carries a C/C++ instance pointer";
  static PyTypeObject swigpypacked_type;
  static int type_init = 0;
  if (!type_init) {
    const PyTypeObject tmp = {
#if PY_VERSION_HEX>=0x03000000
      PyVarObject_HEAD_INIT(NULL, 0)
#else
      PyObject_HEAD_INIT(NULL)
      0,                                    /* ob_size */
#endif
      (char *)"SwigPyPacked",               /* tp_name */
      sizeof(SwigPyPacked),                 /* tp_basicsize */
      0,                                    /* tp_itemsize */
      (destructor)SwigPyPacked_dealloc,     /* tp_dealloc */
      (printfunc)SwigPyPacked_print,        /* tp_print */
      (getattrfunc)0,                       /* tp_getattr */
      (setattrfunc)0,                       /* tp_setattr */
#if PY_VERSION_HEX>=0x03000000
      0, /* tp_reserved in 3.0.1 */
#else
      (cmpfunc)SwigPyPacked_compare,        /* tp_compare */
#endif
      (reprfunc)SwigPyPacked_repr,          /* tp_repr */
      0,                                    /* tp_as_number */
      0,                                    /* tp_as_sequence */
      0,                                    /* tp_as_mapping */
      (hashfunc)0,                          /* tp_hash */
      (ternaryfunc)0,                       /* tp_call */
      (reprfunc)SwigPyPacked_str,           /* tp_str */
      PyObject_GenericGetAttr,              /* tp_getattro */
      0,                                    /* tp_setattro */
      0,                                    /* tp_as_buffer */
      Py_TPFLAGS_DEFAULT,                   /* tp_flags */
      swigpacked_doc,                       /* tp_doc */
      0,                                    /* tp_traverse */
      0,                                    /* tp_clear */
      0,                                    /* tp_richcompare */
      0,                                    /* tp_weaklistoffset */
#if PY_VERSION_HEX >= 0x02020000
      0,                                    /* tp_iter */
      0,                                    /* tp_iternext */
      0,                                    /* tp_methods */
      0,                                    /* tp_members */
      0,                                    /* tp_getset */
      0,                                    /* tp_base */
      0,                                    /* tp_dict */
      0,                                    /* tp_descr_get */
      0,                                    /* tp_descr_set */
      0,                                    /* tp_dictoffset */
      0,                                    /* tp_init */
      0,                                    /* tp_alloc */
      0,                                    /* tp_new */
      0,                                    /* tp_free */
      0,                                    /* tp_is_gc */
      0,                                    /* tp_bases */
      0,                                    /* tp_mro */
      0,                                    /* tp_cache */
      0,                                    /* tp_subclasses */
      0,                                    /* tp_weaklist */
#endif
#if PY_VERSION_HEX >= 0x02030000
      0,                                    /* tp_del */
#endif
#if PY_VERSION_HEX >= 0x02060000
      0,                                    /* tp_version_tag */
#endif
#if PY_VERSION_HEX >= 0x03040000
      0,                                    /* tp_finalize */
#endif
#ifdef COUNT_ALLOCS
      0,                                    /* tp_allocs */
      0,                                    /* tp_frees */
      0,                                    /* tp_maxalloc */
#if PY_VERSION_HEX >= 0x02050000
      0,                                    /* tp_prev */
#endif
      0                                     /* tp_next */
#endif
    };
    swigpypacked_type = tmp;
    type_init = 1;
#if PY_VERSION_HEX < 0x02020000
    swigpypacked_type.ob_type = &PyType_Type;
#else
    if (PyType_Ready(&swigpypacked_type) < 0)
      return NULL;
#endif
  }
  return &swigpypacked_type;
}

SWIGRUNTIME PyObject *
SwigPyPacked_New(void *ptr, size_t size, swig_type_info *ty)
{
  SwigPyPacked *sobj = PyObject_NEW(SwigPyPacked, SwigPyPacked_type());
  if (sobj) {
    void *pack = malloc(size);
    if (pack) {
      memcpy(pack, ptr, size);
      sobj->pack = pack;
      sobj->ty   = ty;
      sobj->size = size;
    } else {
      PyObject_DEL((PyObject *) sobj);
      sobj = 0;
    }
  }
  return (PyObject *) sobj;
}

SWIGRUNTIME swig_type_info *
SwigPyPacked_UnpackData(PyObject *obj, void *ptr, size_t size)
{
  if (SwigPyPacked_Check(obj)) {
    SwigPyPacked *sobj = (SwigPyPacked *)obj;
    if (sobj->size != size) return 0;
    memcpy(ptr, sobj->pack, size);
    return sobj->ty;
  } else {
    return 0;
  }
}

/* -----------------------------------------------------------------------------
 * pointers/data manipulation
 * ----------------------------------------------------------------------------- */

SWIGRUNTIMEINLINE PyObject *
_SWIG_This(void)
{
    return SWIG_Python_str_FromChar("this");
}

static PyObject *swig_this = NULL;

SWIGRUNTIME PyObject *
SWIG_This(void)
{
  if (swig_this == NULL)
    swig_this = _SWIG_This();
  return swig_this;
}

/* #define SWIG_PYTHON_SLOW_GETSET_THIS */

/* TODO: I don't know how to implement the fast getset in Python 3 right now */
#if PY_VERSION_HEX>=0x03000000
#define SWIG_PYTHON_SLOW_GETSET_THIS 
#endif

SWIGRUNTIME SwigPyObject *
SWIG_Python_GetSwigThis(PyObject *pyobj) 
{
  PyObject *obj;

  if (SwigPyObject_Check(pyobj))
    return (SwigPyObject *) pyobj;

#ifdef SWIGPYTHON_BUILTIN
  (void)obj;
# ifdef PyWeakref_CheckProxy
  if (PyWeakref_CheckProxy(pyobj)) {
    pyobj = PyWeakref_GET_OBJECT(pyobj);
    if (pyobj && SwigPyObject_Check(pyobj))
      return (SwigPyObject*) pyobj;
  }
# endif
  return NULL;
#else

  obj = 0;

#if (!defined(SWIG_PYTHON_SLOW_GETSET_THIS) && (PY_VERSION_HEX >= 0x02030000))
  if (PyInstance_Check(pyobj)) {
    obj = _PyInstance_Lookup(pyobj, SWIG_This());      
  } else {
    PyObject **dictptr = _PyObject_GetDictPtr(pyobj);
    if (dictptr != NULL) {
      PyObject *dict = *dictptr;
      obj = dict ? PyDict_GetItem(dict, SWIG_This()) : 0;
    } else {
#ifdef PyWeakref_CheckProxy
      if (PyWeakref_CheckProxy(pyobj)) {
	PyObject *wobj = PyWeakref_GET_OBJECT(pyobj);
	return wobj ? SWIG_Python_GetSwigThis(wobj) : 0;
      }
#endif
      obj = PyObject_GetAttr(pyobj,SWIG_This());
      if (obj) {
	Py_DECREF(obj);
      } else {
	if (PyErr_Occurred()) PyErr_Clear();
	return 0;
      }
    }
  }
#else
  obj = PyObject_GetAttr(pyobj,SWIG_This());
  if (obj) {
    Py_DECREF(obj);
  } else {
    if (PyErr_Occurred()) PyErr_Clear();
    return 0;
  }
#endif
  if (obj && !SwigPyObject_Check(obj)) {
    /* a PyObject is called 'this', try to get the 'real this'
       SwigPyObject from it */ 
    return SWIG_Python_GetSwigThis(obj);
  }
  return (SwigPyObject *)obj;
#endif
}

/* Acquire a pointer value */

SWIGRUNTIME int
SWIG_Python_AcquirePtr(PyObject *obj, int own) {
  if (own == SWIG_POINTER_OWN) {
    SwigPyObject *sobj = SWIG_Python_GetSwigThis(obj);
    if (sobj) {
      int oldown = sobj->own;
      sobj->own = own;
      return oldown;
    }
  }
  return 0;
}

/* Convert a pointer value */

SWIGRUNTIME int
SWIG_Python_ConvertPtrAndOwn(PyObject *obj, void **ptr, swig_type_info *ty, int flags, int *own) {
  int res;
  SwigPyObject *sobj;
  int implicit_conv = (flags & SWIG_POINTER_IMPLICIT_CONV) != 0;

  if (!obj)
    return SWIG_ERROR;
  if (obj == Py_None && !implicit_conv) {
    if (ptr)
      *ptr = 0;
    return SWIG_OK;
  }

  res = SWIG_ERROR;

  sobj = SWIG_Python_GetSwigThis(obj);
  if (own)
    *own = 0;
  while (sobj) {
    void *vptr = sobj->ptr;
    if (ty) {
      swig_type_info *to = sobj->ty;
      if (to == ty) {
        /* no type cast needed */
        if (ptr) *ptr = vptr;
        break;
      } else {
        swig_cast_info *tc = SWIG_TypeCheck(to->name,ty);
        if (!tc) {
          sobj = (SwigPyObject *)sobj->next;
        } else {
          if (ptr) {
            int newmemory = 0;
            *ptr = SWIG_TypeCast(tc,vptr,&newmemory);
            if (newmemory == SWIG_CAST_NEW_MEMORY) {
              assert(own); /* badly formed typemap which will lead to a memory leak - it must set and use own to delete *ptr */
              if (own)
                *own = *own | SWIG_CAST_NEW_MEMORY;
            }
          }
          break;
        }
      }
    } else {
      if (ptr) *ptr = vptr;
      break;
    }
  }
  if (sobj) {
    if (own)
      *own = *own | sobj->own;
    if (flags & SWIG_POINTER_DISOWN) {
      sobj->own = 0;
    }
    res = SWIG_OK;
  } else {
    if (implicit_conv) {
      SwigPyClientData *data = ty ? (SwigPyClientData *) ty->clientdata : 0;
      if (data && !data->implicitconv) {
        PyObject *klass = data->klass;
        if (klass) {
          PyObject *impconv;
          data->implicitconv = 1; /* avoid recursion and call 'explicit' constructors*/
          impconv = SWIG_Python_CallFunctor(klass, obj);
          data->implicitconv = 0;
          if (PyErr_Occurred()) {
            PyErr_Clear();
            impconv = 0;
          }
          if (impconv) {
            SwigPyObject *iobj = SWIG_Python_GetSwigThis(impconv);
            if (iobj) {
              void *vptr;
              res = SWIG_Python_ConvertPtrAndOwn((PyObject*)iobj, &vptr, ty, 0, 0);
              if (SWIG_IsOK(res)) {
                if (ptr) {
                  *ptr = vptr;
                  /* transfer the ownership to 'ptr' */
                  iobj->own = 0;
                  res = SWIG_AddCast(res);
                  res = SWIG_AddNewMask(res);
                } else {
                  res = SWIG_AddCast(res);		    
                }
              }
            }
            Py_DECREF(impconv);
          }
        }
      }
    }
    if (!SWIG_IsOK(res) && obj == Py_None) {
      if (ptr)
        *ptr = 0;
      if (PyErr_Occurred())
        PyErr_Clear();
      res = SWIG_OK;
    }
  }
  return res;
}

/* Convert a function ptr value */

SWIGRUNTIME int
SWIG_Python_ConvertFunctionPtr(PyObject *obj, void **ptr, swig_type_info *ty) {
  if (!PyCFunction_Check(obj)) {
    return SWIG_ConvertPtr(obj, ptr, ty, 0);
  } else {
    void *vptr = 0;
    
    /* here we get the method pointer for callbacks */
    const char *doc = (((PyCFunctionObject *)obj) -> m_ml -> ml_doc);
    const char *desc = doc ? strstr(doc, "swig_ptr: ") : 0;
    if (desc)
      desc = ty ? SWIG_UnpackVoidPtr(desc + 10, &vptr, ty->name) : 0;
    if (!desc) 
      return SWIG_ERROR;
    if (ty) {
      swig_cast_info *tc = SWIG_TypeCheck(desc,ty);
      if (tc) {
        int newmemory = 0;
        *ptr = SWIG_TypeCast(tc,vptr,&newmemory);
        assert(!newmemory); /* newmemory handling not yet implemented */
      } else {
        return SWIG_ERROR;
      }
    } else {
      *ptr = vptr;
    }
    return SWIG_OK;
  }
}

/* Convert a packed value value */

SWIGRUNTIME int
SWIG_Python_ConvertPacked(PyObject *obj, void *ptr, size_t sz, swig_type_info *ty) {
  swig_type_info *to = SwigPyPacked_UnpackData(obj, ptr, sz);
  if (!to) return SWIG_ERROR;
  if (ty) {
    if (to != ty) {
      /* check type cast? */
      swig_cast_info *tc = SWIG_TypeCheck(to->name,ty);
      if (!tc) return SWIG_ERROR;
    }
  }
  return SWIG_OK;
}  

/* -----------------------------------------------------------------------------
 * Create a new pointer object
 * ----------------------------------------------------------------------------- */

/*
  Create a new instance object, without calling __init__, and set the
  'this' attribute.
*/

SWIGRUNTIME PyObject* 
SWIG_Python_NewShadowInstance(SwigPyClientData *data, PyObject *swig_this)
{
#if (PY_VERSION_HEX >= 0x02020000)
  PyObject *inst = 0;
  PyObject *newraw = data->newraw;
  if (newraw) {
    inst = PyObject_Call(newraw, data->newargs, NULL);
    if (inst) {
#if !defined(SWIG_PYTHON_SLOW_GETSET_THIS)
      PyObject **dictptr = _PyObject_GetDictPtr(inst);
      if (dictptr != NULL) {
	PyObject *dict = *dictptr;
	if (dict == NULL) {
	  dict = PyDict_New();
	  *dictptr = dict;
	  PyDict_SetItem(dict, SWIG_This(), swig_this);
	}
      }
#else
      PyObject *key = SWIG_This();
      PyObject_SetAttr(inst, key, swig_this);
#endif
    }
  } else {
#if PY_VERSION_HEX >= 0x03000000
    inst = ((PyTypeObject*) data->newargs)->tp_new((PyTypeObject*) data->newargs, Py_None, Py_None);
    if (inst) {
      PyObject_SetAttr(inst, SWIG_This(), swig_this);
      Py_TYPE(inst)->tp_flags &= ~Py_TPFLAGS_VALID_VERSION_TAG;
    }
#else
    PyObject *dict = PyDict_New();
    if (dict) {
      PyDict_SetItem(dict, SWIG_This(), swig_this);
      inst = PyInstance_NewRaw(data->newargs, dict);
      Py_DECREF(dict);
    }
#endif
  }
  return inst;
#else
#if (PY_VERSION_HEX >= 0x02010000)
  PyObject *inst = 0;
  PyObject *dict = PyDict_New();
  if (dict) {
    PyDict_SetItem(dict, SWIG_This(), swig_this);
    inst = PyInstance_NewRaw(data->newargs, dict);
    Py_DECREF(dict);
  }
  return (PyObject *) inst;
#else
  PyInstanceObject *inst = PyObject_NEW(PyInstanceObject, &PyInstance_Type);
  if (inst == NULL) {
    return NULL;
  }
  inst->in_class = (PyClassObject *)data->newargs;
  Py_INCREF(inst->in_class);
  inst->in_dict = PyDict_New();
  if (inst->in_dict == NULL) {
    Py_DECREF(inst);
    return NULL;
  }
#ifdef Py_TPFLAGS_HAVE_WEAKREFS
  inst->in_weakreflist = NULL;
#endif
#ifdef Py_TPFLAGS_GC
  PyObject_GC_Init(inst);
#endif
  PyDict_SetItem(inst->in_dict, SWIG_This(), swig_this);
  return (PyObject *) inst;
#endif
#endif
}

SWIGRUNTIME void
SWIG_Python_SetSwigThis(PyObject *inst, PyObject *swig_this)
{
 PyObject *dict;
#if (PY_VERSION_HEX >= 0x02020000) && !defined(SWIG_PYTHON_SLOW_GETSET_THIS)
 PyObject **dictptr = _PyObject_GetDictPtr(inst);
 if (dictptr != NULL) {
   dict = *dictptr;
   if (dict == NULL) {
     dict = PyDict_New();
     *dictptr = dict;
   }
   PyDict_SetItem(dict, SWIG_This(), swig_this);
   return;
 }
#endif
 dict = PyObject_GetAttrString(inst, (char*)"__dict__");
 PyDict_SetItem(dict, SWIG_This(), swig_this);
 Py_DECREF(dict);
} 


SWIGINTERN PyObject *
SWIG_Python_InitShadowInstance(PyObject *args) {
  PyObject *obj[2];
  if (!SWIG_Python_UnpackTuple(args, "swiginit", 2, 2, obj)) {
    return NULL;
  } else {
    SwigPyObject *sthis = SWIG_Python_GetSwigThis(obj[0]);
    if (sthis) {
      SwigPyObject_append((PyObject*) sthis, obj[1]);
    } else {
      SWIG_Python_SetSwigThis(obj[0], obj[1]);
    }
    return SWIG_Py_Void();
  }
}

/* Create a new pointer object */

SWIGRUNTIME PyObject *
SWIG_Python_NewPointerObj(PyObject *self, void *ptr, swig_type_info *type, int flags) {
  SwigPyClientData *clientdata;
  PyObject * robj;
  int own;

  if (!ptr)
    return SWIG_Py_Void();

  clientdata = type ? (SwigPyClientData *)(type->clientdata) : 0;
  own = (flags & SWIG_POINTER_OWN) ? SWIG_POINTER_OWN : 0;
  if (clientdata && clientdata->pytype) {
    SwigPyObject *newobj;
    if (flags & SWIG_BUILTIN_TP_INIT) {
      newobj = (SwigPyObject*) self;
      if (newobj->ptr) {
        PyObject *next_self = clientdata->pytype->tp_alloc(clientdata->pytype, 0);
        while (newobj->next)
	  newobj = (SwigPyObject *) newobj->next;
        newobj->next = next_self;
        newobj = (SwigPyObject *)next_self;
#ifdef SWIGPYTHON_BUILTIN
        newobj->dict = 0;
#endif
      }
    } else {
      newobj = PyObject_New(SwigPyObject, clientdata->pytype);
#ifdef SWIGPYTHON_BUILTIN
      newobj->dict = 0;
#endif
    }
    if (newobj) {
      newobj->ptr = ptr;
      newobj->ty = type;
      newobj->own = own;
      newobj->next = 0;
      return (PyObject*) newobj;
    }
    return SWIG_Py_Void();
  }

  assert(!(flags & SWIG_BUILTIN_TP_INIT));

  robj = SwigPyObject_New(ptr, type, own);
  if (robj && clientdata && !(flags & SWIG_POINTER_NOSHADOW)) {
    PyObject *inst = SWIG_Python_NewShadowInstance(clientdata, robj);
    Py_DECREF(robj);
    robj = inst;
  }
  return robj;
}

/* Create a new packed object */

SWIGRUNTIMEINLINE PyObject *
SWIG_Python_NewPackedObj(void *ptr, size_t sz, swig_type_info *type) {
  return ptr ? SwigPyPacked_New((void *) ptr, sz, type) : SWIG_Py_Void();
}

/* -----------------------------------------------------------------------------*
 *  Get type list 
 * -----------------------------------------------------------------------------*/

#ifdef SWIG_LINK_RUNTIME
void *SWIG_ReturnGlobalTypeList(void *);
#endif

SWIGRUNTIME swig_module_info *
SWIG_Python_GetModule(void *SWIGUNUSEDPARM(clientdata)) {
  static void *type_pointer = (void *)0;
  /* first check if module already created */
  if (!type_pointer) {
#ifdef SWIG_LINK_RUNTIME
    type_pointer = SWIG_ReturnGlobalTypeList((void *)0);
#else
# ifdef SWIGPY_USE_CAPSULE
    type_pointer = PyCapsule_Import(SWIGPY_CAPSULE_NAME, 0);
# else
    type_pointer = PyCObject_Import((char*)"swig_runtime_data" SWIG_RUNTIME_VERSION,
				    (char*)"type_pointer" SWIG_TYPE_TABLE_NAME);
# endif
    if (PyErr_Occurred()) {
      PyErr_Clear();
      type_pointer = (void *)0;
    }
#endif
  }
  return (swig_module_info *) type_pointer;
}

#if PY_MAJOR_VERSION < 2
/* PyModule_AddObject function was introduced in Python 2.0.  The following function
   is copied out of Python/modsupport.c in python version 2.3.4 */
SWIGINTERN int
PyModule_AddObject(PyObject *m, char *name, PyObject *o)
{
  PyObject *dict;
  if (!PyModule_Check(m)) {
    PyErr_SetString(PyExc_TypeError, "PyModule_AddObject() needs module as first arg");
    return SWIG_ERROR;
  }
  if (!o) {
    PyErr_SetString(PyExc_TypeError, "PyModule_AddObject() needs non-NULL value");
    return SWIG_ERROR;
  }
  
  dict = PyModule_GetDict(m);
  if (dict == NULL) {
    /* Internal error -- modules must have a dict! */
    PyErr_Format(PyExc_SystemError, "module '%s' has no __dict__",
		 PyModule_GetName(m));
    return SWIG_ERROR;
  }
  if (PyDict_SetItemString(dict, name, o))
    return SWIG_ERROR;
  Py_DECREF(o);
  return SWIG_OK;
}
#endif

SWIGRUNTIME void
#ifdef SWIGPY_USE_CAPSULE
SWIG_Python_DestroyModule(PyObject *obj)
#else
SWIG_Python_DestroyModule(void *vptr)
#endif
{
#ifdef SWIGPY_USE_CAPSULE
  swig_module_info *swig_module = (swig_module_info *) PyCapsule_GetPointer(obj, SWIGPY_CAPSULE_NAME);
#else
  swig_module_info *swig_module = (swig_module_info *) vptr;
#endif
  swig_type_info **types = swig_module->types;
  size_t i;
  for (i =0; i < swig_module->size; ++i) {
    swig_type_info *ty = types[i];
    if (ty->owndata) {
      SwigPyClientData *data = (SwigPyClientData *) ty->clientdata;
      if (data) SwigPyClientData_Del(data);
    }
  }
  Py_DECREF(SWIG_This());
  swig_this = NULL;
}

SWIGRUNTIME void
SWIG_Python_SetModule(swig_module_info *swig_module) {
#if PY_VERSION_HEX >= 0x03000000
 /* Add a dummy module object into sys.modules */
  PyObject *module = PyImport_AddModule((char*)"swig_runtime_data" SWIG_RUNTIME_VERSION);
#else
  static PyMethodDef swig_empty_runtime_method_table[] = { {NULL, NULL, 0, NULL} }; /* Sentinel */
  PyObject *module = Py_InitModule((char*)"swig_runtime_data" SWIG_RUNTIME_VERSION, swig_empty_runtime_method_table);
#endif
#ifdef SWIGPY_USE_CAPSULE
  PyObject *pointer = PyCapsule_New((void *) swig_module, SWIGPY_CAPSULE_NAME, SWIG_Python_DestroyModule);
  if (pointer && module) {
    PyModule_AddObject(module, (char*)"type_pointer_capsule" SWIG_TYPE_TABLE_NAME, pointer);
  } else {
    Py_XDECREF(pointer);
  }
#else
  PyObject *pointer = PyCObject_FromVoidPtr((void *) swig_module, SWIG_Python_DestroyModule);
  if (pointer && module) {
    PyModule_AddObject(module, (char*)"type_pointer" SWIG_TYPE_TABLE_NAME, pointer);
  } else {
    Py_XDECREF(pointer);
  }
#endif
}

/* The python cached type query */
SWIGRUNTIME PyObject *
SWIG_Python_TypeCache(void) {
  static PyObject *SWIG_STATIC_POINTER(cache) = PyDict_New();
  return cache;
}

SWIGRUNTIME swig_type_info *
SWIG_Python_TypeQuery(const char *type)
{
  PyObject *cache = SWIG_Python_TypeCache();
  PyObject *key = SWIG_Python_str_FromChar(type); 
  PyObject *obj = PyDict_GetItem(cache, key);
  swig_type_info *descriptor;
  if (obj) {
#ifdef SWIGPY_USE_CAPSULE
    descriptor = (swig_type_info *) PyCapsule_GetPointer(obj, NULL);
#else
    descriptor = (swig_type_info *) PyCObject_AsVoidPtr(obj);
#endif
  } else {
    swig_module_info *swig_module = SWIG_GetModule(0);
    descriptor = SWIG_TypeQueryModule(swig_module, swig_module, type);
    if (descriptor) {
#ifdef SWIGPY_USE_CAPSULE
      obj = PyCapsule_New((void*) descriptor, NULL, NULL);
#else
      obj = PyCObject_FromVoidPtr(descriptor, NULL);
#endif
      PyDict_SetItem(cache, key, obj);
      Py_DECREF(obj);
    }
  }
  Py_DECREF(key);
  return descriptor;
}

/* 
   For backward compatibility only
*/
#define SWIG_POINTER_EXCEPTION  0
#define SWIG_arg_fail(arg)      SWIG_Python_ArgFail(arg)
#define SWIG_MustGetPtr(p, type, argnum, flags)  SWIG_Python_MustGetPtr(p, type, argnum, flags)

SWIGRUNTIME int
SWIG_Python_AddErrMesg(const char* mesg, int infront)
{  
  if (PyErr_Occurred()) {
    PyObject *type = 0;
    PyObject *value = 0;
    PyObject *traceback = 0;
    PyErr_Fetch(&type, &value, &traceback);
    if (value) {
      char *tmp;
      PyObject *old_str = PyObject_Str(value);
      Py_XINCREF(type);
      PyErr_Clear();
      if (infront) {
	PyErr_Format(type, "%s %s", mesg, tmp = SWIG_Python_str_AsChar(old_str));
      } else {
	PyErr_Format(type, "%s %s", tmp = SWIG_Python_str_AsChar(old_str), mesg);
      }
      SWIG_Python_str_DelForPy3(tmp);
      Py_DECREF(old_str);
    }
    return 1;
  } else {
    return 0;
  }
}
  
SWIGRUNTIME int
SWIG_Python_ArgFail(int argnum)
{
  if (PyErr_Occurred()) {
    /* add information about failing argument */
    char mesg[256];
    PyOS_snprintf(mesg, sizeof(mesg), "argument number %d:", argnum);
    return SWIG_Python_AddErrMesg(mesg, 1);
  } else {
    return 0;
  }
}

SWIGRUNTIMEINLINE const char *
SwigPyObject_GetDesc(PyObject *self)
{
  SwigPyObject *v = (SwigPyObject *)self;
  swig_type_info *ty = v ? v->ty : 0;
  return ty ? ty->str : "";
}

SWIGRUNTIME void
SWIG_Python_TypeError(const char *type, PyObject *obj)
{
  if (type) {
#if defined(SWIG_COBJECT_TYPES)
    if (obj && SwigPyObject_Check(obj)) {
      const char *otype = (const char *) SwigPyObject_GetDesc(obj);
      if (otype) {
	PyErr_Format(PyExc_TypeError, "a '%s' is expected, 'SwigPyObject(%s)' is received",
		     type, otype);
	return;
      }
    } else 
#endif      
    {
      const char *otype = (obj ? obj->ob_type->tp_name : 0); 
      if (otype) {
	PyObject *str = PyObject_Str(obj);
	const char *cstr = str ? SWIG_Python_str_AsChar(str) : 0;
	if (cstr) {
	  PyErr_Format(PyExc_TypeError, "a '%s' is expected, '%s(%s)' is received",
		       type, otype, cstr);
          SWIG_Python_str_DelForPy3(cstr);
	} else {
	  PyErr_Format(PyExc_TypeError, "a '%s' is expected, '%s' is received",
		       type, otype);
	}
	Py_XDECREF(str);
	return;
      }
    }   
    PyErr_Format(PyExc_TypeError, "a '%s' is expected", type);
  } else {
    PyErr_Format(PyExc_TypeError, "unexpected type is received");
  }
}


/* Convert a pointer value, signal an exception on a type mismatch */
SWIGRUNTIME void *
SWIG_Python_MustGetPtr(PyObject *obj, swig_type_info *ty, int SWIGUNUSEDPARM(argnum), int flags) {
  void *result;
  if (SWIG_Python_ConvertPtr(obj, &result, ty, flags) == -1) {
    PyErr_Clear();
#if SWIG_POINTER_EXCEPTION
    if (flags) {
      SWIG_Python_TypeError(SWIG_TypePrettyName(ty), obj);
      SWIG_Python_ArgFail(argnum);
    }
#endif
  }
  return result;
}

#ifdef SWIGPYTHON_BUILTIN
SWIGRUNTIME int
SWIG_Python_NonDynamicSetAttr(PyObject *obj, PyObject *name, PyObject *value) {
  PyTypeObject *tp = obj->ob_type;
  PyObject *descr;
  PyObject *encoded_name;
  descrsetfunc f;
  int res = -1;

# ifdef Py_USING_UNICODE
  if (PyString_Check(name)) {
    name = PyUnicode_Decode(PyString_AsString(name), PyString_Size(name), NULL, NULL);
    if (!name)
      return -1;
  } else if (!PyUnicode_Check(name))
# else
  if (!PyString_Check(name))
# endif
  {
    PyErr_Format(PyExc_TypeError, "attribute name must be string, not '%.200s'", name->ob_type->tp_name);
    return -1;
  } else {
    Py_INCREF(name);
  }

  if (!tp->tp_dict) {
    if (PyType_Ready(tp) < 0)
      goto done;
  }

  descr = _PyType_Lookup(tp, name);
  f = NULL;
  if (descr != NULL)
    f = descr->ob_type->tp_descr_set;
  if (!f) {
    if (PyString_Check(name)) {
      encoded_name = name;
      Py_INCREF(name);
    } else {
      encoded_name = PyUnicode_AsUTF8String(name);
    }
    PyErr_Format(PyExc_AttributeError, "'%.100s' object has no attribute '%.200s'", tp->tp_name, PyString_AsString(encoded_name));
    Py_DECREF(encoded_name);
  } else {
    res = f(descr, obj, value);
  }
  
  done:
  Py_DECREF(name);
  return res;
}
#endif


#ifdef __cplusplus
}
#endif



#define SWIG_exception_fail(code, msg) do { SWIG_Error(code, msg); SWIG_fail; } while(0) 

#define SWIG_contract_assert(expr, msg) if (!(expr)) { SWIG_Error(SWIG_RuntimeError, msg); SWIG_fail; } else 



  #define SWIG_exception(code, msg) do { SWIG_Error(code, msg); SWIG_fail;; } while(0) 


/* -------- TYPES TABLE (BEGIN) -------- */

#define SWIGTYPE_p_char swig_types[0]
#define SWIGTYPE_p_double swig_types[1]
#define SWIGTYPE_p_int swig_types[2]
#define SWIGTYPE_p_p_char swig_types[3]
#define SWIGTYPE_p_p_double swig_types[4]
#define SWIGTYPE_p_p_int swig_types[5]
static swig_type_info *swig_types[7];
static swig_module_info swig_module = {swig_types, 6, 0, 0, 0, 0};
#define SWIG_TypeQuery(name) SWIG_TypeQueryModule(&swig_module, &swig_module, name)
#define SWIG_MangledTypeQuery(name) SWIG_MangledTypeQueryModule(&swig_module, &swig_module, name)

/* -------- TYPES TABLE (END) -------- */

#if (PY_VERSION_HEX <= 0x02000000)
# if !defined(SWIG_PYTHON_CLASSIC)
#  error "This python version requires swig to be run with the '-classic' option"
# endif
#endif

/*-----------------------------------------------
              @(target):= _lmgc90.so
  ------------------------------------------------*/
#if PY_VERSION_HEX >= 0x03000000
#  define SWIG_init    PyInit__lmgc90

#else
#  define SWIG_init    init_lmgc90

#endif
#define SWIG_name    "_lmgc90"

#define SWIGVERSION 0x030012 
#define SWIG_VERSION SWIGVERSION


#define SWIG_as_voidptr(a) const_cast< void * >(static_cast< const void * >(a)) 
#define SWIG_as_voidptrptr(a) ((void)SWIG_as_voidptr(*a),reinterpret_cast< void** >(a)) 


#include <stdexcept>


namespace swig {
  class SwigPtr_PyObject {
  protected:
    PyObject *_obj;

  public:
    SwigPtr_PyObject() :_obj(0)
    {
    }

    SwigPtr_PyObject(const SwigPtr_PyObject& item) : _obj(item._obj)
    {
      SWIG_PYTHON_THREAD_BEGIN_BLOCK;
      Py_XINCREF(_obj);      
      SWIG_PYTHON_THREAD_END_BLOCK;
    }
    
    SwigPtr_PyObject(PyObject *obj, bool initial_ref = true) :_obj(obj)
    {
      if (initial_ref) {
        SWIG_PYTHON_THREAD_BEGIN_BLOCK;
        Py_XINCREF(_obj);
        SWIG_PYTHON_THREAD_END_BLOCK;
      }
    }
    
    SwigPtr_PyObject & operator=(const SwigPtr_PyObject& item) 
    {
      SWIG_PYTHON_THREAD_BEGIN_BLOCK;
      Py_XINCREF(item._obj);
      Py_XDECREF(_obj);
      _obj = item._obj;
      SWIG_PYTHON_THREAD_END_BLOCK;
      return *this;      
    }
    
    ~SwigPtr_PyObject() 
    {
      SWIG_PYTHON_THREAD_BEGIN_BLOCK;
      Py_XDECREF(_obj);
      SWIG_PYTHON_THREAD_END_BLOCK;
    }
    
    operator PyObject *() const
    {
      return _obj;
    }

    PyObject *operator->() const
    {
      return _obj;
    }
  };
}


namespace swig {
  struct SwigVar_PyObject : SwigPtr_PyObject {
    SwigVar_PyObject(PyObject* obj = 0) : SwigPtr_PyObject(obj, false) { }
    
    SwigVar_PyObject & operator = (PyObject* obj)
    {
      Py_XDECREF(_obj);
      _obj = obj;
      return *this;      
    }
  };
}


#define SWIG_FILE_WITH_INIT

#if PY_MAJOR_VERSION >= 3
#define PyString_FromStringAndSize PyUnicode_FromStringAndSize
#endif

#include "rigid_2D/wrap_DISKx.h"
#include "rigid_2D/wrap_JONCx.h"
#include "rigid_2D/wrap_POLYG.h"
#include "rigid_2D/wrap_PT2Dx.h"
#include "rigid_2D/wrap_RBDY2.h"
#include "rigid_2D/wrap_xKSID.h"

#include "rigid_3D/wrap_CYLND.h"
#include "rigid_3D/wrap_DNLYC.h"
#include "rigid_3D/wrap_PLANx.h"
#include "rigid_3D/wrap_POLYR.h"
#include "rigid_3D/wrap_PT3Dx.h"
#include "rigid_3D/wrap_RBDY3.h"
#include "rigid_3D/wrap_SPHER.h"

#include "mbs/wrap_mbs2D.h"
#include "mbs/wrap_mbs3D.h"

#include "mailx/wrap_ALpxx.h"
#include "mailx/wrap_ASpxx.h"
#include "mailx/wrap_CLxxx.h"
#include "mailx/wrap_CSxxx.h"
#include "mailx/wrap_DISKL.h"
#include "mailx/wrap_MAILx.h"
#include "mailx/wrap_PT2DL.h"
#include "mailx/wrap_mecaMAILx.h"
#include "mailx/wrap_therMAILx.h"
#include "mailx/wrap_poroMAILx.h"
#include "mailx/wrap_multiMAILx.h"

#include "shared/wrap_ExternalModels.h"
#include "shared/wrap_bulk_behav.h"
#include "shared/wrap_models.h"
#include "shared/wrap_overall.h"
#include "shared/wrap_tact_behav.h"
#include "shared/wrap_timer.h"
#include "shared/wrap_utilities.h"
#include "shared/wrap_a_EF.h"
#include "shared/wrap_meca_polygon.h"
#include "shared/wrap_parameters.h"

#include "contact_2D/wrap_CLALp.h"
#include "contact_2D/wrap_CLJCx.h"
#include "contact_2D/wrap_DKALp.h"
#include "contact_2D/wrap_DKDKL.h"
#include "contact_2D/wrap_DKDKx.h"
#include "contact_2D/wrap_DKJCx.h"
#include "contact_2D/wrap_DKKDx.h"
#include "contact_2D/wrap_DKPLx.h"
#include "contact_2D/wrap_P2P2L.h"
#include "contact_2D/wrap_PLALp.h"
#include "contact_2D/wrap_PLJCx.h"
#include "contact_2D/wrap_PLPLx.h"
#include "contact_2D/wrap_PTPT2.h"
#include "contact_2D/wrap_inter_handler_2D.h"

#include "contact_3D/wrap_CDCDx.h"
#include "contact_3D/wrap_CDPLx.h"
#include "contact_3D/wrap_CSASp.h"
#include "contact_3D/wrap_CSPRx.h"
#include "contact_3D/wrap_PRASp.h"
#include "contact_3D/wrap_PRPLx.h"
#include "contact_3D/wrap_PRPRx.h"
#include "contact_3D/wrap_PTPT3.h"
#include "contact_3D/wrap_SPCDx.h"
#include "contact_3D/wrap_SPDCx.h"
#include "contact_3D/wrap_SPPLx.h"
#include "contact_3D/wrap_SPPRx.h"  
#include "contact_3D/wrap_SPSPx.h"
#include "contact_3D/wrap_inter_handler_3D.h"

#include "kernel/wrap_cpg.h"
#include "kernel/wrap_cpg_3D.h"
#include "kernel/wrap_mp_solver.h"
#include "kernel/wrap_mp_solver_3D.h"
#include "kernel/wrap_nlgs.h"
#include "kernel/wrap_nlgs_3D.h"

#include "kernel/wrap_global_thermal_solver.h"

#ifdef WITH_SICONOS
#include "kernel/wrap_SiconosNumerics.h"
#endif

#ifdef WITH_MPI
#include "kernel/wrap_DDM_2D.h"
#include "kernel/wrap_DDM_3D.h"
#include "kernel/wrap_DDM_ExternalFEM.h"
#endif

#include "post/wrap_postpro.h"
#include "post/wrap_postpro_3D.h"

#include "user/wrap_user.h"

#include "pre_tools/wrap_cut2D.h"
#include "pre_tools/wrap_deposit2D.h"
#include "pre_tools/wrap_deposit3D.h"
#include "pre_tools/wrap_mesh2D.h"
#include "pre_tools/wrap_surface_T3.h"

// HDF5 include
#ifdef WITH_HDF5
#include "io/wrap_io_hdf5_hl.h"
#endif



#ifndef SWIG_FILE_WITH_INIT
#define NO_IMPORT_ARRAY
#endif
#include "stdio.h"
#define NPY_NO_DEPRECATED_API NPY_1_7_API_VERSION
#include <numpy/arrayobject.h>


#include <complex> 


#include "/Users/petras/brg/2_code/lmgc90_installation/src/Core/contribs/exception.h"


  extern "C" void free_ptrFortranString(char * array, int length);


void wrap_tsetInternal_2D(int inter_id, int icdan, int index, double value) {
   inter_handler_2D_tsetInternal(inter_id, icdan, NULL, 0, index, value);
}


#include <limits.h>
#if !defined(SWIG_NO_LLONG_MAX)
# if !defined(LLONG_MAX) && defined(__GNUC__) && defined (__LONG_LONG_MAX__)
#   define LLONG_MAX __LONG_LONG_MAX__
#   define LLONG_MIN (-LLONG_MAX - 1LL)
#   define ULLONG_MAX (LLONG_MAX * 2ULL + 1ULL)
# endif
#endif


SWIGINTERN int
SWIG_AsVal_double (PyObject *obj, double *val)
{
  int res = SWIG_TypeError;
  if (PyFloat_Check(obj)) {
    if (val) *val = PyFloat_AsDouble(obj);
    return SWIG_OK;
#if PY_VERSION_HEX < 0x03000000
  } else if (PyInt_Check(obj)) {
    if (val) *val = (double) PyInt_AsLong(obj);
    return SWIG_OK;
#endif
  } else if (PyLong_Check(obj)) {
    double v = PyLong_AsDouble(obj);
    if (!PyErr_Occurred()) {
      if (val) *val = v;
      return SWIG_OK;
    } else {
      PyErr_Clear();
    }
  }
#ifdef SWIG_PYTHON_CAST_MODE
  {
    int dispatch = 0;
    double d = PyFloat_AsDouble(obj);
    if (!PyErr_Occurred()) {
      if (val) *val = d;
      return SWIG_AddCast(SWIG_OK);
    } else {
      PyErr_Clear();
    }
    if (!dispatch) {
      long v = PyLong_AsLong(obj);
      if (!PyErr_Occurred()) {
	if (val) *val = v;
	return SWIG_AddCast(SWIG_AddCast(SWIG_OK));
      } else {
	PyErr_Clear();
      }
    }
  }
#endif
  return res;
}


#include <float.h>


#include <math.h>


SWIGINTERNINLINE int
SWIG_CanCastAsInteger(double *d, double min, double max) {
  double x = *d;
  if ((min <= x && x <= max)) {
   double fx = floor(x);
   double cx = ceil(x);
   double rd =  ((x - fx) < 0.5) ? fx : cx; /* simple rint */
   if ((errno == EDOM) || (errno == ERANGE)) {
     errno = 0;
   } else {
     double summ, reps, diff;
     if (rd < x) {
       diff = x - rd;
     } else if (rd > x) {
       diff = rd - x;
     } else {
       return 1;
     }
     summ = rd + x;
     reps = diff/summ;
     if (reps < 8*DBL_EPSILON) {
       *d = rd;
       return 1;
     }
   }
  }
  return 0;
}


SWIGINTERN int
SWIG_AsVal_long (PyObject *obj, long* val)
{
#if PY_VERSION_HEX < 0x03000000
  if (PyInt_Check(obj)) {
    if (val) *val = PyInt_AsLong(obj);
    return SWIG_OK;
  } else
#endif
  if (PyLong_Check(obj)) {
    long v = PyLong_AsLong(obj);
    if (!PyErr_Occurred()) {
      if (val) *val = v;
      return SWIG_OK;
    } else {
      PyErr_Clear();
      return SWIG_OverflowError;
    }
  }
#ifdef SWIG_PYTHON_CAST_MODE
  {
    int dispatch = 0;
    long v = PyInt_AsLong(obj);
    if (!PyErr_Occurred()) {
      if (val) *val = v;
      return SWIG_AddCast(SWIG_OK);
    } else {
      PyErr_Clear();
    }
    if (!dispatch) {
      double d;
      int res = SWIG_AddCast(SWIG_AsVal_double (obj,&d));
      if (SWIG_IsOK(res) && SWIG_CanCastAsInteger(&d, LONG_MIN, LONG_MAX)) {
	if (val) *val = (long)(d);
	return res;
      }
    }
  }
#endif
  return SWIG_TypeError;
}


SWIGINTERN int
SWIG_AsVal_int (PyObject * obj, int *val)
{
  long v;
  int res = SWIG_AsVal_long (obj, &v);
  if (SWIG_IsOK(res)) {
    if ((v < INT_MIN || v > INT_MAX)) {
      return SWIG_OverflowError;
    } else {
      if (val) *val = static_cast< int >(v);
    }
  }  
  return res;
}


void wrap_tsetInternal_3D(int inter_id, int icdan, int index, double value) {
   inter_handler_3D_tsetInternal(inter_id, icdan, NULL, 0, index, value);
}


SWIGINTERNINLINE PyObject*
  SWIG_From_int  (int value)
{
  return PyInt_FromLong((long) value);
}


#if NPY_API_VERSION < NPY_1_7_API_VERSION
#define NPY_ARRAY_DEFAULT NPY_DEFAULT
#define NPY_ARRAY_FARRAY  NPY_FARRAY
#define NPY_FORTRANORDER  NPY_FORTRAN
#endif


/* Macros to extract array attributes.
 */
#if NPY_API_VERSION < NPY_1_7_API_VERSION
#define is_array(a)            ((a) && PyArray_Check((PyArrayObject*)a))
#define array_type(a)          (int)(PyArray_TYPE((PyArrayObject*)a))
#define array_numdims(a)       (((PyArrayObject*)a)->nd)
#define array_dimensions(a)    (((PyArrayObject*)a)->dimensions)
#define array_size(a,i)        (((PyArrayObject*)a)->dimensions[i])
#define array_strides(a)       (((PyArrayObject*)a)->strides)
#define array_stride(a,i)      (((PyArrayObject*)a)->strides[i])
#define array_data(a)          (((PyArrayObject*)a)->data)
#define array_descr(a)         (((PyArrayObject*)a)->descr)
#define array_flags(a)         (((PyArrayObject*)a)->flags)
#define array_clearflags(a,f)  (((PyArrayObject*)a)->flags) &= ~f
#define array_enableflags(a,f) (((PyArrayObject*)a)->flags) = f
#define array_is_fortran(a)    (PyArray_ISFORTRAN((PyArrayObject*)a))
#else
#define is_array(a)            ((a) && PyArray_Check(a))
#define array_type(a)          PyArray_TYPE((PyArrayObject*)a)
#define array_numdims(a)       PyArray_NDIM((PyArrayObject*)a)
#define array_dimensions(a)    PyArray_DIMS((PyArrayObject*)a)
#define array_strides(a)       PyArray_STRIDES((PyArrayObject*)a)
#define array_stride(a,i)      PyArray_STRIDE((PyArrayObject*)a,i)
#define array_size(a,i)        PyArray_DIM((PyArrayObject*)a,i)
#define array_data(a)          PyArray_DATA((PyArrayObject*)a)
#define array_descr(a)         PyArray_DESCR((PyArrayObject*)a)
#define array_flags(a)         PyArray_FLAGS((PyArrayObject*)a)
#define array_enableflags(a,f) PyArray_ENABLEFLAGS((PyArrayObject*)a,f)
#define array_clearflags(a,f)  PyArray_CLEARFLAGS((PyArrayObject*)a,f)
#define array_is_fortran(a)    (PyArray_IS_F_CONTIGUOUS((PyArrayObject*)a))
#endif
#define array_is_contiguous(a) (PyArray_ISCONTIGUOUS((PyArrayObject*)a))
#define array_is_native(a)     (PyArray_ISNOTSWAPPED((PyArrayObject*)a))


  /* Test whether a python object is contiguous.  If array is
   * contiguous, return 1.  Otherwise, set the python error string and
   * return 0.
   */
  int require_contiguous(PyArrayObject* ary)
  {
    int contiguous = 1;
    if (!array_is_contiguous(ary))
    {
      PyErr_SetString(PyExc_TypeError,
                      "Array must be contiguous.  A non-contiguous array was given");
      contiguous = 0;
    }
    return contiguous;
  }

  /* Test whether a python object is (C_ or F_) contiguous.  If array is
   * contiguous, return 1.  Otherwise, set the python error string and
   * return 0.
   */
  int require_c_or_f_contiguous(PyArrayObject* ary)
  {
    int contiguous = 1;
    if (!(array_is_contiguous(ary) || array_is_fortran(ary)))
    {
      PyErr_SetString(PyExc_TypeError,
                      "Array must be contiguous (C_ or F_).  A non-contiguous array was given");
      contiguous = 0;
    }
    return contiguous;
  }

  /* Require that a numpy array is not byte-swapped.  If the array is
   * not byte-swapped, return 1.  Otherwise, set the python error string
   * and return 0.
   */
  int require_native(PyArrayObject* ary)
  {
    int native = 1;
    if (!array_is_native(ary))
    {
      PyErr_SetString(PyExc_TypeError,
                      "Array must have native byteorder.  "
                      "A byte-swapped array was given");
      native = 0;
    }
    return native;
  }

  /* Require the given PyArrayObject to have a specified number of
   * dimensions.  If the array has the specified number of dimensions,
   * return 1.  Otherwise, set the python error string and return 0.
   */
  int require_dimensions(PyArrayObject* ary,
                         int            exact_dimensions)
  {
    int success = 1;
    if (array_numdims(ary) != exact_dimensions)
    {
      PyErr_Format(PyExc_TypeError,
                   "Array must have %d dimensions.  Given array has %d dimensions",
                   exact_dimensions,
                   array_numdims(ary));
      success = 0;
    }
    return success;
  }

  /* Require the given PyArrayObject to have one of a list of specified
   * number of dimensions.  If the array has one of the specified number
   * of dimensions, return 1.  Otherwise, set the python error string
   * and return 0.
   */
  int require_dimensions_n(PyArrayObject* ary,
                           int*           exact_dimensions,
                           int            n)
  {
    int success = 0;
    int i;
    char dims_str[255] = "";
    char s[255];
    for (i = 0; i < n && !success; i++)
    {
      if (array_numdims(ary) == exact_dimensions[i])
      {
        success = 1;
      }
    }
    if (!success)
    {
      for (i = 0; i < n-1; i++)
      {
        sprintf(s, "%d, ", exact_dimensions[i]);
        strcat(dims_str,s);
      }
      sprintf(s, " or %d", exact_dimensions[n-1]);
      strcat(dims_str,s);
      PyErr_Format(PyExc_TypeError,
                   "Array must have %s dimensions.  Given array has %d dimensions",
                   dims_str,
                   array_numdims(ary));
    }
    return success;
  }

  /* Require the given PyArrayObject to have a specified shape.  If the
   * array has the specified shape, return 1.  Otherwise, set the python
   * error string and return 0.
   */
  int require_size(PyArrayObject* ary,
                   npy_intp*      size,
                   int            n)
  {
    int i;
    int success = 1;
    size_t len;
    char desired_dims[255] = "[";
    char s[255];
    char actual_dims[255] = "[";
    for(i=0; i < n;i++)
    {
      if (size[i] != -1 &&  size[i] != array_size(ary,i))
      {
        success = 0;
      }
    }
    if (!success)
    {
      for (i = 0; i < n; i++)
      {
        if (size[i] == -1)
        {
          sprintf(s, "*,");
        }
        else
        {
          sprintf(s, "%ld,", (long int)size[i]);
        }
        strcat(desired_dims,s);
      }
      len = strlen(desired_dims);
      desired_dims[len-1] = ']';
      for (i = 0; i < n; i++)
      {
        sprintf(s, "%ld,", (long int)array_size(ary,i));
        strcat(actual_dims,s);
      }
      len = strlen(actual_dims);
      actual_dims[len-1] = ']';
      PyErr_Format(PyExc_TypeError,
                   "Array must have shape of %s.  Given array has shape of %s",
                   desired_dims,
                   actual_dims);
    }
    return success;
  }

  /* Require the given PyArrayObject to be Fortran ordered.  If the
   * the PyArrayObject is already Fortran ordered, do nothing.  Else,
   * set the Fortran ordering flag and recompute the strides.
   */
  int require_fortran(PyArrayObject* ary)
  {
    int success = 1;
    int nd = array_numdims(ary);
    int i;
    npy_intp * strides = array_strides(ary);
    if (array_is_fortran(ary)) return success;
    int n_non_one = 0;
    /* Set the Fortran ordered flag */
    const npy_intp *dims = array_dimensions(ary);
    for (i=0; i < nd; ++i)
      n_non_one += (dims[i] != 1) ? 1 : 0;
    if (n_non_one > 1)
      array_clearflags(ary,NPY_ARRAY_CARRAY);
    array_enableflags(ary,NPY_ARRAY_FARRAY);
    /* Recompute the strides */
    strides[0] = strides[nd-1];
    for (i=1; i < nd; ++i)
      strides[i] = strides[i-1] * array_size(ary,i-1);
    return success;
  }


  extern "C" {
    void free_ptrFortranDouble1(void * array, int length);
    void free_ptrFortranDouble2(void * array, int nrow, int ncol);
    void free_ptrFortranInt1(void * array, int length);
    void free_ptrFortranInt2(void * array, int nrow, int ncol);
  }
  struct  FortranMatPtr {
    void *mem;
    int mtype;
    size_t size0, size1;
  };
  static void fortran_mat_ptr_free(struct FortranMatPtr *ptr) {
    switch(ptr->mtype) {
      case NPY_DOUBLE :
        if (ptr->size1 == 0)
          free_ptrFortranDouble1(ptr->mem, ptr->size0);
        else
          free_ptrFortranDouble2(ptr->mem, ptr->size0, ptr->size1);
        break;
      case NPY_INT:
        if (ptr->size1 == 0)
          free_ptrFortranInt1(ptr->mem, ptr->size0);
        else
          free_ptrFortranInt2(ptr->mem, ptr->size0, ptr->size1);
        break;
      default :
        fprintf(stderr, "ERROR : cannot free fortran memory of type %i.\n", ptr->mtype);
    }
    free(ptr);
  }
  #if PY_MAJOR_VERSION==2 && PY_MINOR_VERSION==6
  static void delete_fortran_capsule_array(void *capsule)
  {
    fortran_mat_ptr_free((struct FortranMatPtr*)(capsule));
  }
  #else
  static void delete_fortran_capsule_array(PyObject *capsule)
  {
    fortran_mat_ptr_free((struct FortranMatPtr*)PyCapsule_GetPointer(capsule, NULL));
  }
  #endif
  static void attach_fortran_memory_to_numpy_array(PyArrayObject *array, void *mem, int mtype, size_t size0, size_t size1){
    struct FortranMatPtr *fptr = (struct FortranMatPtr*) malloc(sizeof(struct FortranMatPtr));
    fptr->mem = mem;
    fptr->mtype = mtype;
    fptr->size0 = size0;
    fptr->size1 = size1;
    #if PY_MAJOR_VERSION==2 && PY_MINOR_VERSION < 7
    PyObject *capsule = PyCObject_FromVoidPtr(fptr, delete_fortran_capsule_array);
    #else
    PyObject *capsule = PyCapsule_New(fptr, NULL, delete_fortran_capsule_array);
    #endif
    #if NPY_API_VERSION < 0x00000007
    PyArray_BASE(array) = capsule;
    #else
    PyArray_SetBaseObject(array, capsule);
    #endif
  }


  #define SWIG_From_double   PyFloat_FromDouble 


  /* Given a PyObject, return a string describing its type.
   */
  const char* pytype_string(PyObject* py_obj)
  {
    if (py_obj == NULL          ) return "C NULL value";
    if (py_obj == Py_None       ) return "Python None" ;
    if (PyCallable_Check(py_obj)) return "callable"    ;
    if (PyBytes_Check(   py_obj)) return "string"      ;
    if (PyLong_Check(    py_obj)) return "int"         ;
    if (PyFloat_Check(   py_obj)) return "float"       ;
    if (PyDict_Check(    py_obj)) return "dict"        ;
    if (PyList_Check(    py_obj)) return "list"        ;
    if (PyTuple_Check(   py_obj)) return "tuple"       ;

    return "unknown type";
  }

  /* Given a NumPy typecode, return a string describing the type.
   */
  const char* typecode_string(int typecode)
  {
    static const char* type_names[25] = {"bool",
                                         "byte",
                                         "unsigned byte",
                                         "short",
                                         "unsigned short",
                                         "int",
                                         "unsigned int",
                                         "long",
                                         "unsigned long",
                                         "long long",
                                         "unsigned long long",
                                         "float",
                                         "double",
                                         "long double",
                                         "complex float",
                                         "complex double",
                                         "complex long double",
                                         "object",
                                         "string",
                                         "unicode",
                                         "void",
                                         "ntypes",
                                         "notype",
                                         "char",
                                         "unknown"};
    return typecode < 24 ? type_names[typecode] : type_names[24];
  }

  /* Make sure input has correct numpy type.  This now just calls
     PyArray_EquivTypenums().
   */
  int type_match(int actual_type,
                 int desired_type)
  {
    return PyArray_EquivTypenums(actual_type, desired_type);
  }

void free_cap(PyObject * cap)
  {
    void* array = (void*) PyCapsule_GetPointer(cap,SWIGPY_CAPSULE_NAME);
    if (array != NULL) free(array);
  }




  /* Given a PyObject pointer, cast it to a PyArrayObject pointer if
   * legal.  If not, set the python error string appropriately and
   * return NULL.
   */
  PyArrayObject* obj_to_array_no_conversion(PyObject* input,
                                            int        typecode)
  {
    PyArrayObject* ary = NULL;
    if (is_array(input) && (typecode == NPY_NOTYPE ||
                            PyArray_EquivTypenums(array_type(input), typecode)))
    {
      ary = (PyArrayObject*) input;
    }
    else if is_array(input)
    {
      const char* desired_type = typecode_string(typecode);
      const char* actual_type  = typecode_string(array_type(input));
      PyErr_Format(PyExc_TypeError,
                   "Array of type '%s' required.  Array of type '%s' given",
                   desired_type, actual_type);
      ary = NULL;
    }
    else
    {
      const char* desired_type = typecode_string(typecode);
      const char* actual_type  = pytype_string(input);
      PyErr_Format(PyExc_TypeError,
                   "Array of type '%s' required.  A '%s' was given",
                   desired_type,
                   actual_type);
      ary = NULL;
    }
    return ary;
  }

  /* Convert the given PyObject to a NumPy array with the given
   * typecode.  On success, return a valid PyArrayObject* with the
   * correct type.  On failure, the python error string will be set and
   * the routine returns NULL.
   */
  PyArrayObject* obj_to_array_allow_conversion(PyObject* input,
                                               int       typecode,
                                               int*      is_new_object)
  {
    PyArrayObject* ary = NULL;
    PyObject*      py_obj;
    if (is_array(input) && (typecode == NPY_NOTYPE ||
                            PyArray_EquivTypenums(array_type(input),typecode)))
    {
      ary = (PyArrayObject*) input;
      *is_new_object = 0;
    }
    else
    {
      py_obj = PyArray_FROMANY(input, typecode, 0, 0, NPY_ARRAY_DEFAULT);
      /* If NULL, PyArray_FromObject will have set python error value.*/
      ary = (PyArrayObject*) py_obj;
      *is_new_object = 1;
    }
    return ary;
  }

  /* Given a PyArrayObject, check to see if it is contiguous.  If so,
   * return the input pointer and flag it as not a new object.  If it is
   * not contiguous, create a new PyArrayObject using the original data,
   * flag it as a new object and return the pointer.
   */
  PyArrayObject* make_contiguous(PyArrayObject* ary,
                                 int*           is_new_object,
                                 int            min_dims,
                                 int            max_dims)
  {
    PyArrayObject* result;
    if (array_is_contiguous(ary))
    {
      result = ary;
      *is_new_object = 0;
    }
    else
    {
      result = (PyArrayObject*) PyArray_ContiguousFromObject((PyObject*)ary,
                                                              array_type(ary),
                                                              min_dims,
                                                              max_dims);
      *is_new_object = 1;
    }
    return result;
  }

  /* Given a PyArrayObject, check to see if it is Fortran-contiguous.
   * If so, return the input pointer, but do not flag it as not a new
   * object.  If it is not Fortran-contiguous, create a new
   * PyArrayObject using the original data, flag it as a new object
   * and return the pointer.
   */
  PyArrayObject* make_fortran(PyArrayObject* ary,
                              int*           is_new_object)
  {
    PyArrayObject* result;
    if (array_is_fortran(ary))
    {
      result = ary;
      *is_new_object = 0;
    }
    else
    {
      Py_INCREF(array_descr(ary));
      result = (PyArrayObject*) PyArray_FromArray(ary,
                                                  array_descr(ary),
#if NPY_API_VERSION < NPY_1_7_API_VERSION
                                                  NPY_FORTRANORDER);
#else
                                                  NPY_ARRAY_F_CONTIGUOUS);
#endif
      *is_new_object = 1;
    }
    return result;
  }

  /* Convert a given PyObject to a contiguous PyArrayObject of the
   * specified type.  If the input object is not a contiguous
   * PyArrayObject, a new one will be created and the new object flag
   * will be set.
   */
  PyArrayObject* obj_to_array_contiguous_allow_conversion(PyObject* input,
                                                          int       typecode,
                                                          int*      is_new_object)
  {
    int is_new1 = 0;
    int is_new2 = 0;
    PyArrayObject* ary2;
    PyArrayObject* ary1 = obj_to_array_allow_conversion(input,
                                                        typecode,
                                                        &is_new1);
    if (ary1)
    {
      ary2 = make_contiguous(ary1, &is_new2, 0, 0);
      if ( is_new1 && is_new2)
      {
        Py_DECREF(ary1);
      }
      ary1 = ary2;
    }
    *is_new_object = is_new1 || is_new2;
    return ary1;
  }

  /* Convert a given PyObject to a Fortran-ordered PyArrayObject of the
   * specified type.  If the input object is not a Fortran-ordered
   * PyArrayObject, a new one will be created and the new object flag
   * will be set.
   */
  PyArrayObject* obj_to_array_fortran_allow_conversion(PyObject* input,
                                                       int       typecode,
                                                       int*      is_new_object)
  {
    int is_new1 = 0;
    int is_new2 = 0;
    PyArrayObject* ary2;
    PyArrayObject* ary1 = obj_to_array_allow_conversion(input,
                                                        typecode,
                                                        &is_new1);
    if (ary1)
    {
      ary2 = make_fortran(ary1, &is_new2);
      if (is_new1 && is_new2)
      {
        Py_DECREF(ary1);
      }
      ary1 = ary2;
    }
    *is_new_object = is_new1 || is_new2;
    return ary1;
  }




SWIGINTERN swig_type_info*
SWIG_pchar_descriptor(void)
{
  static int init = 0;
  static swig_type_info* info = 0;
  if (!init) {
    info = SWIG_TypeQuery("_p_char");
    init = 1;
  }
  return info;
}


SWIGINTERN int
SWIG_AsCharPtrAndSize(PyObject *obj, char** cptr, size_t* psize, int *alloc)
{
#if PY_VERSION_HEX>=0x03000000
#if defined(SWIG_PYTHON_STRICT_BYTE_CHAR)
  if (PyBytes_Check(obj))
#else
  if (PyUnicode_Check(obj))
#endif
#else  
  if (PyString_Check(obj))
#endif
  {
    char *cstr; Py_ssize_t len;
#if PY_VERSION_HEX>=0x03000000
#if !defined(SWIG_PYTHON_STRICT_BYTE_CHAR)
    if (!alloc && cptr) {
        /* We can't allow converting without allocation, since the internal
           representation of string in Python 3 is UCS-2/UCS-4 but we require
           a UTF-8 representation.
           TODO(bhy) More detailed explanation */
        return SWIG_RuntimeError;
    }
    obj = PyUnicode_AsUTF8String(obj);
    if(alloc) *alloc = SWIG_NEWOBJ;
#endif
    PyBytes_AsStringAndSize(obj, &cstr, &len);
#else
    PyString_AsStringAndSize(obj, &cstr, &len);
#endif
    if (cptr) {
      if (alloc) {
	/* 
	   In python the user should not be able to modify the inner
	   string representation. To warranty that, if you define
	   SWIG_PYTHON_SAFE_CSTRINGS, a new/copy of the python string
	   buffer is always returned.

	   The default behavior is just to return the pointer value,
	   so, be careful.
	*/ 
#if defined(SWIG_PYTHON_SAFE_CSTRINGS)
	if (*alloc != SWIG_OLDOBJ) 
#else
	if (*alloc == SWIG_NEWOBJ) 
#endif
	{
	  *cptr = reinterpret_cast< char* >(memcpy(new char[len + 1], cstr, sizeof(char)*(len + 1)));
	  *alloc = SWIG_NEWOBJ;
	} else {
	  *cptr = cstr;
	  *alloc = SWIG_OLDOBJ;
	}
      } else {
#if PY_VERSION_HEX>=0x03000000
#if defined(SWIG_PYTHON_STRICT_BYTE_CHAR)
	*cptr = PyBytes_AsString(obj);
#else
	assert(0); /* Should never reach here with Unicode strings in Python 3 */
#endif
#else
	*cptr = SWIG_Python_str_AsChar(obj);
#endif
      }
    }
    if (psize) *psize = len + 1;
#if PY_VERSION_HEX>=0x03000000 && !defined(SWIG_PYTHON_STRICT_BYTE_CHAR)
    Py_XDECREF(obj);
#endif
    return SWIG_OK;
  } else {
#if defined(SWIG_PYTHON_2_UNICODE)
#if defined(SWIG_PYTHON_STRICT_BYTE_CHAR)
#error "Cannot use both SWIG_PYTHON_2_UNICODE and SWIG_PYTHON_STRICT_BYTE_CHAR at once"
#endif
#if PY_VERSION_HEX<0x03000000
    if (PyUnicode_Check(obj)) {
      char *cstr; Py_ssize_t len;
      if (!alloc && cptr) {
        return SWIG_RuntimeError;
      }
      obj = PyUnicode_AsUTF8String(obj);
      if (PyString_AsStringAndSize(obj, &cstr, &len) != -1) {
        if (cptr) {
          if (alloc) *alloc = SWIG_NEWOBJ;
          *cptr = reinterpret_cast< char* >(memcpy(new char[len + 1], cstr, sizeof(char)*(len + 1)));
        }
        if (psize) *psize = len + 1;

        Py_XDECREF(obj);
        return SWIG_OK;
      } else {
        Py_XDECREF(obj);
      }
    }
#endif
#endif

    swig_type_info* pchar_descriptor = SWIG_pchar_descriptor();
    if (pchar_descriptor) {
      void* vptr = 0;
      if (SWIG_ConvertPtr(obj, &vptr, pchar_descriptor, 0) == SWIG_OK) {
	if (cptr) *cptr = (char *) vptr;
	if (psize) *psize = vptr ? (strlen((char *)vptr) + 1) : 0;
	if (alloc) *alloc = SWIG_OLDOBJ;
	return SWIG_OK;
      }
    }
  }
  return SWIG_TypeError;
}





SWIGINTERNINLINE PyObject*
  SWIG_From_bool  (bool value)
{
  return PyBool_FromLong(value ? 1 : 0);
}


SWIGINTERN int
SWIG_AsVal_bool (PyObject *obj, bool *val)
{
  int r;
  if (!PyBool_Check(obj))
    return SWIG_ERROR;
  r = PyObject_IsTrue(obj);
  if (r == -1)
    return SWIG_ERROR;
  if (val) *val = r ? true : false;
  return SWIG_OK;
}

#ifdef __cplusplus
extern "C" {
#endif
SWIGINTERN PyObject *_wrap_inter_handler_2D_tsetInternal__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  int arg1 ;
  int arg2 ;
  int arg3 ;
  double arg4 ;
  int val1 ;
  int ecode1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  double val4 ;
  int ecode4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:inter_handler_2D_tsetInternal",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "inter_handler_2D_tsetInternal" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = static_cast< int >(val1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "inter_handler_2D_tsetInternal" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "inter_handler_2D_tsetInternal" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  ecode4 = SWIG_AsVal_double(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "inter_handler_2D_tsetInternal" "', argument " "4"" of type '" "double""'");
  } 
  arg4 = static_cast< double >(val4);
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      wrap_tsetInternal_2D(arg1,arg2,arg3,arg4);
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_inter_handler_3D_tsetInternal__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  int arg1 ;
  int arg2 ;
  int arg3 ;
  double arg4 ;
  int val1 ;
  int ecode1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  double val4 ;
  int ecode4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:inter_handler_3D_tsetInternal",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "inter_handler_3D_tsetInternal" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = static_cast< int >(val1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "inter_handler_3D_tsetInternal" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "inter_handler_3D_tsetInternal" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  ecode4 = SWIG_AsVal_double(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "inter_handler_3D_tsetInternal" "', argument " "4"" of type '" "double""'");
  } 
  arg4 = static_cast< double >(val4);
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      wrap_tsetInternal_3D(arg1,arg2,arg3,arg4);
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DISKx_LoadTactors(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  
  if (!PyArg_ParseTuple(args,(char *)":DISKx_LoadTactors")) SWIG_fail;
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      DISKx_LoadTactors();
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DISKx_GetNbDISKx(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)":DISKx_GetNbDISKx")) SWIG_fail;
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      result = (int)DISKx_GetNbDISKx();
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DISKx_GetDISKx2BDYTY(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  int **arg1 = (int **) 0 ;
  int *arg2 = (int *) 0 ;
  int *arg3 = (int *) 0 ;
  int *data_temp1 ;
  int dim1_temp1 ;
  int dim2_temp1 ;
  
  {
    arg1 = &data_temp1;
    arg2 = &dim1_temp1;
    arg3 = &dim2_temp1;
  }
  if (!PyArg_ParseTuple(args,(char *)":DISKx_GetDISKx2BDYTY")) SWIG_fail;
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      DISKx_GetDISKx2BDYTY(arg1,arg2,arg3);
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_Py_Void();
  {
    npy_intp dims[2] = {
      *arg3, *arg2 
    };
    PyObject * obj = PyArray_SimpleNewFromData(2, dims, NPY_INT, (void*)(*arg1));
    if (!obj) SWIG_fail;
    PyArrayObject * array = (PyArrayObject*) obj;
    attach_fortran_memory_to_numpy_array(array, (void*)(*arg1), NPY_INT, dims[1], dims[0]);
    PyArray_ENABLEFLAGS(array,NPY_ARRAY_WRITEABLE);
    resultobj = SWIG_Python_AppendOutput(resultobj, obj);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DISKx_GetPtrDISKx2BDYTY(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  int **arg1 = (int **) 0 ;
  int *arg2 = (int *) 0 ;
  int *arg3 = (int *) 0 ;
  int *data_temp1 ;
  int dim1_temp1 ;
  int dim2_temp1 ;
  
  {
    arg1 = &data_temp1;
    arg2 = &dim1_temp1;
    arg3 = &dim2_temp1;
  }
  if (!PyArg_ParseTuple(args,(char *)":DISKx_GetPtrDISKx2BDYTY")) SWIG_fail;
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      DISKx_GetPtrDISKx2BDYTY(arg1,arg2,arg3);
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_Py_Void();
  {
    npy_intp dims[2] = {
      *arg3, *arg2 
    };
    PyObject * array = PyArray_SimpleNewFromData(2, dims, NPY_INT, (void*)(*arg1));
    if (!array) SWIG_fail;
    resultobj = SWIG_Python_AppendOutput(resultobj, array);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DISKx_IsVisible(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  int arg1 ;
  int val1 ;
  int ecode1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:DISKx_IsVisible",&obj0)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "DISKx_IsVisible" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = static_cast< int >(val1);
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      result = (int)DISKx_IsVisible(arg1);
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DISKx_GetContactorRadius(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  int arg1 ;
  int val1 ;
  int ecode1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:DISKx_GetContactorRadius",&obj0)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "DISKx_GetContactorRadius" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = static_cast< int >(val1);
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      result = (double)DISKx_GetContactorRadius(arg1);
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DISKx_GetMeanRadius(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)":DISKx_GetMeanRadius")) SWIG_fail;
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      result = (double)DISKx_GetMeanRadius();
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DISKx_GetMaxRadius(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)":DISKx_GetMaxRadius")) SWIG_fail;
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      result = (double)DISKx_GetMaxRadius();
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DISKx_GetMinRadius(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)":DISKx_GetMinRadius")) SWIG_fail;
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      result = (double)DISKx_GetMinRadius();
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DISKx_GetContactorColor(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  int arg1 ;
  char **arg2 = (char **) 0 ;
  int val1 ;
  int ecode1 = 0 ;
  char *tmp_c52 ;
  PyObject * obj0 = 0 ;
  
  {
    arg2 = &tmp_c52;
  }
  if (!PyArg_ParseTuple(args,(char *)"O:DISKx_GetContactorColor",&obj0)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "DISKx_GetContactorColor" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = static_cast< int >(val1);
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      DISKx_GetContactorColor(arg1,arg2);
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_Py_Void();
  {
    PyObject *chaine;
    chaine = PyString_FromStringAndSize(*arg2, 5);
    free_ptrFortranString(*arg2, 5);
    resultobj = SWIG_Python_AppendOutput(resultobj, chaine);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DISKx_GetRadius(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  int arg1 ;
  int val1 ;
  int ecode1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:DISKx_GetRadius",&obj0)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "DISKx_GetRadius" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = static_cast< int >(val1);
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      result = (double)DISKx_GetRadius(arg1);
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DISKx_GetContactorCoor(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  int arg1 ;
  double **arg2 = (double **) 0 ;
  int *arg3 = (int *) 0 ;
  int val1 ;
  int ecode1 = 0 ;
  double *data_temp2 ;
  int dim_temp2 ;
  PyObject * obj0 = 0 ;
  
  {
    arg2 = &data_temp2;
    arg3 = &dim_temp2;
  }
  if (!PyArg_ParseTuple(args,(char *)"O:DISKx_GetContactorCoor",&obj0)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "DISKx_GetContactorCoor" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = static_cast< int >(val1);
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      DISKx_GetContactorCoor(arg1,arg2,arg3);
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_Py_Void();
  {
    npy_intp dims[1] = {
      *arg3 
    };
    PyObject * obj = PyArray_SimpleNewFromData(1, dims, NPY_DOUBLE, (void*)(*arg2));
    if (!obj) SWIG_fail;
    PyArrayObject * array = (PyArrayObject*) obj;
    attach_fortran_memory_to_numpy_array(array, (void*)(*arg2), NPY_DOUBLE, dims[0], 0);
    PyArray_ENABLEFLAGS(array,NPY_ARRAY_WRITEABLE);
    
    resultobj = SWIG_Python_AppendOutput(resultobj, obj);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DISKx_InitOutlines(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  double **arg1 = (double **) 0 ;
  int *arg2 = (int *) 0 ;
  int *arg3 = (int *) 0 ;
  double *data_temp1 ;
  int dim1_temp1 ;
  int dim2_temp1 ;
  
  {
    arg1 = &data_temp1;
    arg2 = &dim1_temp1;
    arg3 = &dim2_temp1;
  }
  if (!PyArg_ParseTuple(args,(char *)":DISKx_InitOutlines")) SWIG_fail;
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      DISKx_InitOutlines(arg1,arg2,arg3);
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_Py_Void();
  {
    npy_intp dims[2] = {
      *arg3, *arg2 
    };
    PyObject * array = PyArray_SimpleNewFromData(2, dims, NPY_DOUBLE, (void*)(*arg1));
    if (!array) SWIG_fail;
    resultobj = SWIG_Python_AppendOutput(resultobj, array);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DISKx_InitScalarFields(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  double **arg1 = (double **) 0 ;
  int *arg2 = (int *) 0 ;
  int *arg3 = (int *) 0 ;
  double *data_temp1 ;
  int dim1_temp1 ;
  int dim2_temp1 ;
  
  {
    arg1 = &data_temp1;
    arg2 = &dim1_temp1;
    arg3 = &dim2_temp1;
  }
  if (!PyArg_ParseTuple(args,(char *)":DISKx_InitScalarFields")) SWIG_fail;
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      DISKx_InitScalarFields(arg1,arg2,arg3);
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_Py_Void();
  {
    npy_intp dims[2] = {
      *arg3, *arg2 
    };
    PyObject * array = PyArray_SimpleNewFromData(2, dims, NPY_DOUBLE, (void*)(*arg1));
    if (!array) SWIG_fail;
    resultobj = SWIG_Python_AppendOutput(resultobj, array);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DISKx_UpdatePostdata(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  
  if (!PyArg_ParseTuple(args,(char *)":DISKx_UpdatePostdata")) SWIG_fail;
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      DISKx_UpdatePostdata();
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DISKx_GetNbPointOutlines(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  int **arg1 = (int **) 0 ;
  int *arg2 = (int *) 0 ;
  int *data_temp1 = NULL ;
  int dim_temp1 ;
  
  {
    arg1 = &data_temp1;
    arg2 = &dim_temp1;
  }
  if (!PyArg_ParseTuple(args,(char *)":DISKx_GetNbPointOutlines")) SWIG_fail;
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      DISKx_GetNbPointOutlines(arg1,arg2);
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_Py_Void();
  {
    npy_intp dims[1] = {
      *arg2 
    };
    PyObject* obj = PyArray_SimpleNewFromData(1, dims, NPY_INT, (void*)(*arg1));
    PyArrayObject* array = (PyArrayObject*) obj;
    
    if (!array) SWIG_fail;
    resultobj = SWIG_Python_AppendOutput(resultobj, obj);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DISKx_GetNbScalarFields(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)":DISKx_GetNbScalarFields")) SWIG_fail;
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      result = (int)DISKx_GetNbScalarFields();
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DISKx_CleanMemory(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  
  if (!PyArg_ParseTuple(args,(char *)":DISKx_CleanMemory")) SWIG_fail;
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      DISKx_CleanMemory();
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DISKx_SetXdilation(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  int arg1 ;
  double arg2 ;
  int val1 ;
  int ecode1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:DISKx_SetXdilation",&obj0,&obj1)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "DISKx_SetXdilation" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = static_cast< int >(val1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "DISKx_SetXdilation" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      DISKx_SetXdilation(arg1,arg2);
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DISKx_SetVdilation(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  int arg1 ;
  double arg2 ;
  int val1 ;
  int ecode1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:DISKx_SetVdilation",&obj0,&obj1)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "DISKx_SetVdilation" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = static_cast< int >(val1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "DISKx_SetVdilation" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      DISKx_SetVdilation(arg1,arg2);
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_JONCx_LoadTactors(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  
  if (!PyArg_ParseTuple(args,(char *)":JONCx_LoadTactors")) SWIG_fail;
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      JONCx_LoadTactors();
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_JONCx_GetNbJONCx(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)":JONCx_GetNbJONCx")) SWIG_fail;
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      result = (int)JONCx_GetNbJONCx();
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_JONCx_GetBodyId(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  int arg1 ;
  int val1 ;
  int ecode1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:JONCx_GetBodyId",&obj0)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "JONCx_GetBodyId" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = static_cast< int >(val1);
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      result = (int)JONCx_GetBodyId(arg1);
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_JONCx_GetShape(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  int arg1 ;
  double **arg2 = (double **) 0 ;
  int *arg3 = (int *) 0 ;
  int val1 ;
  int ecode1 = 0 ;
  double *data_temp2 ;
  int dim_temp2 ;
  PyObject * obj0 = 0 ;
  
  {
    arg2 = &data_temp2;
    arg3 = &dim_temp2;
  }
  if (!PyArg_ParseTuple(args,(char *)"O:JONCx_GetShape",&obj0)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "JONCx_GetShape" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = static_cast< int >(val1);
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      JONCx_GetShape(arg1,arg2,arg3);
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_Py_Void();
  {
    npy_intp dims[1] = {
      *arg3 
    };
    PyObject * obj = PyArray_SimpleNewFromData(1, dims, NPY_DOUBLE, (void*)(*arg2));
    if (!obj) SWIG_fail;
    PyArrayObject * array = (PyArrayObject*) obj;
    attach_fortran_memory_to_numpy_array(array, (void*)(*arg2), NPY_DOUBLE, dims[0], 0);
    PyArray_ENABLEFLAGS(array,NPY_ARRAY_WRITEABLE);
    
    resultobj = SWIG_Python_AppendOutput(resultobj, obj);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_JONCx_GetCoor(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  int arg1 ;
  double **arg2 = (double **) 0 ;
  int *arg3 = (int *) 0 ;
  int val1 ;
  int ecode1 = 0 ;
  double *data_temp2 ;
  int dim_temp2 ;
  PyObject * obj0 = 0 ;
  
  {
    arg2 = &data_temp2;
    arg3 = &dim_temp2;
  }
  if (!PyArg_ParseTuple(args,(char *)"O:JONCx_GetCoor",&obj0)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "JONCx_GetCoor" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = static_cast< int >(val1);
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      JONCx_GetCoor(arg1,arg2,arg3);
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_Py_Void();
  {
    npy_intp dims[1] = {
      *arg3 
    };
    PyObject * obj = PyArray_SimpleNewFromData(1, dims, NPY_DOUBLE, (void*)(*arg2));
    if (!obj) SWIG_fail;
    PyArrayObject * array = (PyArrayObject*) obj;
    attach_fortran_memory_to_numpy_array(array, (void*)(*arg2), NPY_DOUBLE, dims[0], 0);
    PyArray_ENABLEFLAGS(array,NPY_ARRAY_WRITEABLE);
    
    resultobj = SWIG_Python_AppendOutput(resultobj, obj);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_JONCx_GetPtrJONCx2BDYTY(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  int **arg1 = (int **) 0 ;
  int *arg2 = (int *) 0 ;
  int *arg3 = (int *) 0 ;
  int *data_temp1 ;
  int dim1_temp1 ;
  int dim2_temp1 ;
  
  {
    arg1 = &data_temp1;
    arg2 = &dim1_temp1;
    arg3 = &dim2_temp1;
  }
  if (!PyArg_ParseTuple(args,(char *)":JONCx_GetPtrJONCx2BDYTY")) SWIG_fail;
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      JONCx_GetPtrJONCx2BDYTY(arg1,arg2,arg3);
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_Py_Void();
  {
    npy_intp dims[2] = {
      *arg3, *arg2 
    };
    PyObject * array = PyArray_SimpleNewFromData(2, dims, NPY_INT, (void*)(*arg1));
    if (!array) SWIG_fail;
    resultobj = SWIG_Python_AppendOutput(resultobj, array);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_JONCx_IsVisible(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  int arg1 ;
  int val1 ;
  int ecode1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:JONCx_IsVisible",&obj0)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "JONCx_IsVisible" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = static_cast< int >(val1);
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      result = (int)JONCx_IsVisible(arg1);
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_JONCx_InitOutlines(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  double **arg1 = (double **) 0 ;
  int *arg2 = (int *) 0 ;
  int *arg3 = (int *) 0 ;
  double *data_temp1 ;
  int dim1_temp1 ;
  int dim2_temp1 ;
  
  {
    arg1 = &data_temp1;
    arg2 = &dim1_temp1;
    arg3 = &dim2_temp1;
  }
  if (!PyArg_ParseTuple(args,(char *)":JONCx_InitOutlines")) SWIG_fail;
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      JONCx_InitOutlines(arg1,arg2,arg3);
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_Py_Void();
  {
    npy_intp dims[2] = {
      *arg3, *arg2 
    };
    PyObject * array = PyArray_SimpleNewFromData(2, dims, NPY_DOUBLE, (void*)(*arg1));
    if (!array) SWIG_fail;
    resultobj = SWIG_Python_AppendOutput(resultobj, array);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_JONCx_InitScalarFields(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  double **arg1 = (double **) 0 ;
  int *arg2 = (int *) 0 ;
  int *arg3 = (int *) 0 ;
  double *data_temp1 ;
  int dim1_temp1 ;
  int dim2_temp1 ;
  
  {
    arg1 = &data_temp1;
    arg2 = &dim1_temp1;
    arg3 = &dim2_temp1;
  }
  if (!PyArg_ParseTuple(args,(char *)":JONCx_InitScalarFields")) SWIG_fail;
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      JONCx_InitScalarFields(arg1,arg2,arg3);
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_Py_Void();
  {
    npy_intp dims[2] = {
      *arg3, *arg2 
    };
    PyObject * array = PyArray_SimpleNewFromData(2, dims, NPY_DOUBLE, (void*)(*arg1));
    if (!array) SWIG_fail;
    resultobj = SWIG_Python_AppendOutput(resultobj, array);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_JONCx_UpdatePostdata(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  
  if (!PyArg_ParseTuple(args,(char *)":JONCx_UpdatePostdata")) SWIG_fail;
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      JONCx_UpdatePostdata();
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_JONCx_GetNbPointOutlines(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  int **arg1 = (int **) 0 ;
  int *arg2 = (int *) 0 ;
  int *data_temp1 = NULL ;
  int dim_temp1 ;
  
  {
    arg1 = &data_temp1;
    arg2 = &dim_temp1;
  }
  if (!PyArg_ParseTuple(args,(char *)":JONCx_GetNbPointOutlines")) SWIG_fail;
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      JONCx_GetNbPointOutlines(arg1,arg2);
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_Py_Void();
  {
    npy_intp dims[1] = {
      *arg2 
    };
    PyObject* obj = PyArray_SimpleNewFromData(1, dims, NPY_INT, (void*)(*arg1));
    PyArrayObject* array = (PyArrayObject*) obj;
    
    if (!array) SWIG_fail;
    resultobj = SWIG_Python_AppendOutput(resultobj, obj);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_JONCx_GetNbScalarFields(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)":JONCx_GetNbScalarFields")) SWIG_fail;
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      result = (int)JONCx_GetNbScalarFields();
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_JONCx_CleanMemory(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  
  if (!PyArg_ParseTuple(args,(char *)":JONCx_CleanMemory")) SWIG_fail;
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      JONCx_CleanMemory();
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_POLYG_LoadTactors(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  
  if (!PyArg_ParseTuple(args,(char *)":POLYG_LoadTactors")) SWIG_fail;
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      POLYG_LoadTactors();
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_POLYG_GetMinRadius(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)":POLYG_GetMinRadius")) SWIG_fail;
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      result = (double)POLYG_GetMinRadius();
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_POLYG_GetMaxRadius(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)":POLYG_GetMaxRadius")) SWIG_fail;
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      result = (double)POLYG_GetMaxRadius();
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_POLYG_GetNbPOLYG(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)":POLYG_GetNbPOLYG")) SWIG_fail;
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      result = (int)POLYG_GetNbPOLYG();
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_POLYG_GetPOLYG2BDYTY(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  int **arg1 = (int **) 0 ;
  int *arg2 = (int *) 0 ;
  int *arg3 = (int *) 0 ;
  int *data_temp1 ;
  int dim1_temp1 ;
  int dim2_temp1 ;
  
  {
    arg1 = &data_temp1;
    arg2 = &dim1_temp1;
    arg3 = &dim2_temp1;
  }
  if (!PyArg_ParseTuple(args,(char *)":POLYG_GetPOLYG2BDYTY")) SWIG_fail;
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      POLYG_GetPOLYG2BDYTY(arg1,arg2,arg3);
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_Py_Void();
  {
    npy_intp dims[2] = {
      *arg3, *arg2 
    };
    PyObject * obj = PyArray_SimpleNewFromData(2, dims, NPY_INT, (void*)(*arg1));
    if (!obj) SWIG_fail;
    PyArrayObject * array = (PyArrayObject*) obj;
    attach_fortran_memory_to_numpy_array(array, (void*)(*arg1), NPY_INT, dims[1], dims[0]);
    PyArray_ENABLEFLAGS(array,NPY_ARRAY_WRITEABLE);
    resultobj = SWIG_Python_AppendOutput(resultobj, obj);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_POLYG_GetPtrPOLYG2BDYTY(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  int **arg1 = (int **) 0 ;
  int *arg2 = (int *) 0 ;
  int *arg3 = (int *) 0 ;
  int *data_temp1 ;
  int dim1_temp1 ;
  int dim2_temp1 ;
  
  {
    arg1 = &data_temp1;
    arg2 = &dim1_temp1;
    arg3 = &dim2_temp1;
  }
  if (!PyArg_ParseTuple(args,(char *)":POLYG_GetPtrPOLYG2BDYTY")) SWIG_fail;
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      POLYG_GetPtrPOLYG2BDYTY(arg1,arg2,arg3);
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_Py_Void();
  {
    npy_intp dims[2] = {
      *arg3, *arg2 
    };
    PyObject * array = PyArray_SimpleNewFromData(2, dims, NPY_INT, (void*)(*arg1));
    if (!array) SWIG_fail;
    resultobj = SWIG_Python_AppendOutput(resultobj, array);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_POLYG_IsVisible(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  int arg1 ;
  int val1 ;
  int ecode1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:POLYG_IsVisible",&obj0)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "POLYG_IsVisible" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = static_cast< int >(val1);
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      result = (int)POLYG_IsVisible(arg1);
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_POLYG_GetContactorRadius(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  int arg1 ;
  int val1 ;
  int ecode1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:POLYG_GetContactorRadius",&obj0)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "POLYG_GetContactorRadius" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = static_cast< int >(val1);
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      result = (double)POLYG_GetContactorRadius(arg1);
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_POLYG_GetNbVertices(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  int arg1 ;
  int val1 ;
  int ecode1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:POLYG_GetNbVertices",&obj0)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "POLYG_GetNbVertices" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = static_cast< int >(val1);
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      result = (int)POLYG_GetNbVertices(arg1);
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_POLYG_GetVertices(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  int arg1 ;
  double **arg2 = (double **) 0 ;
  int *arg3 = (int *) 0 ;
  int *arg4 = (int *) 0 ;
  int val1 ;
  int ecode1 = 0 ;
  double *data_temp2 ;
  int dim1_temp2 ;
  int dim2_temp2 ;
  PyObject * obj0 = 0 ;
  
  {
    arg2 = &data_temp2;
    arg3 = &dim1_temp2;
    arg4 = &dim2_temp2;
  }
  if (!PyArg_ParseTuple(args,(char *)"O:POLYG_GetVertices",&obj0)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "POLYG_GetVertices" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = static_cast< int >(val1);
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      POLYG_GetVertices(arg1,arg2,arg3,arg4);
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_Py_Void();
  {
    npy_intp dims[2] = {
      *arg4, *arg3 
    };
    PyObject * obj = PyArray_SimpleNewFromData(2, dims, NPY_DOUBLE, (void*)(*arg2));
    if (!obj) SWIG_fail;
    PyArrayObject * array = (PyArrayObject*) obj;
    attach_fortran_memory_to_numpy_array(array, (void*)(*arg2), NPY_DOUBLE, dims[1], dims[0]);
    PyArray_ENABLEFLAGS(array,NPY_ARRAY_WRITEABLE);
    resultobj = SWIG_Python_AppendOutput(resultobj, obj);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_POLYG_GetNbVertex(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  int arg1 ;
  int val1 ;
  int ecode1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:POLYG_GetNbVertex",&obj0)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "POLYG_GetNbVertex" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = static_cast< int >(val1);
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      result = (int)POLYG_GetNbVertex(arg1);
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_POLYG_GetVertex(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  int arg1 ;
  double *arg2 = (double *) 0 ;
  int arg3 ;
  int val1 ;
  int ecode1 = 0 ;
  PyObject *array2 = NULL ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:POLYG_GetVertex",&obj0,&obj1)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "POLYG_GetVertex" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = static_cast< int >(val1);
  {
    npy_intp dims[1];
    if (!PyLong_Check(obj1))
    {
      const char* typestring = pytype_string(obj1);
      PyErr_Format(PyExc_TypeError,
        "Int dimension expected.  '%s' given.",
        typestring);
      SWIG_fail;
    }
    arg3 = (int) PyLong_AsSsize_t(obj1);
    if (arg3 == -1 && PyErr_Occurred()) SWIG_fail;
    dims[0] = (npy_intp) arg3;
    array2 = PyArray_SimpleNew(1, dims, NPY_DOUBLE);
    if (!array2) SWIG_fail;
    arg2 = (double*) array_data(array2);
  }
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      POLYG_GetVertex(arg1,arg2,arg3);
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_Py_Void();
  {
    resultobj = SWIG_Python_AppendOutput(resultobj, (PyObject*)array2);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_POLYG_GetBodyId(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  int arg1 ;
  int val1 ;
  int ecode1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:POLYG_GetBodyId",&obj0)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "POLYG_GetBodyId" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = static_cast< int >(val1);
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      result = (int)POLYG_GetBodyId(arg1);
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_POLYG_InitOutlines(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  double **arg1 = (double **) 0 ;
  int *arg2 = (int *) 0 ;
  int *arg3 = (int *) 0 ;
  double *data_temp1 ;
  int dim1_temp1 ;
  int dim2_temp1 ;
  
  {
    arg1 = &data_temp1;
    arg2 = &dim1_temp1;
    arg3 = &dim2_temp1;
  }
  if (!PyArg_ParseTuple(args,(char *)":POLYG_InitOutlines")) SWIG_fail;
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      POLYG_InitOutlines(arg1,arg2,arg3);
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_Py_Void();
  {
    npy_intp dims[2] = {
      *arg3, *arg2 
    };
    PyObject * array = PyArray_SimpleNewFromData(2, dims, NPY_DOUBLE, (void*)(*arg1));
    if (!array) SWIG_fail;
    resultobj = SWIG_Python_AppendOutput(resultobj, array);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_POLYG_InitScalarFields(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  double **arg1 = (double **) 0 ;
  int *arg2 = (int *) 0 ;
  int *arg3 = (int *) 0 ;
  double *data_temp1 ;
  int dim1_temp1 ;
  int dim2_temp1 ;
  
  {
    arg1 = &data_temp1;
    arg2 = &dim1_temp1;
    arg3 = &dim2_temp1;
  }
  if (!PyArg_ParseTuple(args,(char *)":POLYG_InitScalarFields")) SWIG_fail;
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      POLYG_InitScalarFields(arg1,arg2,arg3);
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_Py_Void();
  {
    npy_intp dims[2] = {
      *arg3, *arg2 
    };
    PyObject * array = PyArray_SimpleNewFromData(2, dims, NPY_DOUBLE, (void*)(*arg1));
    if (!array) SWIG_fail;
    resultobj = SWIG_Python_AppendOutput(resultobj, array);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_POLYG_UpdatePostdata(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  
  if (!PyArg_ParseTuple(args,(char *)":POLYG_UpdatePostdata")) SWIG_fail;
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      POLYG_UpdatePostdata();
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_POLYG_GetNbPointOutlines(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  int **arg1 = (int **) 0 ;
  int *arg2 = (int *) 0 ;
  int *data_temp1 = NULL ;
  int dim_temp1 ;
  
  {
    arg1 = &data_temp1;
    arg2 = &dim_temp1;
  }
  if (!PyArg_ParseTuple(args,(char *)":POLYG_GetNbPointOutlines")) SWIG_fail;
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      POLYG_GetNbPointOutlines(arg1,arg2);
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_Py_Void();
  {
    npy_intp dims[1] = {
      *arg2 
    };
    PyObject* obj = PyArray_SimpleNewFromData(1, dims, NPY_INT, (void*)(*arg1));
    PyArrayObject* array = (PyArrayObject*) obj;
    
    if (!array) SWIG_fail;
    resultobj = SWIG_Python_AppendOutput(resultobj, obj);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_POLYG_GetNbScalarFields(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)":POLYG_GetNbScalarFields")) SWIG_fail;
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      result = (int)POLYG_GetNbScalarFields();
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_POLYG_SetXdilation(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  int arg1 ;
  int arg2 ;
  double *arg3 = (double *) 0 ;
  int arg4 = (int) 2 ;
  int val1 ;
  int ecode1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyArrayObject *array3 = NULL ;
  int is_new_object3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:POLYG_SetXdilation",&obj0,&obj1,&obj2)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "POLYG_SetXdilation" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = static_cast< int >(val1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "POLYG_SetXdilation" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    npy_intp size[1] = {
      -1 
    };
    array3 = obj_to_array_contiguous_allow_conversion(obj2,
      NPY_DOUBLE,
      &is_new_object3);
    if (!array3 || !require_dimensions(array3, 1) ||
      !require_size(array3, size, 1)) SWIG_fail;
    arg3 = (double*) array_data(array3);
    arg4 = (int) array_size(array3,0);
  }
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      POLYG_SetXdilation(arg1,arg2,arg3,arg4);
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_Py_Void();
  {
    if (is_new_object3 && array3)
    {
      Py_DECREF(array3); 
    }
  }
  return resultobj;
fail:
  {
    if (is_new_object3 && array3)
    {
      Py_DECREF(array3); 
    }
  }
  return NULL;
}


SWIGINTERN PyObject *_wrap_POLYG_SetVdilation(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  int arg1 ;
  int arg2 ;
  double *arg3 = (double *) 0 ;
  int arg4 = (int) 2 ;
  int val1 ;
  int ecode1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyArrayObject *array3 = NULL ;
  int is_new_object3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:POLYG_SetVdilation",&obj0,&obj1,&obj2)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "POLYG_SetVdilation" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = static_cast< int >(val1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "POLYG_SetVdilation" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    npy_intp size[1] = {
      -1 
    };
    array3 = obj_to_array_contiguous_allow_conversion(obj2,
      NPY_DOUBLE,
      &is_new_object3);
    if (!array3 || !require_dimensions(array3, 1) ||
      !require_size(array3, size, 1)) SWIG_fail;
    arg3 = (double*) array_data(array3);
    arg4 = (int) array_size(array3,0);
  }
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      POLYG_SetVdilation(arg1,arg2,arg3,arg4);
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_Py_Void();
  {
    if (is_new_object3 && array3)
    {
      Py_DECREF(array3); 
    }
  }
  return resultobj;
fail:
  {
    if (is_new_object3 && array3)
    {
      Py_DECREF(array3); 
    }
  }
  return NULL;
}


SWIGINTERN PyObject *_wrap_POLYG_CleanMemory(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  
  if (!PyArg_ParseTuple(args,(char *)":POLYG_CleanMemory")) SWIG_fail;
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      POLYG_CleanMemory();
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PT2Dx_LoadTactors(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  
  if (!PyArg_ParseTuple(args,(char *)":PT2Dx_LoadTactors")) SWIG_fail;
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      PT2Dx_LoadTactors();
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PT2Dx_GetNbPT2Dx(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)":PT2Dx_GetNbPT2Dx")) SWIG_fail;
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      result = (int)PT2Dx_GetNbPT2Dx();
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PT2Dx_SetDisplayRadius(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  double arg1 ;
  double val1 ;
  int ecode1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:PT2Dx_SetDisplayRadius",&obj0)) SWIG_fail;
  ecode1 = SWIG_AsVal_double(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "PT2Dx_SetDisplayRadius" "', argument " "1"" of type '" "double""'");
  } 
  arg1 = static_cast< double >(val1);
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      PT2Dx_SetDisplayRadius(arg1);
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PT2Dx_GetPtrPT2Dx2BDYTY(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  int **arg1 = (int **) 0 ;
  int *arg2 = (int *) 0 ;
  int *arg3 = (int *) 0 ;
  int *data_temp1 ;
  int dim1_temp1 ;
  int dim2_temp1 ;
  
  {
    arg1 = &data_temp1;
    arg2 = &dim1_temp1;
    arg3 = &dim2_temp1;
  }
  if (!PyArg_ParseTuple(args,(char *)":PT2Dx_GetPtrPT2Dx2BDYTY")) SWIG_fail;
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      PT2Dx_GetPtrPT2Dx2BDYTY(arg1,arg2,arg3);
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_Py_Void();
  {
    npy_intp dims[2] = {
      *arg3, *arg2 
    };
    PyObject * array = PyArray_SimpleNewFromData(2, dims, NPY_INT, (void*)(*arg1));
    if (!array) SWIG_fail;
    resultobj = SWIG_Python_AppendOutput(resultobj, array);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PT2Dx_IsVisible(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  int arg1 ;
  int val1 ;
  int ecode1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:PT2Dx_IsVisible",&obj0)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "PT2Dx_IsVisible" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = static_cast< int >(val1);
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      result = (int)PT2Dx_IsVisible(arg1);
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PT2Dx_InitOutlines(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  double **arg1 = (double **) 0 ;
  int *arg2 = (int *) 0 ;
  int *arg3 = (int *) 0 ;
  double *data_temp1 ;
  int dim1_temp1 ;
  int dim2_temp1 ;
  
  {
    arg1 = &data_temp1;
    arg2 = &dim1_temp1;
    arg3 = &dim2_temp1;
  }
  if (!PyArg_ParseTuple(args,(char *)":PT2Dx_InitOutlines")) SWIG_fail;
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      PT2Dx_InitOutlines(arg1,arg2,arg3);
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_Py_Void();
  {
    npy_intp dims[2] = {
      *arg3, *arg2 
    };
    PyObject * array = PyArray_SimpleNewFromData(2, dims, NPY_DOUBLE, (void*)(*arg1));
    if (!array) SWIG_fail;
    resultobj = SWIG_Python_AppendOutput(resultobj, array);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PT2Dx_InitScalarFields(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  double **arg1 = (double **) 0 ;
  int *arg2 = (int *) 0 ;
  int *arg3 = (int *) 0 ;
  double *data_temp1 ;
  int dim1_temp1 ;
  int dim2_temp1 ;
  
  {
    arg1 = &data_temp1;
    arg2 = &dim1_temp1;
    arg3 = &dim2_temp1;
  }
  if (!PyArg_ParseTuple(args,(char *)":PT2Dx_InitScalarFields")) SWIG_fail;
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      PT2Dx_InitScalarFields(arg1,arg2,arg3);
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_Py_Void();
  {
    npy_intp dims[2] = {
      *arg3, *arg2 
    };
    PyObject * array = PyArray_SimpleNewFromData(2, dims, NPY_DOUBLE, (void*)(*arg1));
    if (!array) SWIG_fail;
    resultobj = SWIG_Python_AppendOutput(resultobj, array);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PT2Dx_UpdatePostdata(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  
  if (!PyArg_ParseTuple(args,(char *)":PT2Dx_UpdatePostdata")) SWIG_fail;
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      PT2Dx_UpdatePostdata();
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PT2Dx_GetNbPointOutlines(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  int **arg1 = (int **) 0 ;
  int *arg2 = (int *) 0 ;
  int *data_temp1 = NULL ;
  int dim_temp1 ;
  
  {
    arg1 = &data_temp1;
    arg2 = &dim_temp1;
  }
  if (!PyArg_ParseTuple(args,(char *)":PT2Dx_GetNbPointOutlines")) SWIG_fail;
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      PT2Dx_GetNbPointOutlines(arg1,arg2);
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_Py_Void();
  {
    npy_intp dims[1] = {
      *arg2 
    };
    PyObject* obj = PyArray_SimpleNewFromData(1, dims, NPY_INT, (void*)(*arg1));
    PyArrayObject* array = (PyArrayObject*) obj;
    
    if (!array) SWIG_fail;
    resultobj = SWIG_Python_AppendOutput(resultobj, obj);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PT2Dx_GetNbScalarFields(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)":PT2Dx_GetNbScalarFields")) SWIG_fail;
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      result = (int)PT2Dx_GetNbScalarFields();
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PT2Dx_CleanMemory(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  
  if (!PyArg_ParseTuple(args,(char *)":PT2Dx_CleanMemory")) SWIG_fail;
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      PT2Dx_CleanMemory();
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RBDY2_PutBodyInvMass(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  int arg1 ;
  double *arg2 = (double *) 0 ;
  int arg3 ;
  int val1 ;
  int ecode1 = 0 ;
  PyArrayObject *array2 = NULL ;
  int is_new_object2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:RBDY2_PutBodyInvMass",&obj0,&obj1)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "RBDY2_PutBodyInvMass" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = static_cast< int >(val1);
  {
    npy_intp size[1] = {
      -1 
    };
    array2 = obj_to_array_contiguous_allow_conversion(obj1,
      NPY_DOUBLE,
      &is_new_object2);
    if (!array2 || !require_dimensions(array2, 1) ||
      !require_size(array2, size, 1)) SWIG_fail;
    arg2 = (double*) array_data(array2);
    arg3 = (int) array_size(array2,0);
  }
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      RBDY2_PutBodyInvMass(arg1,arg2,arg3);
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_Py_Void();
  {
    if (is_new_object2 && array2)
    {
      Py_DECREF(array2); 
    }
  }
  return resultobj;
fail:
  {
    if (is_new_object2 && array2)
    {
      Py_DECREF(array2); 
    }
  }
  return NULL;
}


SWIGINTERN PyObject *_wrap_RBDY2_PutBodyPreconW(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  int arg1 ;
  int arg2 ;
  double *arg3 = (double *) 0 ;
  int arg4 ;
  int val1 ;
  int ecode1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyArrayObject *array3 = NULL ;
  int is_new_object3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:RBDY2_PutBodyPreconW",&obj0,&obj1,&obj2)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "RBDY2_PutBodyPreconW" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = static_cast< int >(val1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "RBDY2_PutBodyPreconW" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    npy_intp size[1] = {
      -1 
    };
    array3 = obj_to_array_contiguous_allow_conversion(obj2,
      NPY_DOUBLE,
      &is_new_object3);
    if (!array3 || !require_dimensions(array3, 1) ||
      !require_size(array3, size, 1)) SWIG_fail;
    arg3 = (double*) array_data(array3);
    arg4 = (int) array_size(array3,0);
  }
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      RBDY2_PutBodyPreconW(arg1,arg2,arg3,arg4);
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_Py_Void();
  {
    if (is_new_object3 && array3)
    {
      Py_DECREF(array3); 
    }
  }
  return resultobj;
fail:
  {
    if (is_new_object3 && array3)
    {
      Py_DECREF(array3); 
    }
  }
  return NULL;
}


SWIGINTERN PyObject *_wrap_RBDY2_PutBodyVector(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  char *arg1 = (char *) 0 ;
  int arg2 ;
  double *arg3 = (double *) 0 ;
  int arg4 ;
  int res1 ;
  char *buf1 = 0 ;
  int alloc1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyArrayObject *array3 = NULL ;
  int is_new_object3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:RBDY2_PutBodyVector",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_AsCharPtrAndSize(obj0, &buf1, NULL, &alloc1);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RBDY2_PutBodyVector" "', argument " "1"" of type '" "char *""'");
  }
  arg1 = reinterpret_cast< char * >(buf1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "RBDY2_PutBodyVector" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    npy_intp size[1] = {
      -1 
    };
    array3 = obj_to_array_contiguous_allow_conversion(obj2,
      NPY_DOUBLE,
      &is_new_object3);
    if (!array3 || !require_dimensions(array3, 1) ||
      !require_size(array3, size, 1)) SWIG_fail;
    arg3 = (double*) array_data(array3);
    arg4 = (int) array_size(array3,0);
  }
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      RBDY2_PutBodyVector(arg1,arg2,arg3,arg4);
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_Py_Void();
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  {
    if (is_new_object3 && array3)
    {
      Py_DECREF(array3); 
    }
  }
  return resultobj;
fail:
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  {
    if (is_new_object3 && array3)
    {
      Py_DECREF(array3); 
    }
  }
  return NULL;
}


SWIGINTERN PyObject *_wrap_RBDY2_PutAllBodyVector(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  char *arg1 = (char *) 0 ;
  double *arg2 = (double *) 0 ;
  int arg3 ;
  int arg4 ;
  int res1 ;
  char *buf1 = 0 ;
  int alloc1 = 0 ;
  PyArrayObject *array2 = NULL ;
  int is_new_object2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:RBDY2_PutAllBodyVector",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_AsCharPtrAndSize(obj0, &buf1, NULL, &alloc1);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RBDY2_PutAllBodyVector" "', argument " "1"" of type '" "char *""'");
  }
  arg1 = reinterpret_cast< char * >(buf1);
  {
    npy_intp size[2] = {
      -1, -1 
    };
    array2 = obj_to_array_contiguous_allow_conversion(obj1, NPY_DOUBLE,
      &is_new_object2);
    if (!array2 || !require_dimensions(array2, 2) ||
      !require_size(array2, size, 2)) SWIG_fail;
    arg2 = (double*) array_data(array2);
    arg3 = (int) array_size(array2,0);
    arg4 = (int) array_size(array2,1);
  }
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      RBDY2_PutAllBodyVector(arg1,arg2,arg3,arg4);
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_Py_Void();
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  {
    if (is_new_object2 && array2)
    {
      Py_DECREF(array2); 
    }
  }
  return resultobj;
fail:
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  {
    if (is_new_object2 && array2)
    {
      Py_DECREF(array2); 
    }
  }
  return NULL;
}


SWIGINTERN PyObject *_wrap_RBDY2_GetBodyVector(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  char *arg1 = (char *) 0 ;
  int arg2 ;
  double **arg3 = (double **) 0 ;
  int *arg4 = (int *) 0 ;
  int res1 ;
  char *buf1 = 0 ;
  int alloc1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  double *data_temp3 ;
  int dim_temp3 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  {
    arg3 = &data_temp3;
    arg4 = &dim_temp3;
  }
  if (!PyArg_ParseTuple(args,(char *)"OO:RBDY2_GetBodyVector",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_AsCharPtrAndSize(obj0, &buf1, NULL, &alloc1);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RBDY2_GetBodyVector" "', argument " "1"" of type '" "char *""'");
  }
  arg1 = reinterpret_cast< char * >(buf1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "RBDY2_GetBodyVector" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      RBDY2_GetBodyVector(arg1,arg2,arg3,arg4);
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_Py_Void();
  {
    npy_intp dims[1] = {
      *arg4 
    };
    PyObject * obj = PyArray_SimpleNewFromData(1, dims, NPY_DOUBLE, (void*)(*arg3));
    if (!obj) SWIG_fail;
    PyArrayObject * array = (PyArrayObject*) obj;
    attach_fortran_memory_to_numpy_array(array, (void*)(*arg3), NPY_DOUBLE, dims[0], 0);
    PyArray_ENABLEFLAGS(array,NPY_ARRAY_WRITEABLE);
    
    resultobj = SWIG_Python_AppendOutput(resultobj, obj);
  }
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  return resultobj;
fail:
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  return NULL;
}


SWIGINTERN PyObject *_wrap_RBDY2_GetAllBodyVector(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  char *arg1 = (char *) 0 ;
  double **arg2 = (double **) 0 ;
  int *arg3 = (int *) 0 ;
  int *arg4 = (int *) 0 ;
  int res1 ;
  char *buf1 = 0 ;
  int alloc1 = 0 ;
  double *data_temp2 ;
  int dim1_temp2 ;
  int dim2_temp2 ;
  PyObject * obj0 = 0 ;
  
  {
    arg2 = &data_temp2;
    arg3 = &dim1_temp2;
    arg4 = &dim2_temp2;
  }
  if (!PyArg_ParseTuple(args,(char *)"O:RBDY2_GetAllBodyVector",&obj0)) SWIG_fail;
  res1 = SWIG_AsCharPtrAndSize(obj0, &buf1, NULL, &alloc1);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RBDY2_GetAllBodyVector" "', argument " "1"" of type '" "char *""'");
  }
  arg1 = reinterpret_cast< char * >(buf1);
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      RBDY2_GetAllBodyVector(arg1,arg2,arg3,arg4);
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_Py_Void();
  {
    npy_intp dims[2] = {
      *arg4, *arg3 
    };
    PyObject * obj = PyArray_SimpleNewFromData(2, dims, NPY_DOUBLE, (void*)(*arg2));
    if (!obj) SWIG_fail;
    PyArrayObject * array = (PyArrayObject*) obj;
    attach_fortran_memory_to_numpy_array(array, (void*)(*arg2), NPY_DOUBLE, dims[1], dims[0]);
    PyArray_ENABLEFLAGS(array,NPY_ARRAY_WRITEABLE);
    resultobj = SWIG_Python_AppendOutput(resultobj, obj);
  }
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  return resultobj;
fail:
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  return NULL;
}


SWIGINTERN PyObject *_wrap_RBDY2_GetPtrBodyVector(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  char *arg1 = (char *) 0 ;
  int arg2 ;
  double **arg3 = (double **) 0 ;
  int *arg4 = (int *) 0 ;
  int res1 ;
  char *buf1 = 0 ;
  int alloc1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  double *data_temp3 = NULL ;
  int dim_temp3 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  {
    arg3 = &data_temp3;
    arg4 = &dim_temp3;
  }
  if (!PyArg_ParseTuple(args,(char *)"OO:RBDY2_GetPtrBodyVector",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_AsCharPtrAndSize(obj0, &buf1, NULL, &alloc1);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RBDY2_GetPtrBodyVector" "', argument " "1"" of type '" "char *""'");
  }
  arg1 = reinterpret_cast< char * >(buf1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "RBDY2_GetPtrBodyVector" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      RBDY2_GetPtrBodyVector(arg1,arg2,arg3,arg4);
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_Py_Void();
  {
    npy_intp dims[1] = {
      *arg4 
    };
    PyObject* obj = PyArray_SimpleNewFromData(1, dims, NPY_DOUBLE, (void*)(*arg3));
    PyArrayObject* array = (PyArrayObject*) obj;
    
    if (!array) SWIG_fail;
    resultobj = SWIG_Python_AppendOutput(resultobj, obj);
  }
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  return resultobj;
fail:
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  return NULL;
}


SWIGINTERN PyObject *_wrap_RBDY2_GetBodyInertia(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  int arg1 ;
  int val1 ;
  int ecode1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:RBDY2_GetBodyInertia",&obj0)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "RBDY2_GetBodyInertia" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = static_cast< int >(val1);
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      result = (double)RBDY2_GetBodyInertia(arg1);
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RBDY2_GetAllInertia(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  double **arg1 = (double **) 0 ;
  int *arg2 = (int *) 0 ;
  double *data_temp1 ;
  int dim_temp1 ;
  
  {
    arg1 = &data_temp1;
    arg2 = &dim_temp1;
  }
  if (!PyArg_ParseTuple(args,(char *)":RBDY2_GetAllInertia")) SWIG_fail;
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      RBDY2_GetAllInertia(arg1,arg2);
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_Py_Void();
  {
    npy_intp dims[1] = {
      *arg2 
    };
    PyObject * obj = PyArray_SimpleNewFromData(1, dims, NPY_DOUBLE, (void*)(*arg1));
    if (!obj) SWIG_fail;
    PyArrayObject * array = (PyArrayObject*) obj;
    attach_fortran_memory_to_numpy_array(array, (void*)(*arg1), NPY_DOUBLE, dims[0], 0);
    PyArray_ENABLEFLAGS(array,NPY_ARRAY_WRITEABLE);
    
    resultobj = SWIG_Python_AppendOutput(resultobj, obj);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RBDY2_IncrementStep(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  
  if (!PyArg_ParseTuple(args,(char *)":RBDY2_IncrementStep")) SWIG_fail;
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      RBDY2_IncrementStep();
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RBDY2_SetVlocyDrivenDof(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  int arg1 ;
  int arg2 ;
  double arg3 ;
  int val1 ;
  int ecode1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:RBDY2_SetVlocyDrivenDof",&obj0,&obj1,&obj2)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "RBDY2_SetVlocyDrivenDof" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = static_cast< int >(val1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "RBDY2_SetVlocyDrivenDof" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_double(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "RBDY2_SetVlocyDrivenDof" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast< double >(val3);
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      RBDY2_SetVlocyDrivenDof(arg1,arg2,arg3);
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RBDY2_ComputeDof(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  
  if (!PyArg_ParseTuple(args,(char *)":RBDY2_ComputeDof")) SWIG_fail;
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      RBDY2_ComputeDof();
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RBDY2_UpdateDof(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  
  if (!PyArg_ParseTuple(args,(char *)":RBDY2_UpdateDof")) SWIG_fail;
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      RBDY2_UpdateDof();
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RBDY2_ComputeFreeVelocity(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  
  if (!PyArg_ParseTuple(args,(char *)":RBDY2_ComputeFreeVelocity")) SWIG_fail;
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      RBDY2_ComputeFreeVelocity();
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RBDY2_ComputeFext(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  
  if (!PyArg_ParseTuple(args,(char *)":RBDY2_ComputeFext")) SWIG_fail;
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      RBDY2_ComputeFext();
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RBDY2_ComputeBulk(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  
  if (!PyArg_ParseTuple(args,(char *)":RBDY2_ComputeBulk")) SWIG_fail;
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      RBDY2_ComputeBulk();
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RBDY2_CheckEquilibriumState(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)":RBDY2_CheckEquilibriumState")) SWIG_fail;
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      result = (bool)RBDY2_CheckEquilibriumState();
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RBDY2_GhostToInvisible(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  
  if (!PyArg_ParseTuple(args,(char *)":RBDY2_GhostToInvisible")) SWIG_fail;
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      RBDY2_GhostToInvisible();
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RBDY2_FatalDamping(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  int *arg1 = (int *) NULL ;
  int arg2 = (int) 0 ;
  PyArrayObject *array1 = NULL ;
  int is_new_object1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"|O:RBDY2_FatalDamping",&obj0)) SWIG_fail;
  if (obj0) {
    {
      npy_intp size[1] = {
        -1 
      };
      array1 = obj_to_array_contiguous_allow_conversion(obj0,
        NPY_INT,
        &is_new_object1);
      if (!array1 || !require_dimensions(array1, 1) ||
        !require_size(array1, size, 1)) SWIG_fail;
      arg1 = (int*) array_data(array1);
      arg2 = (int) array_size(array1,0);
    }
  }
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      RBDY2_FatalDamping(arg1,arg2);
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_Py_Void();
  {
    if (is_new_object1 && array1)
    {
      Py_DECREF(array1); 
    }
  }
  return resultobj;
fail:
  {
    if (is_new_object1 && array1)
    {
      Py_DECREF(array1); 
    }
  }
  return NULL;
}


SWIGINTERN PyObject *_wrap_RBDY2_PartialDamping(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  int arg1 ;
  double arg2 ;
  int val1 ;
  int ecode1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:RBDY2_PartialDamping",&obj0,&obj1)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "RBDY2_PartialDamping" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = static_cast< int >(val1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "RBDY2_PartialDamping" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      RBDY2_PartialDamping(arg1,arg2);
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RBDY2_WriteLastDof(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  
  if (!PyArg_ParseTuple(args,(char *)":RBDY2_WriteLastDof")) SWIG_fail;
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      RBDY2_WriteLastDof();
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RBDY2_WriteOutDof(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  int arg1 = (int) 0 ;
  int arg2 = (int) 0 ;
  int val1 ;
  int ecode1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"|OO:RBDY2_WriteOutDof",&obj0,&obj1)) SWIG_fail;
  if (obj0) {
    ecode1 = SWIG_AsVal_int(obj0, &val1);
    if (!SWIG_IsOK(ecode1)) {
      SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "RBDY2_WriteOutDof" "', argument " "1"" of type '" "int""'");
    } 
    arg1 = static_cast< int >(val1);
  }
  if (obj1) {
    ecode2 = SWIG_AsVal_int(obj1, &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "RBDY2_WriteOutDof" "', argument " "2"" of type '" "int""'");
    } 
    arg2 = static_cast< int >(val2);
  }
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      RBDY2_WriteOutDof(arg1,arg2);
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RBDY2_DisplayOutDof(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  
  if (!PyArg_ParseTuple(args,(char *)":RBDY2_DisplayOutDof")) SWIG_fail;
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      RBDY2_DisplayOutDof();
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RBDY2_WriteLastRnod(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  
  if (!PyArg_ParseTuple(args,(char *)":RBDY2_WriteLastRnod")) SWIG_fail;
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      RBDY2_WriteLastRnod();
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RBDY2_WriteOutRnod(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  
  if (!PyArg_ParseTuple(args,(char *)":RBDY2_WriteOutRnod")) SWIG_fail;
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      RBDY2_WriteOutRnod();
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RBDY2_DisplayOutRnod(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  
  if (!PyArg_ParseTuple(args,(char *)":RBDY2_DisplayOutRnod")) SWIG_fail;
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      RBDY2_DisplayOutRnod();
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RBDY2_WriteBodies(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  
  if (!PyArg_ParseTuple(args,(char *)":RBDY2_WriteBodies")) SWIG_fail;
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      RBDY2_WriteBodies();
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RBDY2_ClearedWriteBodies(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  
  if (!PyArg_ParseTuple(args,(char *)":RBDY2_ClearedWriteBodies")) SWIG_fail;
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      RBDY2_ClearedWriteBodies();
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RBDY2_WriteDrivenDof(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  
  if (!PyArg_ParseTuple(args,(char *)":RBDY2_WriteDrivenDof")) SWIG_fail;
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      RBDY2_WriteDrivenDof();
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RBDY2_ReadBodies(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  
  if (!PyArg_ParseTuple(args,(char *)":RBDY2_ReadBodies")) SWIG_fail;
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      RBDY2_ReadBodies();
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RBDY2_ReadIniDof(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  int arg1 = (int) 0 ;
  int val1 ;
  int ecode1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"|O:RBDY2_ReadIniDof",&obj0)) SWIG_fail;
  if (obj0) {
    ecode1 = SWIG_AsVal_int(obj0, &val1);
    if (!SWIG_IsOK(ecode1)) {
      SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "RBDY2_ReadIniDof" "', argument " "1"" of type '" "int""'");
    } 
    arg1 = static_cast< int >(val1);
  }
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      RBDY2_ReadIniDof(arg1);
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RBDY2_ReadDrivenDof(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  
  if (!PyArg_ParseTuple(args,(char *)":RBDY2_ReadDrivenDof")) SWIG_fail;
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      RBDY2_ReadDrivenDof();
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RBDY2_LoadBehaviours(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  
  if (!PyArg_ParseTuple(args,(char *)":RBDY2_LoadBehaviours")) SWIG_fail;
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      RBDY2_LoadBehaviours();
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RBDY2_MP_LoadBehaviours(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  double arg1 ;
  char *arg2 = (char *) 0 ;
  double val1 ;
  int ecode1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:RBDY2_MP_LoadBehaviours",&obj0,&obj1)) SWIG_fail;
  ecode1 = SWIG_AsVal_double(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "RBDY2_MP_LoadBehaviours" "', argument " "1"" of type '" "double""'");
  } 
  arg1 = static_cast< double >(val1);
  res2 = SWIG_AsCharPtrAndSize(obj1, &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "RBDY2_MP_LoadBehaviours" "', argument " "2"" of type '" "char *""'");
  }
  arg2 = reinterpret_cast< char * >(buf2);
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      RBDY2_MP_LoadBehaviours(arg1,arg2);
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_Py_Void();
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return resultobj;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_RBDY2_UpdateWSvsT(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  
  if (!PyArg_ParseTuple(args,(char *)":RBDY2_UpdateWSvsT")) SWIG_fail;
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      RBDY2_UpdateWSvsT();
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RBDY2_UpdateWSvsTime(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  
  if (!PyArg_ParseTuple(args,(char *)":RBDY2_UpdateWSvsTime")) SWIG_fail;
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      RBDY2_UpdateWSvsTime();
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RBDY2_ComputeMass(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  
  if (!PyArg_ParseTuple(args,(char *)":RBDY2_ComputeMass")) SWIG_fail;
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      RBDY2_ComputeMass();
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RBDY2_SetPeriodicCondition(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  double arg1 ;
  double val1 ;
  int ecode1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:RBDY2_SetPeriodicCondition",&obj0)) SWIG_fail;
  ecode1 = SWIG_AsVal_double(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "RBDY2_SetPeriodicCondition" "', argument " "1"" of type '" "double""'");
  } 
  arg1 = static_cast< double >(val1);
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      RBDY2_SetPeriodicCondition(arg1);
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RBDY2_ResizeBodies(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  double arg1 ;
  double val1 ;
  int ecode1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:RBDY2_ResizeBodies",&obj0)) SWIG_fail;
  ecode1 = SWIG_AsVal_double(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "RBDY2_ResizeBodies" "', argument " "1"" of type '" "double""'");
  } 
  arg1 = static_cast< double >(val1);
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      RBDY2_ResizeBodies(arg1);
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RBDY2_NullifyDisplacements(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  
  if (!PyArg_ParseTuple(args,(char *)":RBDY2_NullifyDisplacements")) SWIG_fail;
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      RBDY2_NullifyDisplacements();
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RBDY2_NullifyVelocities(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  
  if (!PyArg_ParseTuple(args,(char *)":RBDY2_NullifyVelocities")) SWIG_fail;
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      RBDY2_NullifyVelocities();
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RBDY2_SetSourcePoint(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  int arg1 ;
  double arg2 ;
  double arg3 ;
  double arg4 ;
  int val1 ;
  int ecode1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  double val4 ;
  int ecode4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:RBDY2_SetSourcePoint",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "RBDY2_SetSourcePoint" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = static_cast< int >(val1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "RBDY2_SetSourcePoint" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  ecode3 = SWIG_AsVal_double(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "RBDY2_SetSourcePoint" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast< double >(val3);
  ecode4 = SWIG_AsVal_double(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "RBDY2_SetSourcePoint" "', argument " "4"" of type '" "double""'");
  } 
  arg4 = static_cast< double >(val4);
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      RBDY2_SetSourcePoint(arg1,arg2,arg3,arg4);
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RBDY2_CheckSourcePoint(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  
  if (!PyArg_ParseTuple(args,(char *)":RBDY2_CheckSourcePoint")) SWIG_fail;
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      RBDY2_CheckSourcePoint();
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RBDY2_MembraneBiaxialLoading(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  int arg1 ;
  int arg2 ;
  double arg3 ;
  double arg4 ;
  int val1 ;
  int ecode1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  double val4 ;
  int ecode4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:RBDY2_MembraneBiaxialLoading",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "RBDY2_MembraneBiaxialLoading" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = static_cast< int >(val1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "RBDY2_MembraneBiaxialLoading" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_double(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "RBDY2_MembraneBiaxialLoading" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast< double >(val3);
  ecode4 = SWIG_AsVal_double(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "RBDY2_MembraneBiaxialLoading" "', argument " "4"" of type '" "double""'");
  } 
  arg4 = static_cast< double >(val4);
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      RBDY2_MembraneBiaxialLoading(arg1,arg2,arg3,arg4);
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RBDY2_BiaxialLoading(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  int arg1 ;
  double arg2 ;
  int arg3 ;
  double arg4 ;
  int arg5 ;
  double arg6 ;
  int arg7 ;
  double arg8 ;
  int val1 ;
  int ecode1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  double val4 ;
  int ecode4 = 0 ;
  int val5 ;
  int ecode5 = 0 ;
  double val6 ;
  int ecode6 = 0 ;
  int val7 ;
  int ecode7 = 0 ;
  double val8 ;
  int ecode8 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  PyObject * obj5 = 0 ;
  PyObject * obj6 = 0 ;
  PyObject * obj7 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOOOOO:RBDY2_BiaxialLoading",&obj0,&obj1,&obj2,&obj3,&obj4,&obj5,&obj6,&obj7)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "RBDY2_BiaxialLoading" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = static_cast< int >(val1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "RBDY2_BiaxialLoading" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "RBDY2_BiaxialLoading" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  ecode4 = SWIG_AsVal_double(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "RBDY2_BiaxialLoading" "', argument " "4"" of type '" "double""'");
  } 
  arg4 = static_cast< double >(val4);
  ecode5 = SWIG_AsVal_int(obj4, &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "RBDY2_BiaxialLoading" "', argument " "5"" of type '" "int""'");
  } 
  arg5 = static_cast< int >(val5);
  ecode6 = SWIG_AsVal_double(obj5, &val6);
  if (!SWIG_IsOK(ecode6)) {
    SWIG_exception_fail(SWIG_ArgError(ecode6), "in method '" "RBDY2_BiaxialLoading" "', argument " "6"" of type '" "double""'");
  } 
  arg6 = static_cast< double >(val6);
  ecode7 = SWIG_AsVal_int(obj6, &val7);
  if (!SWIG_IsOK(ecode7)) {
    SWIG_exception_fail(SWIG_ArgError(ecode7), "in method '" "RBDY2_BiaxialLoading" "', argument " "7"" of type '" "int""'");
  } 
  arg7 = static_cast< int >(val7);
  ecode8 = SWIG_AsVal_double(obj7, &val8);
  if (!SWIG_IsOK(ecode8)) {
    SWIG_exception_fail(SWIG_ArgError(ecode8), "in method '" "RBDY2_BiaxialLoading" "', argument " "8"" of type '" "double""'");
  } 
  arg8 = static_cast< double >(val8);
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      RBDY2_BiaxialLoading(arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8);
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RBDY2_SetYminBoundary(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  double arg1 ;
  double val1 ;
  int ecode1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:RBDY2_SetYminBoundary",&obj0)) SWIG_fail;
  ecode1 = SWIG_AsVal_double(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "RBDY2_SetYminBoundary" "', argument " "1"" of type '" "double""'");
  } 
  arg1 = static_cast< double >(val1);
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      RBDY2_SetYminBoundary(arg1);
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RBDY2_SetYmaxBoundary(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  double arg1 ;
  double val1 ;
  int ecode1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:RBDY2_SetYmaxBoundary",&obj0)) SWIG_fail;
  ecode1 = SWIG_AsVal_double(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "RBDY2_SetYmaxBoundary" "', argument " "1"" of type '" "double""'");
  } 
  arg1 = static_cast< double >(val1);
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      RBDY2_SetYmaxBoundary(arg1);
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RBDY2_SetXminBoundary(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  double arg1 ;
  double val1 ;
  int ecode1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:RBDY2_SetXminBoundary",&obj0)) SWIG_fail;
  ecode1 = SWIG_AsVal_double(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "RBDY2_SetXminBoundary" "', argument " "1"" of type '" "double""'");
  } 
  arg1 = static_cast< double >(val1);
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      RBDY2_SetXminBoundary(arg1);
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RBDY2_SetXmaxBoundary(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  double arg1 ;
  double val1 ;
  int ecode1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:RBDY2_SetXmaxBoundary",&obj0)) SWIG_fail;
  ecode1 = SWIG_AsVal_double(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "RBDY2_SetXmaxBoundary" "', argument " "1"" of type '" "double""'");
  } 
  arg1 = static_cast< double >(val1);
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      RBDY2_SetXmaxBoundary(arg1);
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RBDY2_SetEquilibriumNorm(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  char *arg1 = (char *) 0 ;
  double arg2 ;
  int res1 ;
  char *buf1 = 0 ;
  int alloc1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:RBDY2_SetEquilibriumNorm",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_AsCharPtrAndSize(obj0, &buf1, NULL, &alloc1);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RBDY2_SetEquilibriumNorm" "', argument " "1"" of type '" "char *""'");
  }
  arg1 = reinterpret_cast< char * >(buf1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "RBDY2_SetEquilibriumNorm" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      RBDY2_SetEquilibriumNorm(arg1,arg2);
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_Py_Void();
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  return resultobj;
fail:
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  return NULL;
}


SWIGINTERN PyObject *_wrap_RBDY2_AddDof2InBodies(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  
  if (!PyArg_ParseTuple(args,(char *)":RBDY2_AddDof2InBodies")) SWIG_fail;
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      RBDY2_AddDof2InBodies();
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RBDY2_InitFreeBoundary(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  double arg1 ;
  double arg2 ;
  double arg3 ;
  double val1 ;
  int ecode1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:RBDY2_InitFreeBoundary",&obj0,&obj1,&obj2)) SWIG_fail;
  ecode1 = SWIG_AsVal_double(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "RBDY2_InitFreeBoundary" "', argument " "1"" of type '" "double""'");
  } 
  arg1 = static_cast< double >(val1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "RBDY2_InitFreeBoundary" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  ecode3 = SWIG_AsVal_double(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "RBDY2_InitFreeBoundary" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast< double >(val3);
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      RBDY2_InitFreeBoundary(arg1,arg2,arg3);
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RBDY2_UpdateThermalStrain(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  
  if (!PyArg_ParseTuple(args,(char *)":RBDY2_UpdateThermalStrain")) SWIG_fail;
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      RBDY2_UpdateThermalStrain();
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RBDY2_GetNbRBDY2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)":RBDY2_GetNbRBDY2")) SWIG_fail;
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      result = (int)RBDY2_GetNbRBDY2();
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RBDY2_GetBodyArea(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  int arg1 ;
  int val1 ;
  int ecode1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:RBDY2_GetBodyArea",&obj0)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "RBDY2_GetBodyArea" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = static_cast< int >(val1);
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      result = (double)RBDY2_GetBodyArea(arg1);
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RBDY2_GetAllArea(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  double **arg1 = (double **) 0 ;
  int *arg2 = (int *) 0 ;
  double *data_temp1 ;
  int dim_temp1 ;
  
  {
    arg1 = &data_temp1;
    arg2 = &dim_temp1;
  }
  if (!PyArg_ParseTuple(args,(char *)":RBDY2_GetAllArea")) SWIG_fail;
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      RBDY2_GetAllArea(arg1,arg2);
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_Py_Void();
  {
    npy_intp dims[1] = {
      *arg2 
    };
    PyObject * obj = PyArray_SimpleNewFromData(1, dims, NPY_DOUBLE, (void*)(*arg1));
    if (!obj) SWIG_fail;
    PyArrayObject * array = (PyArrayObject*) obj;
    attach_fortran_memory_to_numpy_array(array, (void*)(*arg1), NPY_DOUBLE, dims[0], 0);
    PyArray_ENABLEFLAGS(array,NPY_ARRAY_WRITEABLE);
    
    resultobj = SWIG_Python_AppendOutput(resultobj, obj);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RBDY2_ComputePartialEquilibriumState(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  double arg1 ;
  double arg2 ;
  double *arg3 ;
  double val1 ;
  int ecode1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject *array3 = NULL ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  {
    npy_intp dims[1] = {
      2 
    };
    array3 = PyArray_SimpleNew(1, dims, NPY_DOUBLE);
    if (!array3) SWIG_fail;
    arg3 = (double *) array_data(array3);
  }
  if (!PyArg_ParseTuple(args,(char *)"OO:RBDY2_ComputePartialEquilibriumState",&obj0,&obj1)) SWIG_fail;
  ecode1 = SWIG_AsVal_double(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "RBDY2_ComputePartialEquilibriumState" "', argument " "1"" of type '" "double""'");
  } 
  arg1 = static_cast< double >(val1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "RBDY2_ComputePartialEquilibriumState" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      RBDY2_ComputePartialEquilibriumState(arg1,arg2,arg3);
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_Py_Void();
  {
    resultobj = SWIG_Python_AppendOutput(resultobj, (PyObject*)array3);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RBDY2_CheckPartialEquilibriumState(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  double arg1 ;
  double arg2 ;
  double val1 ;
  int ecode1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:RBDY2_CheckPartialEquilibriumState",&obj0,&obj1)) SWIG_fail;
  ecode1 = SWIG_AsVal_double(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "RBDY2_CheckPartialEquilibriumState" "', argument " "1"" of type '" "double""'");
  } 
  arg1 = static_cast< double >(val1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "RBDY2_CheckPartialEquilibriumState" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      result = (bool)RBDY2_CheckPartialEquilibriumState(arg1,arg2);
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RBDY2_SetBodiesInvisible(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  int *arg1 = (int *) 0 ;
  int arg2 ;
  PyArrayObject *array1 = NULL ;
  int is_new_object1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:RBDY2_SetBodiesInvisible",&obj0)) SWIG_fail;
  {
    npy_intp size[1] = {
      -1 
    };
    array1 = obj_to_array_contiguous_allow_conversion(obj0,
      NPY_INT,
      &is_new_object1);
    if (!array1 || !require_dimensions(array1, 1) ||
      !require_size(array1, size, 1)) SWIG_fail;
    arg1 = (int*) array_data(array1);
    arg2 = (int) array_size(array1,0);
  }
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      RBDY2_SetBodiesInvisible(arg1,arg2);
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_Py_Void();
  {
    if (is_new_object1 && array1)
    {
      Py_DECREF(array1); 
    }
  }
  return resultobj;
fail:
  {
    if (is_new_object1 && array1)
    {
      Py_DECREF(array1); 
    }
  }
  return NULL;
}


SWIGINTERN PyObject *_wrap_RBDY2_IsVisible(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  int arg1 ;
  int val1 ;
  int ecode1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:RBDY2_IsVisible",&obj0)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "RBDY2_IsVisible" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = static_cast< int >(val1);
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      result = (int)RBDY2_IsVisible(arg1);
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RBDY2_GetBodyMass(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  int arg1 ;
  int val1 ;
  int ecode1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:RBDY2_GetBodyMass",&obj0)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "RBDY2_GetBodyMass" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = static_cast< int >(val1);
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      result = (double)RBDY2_GetBodyMass(arg1);
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RBDY2_GetAllMass(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  double **arg1 = (double **) 0 ;
  int *arg2 = (int *) 0 ;
  double *data_temp1 ;
  int dim_temp1 ;
  
  {
    arg1 = &data_temp1;
    arg2 = &dim_temp1;
  }
  if (!PyArg_ParseTuple(args,(char *)":RBDY2_GetAllMass")) SWIG_fail;
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      RBDY2_GetAllMass(arg1,arg2);
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_Py_Void();
  {
    npy_intp dims[1] = {
      *arg2 
    };
    PyObject * obj = PyArray_SimpleNewFromData(1, dims, NPY_DOUBLE, (void*)(*arg1));
    if (!obj) SWIG_fail;
    PyArrayObject * array = (PyArrayObject*) obj;
    attach_fortran_memory_to_numpy_array(array, (void*)(*arg1), NPY_DOUBLE, dims[0], 0);
    PyArray_ENABLEFLAGS(array,NPY_ARRAY_WRITEABLE);
    
    resultobj = SWIG_Python_AppendOutput(resultobj, obj);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RBDY2_CompCoor(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  
  if (!PyArg_ParseTuple(args,(char *)":RBDY2_CompCoor")) SWIG_fail;
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      RBDY2_CompCoor();
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RBDY2_GetBodyDensity(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  int arg1 ;
  int val1 ;
  int ecode1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:RBDY2_GetBodyDensity",&obj0)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "RBDY2_GetBodyDensity" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = static_cast< int >(val1);
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      result = (double)RBDY2_GetBodyDensity(arg1);
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RBDY2_GetNbContactor(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  int arg1 ;
  int val1 ;
  int ecode1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:RBDY2_GetNbContactor",&obj0)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "RBDY2_GetNbContactor" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = static_cast< int >(val1);
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      result = (int)RBDY2_GetNbContactor(arg1);
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RBDY2_GetContactorType(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  int arg1 ;
  char **arg2 = (char **) 0 ;
  int val1 ;
  int ecode1 = 0 ;
  char *tmp_c52 ;
  PyObject * obj0 = 0 ;
  
  {
    arg2 = &tmp_c52;
  }
  if (!PyArg_ParseTuple(args,(char *)"O:RBDY2_GetContactorType",&obj0)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "RBDY2_GetContactorType" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = static_cast< int >(val1);
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      RBDY2_GetContactorType(arg1,arg2);
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_Py_Void();
  {
    PyObject *chaine;
    chaine = PyString_FromStringAndSize(*arg2, 5);
    free_ptrFortranString(*arg2, 5);
    resultobj = SWIG_Python_AppendOutput(resultobj, chaine);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RBDY2_GetContactorColor(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  int arg1 ;
  int arg2 ;
  char **arg3 = (char **) 0 ;
  int val1 ;
  int ecode1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  char *tmp_c53 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  {
    arg3 = &tmp_c53;
  }
  if (!PyArg_ParseTuple(args,(char *)"OO:RBDY2_GetContactorColor",&obj0,&obj1)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "RBDY2_GetContactorColor" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = static_cast< int >(val1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "RBDY2_GetContactorColor" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      RBDY2_GetContactorColor(arg1,arg2,arg3);
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_Py_Void();
  {
    PyObject *chaine;
    chaine = PyString_FromStringAndSize(*arg3, 5);
    free_ptrFortranString(*arg3, 5);
    resultobj = SWIG_Python_AppendOutput(resultobj, chaine);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RBDY2_SetContactorColor(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  int arg1 ;
  int arg2 ;
  char *arg3 = (char *) 0 ;
  int val1 ;
  int ecode1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int res3 ;
  char *buf3 = 0 ;
  int alloc3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:RBDY2_SetContactorColor",&obj0,&obj1,&obj2)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "RBDY2_SetContactorColor" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = static_cast< int >(val1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "RBDY2_SetContactorColor" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  res3 = SWIG_AsCharPtrAndSize(obj2, &buf3, NULL, &alloc3);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "RBDY2_SetContactorColor" "', argument " "3"" of type '" "char *""'");
  }
  arg3 = reinterpret_cast< char * >(buf3);
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      RBDY2_SetContactorColor(arg1,arg2,arg3);
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_Py_Void();
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return resultobj;
fail:
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_RBDY2_GetPtrMass(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  int arg1 ;
  double **arg2 = (double **) 0 ;
  int val1 ;
  int ecode1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:RBDY2_GetPtrMass",&obj0,&obj1)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "RBDY2_GetPtrMass" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = static_cast< int >(val1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_p_double, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "RBDY2_GetPtrMass" "', argument " "2"" of type '" "double **""'"); 
  }
  arg2 = reinterpret_cast< double ** >(argp2);
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      RBDY2_GetPtrMass(arg1,arg2);
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RBDY2_GetVelocity(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  int arg1 ;
  double *arg2 = (double *) 0 ;
  int val1 ;
  int ecode1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:RBDY2_GetVelocity",&obj0,&obj1)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "RBDY2_GetVelocity" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = static_cast< int >(val1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_double, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "RBDY2_GetVelocity" "', argument " "2"" of type '" "double *""'"); 
  }
  arg2 = reinterpret_cast< double * >(argp2);
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      RBDY2_GetVelocity(arg1,arg2);
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RBDY2_getDrvVlocy(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  int arg1 ;
  int **arg2 = (int **) 0 ;
  int *arg3 = (int *) 0 ;
  double **arg4 = (double **) 0 ;
  int *arg5 = (int *) 0 ;
  int val1 ;
  int ecode1 = 0 ;
  int *data_temp2 ;
  int dim_temp2 ;
  double *data_temp4 ;
  int dim_temp4 ;
  PyObject * obj0 = 0 ;
  
  {
    arg2 = &data_temp2;
    arg3 = &dim_temp2;
  }
  {
    arg4 = &data_temp4;
    arg5 = &dim_temp4;
  }
  if (!PyArg_ParseTuple(args,(char *)"O:RBDY2_getDrvVlocy",&obj0)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "RBDY2_getDrvVlocy" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = static_cast< int >(val1);
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      RBDY2_getDrvVlocy(arg1,arg2,arg3,arg4,arg5);
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_Py_Void();
  {
    npy_intp dims[1] = {
      *arg3 
    };
    PyObject * obj = PyArray_SimpleNewFromData(1, dims, NPY_INT, (void*)(*arg2));
    if (!obj) SWIG_fail;
    PyArrayObject * array = (PyArrayObject*) obj;
    attach_fortran_memory_to_numpy_array(array, (void*)(*arg2), NPY_INT, dims[0], 0);
    PyArray_ENABLEFLAGS(array,NPY_ARRAY_WRITEABLE);
    
    resultobj = SWIG_Python_AppendOutput(resultobj, obj);
  }
  {
    npy_intp dims[1] = {
      *arg5 
    };
    PyObject * obj = PyArray_SimpleNewFromData(1, dims, NPY_DOUBLE, (void*)(*arg4));
    if (!obj) SWIG_fail;
    PyArrayObject * array = (PyArrayObject*) obj;
    attach_fortran_memory_to_numpy_array(array, (void*)(*arg4), NPY_DOUBLE, dims[0], 0);
    PyArray_ENABLEFLAGS(array,NPY_ARRAY_WRITEABLE);
    
    resultobj = SWIG_Python_AppendOutput(resultobj, obj);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RBDY2_computeDrvVlocy(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  int arg1 ;
  double *arg2 = (double *) 0 ;
  int arg3 ;
  int val1 ;
  int ecode1 = 0 ;
  PyArrayObject *array2 = NULL ;
  int is_new_object2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:RBDY2_computeDrvVlocy",&obj0,&obj1)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "RBDY2_computeDrvVlocy" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = static_cast< int >(val1);
  {
    npy_intp size[1] = {
      -1 
    };
    array2 = obj_to_array_contiguous_allow_conversion(obj1,
      NPY_DOUBLE,
      &is_new_object2);
    if (!array2 || !require_dimensions(array2, 1) ||
      !require_size(array2, size, 1)) SWIG_fail;
    arg2 = (double*) array_data(array2);
    arg3 = (int) array_size(array2,0);
  }
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      RBDY2_computeDrvVlocy(arg1,arg2,arg3);
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_Py_Void();
  {
    if (is_new_object2 && array2)
    {
      Py_DECREF(array2); 
    }
  }
  return resultobj;
fail:
  {
    if (is_new_object2 && array2)
    {
      Py_DECREF(array2); 
    }
  }
  return NULL;
}


SWIGINTERN PyObject *_wrap_RBDY2_SetVisible(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  int arg1 ;
  int val1 ;
  int ecode1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:RBDY2_SetVisible",&obj0)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "RBDY2_SetVisible" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = static_cast< int >(val1);
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      RBDY2_SetVisible(arg1);
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RBDY2_SetInvisible(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  int arg1 ;
  int val1 ;
  int ecode1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:RBDY2_SetInvisible",&obj0)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "RBDY2_SetInvisible" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = static_cast< int >(val1);
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      RBDY2_SetInvisible(arg1);
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RBDY2_SetVisibleVlocyDrivenDof(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  int arg1 ;
  int arg2 ;
  int val1 ;
  int ecode1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:RBDY2_SetVisibleVlocyDrivenDof",&obj0,&obj1)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "RBDY2_SetVisibleVlocyDrivenDof" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = static_cast< int >(val1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "RBDY2_SetVisibleVlocyDrivenDof" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      RBDY2_SetVisibleVlocyDrivenDof(arg1,arg2);
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RBDY2_SetInvisibleVlocyDrivenDof(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  int arg1 ;
  int arg2 ;
  int val1 ;
  int ecode1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:RBDY2_SetInvisibleVlocyDrivenDof",&obj0,&obj1)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "RBDY2_SetInvisibleVlocyDrivenDof" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = static_cast< int >(val1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "RBDY2_SetInvisibleVlocyDrivenDof" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      RBDY2_SetInvisibleVlocyDrivenDof(arg1,arg2);
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RBDY2_GetBulkBehavID(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  int arg1 ;
  int arg2 ;
  char **arg3 = (char **) 0 ;
  int val1 ;
  int ecode1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  char *tmp_c53 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  {
    arg3 = &tmp_c53;
  }
  if (!PyArg_ParseTuple(args,(char *)"OO:RBDY2_GetBulkBehavID",&obj0,&obj1)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "RBDY2_GetBulkBehavID" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = static_cast< int >(val1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "RBDY2_GetBulkBehavID" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      RBDY2_GetBulkBehavID(arg1,arg2,arg3);
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_Py_Void();
  {
    PyObject *chaine;
    chaine = PyString_FromStringAndSize(*arg3, 5);
    free_ptrFortranString(*arg3, 5);
    resultobj = SWIG_Python_AppendOutput(resultobj, chaine);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RBDY2_GetBulkBehavNumber(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  int arg1 ;
  int val1 ;
  int ecode1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:RBDY2_GetBulkBehavNumber",&obj0)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "RBDY2_GetBulkBehavNumber" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = static_cast< int >(val1);
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      result = (int)RBDY2_GetBulkBehavNumber(arg1);
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RBDY2_SetSurfaceSectors(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  int arg1 ;
  int val1 ;
  int ecode1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:RBDY2_SetSurfaceSectors",&obj0)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "RBDY2_SetSurfaceSectors" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = static_cast< int >(val1);
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      RBDY2_SetSurfaceSectors(arg1);
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RBDY2_GetStress(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  int arg1 ;
  double **arg2 = (double **) 0 ;
  int *arg3 = (int *) 0 ;
  int *arg4 = (int *) 0 ;
  int val1 ;
  int ecode1 = 0 ;
  double *data_temp2 ;
  int dim1_temp2 ;
  int dim2_temp2 ;
  PyObject * obj0 = 0 ;
  
  {
    arg2 = &data_temp2;
    arg3 = &dim1_temp2;
    arg4 = &dim2_temp2;
  }
  if (!PyArg_ParseTuple(args,(char *)"O:RBDY2_GetStress",&obj0)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "RBDY2_GetStress" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = static_cast< int >(val1);
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      RBDY2_GetStress(arg1,arg2,arg3,arg4);
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_Py_Void();
  {
    npy_intp dims[2] = {
      *arg4, *arg3 
    };
    PyObject * obj = PyArray_SimpleNewFromData(2, dims, NPY_DOUBLE, (void*)(*arg2));
    if (!obj) SWIG_fail;
    PyArrayObject * array = (PyArrayObject*) obj;
    attach_fortran_memory_to_numpy_array(array, (void*)(*arg2), NPY_DOUBLE, dims[1], dims[0]);
    PyArray_ENABLEFLAGS(array,NPY_ARRAY_WRITEABLE);
    resultobj = SWIG_Python_AppendOutput(resultobj, obj);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RBDY2_ModifyBody(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  int arg1 ;
  int arg2 ;
  double *arg3 = (double *) 0 ;
  int arg4 ;
  int val1 ;
  int ecode1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyArrayObject *array3 = NULL ;
  int is_new_object3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:RBDY2_ModifyBody",&obj0,&obj1,&obj2)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "RBDY2_ModifyBody" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = static_cast< int >(val1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "RBDY2_ModifyBody" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    npy_intp size[1] = {
      -1 
    };
    array3 = obj_to_array_contiguous_allow_conversion(obj2,
      NPY_DOUBLE,
      &is_new_object3);
    if (!array3 || !require_dimensions(array3, 1) ||
      !require_size(array3, size, 1)) SWIG_fail;
    arg3 = (double*) array_data(array3);
    arg4 = (int) array_size(array3,0);
  }
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      RBDY2_ModifyBody(arg1,arg2,arg3,arg4);
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_Py_Void();
  {
    if (is_new_object3 && array3)
    {
      Py_DECREF(array3); 
    }
  }
  return resultobj;
fail:
  {
    if (is_new_object3 && array3)
    {
      Py_DECREF(array3); 
    }
  }
  return NULL;
}


SWIGINTERN PyObject *_wrap_RBDY2_SkipInvisible(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  
  if (!PyArg_ParseTuple(args,(char *)":RBDY2_SkipInvisible")) SWIG_fail;
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      RBDY2_SkipInvisible();
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RBDY2_InitializeStresses(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  
  if (!PyArg_ParseTuple(args,(char *)":RBDY2_InitializeStresses")) SWIG_fail;
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      RBDY2_InitializeStresses();
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RBDY2_InitializeWS(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  double arg1 ;
  double val1 ;
  int ecode1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:RBDY2_InitializeWS",&obj0)) SWIG_fail;
  ecode1 = SWIG_AsVal_double(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "RBDY2_InitializeWS" "', argument " "1"" of type '" "double""'");
  } 
  arg1 = static_cast< double >(val1);
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      RBDY2_InitializeWS(arg1);
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RBDY2_CleanMemory(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  
  if (!PyArg_ParseTuple(args,(char *)":RBDY2_CleanMemory")) SWIG_fail;
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      RBDY2_CleanMemory();
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RBDY2_GetThermalValue(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  int arg1 ;
  int arg2 ;
  int val1 ;
  int ecode1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:RBDY2_GetThermalValue",&obj0,&obj1)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "RBDY2_GetThermalValue" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = static_cast< int >(val1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "RBDY2_GetThermalValue" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      result = (double)RBDY2_GetThermalValue(arg1,arg2);
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RBDY2_GetElectricalPotential(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  int arg1 ;
  int val1 ;
  int ecode1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:RBDY2_GetElectricalPotential",&obj0)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "RBDY2_GetElectricalPotential" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = static_cast< int >(val1);
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      result = (double)RBDY2_GetElectricalPotential(arg1);
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RBDY2_GetElectricalCurrent(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  int arg1 ;
  int val1 ;
  int ecode1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:RBDY2_GetElectricalCurrent",&obj0)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "RBDY2_GetElectricalCurrent" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = static_cast< int >(val1);
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      result = (double)RBDY2_GetElectricalCurrent(arg1);
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RBDY2_GetBetai(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  int arg1 ;
  int arg2 ;
  int val1 ;
  int ecode1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:RBDY2_GetBetai",&obj0,&obj1)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "RBDY2_GetBetai" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = static_cast< int >(val1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "RBDY2_GetBetai" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      result = (double)RBDY2_GetBetai(arg1,arg2);
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RBDY2_GetPeriode(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  int arg1 ;
  int val1 ;
  int ecode1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:RBDY2_GetPeriode",&obj0)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "RBDY2_GetPeriode" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = static_cast< int >(val1);
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      result = (int)RBDY2_GetPeriode(arg1);
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RBDY2_GetAverageSurfaceEnergy(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  int arg1 ;
  int arg2 ;
  int val1 ;
  int ecode1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:RBDY2_GetAverageSurfaceEnergy",&obj0,&obj1)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "RBDY2_GetAverageSurfaceEnergy" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = static_cast< int >(val1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "RBDY2_GetAverageSurfaceEnergy" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      result = (double)RBDY2_GetAverageSurfaceEnergy(arg1,arg2);
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_xKSID_LoadTactors(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  
  if (!PyArg_ParseTuple(args,(char *)":xKSID_LoadTactors")) SWIG_fail;
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      xKSID_LoadTactors();
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_xKSID_GetNbxKSID(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)":xKSID_GetNbxKSID")) SWIG_fail;
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      result = (int)xKSID_GetNbxKSID();
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_xKSID_GetPtrxKSID2BDYTY(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  int **arg1 = (int **) 0 ;
  int *arg2 = (int *) 0 ;
  int *arg3 = (int *) 0 ;
  int *data_temp1 ;
  int dim1_temp1 ;
  int dim2_temp1 ;
  
  {
    arg1 = &data_temp1;
    arg2 = &dim1_temp1;
    arg3 = &dim2_temp1;
  }
  if (!PyArg_ParseTuple(args,(char *)":xKSID_GetPtrxKSID2BDYTY")) SWIG_fail;
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      xKSID_GetPtrxKSID2BDYTY(arg1,arg2,arg3);
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_Py_Void();
  {
    npy_intp dims[2] = {
      *arg3, *arg2 
    };
    PyObject * array = PyArray_SimpleNewFromData(2, dims, NPY_INT, (void*)(*arg1));
    if (!array) SWIG_fail;
    resultobj = SWIG_Python_AppendOutput(resultobj, array);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_xKSID_IsVisible(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  int arg1 ;
  int val1 ;
  int ecode1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:xKSID_IsVisible",&obj0)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "xKSID_IsVisible" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = static_cast< int >(val1);
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      result = (int)xKSID_IsVisible(arg1);
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_xKSID_GetContactorRadius(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  int arg1 ;
  int val1 ;
  int ecode1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:xKSID_GetContactorRadius",&obj0)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "xKSID_GetContactorRadius" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = static_cast< int >(val1);
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      result = (double)xKSID_GetContactorRadius(arg1);
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_xKSID_GetContactorCoor(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  int arg1 ;
  double **arg2 = (double **) 0 ;
  int *arg3 = (int *) 0 ;
  int val1 ;
  int ecode1 = 0 ;
  double *data_temp2 ;
  int dim_temp2 ;
  PyObject * obj0 = 0 ;
  
  {
    arg2 = &data_temp2;
    arg3 = &dim_temp2;
  }
  if (!PyArg_ParseTuple(args,(char *)"O:xKSID_GetContactorCoor",&obj0)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "xKSID_GetContactorCoor" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = static_cast< int >(val1);
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      xKSID_GetContactorCoor(arg1,arg2,arg3);
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_Py_Void();
  {
    npy_intp dims[1] = {
      *arg3 
    };
    PyObject * obj = PyArray_SimpleNewFromData(1, dims, NPY_DOUBLE, (void*)(*arg2));
    if (!obj) SWIG_fail;
    PyArrayObject * array = (PyArrayObject*) obj;
    attach_fortran_memory_to_numpy_array(array, (void*)(*arg2), NPY_DOUBLE, dims[0], 0);
    PyArray_ENABLEFLAGS(array,NPY_ARRAY_WRITEABLE);
    
    resultobj = SWIG_Python_AppendOutput(resultobj, obj);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_xKSID_InitOutlines(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  double **arg1 = (double **) 0 ;
  int *arg2 = (int *) 0 ;
  int *arg3 = (int *) 0 ;
  double *data_temp1 ;
  int dim1_temp1 ;
  int dim2_temp1 ;
  
  {
    arg1 = &data_temp1;
    arg2 = &dim1_temp1;
    arg3 = &dim2_temp1;
  }
  if (!PyArg_ParseTuple(args,(char *)":xKSID_InitOutlines")) SWIG_fail;
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      xKSID_InitOutlines(arg1,arg2,arg3);
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_Py_Void();
  {
    npy_intp dims[2] = {
      *arg3, *arg2 
    };
    PyObject * array = PyArray_SimpleNewFromData(2, dims, NPY_DOUBLE, (void*)(*arg1));
    if (!array) SWIG_fail;
    resultobj = SWIG_Python_AppendOutput(resultobj, array);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_xKSID_InitScalarFields(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  double **arg1 = (double **) 0 ;
  int *arg2 = (int *) 0 ;
  int *arg3 = (int *) 0 ;
  double *data_temp1 ;
  int dim1_temp1 ;
  int dim2_temp1 ;
  
  {
    arg1 = &data_temp1;
    arg2 = &dim1_temp1;
    arg3 = &dim2_temp1;
  }
  if (!PyArg_ParseTuple(args,(char *)":xKSID_InitScalarFields")) SWIG_fail;
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      xKSID_InitScalarFields(arg1,arg2,arg3);
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_Py_Void();
  {
    npy_intp dims[2] = {
      *arg3, *arg2 
    };
    PyObject * array = PyArray_SimpleNewFromData(2, dims, NPY_DOUBLE, (void*)(*arg1));
    if (!array) SWIG_fail;
    resultobj = SWIG_Python_AppendOutput(resultobj, array);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_xKSID_UpdatePostdata(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  
  if (!PyArg_ParseTuple(args,(char *)":xKSID_UpdatePostdata")) SWIG_fail;
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      xKSID_UpdatePostdata();
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_xKSID_GetNbPointOutlines(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  int **arg1 = (int **) 0 ;
  int *arg2 = (int *) 0 ;
  int *data_temp1 = NULL ;
  int dim_temp1 ;
  
  {
    arg1 = &data_temp1;
    arg2 = &dim_temp1;
  }
  if (!PyArg_ParseTuple(args,(char *)":xKSID_GetNbPointOutlines")) SWIG_fail;
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      xKSID_GetNbPointOutlines(arg1,arg2);
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_Py_Void();
  {
    npy_intp dims[1] = {
      *arg2 
    };
    PyObject* obj = PyArray_SimpleNewFromData(1, dims, NPY_INT, (void*)(*arg1));
    PyArrayObject* array = (PyArrayObject*) obj;
    
    if (!array) SWIG_fail;
    resultobj = SWIG_Python_AppendOutput(resultobj, obj);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_xKSID_GetNbScalarFields(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)":xKSID_GetNbScalarFields")) SWIG_fail;
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      result = (int)xKSID_GetNbScalarFields();
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_xKSID_CleanMemory(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  
  if (!PyArg_ParseTuple(args,(char *)":xKSID_CleanMemory")) SWIG_fail;
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      xKSID_CleanMemory();
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_xKSID_SetXdilation(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  int arg1 ;
  double arg2 ;
  int val1 ;
  int ecode1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:xKSID_SetXdilation",&obj0,&obj1)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "xKSID_SetXdilation" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = static_cast< int >(val1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "xKSID_SetXdilation" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      xKSID_SetXdilation(arg1,arg2);
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_xKSID_SetVdilation(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  int arg1 ;
  double arg2 ;
  int val1 ;
  int ecode1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:xKSID_SetVdilation",&obj0,&obj1)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "xKSID_SetVdilation" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = static_cast< int >(val1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "xKSID_SetVdilation" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      xKSID_SetVdilation(arg1,arg2);
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CYLND_LoadTactors(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  
  if (!PyArg_ParseTuple(args,(char *)":CYLND_LoadTactors")) SWIG_fail;
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      CYLND_LoadTactors();
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CYLND_IsVisible(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  int arg1 ;
  int val1 ;
  int ecode1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:CYLND_IsVisible",&obj0)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "CYLND_IsVisible" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = static_cast< int >(val1);
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      result = (int)CYLND_IsVisible(arg1);
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CYLND_GetNbCYLND(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)":CYLND_GetNbCYLND")) SWIG_fail;
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      result = (int)CYLND_GetNbCYLND();
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CYLND_GetShape(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  int arg1 ;
  double **arg2 = (double **) 0 ;
  int *arg3 = (int *) 0 ;
  int val1 ;
  int ecode1 = 0 ;
  double *data_temp2 ;
  int dim_temp2 ;
  PyObject * obj0 = 0 ;
  
  {
    arg2 = &data_temp2;
    arg3 = &dim_temp2;
  }
  if (!PyArg_ParseTuple(args,(char *)"O:CYLND_GetShape",&obj0)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "CYLND_GetShape" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = static_cast< int >(val1);
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      CYLND_GetShape(arg1,arg2,arg3);
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_Py_Void();
  {
    npy_intp dims[1] = {
      *arg3 
    };
    PyObject * obj = PyArray_SimpleNewFromData(1, dims, NPY_DOUBLE, (void*)(*arg2));
    if (!obj) SWIG_fail;
    PyArrayObject * array = (PyArrayObject*) obj;
    attach_fortran_memory_to_numpy_array(array, (void*)(*arg2), NPY_DOUBLE, dims[0], 0);
    PyArray_ENABLEFLAGS(array,NPY_ARRAY_WRITEABLE);
    
    resultobj = SWIG_Python_AppendOutput(resultobj, obj);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CYLND_GetPtrCYLND2BDYTY(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  int **arg1 = (int **) 0 ;
  int *arg2 = (int *) 0 ;
  int *arg3 = (int *) 0 ;
  int *data_temp1 ;
  int dim1_temp1 ;
  int dim2_temp1 ;
  
  {
    arg1 = &data_temp1;
    arg2 = &dim1_temp1;
    arg3 = &dim2_temp1;
  }
  if (!PyArg_ParseTuple(args,(char *)":CYLND_GetPtrCYLND2BDYTY")) SWIG_fail;
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      CYLND_GetPtrCYLND2BDYTY(arg1,arg2,arg3);
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_Py_Void();
  {
    npy_intp dims[2] = {
      *arg3, *arg2 
    };
    PyObject * array = PyArray_SimpleNewFromData(2, dims, NPY_INT, (void*)(*arg1));
    if (!array) SWIG_fail;
    resultobj = SWIG_Python_AppendOutput(resultobj, array);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CYLND_InitOutlines(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  double **arg1 = (double **) 0 ;
  int *arg2 = (int *) 0 ;
  int *arg3 = (int *) 0 ;
  double *data_temp1 ;
  int dim1_temp1 ;
  int dim2_temp1 ;
  
  {
    arg1 = &data_temp1;
    arg2 = &dim1_temp1;
    arg3 = &dim2_temp1;
  }
  if (!PyArg_ParseTuple(args,(char *)":CYLND_InitOutlines")) SWIG_fail;
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      CYLND_InitOutlines(arg1,arg2,arg3);
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_Py_Void();
  {
    npy_intp dims[2] = {
      *arg3, *arg2 
    };
    PyObject * array = PyArray_SimpleNewFromData(2, dims, NPY_DOUBLE, (void*)(*arg1));
    if (!array) SWIG_fail;
    resultobj = SWIG_Python_AppendOutput(resultobj, array);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CYLND_InitScalarFields(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  double **arg1 = (double **) 0 ;
  int *arg2 = (int *) 0 ;
  int *arg3 = (int *) 0 ;
  double *data_temp1 ;
  int dim1_temp1 ;
  int dim2_temp1 ;
  
  {
    arg1 = &data_temp1;
    arg2 = &dim1_temp1;
    arg3 = &dim2_temp1;
  }
  if (!PyArg_ParseTuple(args,(char *)":CYLND_InitScalarFields")) SWIG_fail;
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      CYLND_InitScalarFields(arg1,arg2,arg3);
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_Py_Void();
  {
    npy_intp dims[2] = {
      *arg3, *arg2 
    };
    PyObject * array = PyArray_SimpleNewFromData(2, dims, NPY_DOUBLE, (void*)(*arg1));
    if (!array) SWIG_fail;
    resultobj = SWIG_Python_AppendOutput(resultobj, array);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CYLND_UpdatePostdata(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  
  if (!PyArg_ParseTuple(args,(char *)":CYLND_UpdatePostdata")) SWIG_fail;
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      CYLND_UpdatePostdata();
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CYLND_GetNbPointOutlines(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  int **arg1 = (int **) 0 ;
  int *arg2 = (int *) 0 ;
  int *data_temp1 = NULL ;
  int dim_temp1 ;
  
  {
    arg1 = &data_temp1;
    arg2 = &dim_temp1;
  }
  if (!PyArg_ParseTuple(args,(char *)":CYLND_GetNbPointOutlines")) SWIG_fail;
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      CYLND_GetNbPointOutlines(arg1,arg2);
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_Py_Void();
  {
    npy_intp dims[1] = {
      *arg2 
    };
    PyObject* obj = PyArray_SimpleNewFromData(1, dims, NPY_INT, (void*)(*arg1));
    PyArrayObject* array = (PyArrayObject*) obj;
    
    if (!array) SWIG_fail;
    resultobj = SWIG_Python_AppendOutput(resultobj, obj);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CYLND_GetNbScalarFields(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)":CYLND_GetNbScalarFields")) SWIG_fail;
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      result = (int)CYLND_GetNbScalarFields();
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CYLND_GetPtrAllConnectivities(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  int **arg1 = (int **) 0 ;
  int *arg2 = (int *) 0 ;
  int *data_temp1 = NULL ;
  int dim_temp1 ;
  
  {
    arg1 = &data_temp1;
    arg2 = &dim_temp1;
  }
  if (!PyArg_ParseTuple(args,(char *)":CYLND_GetPtrAllConnectivities")) SWIG_fail;
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      CYLND_GetPtrAllConnectivities(arg1,arg2);
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_Py_Void();
  {
    npy_intp dims[1] = {
      *arg2 
    };
    PyObject* obj = PyArray_SimpleNewFromData(1, dims, NPY_INT, (void*)(*arg1));
    PyArrayObject* array = (PyArrayObject*) obj;
    
    if (!array) SWIG_fail;
    resultobj = SWIG_Python_AppendOutput(resultobj, obj);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CYLND_CleanMemory(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  
  if (!PyArg_ParseTuple(args,(char *)":CYLND_CleanMemory")) SWIG_fail;
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      CYLND_CleanMemory();
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DNLYC_LoadTactors(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  
  if (!PyArg_ParseTuple(args,(char *)":DNLYC_LoadTactors")) SWIG_fail;
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      DNLYC_LoadTactors();
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DNLYC_IsVisible(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  int arg1 ;
  int val1 ;
  int ecode1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:DNLYC_IsVisible",&obj0)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "DNLYC_IsVisible" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = static_cast< int >(val1);
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      result = (int)DNLYC_IsVisible(arg1);
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DNLYC_GetNbDNLYC(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)":DNLYC_GetNbDNLYC")) SWIG_fail;
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      result = (int)DNLYC_GetNbDNLYC();
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DNLYC_GetPtrDNLYC2BDYTY(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  int **arg1 = (int **) 0 ;
  int *arg2 = (int *) 0 ;
  int *arg3 = (int *) 0 ;
  int *data_temp1 ;
  int dim1_temp1 ;
  int dim2_temp1 ;
  
  {
    arg1 = &data_temp1;
    arg2 = &dim1_temp1;
    arg3 = &dim2_temp1;
  }
  if (!PyArg_ParseTuple(args,(char *)":DNLYC_GetPtrDNLYC2BDYTY")) SWIG_fail;
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      DNLYC_GetPtrDNLYC2BDYTY(arg1,arg2,arg3);
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_Py_Void();
  {
    npy_intp dims[2] = {
      *arg3, *arg2 
    };
    PyObject * array = PyArray_SimpleNewFromData(2, dims, NPY_INT, (void*)(*arg1));
    if (!array) SWIG_fail;
    resultobj = SWIG_Python_AppendOutput(resultobj, array);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DNLYC_InitOutlines(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  double **arg1 = (double **) 0 ;
  int *arg2 = (int *) 0 ;
  int *arg3 = (int *) 0 ;
  double *data_temp1 ;
  int dim1_temp1 ;
  int dim2_temp1 ;
  
  {
    arg1 = &data_temp1;
    arg2 = &dim1_temp1;
    arg3 = &dim2_temp1;
  }
  if (!PyArg_ParseTuple(args,(char *)":DNLYC_InitOutlines")) SWIG_fail;
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      DNLYC_InitOutlines(arg1,arg2,arg3);
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_Py_Void();
  {
    npy_intp dims[2] = {
      *arg3, *arg2 
    };
    PyObject * array = PyArray_SimpleNewFromData(2, dims, NPY_DOUBLE, (void*)(*arg1));
    if (!array) SWIG_fail;
    resultobj = SWIG_Python_AppendOutput(resultobj, array);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DNLYC_InitScalarFields(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  double **arg1 = (double **) 0 ;
  int *arg2 = (int *) 0 ;
  int *arg3 = (int *) 0 ;
  double *data_temp1 ;
  int dim1_temp1 ;
  int dim2_temp1 ;
  
  {
    arg1 = &data_temp1;
    arg2 = &dim1_temp1;
    arg3 = &dim2_temp1;
  }
  if (!PyArg_ParseTuple(args,(char *)":DNLYC_InitScalarFields")) SWIG_fail;
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      DNLYC_InitScalarFields(arg1,arg2,arg3);
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_Py_Void();
  {
    npy_intp dims[2] = {
      *arg3, *arg2 
    };
    PyObject * array = PyArray_SimpleNewFromData(2, dims, NPY_DOUBLE, (void*)(*arg1));
    if (!array) SWIG_fail;
    resultobj = SWIG_Python_AppendOutput(resultobj, array);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DNLYC_UpdatePostdata(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  
  if (!PyArg_ParseTuple(args,(char *)":DNLYC_UpdatePostdata")) SWIG_fail;
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      DNLYC_UpdatePostdata();
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DNLYC_GetNbPointOutlines(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  int **arg1 = (int **) 0 ;
  int *arg2 = (int *) 0 ;
  int *data_temp1 = NULL ;
  int dim_temp1 ;
  
  {
    arg1 = &data_temp1;
    arg2 = &dim_temp1;
  }
  if (!PyArg_ParseTuple(args,(char *)":DNLYC_GetNbPointOutlines")) SWIG_fail;
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      DNLYC_GetNbPointOutlines(arg1,arg2);
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_Py_Void();
  {
    npy_intp dims[1] = {
      *arg2 
    };
    PyObject* obj = PyArray_SimpleNewFromData(1, dims, NPY_INT, (void*)(*arg1));
    PyArrayObject* array = (PyArrayObject*) obj;
    
    if (!array) SWIG_fail;
    resultobj = SWIG_Python_AppendOutput(resultobj, obj);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DNLYC_GetNbScalarFields(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)":DNLYC_GetNbScalarFields")) SWIG_fail;
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      result = (int)DNLYC_GetNbScalarFields();
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DNLYC_GetPtrAllConnectivities(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  int **arg1 = (int **) 0 ;
  int *arg2 = (int *) 0 ;
  int *data_temp1 = NULL ;
  int dim_temp1 ;
  
  {
    arg1 = &data_temp1;
    arg2 = &dim_temp1;
  }
  if (!PyArg_ParseTuple(args,(char *)":DNLYC_GetPtrAllConnectivities")) SWIG_fail;
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      DNLYC_GetPtrAllConnectivities(arg1,arg2);
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_Py_Void();
  {
    npy_intp dims[1] = {
      *arg2 
    };
    PyObject* obj = PyArray_SimpleNewFromData(1, dims, NPY_INT, (void*)(*arg1));
    PyArrayObject* array = (PyArrayObject*) obj;
    
    if (!array) SWIG_fail;
    resultobj = SWIG_Python_AppendOutput(resultobj, obj);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DNLYC_CleanMemory(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  
  if (!PyArg_ParseTuple(args,(char *)":DNLYC_CleanMemory")) SWIG_fail;
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      DNLYC_CleanMemory();
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PLANx_LoadTactors(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  
  if (!PyArg_ParseTuple(args,(char *)":PLANx_LoadTactors")) SWIG_fail;
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      PLANx_LoadTactors();
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PLANx_GetNbPLANx(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)":PLANx_GetNbPLANx")) SWIG_fail;
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      result = (int)PLANx_GetNbPLANx();
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PLANx_IsVisible(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  int arg1 ;
  int val1 ;
  int ecode1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:PLANx_IsVisible",&obj0)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "PLANx_IsVisible" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = static_cast< int >(val1);
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      result = (int)PLANx_IsVisible(arg1);
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PLANx_GetPtrPLANx2BDYTY(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  int **arg1 = (int **) 0 ;
  int *arg2 = (int *) 0 ;
  int *arg3 = (int *) 0 ;
  int *data_temp1 ;
  int dim1_temp1 ;
  int dim2_temp1 ;
  
  {
    arg1 = &data_temp1;
    arg2 = &dim1_temp1;
    arg3 = &dim2_temp1;
  }
  if (!PyArg_ParseTuple(args,(char *)":PLANx_GetPtrPLANx2BDYTY")) SWIG_fail;
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      PLANx_GetPtrPLANx2BDYTY(arg1,arg2,arg3);
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_Py_Void();
  {
    npy_intp dims[2] = {
      *arg3, *arg2 
    };
    PyObject * array = PyArray_SimpleNewFromData(2, dims, NPY_INT, (void*)(*arg1));
    if (!array) SWIG_fail;
    resultobj = SWIG_Python_AppendOutput(resultobj, array);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PLANx_InitOutlines(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  double **arg1 = (double **) 0 ;
  int *arg2 = (int *) 0 ;
  int *arg3 = (int *) 0 ;
  double *data_temp1 ;
  int dim1_temp1 ;
  int dim2_temp1 ;
  
  {
    arg1 = &data_temp1;
    arg2 = &dim1_temp1;
    arg3 = &dim2_temp1;
  }
  if (!PyArg_ParseTuple(args,(char *)":PLANx_InitOutlines")) SWIG_fail;
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      PLANx_InitOutlines(arg1,arg2,arg3);
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_Py_Void();
  {
    npy_intp dims[2] = {
      *arg3, *arg2 
    };
    PyObject * array = PyArray_SimpleNewFromData(2, dims, NPY_DOUBLE, (void*)(*arg1));
    if (!array) SWIG_fail;
    resultobj = SWIG_Python_AppendOutput(resultobj, array);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PLANx_InitScalarFields(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  double **arg1 = (double **) 0 ;
  int *arg2 = (int *) 0 ;
  int *arg3 = (int *) 0 ;
  double *data_temp1 ;
  int dim1_temp1 ;
  int dim2_temp1 ;
  
  {
    arg1 = &data_temp1;
    arg2 = &dim1_temp1;
    arg3 = &dim2_temp1;
  }
  if (!PyArg_ParseTuple(args,(char *)":PLANx_InitScalarFields")) SWIG_fail;
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      PLANx_InitScalarFields(arg1,arg2,arg3);
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_Py_Void();
  {
    npy_intp dims[2] = {
      *arg3, *arg2 
    };
    PyObject * array = PyArray_SimpleNewFromData(2, dims, NPY_DOUBLE, (void*)(*arg1));
    if (!array) SWIG_fail;
    resultobj = SWIG_Python_AppendOutput(resultobj, array);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PLANx_UpdatePostdata(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  
  if (!PyArg_ParseTuple(args,(char *)":PLANx_UpdatePostdata")) SWIG_fail;
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      PLANx_UpdatePostdata();
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PLANx_GetNbPointOutlines(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  int **arg1 = (int **) 0 ;
  int *arg2 = (int *) 0 ;
  int *data_temp1 = NULL ;
  int dim_temp1 ;
  
  {
    arg1 = &data_temp1;
    arg2 = &dim_temp1;
  }
  if (!PyArg_ParseTuple(args,(char *)":PLANx_GetNbPointOutlines")) SWIG_fail;
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      PLANx_GetNbPointOutlines(arg1,arg2);
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_Py_Void();
  {
    npy_intp dims[1] = {
      *arg2 
    };
    PyObject* obj = PyArray_SimpleNewFromData(1, dims, NPY_INT, (void*)(*arg1));
    PyArrayObject* array = (PyArrayObject*) obj;
    
    if (!array) SWIG_fail;
    resultobj = SWIG_Python_AppendOutput(resultobj, obj);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PLANx_GetNbScalarFields(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)":PLANx_GetNbScalarFields")) SWIG_fail;
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      result = (int)PLANx_GetNbScalarFields();
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PLANx_GetPtrAllConnectivities(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  int **arg1 = (int **) 0 ;
  int *arg2 = (int *) 0 ;
  int *data_temp1 = NULL ;
  int dim_temp1 ;
  
  {
    arg1 = &data_temp1;
    arg2 = &dim_temp1;
  }
  if (!PyArg_ParseTuple(args,(char *)":PLANx_GetPtrAllConnectivities")) SWIG_fail;
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      PLANx_GetPtrAllConnectivities(arg1,arg2);
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_Py_Void();
  {
    npy_intp dims[1] = {
      *arg2 
    };
    PyObject* obj = PyArray_SimpleNewFromData(1, dims, NPY_INT, (void*)(*arg1));
    PyArrayObject* array = (PyArrayObject*) obj;
    
    if (!array) SWIG_fail;
    resultobj = SWIG_Python_AppendOutput(resultobj, obj);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PLANx_CleanMemory(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  
  if (!PyArg_ParseTuple(args,(char *)":PLANx_CleanMemory")) SWIG_fail;
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      PLANx_CleanMemory();
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_POLYR_LoadTactors(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  
  if (!PyArg_ParseTuple(args,(char *)":POLYR_LoadTactors")) SWIG_fail;
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      POLYR_LoadTactors();
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_POLYR_GetContactorColor(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  int arg1 ;
  char **arg2 = (char **) 0 ;
  int val1 ;
  int ecode1 = 0 ;
  char *tmp_c52 ;
  PyObject * obj0 = 0 ;
  
  {
    arg2 = &tmp_c52;
  }
  if (!PyArg_ParseTuple(args,(char *)"O:POLYR_GetContactorColor",&obj0)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "POLYR_GetContactorColor" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = static_cast< int >(val1);
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      POLYR_GetContactorColor(arg1,arg2);
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_Py_Void();
  {
    PyObject *chaine;
    chaine = PyString_FromStringAndSize(*arg2, 5);
    free_ptrFortranString(*arg2, 5);
    resultobj = SWIG_Python_AppendOutput(resultobj, chaine);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_POLYR_SaveVertex(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  
  if (!PyArg_ParseTuple(args,(char *)":POLYR_SaveVertex")) SWIG_fail;
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      POLYR_SaveVertex();
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_POLYR_ModifyRadius(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  double arg1 ;
  double val1 ;
  int ecode1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:POLYR_ModifyRadius",&obj0)) SWIG_fail;
  ecode1 = SWIG_AsVal_double(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "POLYR_ModifyRadius" "', argument " "1"" of type '" "double""'");
  } 
  arg1 = static_cast< double >(val1);
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      POLYR_ModifyRadius(arg1);
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_POLYR_SetThresholdBigPolyr(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  double arg1 ;
  double val1 ;
  int ecode1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:POLYR_SetThresholdBigPolyr",&obj0)) SWIG_fail;
  ecode1 = SWIG_AsVal_double(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "POLYR_SetThresholdBigPolyr" "', argument " "1"" of type '" "double""'");
  } 
  arg1 = static_cast< double >(val1);
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      POLYR_SetThresholdBigPolyr(arg1);
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_POLYR_SetBigPolyr(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  int arg1 ;
  int val1 ;
  int ecode1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:POLYR_SetBigPolyr",&obj0)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "POLYR_SetBigPolyr" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = static_cast< int >(val1);
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      POLYR_SetBigPolyr(arg1);
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_POLYR_SetNbBigPolyr(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  int arg1 ;
  int val1 ;
  int ecode1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:POLYR_SetNbBigPolyr",&obj0)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "POLYR_SetNbBigPolyr" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = static_cast< int >(val1);
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      POLYR_SetNbBigPolyr(arg1);
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_POLYR_SkipTopoBigPolyr(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  
  if (!PyArg_ParseTuple(args,(char *)":POLYR_SkipTopoBigPolyr")) SWIG_fail;
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      POLYR_SkipTopoBigPolyr();
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_POLYR_SkipAutomaticReorientation(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  
  if (!PyArg_ParseTuple(args,(char *)":POLYR_SkipAutomaticReorientation")) SWIG_fail;
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      POLYR_SkipAutomaticReorientation();
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_POLYR_SkipHEBuild(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  
  if (!PyArg_ParseTuple(args,(char *)":POLYR_SkipHEBuild")) SWIG_fail;
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      POLYR_SkipHEBuild();
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_POLYR_TopologyAngle(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  double arg1 ;
  double val1 ;
  int ecode1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:POLYR_TopologyAngle",&obj0)) SWIG_fail;
  ecode1 = SWIG_AsVal_double(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "POLYR_TopologyAngle" "', argument " "1"" of type '" "double""'");
  } 
  arg1 = static_cast< double >(val1);
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      POLYR_TopologyAngle(arg1);
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_POLYR_FlatnessAngle(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  double arg1 ;
  double val1 ;
  int ecode1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:POLYR_FlatnessAngle",&obj0)) SWIG_fail;
  ecode1 = SWIG_AsVal_double(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "POLYR_FlatnessAngle" "', argument " "1"" of type '" "double""'");
  } 
  arg1 = static_cast< double >(val1);
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      POLYR_FlatnessAngle(arg1);
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_POLYR_GetWireframe(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  int arg1 ;
  double arg2 ;
  double **arg3 = (double **) 0 ;
  int *arg4 = (int *) 0 ;
  int *arg5 = (int *) 0 ;
  int **arg6 = (int **) 0 ;
  int *arg7 = (int *) 0 ;
  int val1 ;
  int ecode1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  double *data_temp3 ;
  int dim1_temp3 ;
  int dim2_temp3 ;
  int *data_temp6 = NULL ;
  int dim_temp6 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  {
    arg3 = &data_temp3;
    arg4 = &dim1_temp3;
    arg5 = &dim2_temp3;
  }
  {
    arg6 = &data_temp6;
    arg7 = &dim_temp6;
  }
  if (!PyArg_ParseTuple(args,(char *)"OO:POLYR_GetWireframe",&obj0,&obj1)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "POLYR_GetWireframe" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = static_cast< int >(val1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "POLYR_GetWireframe" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      POLYR_GetWireframe(arg1,arg2,arg3,arg4,arg5,arg6,arg7);
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_Py_Void();
  {
    npy_intp dims[2] = {
      *arg5, *arg4 
    };
    PyObject * obj = PyArray_SimpleNewFromData(2, dims, NPY_DOUBLE, (void*)(*arg3));
    if (!obj) SWIG_fail;
    PyArrayObject * array = (PyArrayObject*) obj;
    attach_fortran_memory_to_numpy_array(array, (void*)(*arg3), NPY_DOUBLE, dims[1], dims[0]);
    PyArray_ENABLEFLAGS(array,NPY_ARRAY_WRITEABLE);
    resultobj = SWIG_Python_AppendOutput(resultobj, obj);
  }
  {
    npy_intp dims[1] = {
      *arg7 
    };
    PyObject* obj = PyArray_SimpleNewFromData(1, dims, NPY_INT, (void*)(*arg6));
    PyArrayObject* array = (PyArrayObject*) obj;
    
    if (!array) SWIG_fail;
    resultobj = SWIG_Python_AppendOutput(resultobj, obj);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_POLYR_GetVertex(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  int arg1 ;
  double **arg2 = (double **) 0 ;
  int *arg3 = (int *) 0 ;
  int *arg4 = (int *) 0 ;
  int val1 ;
  int ecode1 = 0 ;
  double *data_temp2 ;
  int dim1_temp2 ;
  int dim2_temp2 ;
  PyObject * obj0 = 0 ;
  
  {
    arg2 = &data_temp2;
    arg3 = &dim1_temp2;
    arg4 = &dim2_temp2;
  }
  if (!PyArg_ParseTuple(args,(char *)"O:POLYR_GetVertex",&obj0)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "POLYR_GetVertex" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = static_cast< int >(val1);
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      POLYR_GetVertex(arg1,arg2,arg3,arg4);
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_Py_Void();
  {
    npy_intp dims[2] = {
      *arg4, *arg3 
    };
    PyObject * obj = PyArray_SimpleNewFromData(2, dims, NPY_DOUBLE, (void*)(*arg2));
    if (!obj) SWIG_fail;
    PyArrayObject * array = (PyArrayObject*) obj;
    attach_fortran_memory_to_numpy_array(array, (void*)(*arg2), NPY_DOUBLE, dims[1], dims[0]);
    PyArray_ENABLEFLAGS(array,NPY_ARRAY_WRITEABLE);
    resultobj = SWIG_Python_AppendOutput(resultobj, obj);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_POLYR_GetPtrVertexTT(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  int arg1 ;
  double **arg2 = (double **) 0 ;
  int *arg3 = (int *) 0 ;
  int *arg4 = (int *) 0 ;
  int val1 ;
  int ecode1 = 0 ;
  double *data_temp2 ;
  int dim1_temp2 ;
  int dim2_temp2 ;
  PyObject * obj0 = 0 ;
  
  {
    arg2 = &data_temp2;
    arg3 = &dim1_temp2;
    arg4 = &dim2_temp2;
  }
  if (!PyArg_ParseTuple(args,(char *)"O:POLYR_GetPtrVertexTT",&obj0)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "POLYR_GetPtrVertexTT" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = static_cast< int >(val1);
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      POLYR_GetPtrVertexTT(arg1,arg2,arg3,arg4);
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_Py_Void();
  {
    npy_intp dims[2] = {
      *arg4, *arg3 
    };
    PyObject * array = PyArray_SimpleNewFromData(2, dims, NPY_DOUBLE, (void*)(*arg2));
    if (!array) SWIG_fail;
    resultobj = SWIG_Python_AppendOutput(resultobj, array);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_POLYR_GetPtrNormalTT(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  int arg1 ;
  double **arg2 = (double **) 0 ;
  int *arg3 = (int *) 0 ;
  int *arg4 = (int *) 0 ;
  int val1 ;
  int ecode1 = 0 ;
  double *data_temp2 ;
  int dim1_temp2 ;
  int dim2_temp2 ;
  PyObject * obj0 = 0 ;
  
  {
    arg2 = &data_temp2;
    arg3 = &dim1_temp2;
    arg4 = &dim2_temp2;
  }
  if (!PyArg_ParseTuple(args,(char *)"O:POLYR_GetPtrNormalTT",&obj0)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "POLYR_GetPtrNormalTT" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = static_cast< int >(val1);
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      POLYR_GetPtrNormalTT(arg1,arg2,arg3,arg4);
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_Py_Void();
  {
    npy_intp dims[2] = {
      *arg4, *arg3 
    };
    PyObject * array = PyArray_SimpleNewFromData(2, dims, NPY_DOUBLE, (void*)(*arg2));
    if (!array) SWIG_fail;
    resultobj = SWIG_Python_AppendOutput(resultobj, array);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_POLYR_MoveToConfigurationTT(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  
  if (!PyArg_ParseTuple(args,(char *)":POLYR_MoveToConfigurationTT")) SWIG_fail;
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      POLYR_MoveToConfigurationTT();
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_POLYR_GetPOLYR2BDYTY(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  int **arg1 = (int **) 0 ;
  int *arg2 = (int *) 0 ;
  int *arg3 = (int *) 0 ;
  int *data_temp1 ;
  int dim1_temp1 ;
  int dim2_temp1 ;
  
  {
    arg1 = &data_temp1;
    arg2 = &dim1_temp1;
    arg3 = &dim2_temp1;
  }
  if (!PyArg_ParseTuple(args,(char *)":POLYR_GetPOLYR2BDYTY")) SWIG_fail;
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      POLYR_GetPOLYR2BDYTY(arg1,arg2,arg3);
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_Py_Void();
  {
    npy_intp dims[2] = {
      *arg3, *arg2 
    };
    PyObject * obj = PyArray_SimpleNewFromData(2, dims, NPY_INT, (void*)(*arg1));
    if (!obj) SWIG_fail;
    PyArrayObject * array = (PyArrayObject*) obj;
    attach_fortran_memory_to_numpy_array(array, (void*)(*arg1), NPY_INT, dims[1], dims[0]);
    PyArray_ENABLEFLAGS(array,NPY_ARRAY_WRITEABLE);
    resultobj = SWIG_Python_AppendOutput(resultobj, obj);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_POLYR_GetPtrPOLYR2BDYTY(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  int **arg1 = (int **) 0 ;
  int *arg2 = (int *) 0 ;
  int *arg3 = (int *) 0 ;
  int *data_temp1 ;
  int dim1_temp1 ;
  int dim2_temp1 ;
  
  {
    arg1 = &data_temp1;
    arg2 = &dim1_temp1;
    arg3 = &dim2_temp1;
  }
  if (!PyArg_ParseTuple(args,(char *)":POLYR_GetPtrPOLYR2BDYTY")) SWIG_fail;
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      POLYR_GetPtrPOLYR2BDYTY(arg1,arg2,arg3);
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_Py_Void();
  {
    npy_intp dims[2] = {
      *arg3, *arg2 
    };
    PyObject * array = PyArray_SimpleNewFromData(2, dims, NPY_INT, (void*)(*arg1));
    if (!array) SWIG_fail;
    resultobj = SWIG_Python_AppendOutput(resultobj, array);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_POLYR_IsVisible(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  int arg1 ;
  int val1 ;
  int ecode1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:POLYR_IsVisible",&obj0)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "POLYR_IsVisible" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = static_cast< int >(val1);
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      result = (int)POLYR_IsVisible(arg1);
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_POLYR_GetNbPOLYR(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)":POLYR_GetNbPOLYR")) SWIG_fail;
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      result = (int)POLYR_GetNbPOLYR();
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_POLYR_InitOutlines(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  double **arg1 = (double **) 0 ;
  int *arg2 = (int *) 0 ;
  int *arg3 = (int *) 0 ;
  double *data_temp1 ;
  int dim1_temp1 ;
  int dim2_temp1 ;
  
  {
    arg1 = &data_temp1;
    arg2 = &dim1_temp1;
    arg3 = &dim2_temp1;
  }
  if (!PyArg_ParseTuple(args,(char *)":POLYR_InitOutlines")) SWIG_fail;
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      POLYR_InitOutlines(arg1,arg2,arg3);
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_Py_Void();
  {
    npy_intp dims[2] = {
      *arg3, *arg2 
    };
    PyObject * array = PyArray_SimpleNewFromData(2, dims, NPY_DOUBLE, (void*)(*arg1));
    if (!array) SWIG_fail;
    resultobj = SWIG_Python_AppendOutput(resultobj, array);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_POLYR_InitScalarFields(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  double **arg1 = (double **) 0 ;
  int *arg2 = (int *) 0 ;
  int *arg3 = (int *) 0 ;
  double *data_temp1 ;
  int dim1_temp1 ;
  int dim2_temp1 ;
  
  {
    arg1 = &data_temp1;
    arg2 = &dim1_temp1;
    arg3 = &dim2_temp1;
  }
  if (!PyArg_ParseTuple(args,(char *)":POLYR_InitScalarFields")) SWIG_fail;
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      POLYR_InitScalarFields(arg1,arg2,arg3);
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_Py_Void();
  {
    npy_intp dims[2] = {
      *arg3, *arg2 
    };
    PyObject * array = PyArray_SimpleNewFromData(2, dims, NPY_DOUBLE, (void*)(*arg1));
    if (!array) SWIG_fail;
    resultobj = SWIG_Python_AppendOutput(resultobj, array);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_POLYR_UpdatePostdata(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  
  if (!PyArg_ParseTuple(args,(char *)":POLYR_UpdatePostdata")) SWIG_fail;
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      POLYR_UpdatePostdata();
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_POLYR_GetNbPointOutlines(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  int **arg1 = (int **) 0 ;
  int *arg2 = (int *) 0 ;
  int *data_temp1 = NULL ;
  int dim_temp1 ;
  
  {
    arg1 = &data_temp1;
    arg2 = &dim_temp1;
  }
  if (!PyArg_ParseTuple(args,(char *)":POLYR_GetNbPointOutlines")) SWIG_fail;
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      POLYR_GetNbPointOutlines(arg1,arg2);
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_Py_Void();
  {
    npy_intp dims[1] = {
      *arg2 
    };
    PyObject* obj = PyArray_SimpleNewFromData(1, dims, NPY_INT, (void*)(*arg1));
    PyArrayObject* array = (PyArrayObject*) obj;
    
    if (!array) SWIG_fail;
    resultobj = SWIG_Python_AppendOutput(resultobj, obj);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_POLYR_GetNbScalarFields(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)":POLYR_GetNbScalarFields")) SWIG_fail;
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      result = (int)POLYR_GetNbScalarFields();
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_POLYR_GetPtrAllConnectivities(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  int **arg1 = (int **) 0 ;
  int *arg2 = (int *) 0 ;
  int *data_temp1 = NULL ;
  int dim_temp1 ;
  
  {
    arg1 = &data_temp1;
    arg2 = &dim_temp1;
  }
  if (!PyArg_ParseTuple(args,(char *)":POLYR_GetPtrAllConnectivities")) SWIG_fail;
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      POLYR_GetPtrAllConnectivities(arg1,arg2);
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_Py_Void();
  {
    npy_intp dims[1] = {
      *arg2 
    };
    PyObject* obj = PyArray_SimpleNewFromData(1, dims, NPY_INT, (void*)(*arg1));
    PyArrayObject* array = (PyArrayObject*) obj;
    
    if (!array) SWIG_fail;
    resultobj = SWIG_Python_AppendOutput(resultobj, obj);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_POLYR_GetPtrConnectivity(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  int arg1 ;
  int **arg2 = (int **) 0 ;
  int *arg3 = (int *) 0 ;
  int *arg4 = (int *) 0 ;
  int val1 ;
  int ecode1 = 0 ;
  int *data_temp2 ;
  int dim1_temp2 ;
  int dim2_temp2 ;
  PyObject * obj0 = 0 ;
  
  {
    arg2 = &data_temp2;
    arg3 = &dim1_temp2;
    arg4 = &dim2_temp2;
  }
  if (!PyArg_ParseTuple(args,(char *)"O:POLYR_GetPtrConnectivity",&obj0)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "POLYR_GetPtrConnectivity" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = static_cast< int >(val1);
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      POLYR_GetPtrConnectivity(arg1,arg2,arg3,arg4);
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_Py_Void();
  {
    npy_intp dims[2] = {
      *arg4, *arg3 
    };
    PyObject * array = PyArray_SimpleNewFromData(2, dims, NPY_INT, (void*)(*arg2));
    if (!array) SWIG_fail;
    resultobj = SWIG_Python_AppendOutput(resultobj, array);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_POLYR_GetPtrVertexRef(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  int arg1 ;
  double **arg2 = (double **) 0 ;
  int *arg3 = (int *) 0 ;
  int *arg4 = (int *) 0 ;
  int val1 ;
  int ecode1 = 0 ;
  double *data_temp2 ;
  int dim1_temp2 ;
  int dim2_temp2 ;
  PyObject * obj0 = 0 ;
  
  {
    arg2 = &data_temp2;
    arg3 = &dim1_temp2;
    arg4 = &dim2_temp2;
  }
  if (!PyArg_ParseTuple(args,(char *)"O:POLYR_GetPtrVertexRef",&obj0)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "POLYR_GetPtrVertexRef" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = static_cast< int >(val1);
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      POLYR_GetPtrVertexRef(arg1,arg2,arg3,arg4);
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_Py_Void();
  {
    npy_intp dims[2] = {
      *arg4, *arg3 
    };
    PyObject * array = PyArray_SimpleNewFromData(2, dims, NPY_DOUBLE, (void*)(*arg2));
    if (!array) SWIG_fail;
    resultobj = SWIG_Python_AppendOutput(resultobj, array);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_POLYR_GetTopoData(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  int **arg1 = (int **) 0 ;
  int *arg2 = (int *) 0 ;
  int *arg3 = (int *) 0 ;
  int *data_temp1 ;
  int dim1_temp1 ;
  int dim2_temp1 ;
  
  {
    arg1 = &data_temp1;
    arg2 = &dim1_temp1;
    arg3 = &dim2_temp1;
  }
  if (!PyArg_ParseTuple(args,(char *)":POLYR_GetTopoData")) SWIG_fail;
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      POLYR_GetTopoData(arg1,arg2,arg3);
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_Py_Void();
  {
    npy_intp dims[2] = {
      *arg3, *arg2 
    };
    PyObject * obj = PyArray_SimpleNewFromData(2, dims, NPY_INT, (void*)(*arg1));
    if (!obj) SWIG_fail;
    PyArrayObject * array = (PyArrayObject*) obj;
    attach_fortran_memory_to_numpy_array(array, (void*)(*arg1), NPY_INT, dims[1], dims[0]);
    PyArray_ENABLEFLAGS(array,NPY_ARRAY_WRITEABLE);
    resultobj = SWIG_Python_AppendOutput(resultobj, obj);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_POLYR_CleanMemory(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  
  if (!PyArg_ParseTuple(args,(char *)":POLYR_CleanMemory")) SWIG_fail;
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      POLYR_CleanMemory();
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PT3Dx_LoadTactors(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  
  if (!PyArg_ParseTuple(args,(char *)":PT3Dx_LoadTactors")) SWIG_fail;
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      PT3Dx_LoadTactors();
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PT3Dx_IsVisible(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  int arg1 ;
  int val1 ;
  int ecode1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:PT3Dx_IsVisible",&obj0)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "PT3Dx_IsVisible" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = static_cast< int >(val1);
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      result = (int)PT3Dx_IsVisible(arg1);
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PT3Dx_GetNbPT3Dx(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)":PT3Dx_GetNbPT3Dx")) SWIG_fail;
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      result = (int)PT3Dx_GetNbPT3Dx();
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PT3Dx_SetDisplayRadius(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  double arg1 ;
  double val1 ;
  int ecode1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:PT3Dx_SetDisplayRadius",&obj0)) SWIG_fail;
  ecode1 = SWIG_AsVal_double(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "PT3Dx_SetDisplayRadius" "', argument " "1"" of type '" "double""'");
  } 
  arg1 = static_cast< double >(val1);
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      PT3Dx_SetDisplayRadius(arg1);
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PT3Dx_GetPtrPT3Dx2BDYTY(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  int **arg1 = (int **) 0 ;
  int *arg2 = (int *) 0 ;
  int *arg3 = (int *) 0 ;
  int *data_temp1 ;
  int dim1_temp1 ;
  int dim2_temp1 ;
  
  {
    arg1 = &data_temp1;
    arg2 = &dim1_temp1;
    arg3 = &dim2_temp1;
  }
  if (!PyArg_ParseTuple(args,(char *)":PT3Dx_GetPtrPT3Dx2BDYTY")) SWIG_fail;
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      PT3Dx_GetPtrPT3Dx2BDYTY(arg1,arg2,arg3);
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_Py_Void();
  {
    npy_intp dims[2] = {
      *arg3, *arg2 
    };
    PyObject * array = PyArray_SimpleNewFromData(2, dims, NPY_INT, (void*)(*arg1));
    if (!array) SWIG_fail;
    resultobj = SWIG_Python_AppendOutput(resultobj, array);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PT3Dx_InitOutlines(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  double **arg1 = (double **) 0 ;
  int *arg2 = (int *) 0 ;
  int *arg3 = (int *) 0 ;
  double *data_temp1 ;
  int dim1_temp1 ;
  int dim2_temp1 ;
  
  {
    arg1 = &data_temp1;
    arg2 = &dim1_temp1;
    arg3 = &dim2_temp1;
  }
  if (!PyArg_ParseTuple(args,(char *)":PT3Dx_InitOutlines")) SWIG_fail;
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      PT3Dx_InitOutlines(arg1,arg2,arg3);
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_Py_Void();
  {
    npy_intp dims[2] = {
      *arg3, *arg2 
    };
    PyObject * array = PyArray_SimpleNewFromData(2, dims, NPY_DOUBLE, (void*)(*arg1));
    if (!array) SWIG_fail;
    resultobj = SWIG_Python_AppendOutput(resultobj, array);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PT3Dx_InitScalarFields(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  double **arg1 = (double **) 0 ;
  int *arg2 = (int *) 0 ;
  int *arg3 = (int *) 0 ;
  double *data_temp1 ;
  int dim1_temp1 ;
  int dim2_temp1 ;
  
  {
    arg1 = &data_temp1;
    arg2 = &dim1_temp1;
    arg3 = &dim2_temp1;
  }
  if (!PyArg_ParseTuple(args,(char *)":PT3Dx_InitScalarFields")) SWIG_fail;
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      PT3Dx_InitScalarFields(arg1,arg2,arg3);
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_Py_Void();
  {
    npy_intp dims[2] = {
      *arg3, *arg2 
    };
    PyObject * array = PyArray_SimpleNewFromData(2, dims, NPY_DOUBLE, (void*)(*arg1));
    if (!array) SWIG_fail;
    resultobj = SWIG_Python_AppendOutput(resultobj, array);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PT3Dx_UpdatePostdata(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  
  if (!PyArg_ParseTuple(args,(char *)":PT3Dx_UpdatePostdata")) SWIG_fail;
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      PT3Dx_UpdatePostdata();
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PT3Dx_GetNbPointOutlines(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  int **arg1 = (int **) 0 ;
  int *arg2 = (int *) 0 ;
  int *data_temp1 = NULL ;
  int dim_temp1 ;
  
  {
    arg1 = &data_temp1;
    arg2 = &dim_temp1;
  }
  if (!PyArg_ParseTuple(args,(char *)":PT3Dx_GetNbPointOutlines")) SWIG_fail;
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      PT3Dx_GetNbPointOutlines(arg1,arg2);
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_Py_Void();
  {
    npy_intp dims[1] = {
      *arg2 
    };
    PyObject* obj = PyArray_SimpleNewFromData(1, dims, NPY_INT, (void*)(*arg1));
    PyArrayObject* array = (PyArrayObject*) obj;
    
    if (!array) SWIG_fail;
    resultobj = SWIG_Python_AppendOutput(resultobj, obj);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PT3Dx_GetNbScalarFields(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)":PT3Dx_GetNbScalarFields")) SWIG_fail;
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      result = (int)PT3Dx_GetNbScalarFields();
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PT3Dx_GetPtrAllConnectivities(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  int **arg1 = (int **) 0 ;
  int *arg2 = (int *) 0 ;
  int *data_temp1 = NULL ;
  int dim_temp1 ;
  
  {
    arg1 = &data_temp1;
    arg2 = &dim_temp1;
  }
  if (!PyArg_ParseTuple(args,(char *)":PT3Dx_GetPtrAllConnectivities")) SWIG_fail;
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      PT3Dx_GetPtrAllConnectivities(arg1,arg2);
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_Py_Void();
  {
    npy_intp dims[1] = {
      *arg2 
    };
    PyObject* obj = PyArray_SimpleNewFromData(1, dims, NPY_INT, (void*)(*arg1));
    PyArrayObject* array = (PyArrayObject*) obj;
    
    if (!array) SWIG_fail;
    resultobj = SWIG_Python_AppendOutput(resultobj, obj);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PT3Dx_CleanMemory(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  
  if (!PyArg_ParseTuple(args,(char *)":PT3Dx_CleanMemory")) SWIG_fail;
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      PT3Dx_CleanMemory();
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RBDY3_IncrementStep(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  
  if (!PyArg_ParseTuple(args,(char *)":RBDY3_IncrementStep")) SWIG_fail;
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      RBDY3_IncrementStep();
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RBDY3_SetVlocyDrivenDof(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  int arg1 ;
  int arg2 ;
  double arg3 ;
  int val1 ;
  int ecode1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:RBDY3_SetVlocyDrivenDof",&obj0,&obj1,&obj2)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "RBDY3_SetVlocyDrivenDof" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = static_cast< int >(val1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "RBDY3_SetVlocyDrivenDof" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_double(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "RBDY3_SetVlocyDrivenDof" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast< double >(val3);
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      RBDY3_SetVlocyDrivenDof(arg1,arg2,arg3);
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RBDY3_FatalDamping(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  int *arg1 = (int *) NULL ;
  int arg2 = (int) 0 ;
  PyArrayObject *array1 = NULL ;
  int is_new_object1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"|O:RBDY3_FatalDamping",&obj0)) SWIG_fail;
  if (obj0) {
    {
      npy_intp size[1] = {
        -1 
      };
      array1 = obj_to_array_contiguous_allow_conversion(obj0,
        NPY_INT,
        &is_new_object1);
      if (!array1 || !require_dimensions(array1, 1) ||
        !require_size(array1, size, 1)) SWIG_fail;
      arg1 = (int*) array_data(array1);
      arg2 = (int) array_size(array1,0);
    }
  }
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      RBDY3_FatalDamping(arg1,arg2);
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_Py_Void();
  {
    if (is_new_object1 && array1)
    {
      Py_DECREF(array1); 
    }
  }
  return resultobj;
fail:
  {
    if (is_new_object1 && array1)
    {
      Py_DECREF(array1); 
    }
  }
  return NULL;
}


SWIGINTERN PyObject *_wrap_RBDY3_ComputeFext(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  
  if (!PyArg_ParseTuple(args,(char *)":RBDY3_ComputeFext")) SWIG_fail;
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      RBDY3_ComputeFext();
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RBDY3_ComputeBulk(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  
  if (!PyArg_ParseTuple(args,(char *)":RBDY3_ComputeBulk")) SWIG_fail;
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      RBDY3_ComputeBulk();
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RBDY3_ComputeFreeVelocity(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  
  if (!PyArg_ParseTuple(args,(char *)":RBDY3_ComputeFreeVelocity")) SWIG_fail;
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      RBDY3_ComputeFreeVelocity();
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RBDY3_ComputeDof(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  
  if (!PyArg_ParseTuple(args,(char *)":RBDY3_ComputeDof")) SWIG_fail;
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      RBDY3_ComputeDof();
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RBDY3_UpdateDof(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  
  if (!PyArg_ParseTuple(args,(char *)":RBDY3_UpdateDof")) SWIG_fail;
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      RBDY3_UpdateDof();
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RBDY3_ComputeContactDetectionConfiguration(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  
  if (!PyArg_ParseTuple(args,(char *)":RBDY3_ComputeContactDetectionConfiguration")) SWIG_fail;
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      RBDY3_ComputeContactDetectionConfiguration();
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RBDY3_WriteLastDof(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  
  if (!PyArg_ParseTuple(args,(char *)":RBDY3_WriteLastDof")) SWIG_fail;
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      RBDY3_WriteLastDof();
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RBDY3_WriteOutDof(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  int arg1 = (int) 0 ;
  int arg2 = (int) 0 ;
  int val1 ;
  int ecode1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"|OO:RBDY3_WriteOutDof",&obj0,&obj1)) SWIG_fail;
  if (obj0) {
    ecode1 = SWIG_AsVal_int(obj0, &val1);
    if (!SWIG_IsOK(ecode1)) {
      SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "RBDY3_WriteOutDof" "', argument " "1"" of type '" "int""'");
    } 
    arg1 = static_cast< int >(val1);
  }
  if (obj1) {
    ecode2 = SWIG_AsVal_int(obj1, &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "RBDY3_WriteOutDof" "', argument " "2"" of type '" "int""'");
    } 
    arg2 = static_cast< int >(val2);
  }
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      RBDY3_WriteOutDof(arg1,arg2);
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RBDY3_DisplayOutDof(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  
  if (!PyArg_ParseTuple(args,(char *)":RBDY3_DisplayOutDof")) SWIG_fail;
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      RBDY3_DisplayOutDof();
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RBDY3_WriteLastRnod(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  
  if (!PyArg_ParseTuple(args,(char *)":RBDY3_WriteLastRnod")) SWIG_fail;
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      RBDY3_WriteLastRnod();
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RBDY3_WriteOutRnod(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  
  if (!PyArg_ParseTuple(args,(char *)":RBDY3_WriteOutRnod")) SWIG_fail;
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      RBDY3_WriteOutRnod();
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RBDY3_DisplayOutRnod(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  
  if (!PyArg_ParseTuple(args,(char *)":RBDY3_DisplayOutRnod")) SWIG_fail;
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      RBDY3_DisplayOutRnod();
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RBDY3_WriteBodies(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  
  if (!PyArg_ParseTuple(args,(char *)":RBDY3_WriteBodies")) SWIG_fail;
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      RBDY3_WriteBodies();
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RBDY3_WriteDrivenDof(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  
  if (!PyArg_ParseTuple(args,(char *)":RBDY3_WriteDrivenDof")) SWIG_fail;
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      RBDY3_WriteDrivenDof();
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RBDY3_ReadBodies(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  
  if (!PyArg_ParseTuple(args,(char *)":RBDY3_ReadBodies")) SWIG_fail;
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      RBDY3_ReadBodies();
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RBDY3_ReadCompressedBodies(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  
  if (!PyArg_ParseTuple(args,(char *)":RBDY3_ReadCompressedBodies")) SWIG_fail;
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      RBDY3_ReadCompressedBodies();
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RBDY3_ReadIniDof(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  int arg1 = (int) 0 ;
  int val1 ;
  int ecode1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"|O:RBDY3_ReadIniDof",&obj0)) SWIG_fail;
  if (obj0) {
    ecode1 = SWIG_AsVal_int(obj0, &val1);
    if (!SWIG_IsOK(ecode1)) {
      SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "RBDY3_ReadIniDof" "', argument " "1"" of type '" "int""'");
    } 
    arg1 = static_cast< int >(val1);
  }
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      RBDY3_ReadIniDof(arg1);
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RBDY3_ReadDrivenDof(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  
  if (!PyArg_ParseTuple(args,(char *)":RBDY3_ReadDrivenDof")) SWIG_fail;
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      RBDY3_ReadDrivenDof();
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RBDY3_LoadBehaviours(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  
  if (!PyArg_ParseTuple(args,(char *)":RBDY3_LoadBehaviours")) SWIG_fail;
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      RBDY3_LoadBehaviours();
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RBDY3_ComputeMass(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  
  if (!PyArg_ParseTuple(args,(char *)":RBDY3_ComputeMass")) SWIG_fail;
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      RBDY3_ComputeMass();
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RBDY3_NewRotationScheme(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  
  if (!PyArg_ParseTuple(args,(char *)":RBDY3_NewRotationScheme")) SWIG_fail;
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      RBDY3_NewRotationScheme();
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RBDY3_SetZminBoundary(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  double arg1 ;
  double val1 ;
  int ecode1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:RBDY3_SetZminBoundary",&obj0)) SWIG_fail;
  ecode1 = SWIG_AsVal_double(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "RBDY3_SetZminBoundary" "', argument " "1"" of type '" "double""'");
  } 
  arg1 = static_cast< double >(val1);
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      RBDY3_SetZminBoundary(arg1);
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RBDY3_SetZmaxBoundary(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  double arg1 ;
  double val1 ;
  int ecode1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:RBDY3_SetZmaxBoundary",&obj0)) SWIG_fail;
  ecode1 = SWIG_AsVal_double(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "RBDY3_SetZmaxBoundary" "', argument " "1"" of type '" "double""'");
  } 
  arg1 = static_cast< double >(val1);
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      RBDY3_SetZmaxBoundary(arg1);
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RBDY3_SetYminBoundary(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  double arg1 ;
  double val1 ;
  int ecode1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:RBDY3_SetYminBoundary",&obj0)) SWIG_fail;
  ecode1 = SWIG_AsVal_double(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "RBDY3_SetYminBoundary" "', argument " "1"" of type '" "double""'");
  } 
  arg1 = static_cast< double >(val1);
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      RBDY3_SetYminBoundary(arg1);
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RBDY3_SetYmaxBoundary(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  double arg1 ;
  double val1 ;
  int ecode1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:RBDY3_SetYmaxBoundary",&obj0)) SWIG_fail;
  ecode1 = SWIG_AsVal_double(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "RBDY3_SetYmaxBoundary" "', argument " "1"" of type '" "double""'");
  } 
  arg1 = static_cast< double >(val1);
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      RBDY3_SetYmaxBoundary(arg1);
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RBDY3_SetXminBoundary(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  double arg1 ;
  double val1 ;
  int ecode1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:RBDY3_SetXminBoundary",&obj0)) SWIG_fail;
  ecode1 = SWIG_AsVal_double(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "RBDY3_SetXminBoundary" "', argument " "1"" of type '" "double""'");
  } 
  arg1 = static_cast< double >(val1);
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      RBDY3_SetXminBoundary(arg1);
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RBDY3_SetXmaxBoundary(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  double arg1 ;
  double val1 ;
  int ecode1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:RBDY3_SetXmaxBoundary",&obj0)) SWIG_fail;
  ecode1 = SWIG_AsVal_double(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "RBDY3_SetXmaxBoundary" "', argument " "1"" of type '" "double""'");
  } 
  arg1 = static_cast< double >(val1);
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      RBDY3_SetXmaxBoundary(arg1);
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RBDY3_SetXPeriodicCondition(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  double arg1 ;
  double val1 ;
  int ecode1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:RBDY3_SetXPeriodicCondition",&obj0)) SWIG_fail;
  ecode1 = SWIG_AsVal_double(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "RBDY3_SetXPeriodicCondition" "', argument " "1"" of type '" "double""'");
  } 
  arg1 = static_cast< double >(val1);
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      RBDY3_SetXPeriodicCondition(arg1);
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RBDY3_SetYPeriodicCondition(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  double arg1 ;
  double val1 ;
  int ecode1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:RBDY3_SetYPeriodicCondition",&obj0)) SWIG_fail;
  ecode1 = SWIG_AsVal_double(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "RBDY3_SetYPeriodicCondition" "', argument " "1"" of type '" "double""'");
  } 
  arg1 = static_cast< double >(val1);
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      RBDY3_SetYPeriodicCondition(arg1);
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RBDY3_AvoidBodyRotation(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  
  if (!PyArg_ParseTuple(args,(char *)":RBDY3_AvoidBodyRotation")) SWIG_fail;
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      RBDY3_AvoidBodyRotation();
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RBDY3_SkipInvisible(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  
  if (!PyArg_ParseTuple(args,(char *)":RBDY3_SkipInvisible")) SWIG_fail;
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      RBDY3_SkipInvisible();
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RBDY3_KeepIniDofOrder(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  
  if (!PyArg_ParseTuple(args,(char *)":RBDY3_KeepIniDofOrder")) SWIG_fail;
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      RBDY3_KeepIniDofOrder();
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RBDY3_SetVisible(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  int arg1 ;
  int val1 ;
  int ecode1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:RBDY3_SetVisible",&obj0)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "RBDY3_SetVisible" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = static_cast< int >(val1);
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      RBDY3_SetVisible(arg1);
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RBDY3_SetInvisible(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  int arg1 ;
  int val1 ;
  int ecode1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:RBDY3_SetInvisible",&obj0)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "RBDY3_SetInvisible" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = static_cast< int >(val1);
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      RBDY3_SetInvisible(arg1);
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RBDY3_IsVisible(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  int arg1 ;
  int val1 ;
  int ecode1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:RBDY3_IsVisible",&obj0)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "RBDY3_IsVisible" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = static_cast< int >(val1);
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      result = (int)RBDY3_IsVisible(arg1);
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RBDY3_CompCoor(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  
  if (!PyArg_ParseTuple(args,(char *)":RBDY3_CompCoor")) SWIG_fail;
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      RBDY3_CompCoor();
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RBDY3_GetBodyDensity(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  int arg1 ;
  int val1 ;
  int ecode1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:RBDY3_GetBodyDensity",&obj0)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "RBDY3_GetBodyDensity" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = static_cast< int >(val1);
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      result = (double)RBDY3_GetBodyDensity(arg1);
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RBDY3_GetBodyInertia(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  int arg1 ;
  double **arg2 = (double **) 0 ;
  int *arg3 = (int *) 0 ;
  int val1 ;
  int ecode1 = 0 ;
  double *data_temp2 ;
  int dim_temp2 ;
  PyObject * obj0 = 0 ;
  
  {
    arg2 = &data_temp2;
    arg3 = &dim_temp2;
  }
  if (!PyArg_ParseTuple(args,(char *)"O:RBDY3_GetBodyInertia",&obj0)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "RBDY3_GetBodyInertia" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = static_cast< int >(val1);
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      RBDY3_GetBodyInertia(arg1,arg2,arg3);
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_Py_Void();
  {
    npy_intp dims[1] = {
      *arg3 
    };
    PyObject * obj = PyArray_SimpleNewFromData(1, dims, NPY_DOUBLE, (void*)(*arg2));
    if (!obj) SWIG_fail;
    PyArrayObject * array = (PyArrayObject*) obj;
    attach_fortran_memory_to_numpy_array(array, (void*)(*arg2), NPY_DOUBLE, dims[0], 0);
    PyArray_ENABLEFLAGS(array,NPY_ARRAY_WRITEABLE);
    
    resultobj = SWIG_Python_AppendOutput(resultobj, obj);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RBDY3_GetAllInertia(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  double **arg1 = (double **) 0 ;
  int *arg2 = (int *) 0 ;
  int *arg3 = (int *) 0 ;
  double *data_temp1 ;
  int dim1_temp1 ;
  int dim2_temp1 ;
  
  {
    arg1 = &data_temp1;
    arg2 = &dim1_temp1;
    arg3 = &dim2_temp1;
  }
  if (!PyArg_ParseTuple(args,(char *)":RBDY3_GetAllInertia")) SWIG_fail;
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      RBDY3_GetAllInertia(arg1,arg2,arg3);
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_Py_Void();
  {
    npy_intp dims[2] = {
      *arg3, *arg2 
    };
    PyObject * obj = PyArray_SimpleNewFromData(2, dims, NPY_DOUBLE, (void*)(*arg1));
    if (!obj) SWIG_fail;
    PyArrayObject * array = (PyArrayObject*) obj;
    attach_fortran_memory_to_numpy_array(array, (void*)(*arg1), NPY_DOUBLE, dims[1], dims[0]);
    PyArray_ENABLEFLAGS(array,NPY_ARRAY_WRITEABLE);
    resultobj = SWIG_Python_AppendOutput(resultobj, obj);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RBDY3_CollectBodiesDotOUT(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  
  if (!PyArg_ParseTuple(args,(char *)":RBDY3_CollectBodiesDotOUT")) SWIG_fail;
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      RBDY3_CollectBodiesDotOUT();
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RBDY3_AppendToBodiesDotOUT(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  
  if (!PyArg_ParseTuple(args,(char *)":RBDY3_AppendToBodiesDotOUT")) SWIG_fail;
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      RBDY3_AppendToBodiesDotOUT();
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RBDY3_RebuildBodiesDotDAT(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  
  if (!PyArg_ParseTuple(args,(char *)":RBDY3_RebuildBodiesDotDAT")) SWIG_fail;
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      RBDY3_RebuildBodiesDotDAT();
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RBDY3_PutBodyVector(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  char *arg1 = (char *) 0 ;
  int arg2 ;
  double *arg3 = (double *) 0 ;
  int arg4 ;
  int res1 ;
  char *buf1 = 0 ;
  int alloc1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyArrayObject *array3 = NULL ;
  int is_new_object3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:RBDY3_PutBodyVector",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_AsCharPtrAndSize(obj0, &buf1, NULL, &alloc1);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RBDY3_PutBodyVector" "', argument " "1"" of type '" "char *""'");
  }
  arg1 = reinterpret_cast< char * >(buf1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "RBDY3_PutBodyVector" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    npy_intp size[1] = {
      -1 
    };
    array3 = obj_to_array_contiguous_allow_conversion(obj2,
      NPY_DOUBLE,
      &is_new_object3);
    if (!array3 || !require_dimensions(array3, 1) ||
      !require_size(array3, size, 1)) SWIG_fail;
    arg3 = (double*) array_data(array3);
    arg4 = (int) array_size(array3,0);
  }
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      RBDY3_PutBodyVector(arg1,arg2,arg3,arg4);
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_Py_Void();
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  {
    if (is_new_object3 && array3)
    {
      Py_DECREF(array3); 
    }
  }
  return resultobj;
fail:
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  {
    if (is_new_object3 && array3)
    {
      Py_DECREF(array3); 
    }
  }
  return NULL;
}


SWIGINTERN PyObject *_wrap_RBDY3_PutAllBodyVector(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  char *arg1 = (char *) 0 ;
  double *arg2 = (double *) 0 ;
  int arg3 ;
  int arg4 ;
  int res1 ;
  char *buf1 = 0 ;
  int alloc1 = 0 ;
  PyArrayObject *array2 = NULL ;
  int is_new_object2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:RBDY3_PutAllBodyVector",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_AsCharPtrAndSize(obj0, &buf1, NULL, &alloc1);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RBDY3_PutAllBodyVector" "', argument " "1"" of type '" "char *""'");
  }
  arg1 = reinterpret_cast< char * >(buf1);
  {
    npy_intp size[2] = {
      -1, -1 
    };
    array2 = obj_to_array_contiguous_allow_conversion(obj1, NPY_DOUBLE,
      &is_new_object2);
    if (!array2 || !require_dimensions(array2, 2) ||
      !require_size(array2, size, 2)) SWIG_fail;
    arg2 = (double*) array_data(array2);
    arg3 = (int) array_size(array2,0);
    arg4 = (int) array_size(array2,1);
  }
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      RBDY3_PutAllBodyVector(arg1,arg2,arg3,arg4);
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_Py_Void();
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  {
    if (is_new_object2 && array2)
    {
      Py_DECREF(array2); 
    }
  }
  return resultobj;
fail:
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  {
    if (is_new_object2 && array2)
    {
      Py_DECREF(array2); 
    }
  }
  return NULL;
}


SWIGINTERN PyObject *_wrap_RBDY3_GetBodyVector(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  char *arg1 = (char *) 0 ;
  int arg2 ;
  double **arg3 = (double **) 0 ;
  int *arg4 = (int *) 0 ;
  int res1 ;
  char *buf1 = 0 ;
  int alloc1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  double *data_temp3 ;
  int dim_temp3 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  {
    arg3 = &data_temp3;
    arg4 = &dim_temp3;
  }
  if (!PyArg_ParseTuple(args,(char *)"OO:RBDY3_GetBodyVector",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_AsCharPtrAndSize(obj0, &buf1, NULL, &alloc1);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RBDY3_GetBodyVector" "', argument " "1"" of type '" "char *""'");
  }
  arg1 = reinterpret_cast< char * >(buf1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "RBDY3_GetBodyVector" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      RBDY3_GetBodyVector(arg1,arg2,arg3,arg4);
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_Py_Void();
  {
    npy_intp dims[1] = {
      *arg4 
    };
    PyObject * obj = PyArray_SimpleNewFromData(1, dims, NPY_DOUBLE, (void*)(*arg3));
    if (!obj) SWIG_fail;
    PyArrayObject * array = (PyArrayObject*) obj;
    attach_fortran_memory_to_numpy_array(array, (void*)(*arg3), NPY_DOUBLE, dims[0], 0);
    PyArray_ENABLEFLAGS(array,NPY_ARRAY_WRITEABLE);
    
    resultobj = SWIG_Python_AppendOutput(resultobj, obj);
  }
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  return resultobj;
fail:
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  return NULL;
}


SWIGINTERN PyObject *_wrap_RBDY3_GetAllBodyVector(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  char *arg1 = (char *) 0 ;
  double **arg2 = (double **) 0 ;
  int *arg3 = (int *) 0 ;
  int *arg4 = (int *) 0 ;
  int res1 ;
  char *buf1 = 0 ;
  int alloc1 = 0 ;
  double *data_temp2 ;
  int dim1_temp2 ;
  int dim2_temp2 ;
  PyObject * obj0 = 0 ;
  
  {
    arg2 = &data_temp2;
    arg3 = &dim1_temp2;
    arg4 = &dim2_temp2;
  }
  if (!PyArg_ParseTuple(args,(char *)"O:RBDY3_GetAllBodyVector",&obj0)) SWIG_fail;
  res1 = SWIG_AsCharPtrAndSize(obj0, &buf1, NULL, &alloc1);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RBDY3_GetAllBodyVector" "', argument " "1"" of type '" "char *""'");
  }
  arg1 = reinterpret_cast< char * >(buf1);
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      RBDY3_GetAllBodyVector(arg1,arg2,arg3,arg4);
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_Py_Void();
  {
    npy_intp dims[2] = {
      *arg4, *arg3 
    };
    PyObject * obj = PyArray_SimpleNewFromData(2, dims, NPY_DOUBLE, (void*)(*arg2));
    if (!obj) SWIG_fail;
    PyArrayObject * array = (PyArrayObject*) obj;
    attach_fortran_memory_to_numpy_array(array, (void*)(*arg2), NPY_DOUBLE, dims[1], dims[0]);
    PyArray_ENABLEFLAGS(array,NPY_ARRAY_WRITEABLE);
    resultobj = SWIG_Python_AppendOutput(resultobj, obj);
  }
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  return resultobj;
fail:
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  return NULL;
}


SWIGINTERN PyObject *_wrap_RBDY3_GetPtrBodyVector(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  char *arg1 = (char *) 0 ;
  int arg2 ;
  double **arg3 = (double **) 0 ;
  int *arg4 = (int *) 0 ;
  int res1 ;
  char *buf1 = 0 ;
  int alloc1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  double *data_temp3 = NULL ;
  int dim_temp3 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  {
    arg3 = &data_temp3;
    arg4 = &dim_temp3;
  }
  if (!PyArg_ParseTuple(args,(char *)"OO:RBDY3_GetPtrBodyVector",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_AsCharPtrAndSize(obj0, &buf1, NULL, &alloc1);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RBDY3_GetPtrBodyVector" "', argument " "1"" of type '" "char *""'");
  }
  arg1 = reinterpret_cast< char * >(buf1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "RBDY3_GetPtrBodyVector" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      RBDY3_GetPtrBodyVector(arg1,arg2,arg3,arg4);
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_Py_Void();
  {
    npy_intp dims[1] = {
      *arg4 
    };
    PyObject* obj = PyArray_SimpleNewFromData(1, dims, NPY_DOUBLE, (void*)(*arg3));
    PyArrayObject* array = (PyArrayObject*) obj;
    
    if (!array) SWIG_fail;
    resultobj = SWIG_Python_AppendOutput(resultobj, obj);
  }
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  return resultobj;
fail:
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  return NULL;
}


SWIGINTERN PyObject *_wrap_RBDY3_PutBodyMatrix(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  char *arg1 = (char *) 0 ;
  int arg2 ;
  double *arg3 = (double *) 0 ;
  int arg4 ;
  int arg5 ;
  int res1 ;
  char *buf1 = 0 ;
  int alloc1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyArrayObject *array3 = NULL ;
  int is_new_object3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:RBDY3_PutBodyMatrix",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_AsCharPtrAndSize(obj0, &buf1, NULL, &alloc1);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RBDY3_PutBodyMatrix" "', argument " "1"" of type '" "char *""'");
  }
  arg1 = reinterpret_cast< char * >(buf1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "RBDY3_PutBodyMatrix" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    npy_intp size[2] = {
      -1, -1 
    };
    array3 = obj_to_array_contiguous_allow_conversion(obj2, NPY_DOUBLE,
      &is_new_object3);
    if (!array3 || !require_dimensions(array3, 2) ||
      !require_size(array3, size, 2)) SWIG_fail;
    arg3 = (double*) array_data(array3);
    arg4 = (int) array_size(array3,0);
    arg5 = (int) array_size(array3,1);
  }
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      RBDY3_PutBodyMatrix(arg1,arg2,arg3,arg4,arg5);
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_Py_Void();
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  {
    if (is_new_object3 && array3)
    {
      Py_DECREF(array3); 
    }
  }
  return resultobj;
fail:
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  {
    if (is_new_object3 && array3)
    {
      Py_DECREF(array3); 
    }
  }
  return NULL;
}


SWIGINTERN PyObject *_wrap_RBDY3_GetBodyMatrix(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  char *arg1 = (char *) 0 ;
  int arg2 ;
  double **arg3 = (double **) 0 ;
  int *arg4 = (int *) 0 ;
  int *arg5 = (int *) 0 ;
  int res1 ;
  char *buf1 = 0 ;
  int alloc1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  double *data_temp3 ;
  int dim1_temp3 ;
  int dim2_temp3 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  {
    arg3 = &data_temp3;
    arg4 = &dim1_temp3;
    arg5 = &dim2_temp3;
  }
  if (!PyArg_ParseTuple(args,(char *)"OO:RBDY3_GetBodyMatrix",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_AsCharPtrAndSize(obj0, &buf1, NULL, &alloc1);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RBDY3_GetBodyMatrix" "', argument " "1"" of type '" "char *""'");
  }
  arg1 = reinterpret_cast< char * >(buf1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "RBDY3_GetBodyMatrix" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      RBDY3_GetBodyMatrix(arg1,arg2,arg3,arg4,arg5);
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_Py_Void();
  {
    npy_intp dims[2] = {
      *arg5, *arg4 
    };
    PyObject * obj = PyArray_SimpleNewFromData(2, dims, NPY_DOUBLE, (void*)(*arg3));
    if (!obj) SWIG_fail;
    PyArrayObject * array = (PyArrayObject*) obj;
    attach_fortran_memory_to_numpy_array(array, (void*)(*arg3), NPY_DOUBLE, dims[1], dims[0]);
    PyArray_ENABLEFLAGS(array,NPY_ARRAY_WRITEABLE);
    resultobj = SWIG_Python_AppendOutput(resultobj, obj);
  }
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  return resultobj;
fail:
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  return NULL;
}


SWIGINTERN PyObject *_wrap_RBDY3_GetAllRData(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  double **arg1 = (double **) 0 ;
  int *arg2 = (int *) 0 ;
  int *arg3 = (int *) 0 ;
  double *data_temp1 ;
  int dim1_temp1 ;
  int dim2_temp1 ;
  
  {
    arg1 = &data_temp1;
    arg2 = &dim1_temp1;
    arg3 = &dim2_temp1;
  }
  if (!PyArg_ParseTuple(args,(char *)":RBDY3_GetAllRData")) SWIG_fail;
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      RBDY3_GetAllRData(arg1,arg2,arg3);
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_Py_Void();
  {
    npy_intp dims[2] = {
      *arg3, *arg2 
    };
    PyObject * obj = PyArray_SimpleNewFromData(2, dims, NPY_DOUBLE, (void*)(*arg1));
    if (!obj) SWIG_fail;
    PyArrayObject * array = (PyArrayObject*) obj;
    attach_fortran_memory_to_numpy_array(array, (void*)(*arg1), NPY_DOUBLE, dims[1], dims[0]);
    PyArray_ENABLEFLAGS(array,NPY_ARRAY_WRITEABLE);
    resultobj = SWIG_Python_AppendOutput(resultobj, obj);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RBDY3_GetNbRBDY3(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)":RBDY3_GetNbRBDY3")) SWIG_fail;
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      result = (int)RBDY3_GetNbRBDY3();
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RBDY3_GetMass(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  int arg1 ;
  int val1 ;
  int ecode1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:RBDY3_GetMass",&obj0)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "RBDY3_GetMass" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = static_cast< int >(val1);
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      result = (double)RBDY3_GetMass(arg1);
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RBDY3_GetAllMass(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  double **arg1 = (double **) 0 ;
  int *arg2 = (int *) 0 ;
  double *data_temp1 ;
  int dim_temp1 ;
  
  {
    arg1 = &data_temp1;
    arg2 = &dim_temp1;
  }
  if (!PyArg_ParseTuple(args,(char *)":RBDY3_GetAllMass")) SWIG_fail;
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      RBDY3_GetAllMass(arg1,arg2);
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_Py_Void();
  {
    npy_intp dims[1] = {
      *arg2 
    };
    PyObject * obj = PyArray_SimpleNewFromData(1, dims, NPY_DOUBLE, (void*)(*arg1));
    if (!obj) SWIG_fail;
    PyArrayObject * array = (PyArrayObject*) obj;
    attach_fortran_memory_to_numpy_array(array, (void*)(*arg1), NPY_DOUBLE, dims[0], 0);
    PyArray_ENABLEFLAGS(array,NPY_ARRAY_WRITEABLE);
    
    resultobj = SWIG_Python_AppendOutput(resultobj, obj);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RBDY3_GetPtrMass(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  int arg1 ;
  double **arg2 = (double **) 0 ;
  int val1 ;
  int ecode1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:RBDY3_GetPtrMass",&obj0,&obj1)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "RBDY3_GetPtrMass" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = static_cast< int >(val1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_p_double, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "RBDY3_GetPtrMass" "', argument " "2"" of type '" "double **""'"); 
  }
  arg2 = reinterpret_cast< double ** >(argp2);
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      RBDY3_GetPtrMass(arg1,arg2);
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RBDY3_GetVelocity(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  int arg1 ;
  double *arg2 = (double *) 0 ;
  int val1 ;
  int ecode1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:RBDY3_GetVelocity",&obj0,&obj1)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "RBDY3_GetVelocity" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = static_cast< int >(val1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_double, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "RBDY3_GetVelocity" "', argument " "2"" of type '" "double *""'"); 
  }
  arg2 = reinterpret_cast< double * >(argp2);
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      RBDY3_GetVelocity(arg1,arg2);
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RBDY3_GetGlobInertia(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  int arg1 ;
  double **arg2 = (double **) 0 ;
  int *arg3 = (int *) 0 ;
  int *arg4 = (int *) 0 ;
  int val1 ;
  int ecode1 = 0 ;
  double *data_temp2 ;
  int dim1_temp2 ;
  int dim2_temp2 ;
  PyObject * obj0 = 0 ;
  
  {
    arg2 = &data_temp2;
    arg3 = &dim1_temp2;
    arg4 = &dim2_temp2;
  }
  if (!PyArg_ParseTuple(args,(char *)"O:RBDY3_GetGlobInertia",&obj0)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "RBDY3_GetGlobInertia" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = static_cast< int >(val1);
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      RBDY3_GetGlobInertia(arg1,arg2,arg3,arg4);
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_Py_Void();
  {
    npy_intp dims[2] = {
      *arg4, *arg3 
    };
    PyObject * obj = PyArray_SimpleNewFromData(2, dims, NPY_DOUBLE, (void*)(*arg2));
    if (!obj) SWIG_fail;
    PyArrayObject * array = (PyArrayObject*) obj;
    attach_fortran_memory_to_numpy_array(array, (void*)(*arg2), NPY_DOUBLE, dims[1], dims[0]);
    PyArray_ENABLEFLAGS(array,NPY_ARRAY_WRITEABLE);
    resultobj = SWIG_Python_AppendOutput(resultobj, obj);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RBDY3_GetBehavior(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  int arg1 ;
  char **arg2 = (char **) 0 ;
  int val1 ;
  int ecode1 = 0 ;
  char *tmp_c52 ;
  PyObject * obj0 = 0 ;
  
  {
    arg2 = &tmp_c52;
  }
  if (!PyArg_ParseTuple(args,(char *)"O:RBDY3_GetBehavior",&obj0)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "RBDY3_GetBehavior" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = static_cast< int >(val1);
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      RBDY3_GetBehavior(arg1,arg2);
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_Py_Void();
  {
    PyObject *chaine;
    chaine = PyString_FromStringAndSize(*arg2, 5);
    free_ptrFortranString(*arg2, 5);
    resultobj = SWIG_Python_AppendOutput(resultobj, chaine);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RBDY3_GetNbContactor(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  int arg1 ;
  int val1 ;
  int ecode1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:RBDY3_GetNbContactor",&obj0)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "RBDY3_GetNbContactor" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = static_cast< int >(val1);
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      result = (int)RBDY3_GetNbContactor(arg1);
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RBDY3_GetContactorType(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  int arg1 ;
  int arg2 ;
  char **arg3 = (char **) 0 ;
  int val1 ;
  int ecode1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  char *tmp_c53 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  {
    arg3 = &tmp_c53;
  }
  if (!PyArg_ParseTuple(args,(char *)"OO:RBDY3_GetContactorType",&obj0,&obj1)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "RBDY3_GetContactorType" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = static_cast< int >(val1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "RBDY3_GetContactorType" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      RBDY3_GetContactorType(arg1,arg2,arg3);
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_Py_Void();
  {
    PyObject *chaine;
    chaine = PyString_FromStringAndSize(*arg3, 5);
    free_ptrFortranString(*arg3, 5);
    resultobj = SWIG_Python_AppendOutput(resultobj, chaine);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RBDY3_SetContactorColor(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  int arg1 ;
  int arg2 ;
  char *arg3 = (char *) 0 ;
  int val1 ;
  int ecode1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int res3 ;
  char *buf3 = 0 ;
  int alloc3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:RBDY3_SetContactorColor",&obj0,&obj1,&obj2)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "RBDY3_SetContactorColor" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = static_cast< int >(val1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "RBDY3_SetContactorColor" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  res3 = SWIG_AsCharPtrAndSize(obj2, &buf3, NULL, &alloc3);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "RBDY3_SetContactorColor" "', argument " "3"" of type '" "char *""'");
  }
  arg3 = reinterpret_cast< char * >(buf3);
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      RBDY3_SetContactorColor(arg1,arg2,arg3);
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_Py_Void();
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return resultobj;
fail:
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_RBDY3_GetContactorColor(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  int arg1 ;
  int arg2 ;
  char **arg3 = (char **) 0 ;
  int val1 ;
  int ecode1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  char *tmp_c53 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  {
    arg3 = &tmp_c53;
  }
  if (!PyArg_ParseTuple(args,(char *)"OO:RBDY3_GetContactorColor",&obj0,&obj1)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "RBDY3_GetContactorColor" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = static_cast< int >(val1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "RBDY3_GetContactorColor" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      RBDY3_GetContactorColor(arg1,arg2,arg3);
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_Py_Void();
  {
    PyObject *chaine;
    chaine = PyString_FromStringAndSize(*arg3, 5);
    free_ptrFortranString(*arg3, 5);
    resultobj = SWIG_Python_AppendOutput(resultobj, chaine);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RBDY3_getDrvVlocy(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  int arg1 ;
  int **arg2 = (int **) 0 ;
  int *arg3 = (int *) 0 ;
  double **arg4 = (double **) 0 ;
  int *arg5 = (int *) 0 ;
  int val1 ;
  int ecode1 = 0 ;
  int *data_temp2 ;
  int dim_temp2 ;
  double *data_temp4 ;
  int dim_temp4 ;
  PyObject * obj0 = 0 ;
  
  {
    arg2 = &data_temp2;
    arg3 = &dim_temp2;
  }
  {
    arg4 = &data_temp4;
    arg5 = &dim_temp4;
  }
  if (!PyArg_ParseTuple(args,(char *)"O:RBDY3_getDrvVlocy",&obj0)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "RBDY3_getDrvVlocy" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = static_cast< int >(val1);
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      RBDY3_getDrvVlocy(arg1,arg2,arg3,arg4,arg5);
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_Py_Void();
  {
    npy_intp dims[1] = {
      *arg3 
    };
    PyObject * obj = PyArray_SimpleNewFromData(1, dims, NPY_INT, (void*)(*arg2));
    if (!obj) SWIG_fail;
    PyArrayObject * array = (PyArrayObject*) obj;
    attach_fortran_memory_to_numpy_array(array, (void*)(*arg2), NPY_INT, dims[0], 0);
    PyArray_ENABLEFLAGS(array,NPY_ARRAY_WRITEABLE);
    
    resultobj = SWIG_Python_AppendOutput(resultobj, obj);
  }
  {
    npy_intp dims[1] = {
      *arg5 
    };
    PyObject * obj = PyArray_SimpleNewFromData(1, dims, NPY_DOUBLE, (void*)(*arg4));
    if (!obj) SWIG_fail;
    PyArrayObject * array = (PyArrayObject*) obj;
    attach_fortran_memory_to_numpy_array(array, (void*)(*arg4), NPY_DOUBLE, dims[0], 0);
    PyArray_ENABLEFLAGS(array,NPY_ARRAY_WRITEABLE);
    
    resultobj = SWIG_Python_AppendOutput(resultobj, obj);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RBDY3_computeDrvVlocy(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  int arg1 ;
  double *arg2 = (double *) 0 ;
  int arg3 ;
  int val1 ;
  int ecode1 = 0 ;
  PyArrayObject *array2 = NULL ;
  int is_new_object2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:RBDY3_computeDrvVlocy",&obj0,&obj1)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "RBDY3_computeDrvVlocy" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = static_cast< int >(val1);
  {
    npy_intp size[1] = {
      -1 
    };
    array2 = obj_to_array_contiguous_allow_conversion(obj1,
      NPY_DOUBLE,
      &is_new_object2);
    if (!array2 || !require_dimensions(array2, 1) ||
      !require_size(array2, size, 1)) SWIG_fail;
    arg2 = (double*) array_data(array2);
    arg3 = (int) array_size(array2,0);
  }
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      RBDY3_computeDrvVlocy(arg1,arg2,arg3);
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_Py_Void();
  {
    if (is_new_object2 && array2)
    {
      Py_DECREF(array2); 
    }
  }
  return resultobj;
fail:
  {
    if (is_new_object2 && array2)
    {
      Py_DECREF(array2); 
    }
  }
  return NULL;
}


SWIGINTERN PyObject *_wrap_RBDY3_WriteOutOneBody(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  int arg1 ;
  int arg2 ;
  int val1 ;
  int ecode1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:RBDY3_WriteOutOneBody",&obj0,&obj1)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "RBDY3_WriteOutOneBody" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = static_cast< int >(val1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "RBDY3_WriteOutOneBody" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      RBDY3_WriteOutOneBody(arg1,arg2);
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RBDY3_WriteOutDofOneBody(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  int arg1 ;
  int arg2 ;
  int val1 ;
  int ecode1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:RBDY3_WriteOutDofOneBody",&obj0,&obj1)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "RBDY3_WriteOutDofOneBody" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = static_cast< int >(val1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "RBDY3_WriteOutDofOneBody" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      RBDY3_WriteOutDofOneBody(arg1,arg2);
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RBDY3_LoadThreadNetwork(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  
  if (!PyArg_ParseTuple(args,(char *)":RBDY3_LoadThreadNetwork")) SWIG_fail;
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      RBDY3_LoadThreadNetwork();
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RBDY3_SetInvisibleSmallObjects(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  double arg1 ;
  double val1 ;
  int ecode1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:RBDY3_SetInvisibleSmallObjects",&obj0)) SWIG_fail;
  ecode1 = SWIG_AsVal_double(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "RBDY3_SetInvisibleSmallObjects" "', argument " "1"" of type '" "double""'");
  } 
  arg1 = static_cast< double >(val1);
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      RBDY3_SetInvisibleSmallObjects(arg1);
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RBDY3_SetVisibleVlocyDrivenDof(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  int arg1 ;
  int arg2 ;
  int val1 ;
  int ecode1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:RBDY3_SetVisibleVlocyDrivenDof",&obj0,&obj1)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "RBDY3_SetVisibleVlocyDrivenDof" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = static_cast< int >(val1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "RBDY3_SetVisibleVlocyDrivenDof" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      RBDY3_SetVisibleVlocyDrivenDof(arg1,arg2);
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RBDY3_SetInvisibleVlocyDrivenDof(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  int arg1 ;
  int arg2 ;
  int val1 ;
  int ecode1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:RBDY3_SetInvisibleVlocyDrivenDof",&obj0,&obj1)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "RBDY3_SetInvisibleVlocyDrivenDof" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = static_cast< int >(val1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "RBDY3_SetInvisibleVlocyDrivenDof" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      RBDY3_SetInvisibleVlocyDrivenDof(arg1,arg2);
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RBDY3_PartialDamping(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  int arg1 ;
  double arg2 ;
  int val1 ;
  int ecode1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:RBDY3_PartialDamping",&obj0,&obj1)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "RBDY3_PartialDamping" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = static_cast< int >(val1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "RBDY3_PartialDamping" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      RBDY3_PartialDamping(arg1,arg2);
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RBDY3_GetVolume(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  int arg1 ;
  double *arg2 = (double *) 0 ;
  int val1 ;
  int ecode1 = 0 ;
  double temp2 ;
  int res2 = SWIG_TMPOBJ ;
  PyObject * obj0 = 0 ;
  
  arg2 = &temp2;
  if (!PyArg_ParseTuple(args,(char *)"O:RBDY3_GetVolume",&obj0)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "RBDY3_GetVolume" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = static_cast< int >(val1);
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      RBDY3_GetVolume(arg1,arg2);
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsTmpObj(res2)) {
    resultobj = SWIG_Python_AppendOutput(resultobj, SWIG_From_double((*arg2)));
  } else {
    int new_flags = SWIG_IsNewObj(res2) ? (SWIG_POINTER_OWN |  0 ) :  0 ;
    resultobj = SWIG_Python_AppendOutput(resultobj, SWIG_NewPointerObj((void*)(arg2), SWIGTYPE_p_double, new_flags));
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RBDY3_GetAllVolume(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  double **arg1 = (double **) 0 ;
  int *arg2 = (int *) 0 ;
  double *data_temp1 ;
  int dim_temp1 ;
  
  {
    arg1 = &data_temp1;
    arg2 = &dim_temp1;
  }
  if (!PyArg_ParseTuple(args,(char *)":RBDY3_GetAllVolume")) SWIG_fail;
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      RBDY3_GetAllVolume(arg1,arg2);
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_Py_Void();
  {
    npy_intp dims[1] = {
      *arg2 
    };
    PyObject * obj = PyArray_SimpleNewFromData(1, dims, NPY_DOUBLE, (void*)(*arg1));
    if (!obj) SWIG_fail;
    PyArrayObject * array = (PyArrayObject*) obj;
    attach_fortran_memory_to_numpy_array(array, (void*)(*arg1), NPY_DOUBLE, dims[0], 0);
    PyArray_ENABLEFLAGS(array,NPY_ARRAY_WRITEABLE);
    
    resultobj = SWIG_Python_AppendOutput(resultobj, obj);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RBDY3_RenumVisibleBodies(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  
  if (!PyArg_ParseTuple(args,(char *)":RBDY3_RenumVisibleBodies")) SWIG_fail;
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      RBDY3_RenumVisibleBodies();
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RBDY3_GetBulkBehavNumber(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  int arg1 ;
  int val1 ;
  int ecode1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:RBDY3_GetBulkBehavNumber",&obj0)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "RBDY3_GetBulkBehavNumber" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = static_cast< int >(val1);
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      result = (int)RBDY3_GetBulkBehavNumber(arg1);
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RBDY3_CleanMemory(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  
  if (!PyArg_ParseTuple(args,(char *)":RBDY3_CleanMemory")) SWIG_fail;
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      RBDY3_CleanMemory();
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RBDY3_LoadMpBehaviours(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  double arg1 ;
  double val1 ;
  int ecode1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:RBDY3_LoadMpBehaviours",&obj0)) SWIG_fail;
  ecode1 = SWIG_AsVal_double(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "RBDY3_LoadMpBehaviours" "', argument " "1"" of type '" "double""'");
  } 
  arg1 = static_cast< double >(val1);
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      RBDY3_LoadMpBehaviours(arg1);
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RBDY3_IncrementWSvsT(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  
  if (!PyArg_ParseTuple(args,(char *)":RBDY3_IncrementWSvsT")) SWIG_fail;
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      RBDY3_IncrementWSvsT();
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RBDY3_UpdateGAMMAvsT(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  
  if (!PyArg_ParseTuple(args,(char *)":RBDY3_UpdateGAMMAvsT")) SWIG_fail;
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      RBDY3_UpdateGAMMAvsT();
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RBDY3_GetThermalValue(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  int arg1 ;
  int arg2 ;
  int val1 ;
  int ecode1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:RBDY3_GetThermalValue",&obj0,&obj1)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "RBDY3_GetThermalValue" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = static_cast< int >(val1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "RBDY3_GetThermalValue" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      result = (double)RBDY3_GetThermalValue(arg1,arg2);
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RBDY3_SetEquilibriumNorm(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  char *arg1 = (char *) 0 ;
  double arg2 ;
  int res1 ;
  char *buf1 = 0 ;
  int alloc1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:RBDY3_SetEquilibriumNorm",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_AsCharPtrAndSize(obj0, &buf1, NULL, &alloc1);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RBDY3_SetEquilibriumNorm" "', argument " "1"" of type '" "char *""'");
  }
  arg1 = reinterpret_cast< char * >(buf1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "RBDY3_SetEquilibriumNorm" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      RBDY3_SetEquilibriumNorm(arg1,arg2);
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_Py_Void();
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  return resultobj;
fail:
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  return NULL;
}


SWIGINTERN PyObject *_wrap_RBDY3_CheckEquilibriumState(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)":RBDY3_CheckEquilibriumState")) SWIG_fail;
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      result = (bool)RBDY3_CheckEquilibriumState();
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RBDY3_SetSourcePoint(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  int arg1 ;
  double arg2 ;
  double arg3 ;
  double arg4 ;
  double arg5 ;
  int val1 ;
  int ecode1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  double val4 ;
  int ecode4 = 0 ;
  double val5 ;
  int ecode5 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOO:RBDY3_SetSourcePoint",&obj0,&obj1,&obj2,&obj3,&obj4)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "RBDY3_SetSourcePoint" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = static_cast< int >(val1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "RBDY3_SetSourcePoint" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  ecode3 = SWIG_AsVal_double(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "RBDY3_SetSourcePoint" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast< double >(val3);
  ecode4 = SWIG_AsVal_double(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "RBDY3_SetSourcePoint" "', argument " "4"" of type '" "double""'");
  } 
  arg4 = static_cast< double >(val4);
  ecode5 = SWIG_AsVal_double(obj4, &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "RBDY3_SetSourcePoint" "', argument " "5"" of type '" "double""'");
  } 
  arg5 = static_cast< double >(val5);
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      RBDY3_SetSourcePoint(arg1,arg2,arg3,arg4,arg5);
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RBDY3_SetSourcePointWithIni(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  int arg1 ;
  double arg2 ;
  double arg3 ;
  double arg4 ;
  double arg5 ;
  int val1 ;
  int ecode1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  double val4 ;
  int ecode4 = 0 ;
  double val5 ;
  int ecode5 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOO:RBDY3_SetSourcePointWithIni",&obj0,&obj1,&obj2,&obj3,&obj4)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "RBDY3_SetSourcePointWithIni" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = static_cast< int >(val1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "RBDY3_SetSourcePointWithIni" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  ecode3 = SWIG_AsVal_double(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "RBDY3_SetSourcePointWithIni" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast< double >(val3);
  ecode4 = SWIG_AsVal_double(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "RBDY3_SetSourcePointWithIni" "', argument " "4"" of type '" "double""'");
  } 
  arg4 = static_cast< double >(val4);
  ecode5 = SWIG_AsVal_double(obj4, &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "RBDY3_SetSourcePointWithIni" "', argument " "5"" of type '" "double""'");
  } 
  arg5 = static_cast< double >(val5);
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      RBDY3_SetSourcePointWithIni(arg1,arg2,arg3,arg4,arg5);
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RBDY3_InitializeProgressiveActivation(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  double arg1 ;
  double arg2 ;
  double val1 ;
  int ecode1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:RBDY3_InitializeProgressiveActivation",&obj0,&obj1)) SWIG_fail;
  ecode1 = SWIG_AsVal_double(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "RBDY3_InitializeProgressiveActivation" "', argument " "1"" of type '" "double""'");
  } 
  arg1 = static_cast< double >(val1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "RBDY3_InitializeProgressiveActivation" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      RBDY3_InitializeProgressiveActivation(arg1,arg2);
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RBDY3_ApplyProgressiveActivation(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  int arg1 ;
  int val1 ;
  int ecode1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:RBDY3_ApplyProgressiveActivation",&obj0)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "RBDY3_ApplyProgressiveActivation" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = static_cast< int >(val1);
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      RBDY3_ApplyProgressiveActivation(arg1);
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RBDY3_InitFreeBoundary(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  double arg1 ;
  double arg2 ;
  double arg3 ;
  double arg4 ;
  double arg5 ;
  double val1 ;
  int ecode1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  double val4 ;
  int ecode4 = 0 ;
  double val5 ;
  int ecode5 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOO:RBDY3_InitFreeBoundary",&obj0,&obj1,&obj2,&obj3,&obj4)) SWIG_fail;
  ecode1 = SWIG_AsVal_double(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "RBDY3_InitFreeBoundary" "', argument " "1"" of type '" "double""'");
  } 
  arg1 = static_cast< double >(val1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "RBDY3_InitFreeBoundary" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  ecode3 = SWIG_AsVal_double(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "RBDY3_InitFreeBoundary" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast< double >(val3);
  ecode4 = SWIG_AsVal_double(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "RBDY3_InitFreeBoundary" "', argument " "4"" of type '" "double""'");
  } 
  arg4 = static_cast< double >(val4);
  ecode5 = SWIG_AsVal_double(obj4, &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "RBDY3_InitFreeBoundary" "', argument " "5"" of type '" "double""'");
  } 
  arg5 = static_cast< double >(val5);
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      RBDY3_InitFreeBoundary(arg1,arg2,arg3,arg4,arg5);
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RBDY3_TriaxialLoading(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  int arg1 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  int arg5 ;
  int arg6 ;
  int arg7 ;
  double *arg8 = (double *) 0 ;
  int arg9 ;
  int val1 ;
  int ecode1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  int val5 ;
  int ecode5 = 0 ;
  int val6 ;
  int ecode6 = 0 ;
  int val7 ;
  int ecode7 = 0 ;
  PyArrayObject *array8 = NULL ;
  int is_new_object8 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  PyObject * obj5 = 0 ;
  PyObject * obj6 = 0 ;
  PyObject * obj7 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOOOOO:RBDY3_TriaxialLoading",&obj0,&obj1,&obj2,&obj3,&obj4,&obj5,&obj6,&obj7)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "RBDY3_TriaxialLoading" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = static_cast< int >(val1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "RBDY3_TriaxialLoading" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "RBDY3_TriaxialLoading" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  ecode4 = SWIG_AsVal_int(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "RBDY3_TriaxialLoading" "', argument " "4"" of type '" "int""'");
  } 
  arg4 = static_cast< int >(val4);
  ecode5 = SWIG_AsVal_int(obj4, &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "RBDY3_TriaxialLoading" "', argument " "5"" of type '" "int""'");
  } 
  arg5 = static_cast< int >(val5);
  ecode6 = SWIG_AsVal_int(obj5, &val6);
  if (!SWIG_IsOK(ecode6)) {
    SWIG_exception_fail(SWIG_ArgError(ecode6), "in method '" "RBDY3_TriaxialLoading" "', argument " "6"" of type '" "int""'");
  } 
  arg6 = static_cast< int >(val6);
  ecode7 = SWIG_AsVal_int(obj6, &val7);
  if (!SWIG_IsOK(ecode7)) {
    SWIG_exception_fail(SWIG_ArgError(ecode7), "in method '" "RBDY3_TriaxialLoading" "', argument " "7"" of type '" "int""'");
  } 
  arg7 = static_cast< int >(val7);
  {
    npy_intp size[1] = {
      -1 
    };
    array8 = obj_to_array_contiguous_allow_conversion(obj7,
      NPY_DOUBLE,
      &is_new_object8);
    if (!array8 || !require_dimensions(array8, 1) ||
      !require_size(array8, size, 1)) SWIG_fail;
    arg8 = (double*) array_data(array8);
    arg9 = (int) array_size(array8,0);
  }
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      RBDY3_TriaxialLoading(arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9);
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_Py_Void();
  {
    if (is_new_object8 && array8)
    {
      Py_DECREF(array8); 
    }
  }
  return resultobj;
fail:
  {
    if (is_new_object8 && array8)
    {
      Py_DECREF(array8); 
    }
  }
  return NULL;
}


SWIGINTERN PyObject *_wrap_RBDY3_GetDofStatus(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  int arg1 ;
  int val1 ;
  int ecode1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:RBDY3_GetDofStatus",&obj0)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "RBDY3_GetDofStatus" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = static_cast< int >(val1);
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      result = (int)RBDY3_GetDofStatus(arg1);
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SPHER_LoadTactors(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  
  if (!PyArg_ParseTuple(args,(char *)":SPHER_LoadTactors")) SWIG_fail;
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      SPHER_LoadTactors();
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SPHER_SetRadiusCorrection(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  double arg1 ;
  double val1 ;
  int ecode1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:SPHER_SetRadiusCorrection",&obj0)) SWIG_fail;
  ecode1 = SWIG_AsVal_double(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "SPHER_SetRadiusCorrection" "', argument " "1"" of type '" "double""'");
  } 
  arg1 = static_cast< double >(val1);
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      SPHER_SetRadiusCorrection(arg1);
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SPHER_GetNbSPHER(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)":SPHER_GetNbSPHER")) SWIG_fail;
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      result = (int)SPHER_GetNbSPHER();
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SPHER_GetSPHER2BDYTY(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  int **arg1 = (int **) 0 ;
  int *arg2 = (int *) 0 ;
  int *arg3 = (int *) 0 ;
  int *data_temp1 ;
  int dim1_temp1 ;
  int dim2_temp1 ;
  
  {
    arg1 = &data_temp1;
    arg2 = &dim1_temp1;
    arg3 = &dim2_temp1;
  }
  if (!PyArg_ParseTuple(args,(char *)":SPHER_GetSPHER2BDYTY")) SWIG_fail;
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      SPHER_GetSPHER2BDYTY(arg1,arg2,arg3);
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_Py_Void();
  {
    npy_intp dims[2] = {
      *arg3, *arg2 
    };
    PyObject * obj = PyArray_SimpleNewFromData(2, dims, NPY_INT, (void*)(*arg1));
    if (!obj) SWIG_fail;
    PyArrayObject * array = (PyArrayObject*) obj;
    attach_fortran_memory_to_numpy_array(array, (void*)(*arg1), NPY_INT, dims[1], dims[0]);
    PyArray_ENABLEFLAGS(array,NPY_ARRAY_WRITEABLE);
    resultobj = SWIG_Python_AppendOutput(resultobj, obj);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SPHER_GetPtrSPHER2BDYTY(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  int **arg1 = (int **) 0 ;
  int *arg2 = (int *) 0 ;
  int *arg3 = (int *) 0 ;
  int *data_temp1 ;
  int dim1_temp1 ;
  int dim2_temp1 ;
  
  {
    arg1 = &data_temp1;
    arg2 = &dim1_temp1;
    arg3 = &dim2_temp1;
  }
  if (!PyArg_ParseTuple(args,(char *)":SPHER_GetPtrSPHER2BDYTY")) SWIG_fail;
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      SPHER_GetPtrSPHER2BDYTY(arg1,arg2,arg3);
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_Py_Void();
  {
    npy_intp dims[2] = {
      *arg3, *arg2 
    };
    PyObject * array = PyArray_SimpleNewFromData(2, dims, NPY_INT, (void*)(*arg1));
    if (!array) SWIG_fail;
    resultobj = SWIG_Python_AppendOutput(resultobj, array);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SPHER_GetContactorRadius(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  int arg1 ;
  int val1 ;
  int ecode1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:SPHER_GetContactorRadius",&obj0)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "SPHER_GetContactorRadius" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = static_cast< int >(val1);
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      result = (double)SPHER_GetContactorRadius(arg1);
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SPHER_GetContactorCoor(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  int arg1 ;
  double **arg2 = (double **) 0 ;
  int *arg3 = (int *) 0 ;
  int val1 ;
  int ecode1 = 0 ;
  double *data_temp2 ;
  int dim_temp2 ;
  PyObject * obj0 = 0 ;
  
  {
    arg2 = &data_temp2;
    arg3 = &dim_temp2;
  }
  if (!PyArg_ParseTuple(args,(char *)"O:SPHER_GetContactorCoor",&obj0)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "SPHER_GetContactorCoor" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = static_cast< int >(val1);
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      SPHER_GetContactorCoor(arg1,arg2,arg3);
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_Py_Void();
  {
    npy_intp dims[1] = {
      *arg3 
    };
    PyObject * obj = PyArray_SimpleNewFromData(1, dims, NPY_DOUBLE, (void*)(*arg2));
    if (!obj) SWIG_fail;
    PyArrayObject * array = (PyArrayObject*) obj;
    attach_fortran_memory_to_numpy_array(array, (void*)(*arg2), NPY_DOUBLE, dims[0], 0);
    PyArray_ENABLEFLAGS(array,NPY_ARRAY_WRITEABLE);
    
    resultobj = SWIG_Python_AppendOutput(resultobj, obj);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SPHER_GetContactorCoorb(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  int arg1 ;
  double **arg2 = (double **) 0 ;
  int *arg3 = (int *) 0 ;
  int val1 ;
  int ecode1 = 0 ;
  double *data_temp2 ;
  int dim_temp2 ;
  PyObject * obj0 = 0 ;
  
  {
    arg2 = &data_temp2;
    arg3 = &dim_temp2;
  }
  if (!PyArg_ParseTuple(args,(char *)"O:SPHER_GetContactorCoorb",&obj0)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "SPHER_GetContactorCoorb" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = static_cast< int >(val1);
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      SPHER_GetContactorCoorb(arg1,arg2,arg3);
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_Py_Void();
  {
    npy_intp dims[1] = {
      *arg3 
    };
    PyObject * obj = PyArray_SimpleNewFromData(1, dims, NPY_DOUBLE, (void*)(*arg2));
    if (!obj) SWIG_fail;
    PyArrayObject * array = (PyArrayObject*) obj;
    attach_fortran_memory_to_numpy_array(array, (void*)(*arg2), NPY_DOUBLE, dims[0], 0);
    PyArray_ENABLEFLAGS(array,NPY_ARRAY_WRITEABLE);
    
    resultobj = SWIG_Python_AppendOutput(resultobj, obj);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SPHER_IsVisible(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  int arg1 ;
  int val1 ;
  int ecode1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:SPHER_IsVisible",&obj0)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "SPHER_IsVisible" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = static_cast< int >(val1);
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      result = (int)SPHER_IsVisible(arg1);
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SPHER_InitOutlines(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  double **arg1 = (double **) 0 ;
  int *arg2 = (int *) 0 ;
  int *arg3 = (int *) 0 ;
  double *data_temp1 ;
  int dim1_temp1 ;
  int dim2_temp1 ;
  
  {
    arg1 = &data_temp1;
    arg2 = &dim1_temp1;
    arg3 = &dim2_temp1;
  }
  if (!PyArg_ParseTuple(args,(char *)":SPHER_InitOutlines")) SWIG_fail;
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      SPHER_InitOutlines(arg1,arg2,arg3);
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_Py_Void();
  {
    npy_intp dims[2] = {
      *arg3, *arg2 
    };
    PyObject * array = PyArray_SimpleNewFromData(2, dims, NPY_DOUBLE, (void*)(*arg1));
    if (!array) SWIG_fail;
    resultobj = SWIG_Python_AppendOutput(resultobj, array);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SPHER_InitScalarFields(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  double **arg1 = (double **) 0 ;
  int *arg2 = (int *) 0 ;
  int *arg3 = (int *) 0 ;
  double *data_temp1 ;
  int dim1_temp1 ;
  int dim2_temp1 ;
  
  {
    arg1 = &data_temp1;
    arg2 = &dim1_temp1;
    arg3 = &dim2_temp1;
  }
  if (!PyArg_ParseTuple(args,(char *)":SPHER_InitScalarFields")) SWIG_fail;
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      SPHER_InitScalarFields(arg1,arg2,arg3);
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_Py_Void();
  {
    npy_intp dims[2] = {
      *arg3, *arg2 
    };
    PyObject * array = PyArray_SimpleNewFromData(2, dims, NPY_DOUBLE, (void*)(*arg1));
    if (!array) SWIG_fail;
    resultobj = SWIG_Python_AppendOutput(resultobj, array);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SPHER_UpdatePostdata(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  
  if (!PyArg_ParseTuple(args,(char *)":SPHER_UpdatePostdata")) SWIG_fail;
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      SPHER_UpdatePostdata();
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SPHER_GetNbPointOutlines(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  int **arg1 = (int **) 0 ;
  int *arg2 = (int *) 0 ;
  int *data_temp1 = NULL ;
  int dim_temp1 ;
  
  {
    arg1 = &data_temp1;
    arg2 = &dim_temp1;
  }
  if (!PyArg_ParseTuple(args,(char *)":SPHER_GetNbPointOutlines")) SWIG_fail;
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      SPHER_GetNbPointOutlines(arg1,arg2);
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_Py_Void();
  {
    npy_intp dims[1] = {
      *arg2 
    };
    PyObject* obj = PyArray_SimpleNewFromData(1, dims, NPY_INT, (void*)(*arg1));
    PyArrayObject* array = (PyArrayObject*) obj;
    
    if (!array) SWIG_fail;
    resultobj = SWIG_Python_AppendOutput(resultobj, obj);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SPHER_GetNbScalarFields(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)":SPHER_GetNbScalarFields")) SWIG_fail;
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      result = (int)SPHER_GetNbScalarFields();
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SPHER_GetPtrAllConnectivities(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  int **arg1 = (int **) 0 ;
  int *arg2 = (int *) 0 ;
  int *data_temp1 = NULL ;
  int dim_temp1 ;
  
  {
    arg1 = &data_temp1;
    arg2 = &dim_temp1;
  }
  if (!PyArg_ParseTuple(args,(char *)":SPHER_GetPtrAllConnectivities")) SWIG_fail;
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      SPHER_GetPtrAllConnectivities(arg1,arg2);
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_Py_Void();
  {
    npy_intp dims[1] = {
      *arg2 
    };
    PyObject* obj = PyArray_SimpleNewFromData(1, dims, NPY_INT, (void*)(*arg1));
    PyArrayObject* array = (PyArrayObject*) obj;
    
    if (!array) SWIG_fail;
    resultobj = SWIG_Python_AppendOutput(resultobj, obj);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SPHER_CleanMemory(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  
  if (!PyArg_ParseTuple(args,(char *)":SPHER_CleanMemory")) SWIG_fail;
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      SPHER_CleanMemory();
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MBS2D_setNb(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  int arg1 ;
  int val1 ;
  int ecode1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:MBS2D_setNb",&obj0)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "MBS2D_setNb" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = static_cast< int >(val1);
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      MBS2D_setNb(arg1);
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MBS2D_getNb(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)":MBS2D_getNb")) SWIG_fail;
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      result = (int)MBS2D_getNb();
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MBS2D_setNbNodes(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  int arg1 ;
  int arg2 ;
  int val1 ;
  int ecode1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:MBS2D_setNbNodes",&obj0,&obj1)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "MBS2D_setNbNodes" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = static_cast< int >(val1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "MBS2D_setNbNodes" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      MBS2D_setNbNodes(arg1,arg2);
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MBS2D_setNbTactors(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  int arg1 ;
  int arg2 ;
  int val1 ;
  int ecode1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:MBS2D_setNbTactors",&obj0,&obj1)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "MBS2D_setNbTactors" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = static_cast< int >(val1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "MBS2D_setNbTactors" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      MBS2D_setNbTactors(arg1,arg2);
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MBS2D_getPtrCoor(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  int arg1 ;
  double **arg2 = (double **) 0 ;
  int *arg3 = (int *) 0 ;
  int *arg4 = (int *) 0 ;
  int val1 ;
  int ecode1 = 0 ;
  double *data_temp2 ;
  int dim1_temp2 ;
  int dim2_temp2 ;
  PyObject * obj0 = 0 ;
  
  {
    arg2 = &data_temp2;
    arg3 = &dim1_temp2;
    arg4 = &dim2_temp2;
  }
  if (!PyArg_ParseTuple(args,(char *)"O:MBS2D_getPtrCoor",&obj0)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "MBS2D_getPtrCoor" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = static_cast< int >(val1);
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      MBS2D_getPtrCoor(arg1,arg2,arg3,arg4);
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_Py_Void();
  {
    npy_intp dims[2] = {
      *arg4, *arg3 
    };
    PyObject * array = PyArray_SimpleNewFromData(2, dims, NPY_DOUBLE, (void*)(*arg2));
    if (!array) SWIG_fail;
    resultobj = SWIG_Python_AppendOutput(resultobj, array);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MBS2D_getPtrCoorTT(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  int arg1 ;
  double **arg2 = (double **) 0 ;
  int *arg3 = (int *) 0 ;
  int *arg4 = (int *) 0 ;
  int val1 ;
  int ecode1 = 0 ;
  double *data_temp2 ;
  int dim1_temp2 ;
  int dim2_temp2 ;
  PyObject * obj0 = 0 ;
  
  {
    arg2 = &data_temp2;
    arg3 = &dim1_temp2;
    arg4 = &dim2_temp2;
  }
  if (!PyArg_ParseTuple(args,(char *)"O:MBS2D_getPtrCoorTT",&obj0)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "MBS2D_getPtrCoorTT" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = static_cast< int >(val1);
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      MBS2D_getPtrCoorTT(arg1,arg2,arg3,arg4);
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_Py_Void();
  {
    npy_intp dims[2] = {
      *arg4, *arg3 
    };
    PyObject * array = PyArray_SimpleNewFromData(2, dims, NPY_DOUBLE, (void*)(*arg2));
    if (!array) SWIG_fail;
    resultobj = SWIG_Python_AppendOutput(resultobj, array);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MBS2D_addContactor(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  int arg1 ;
  int arg2 ;
  int arg3 ;
  char *arg4 = (char *) 0 ;
  char *arg5 = (char *) 0 ;
  double *arg6 = (double *) 0 ;
  int arg7 ;
  int *arg8 = (int *) NULL ;
  int arg9 = (int) 0 ;
  int val1 ;
  int ecode1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  int res4 ;
  char *buf4 = 0 ;
  int alloc4 = 0 ;
  int res5 ;
  char *buf5 = 0 ;
  int alloc5 = 0 ;
  PyArrayObject *array6 = NULL ;
  int is_new_object6 = 0 ;
  PyArrayObject *array8 = NULL ;
  int is_new_object8 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  PyObject * obj5 = 0 ;
  PyObject * obj6 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOOO|O:MBS2D_addContactor",&obj0,&obj1,&obj2,&obj3,&obj4,&obj5,&obj6)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "MBS2D_addContactor" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = static_cast< int >(val1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "MBS2D_addContactor" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "MBS2D_addContactor" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  res4 = SWIG_AsCharPtrAndSize(obj3, &buf4, NULL, &alloc4);
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "MBS2D_addContactor" "', argument " "4"" of type '" "char *""'");
  }
  arg4 = reinterpret_cast< char * >(buf4);
  res5 = SWIG_AsCharPtrAndSize(obj4, &buf5, NULL, &alloc5);
  if (!SWIG_IsOK(res5)) {
    SWIG_exception_fail(SWIG_ArgError(res5), "in method '" "MBS2D_addContactor" "', argument " "5"" of type '" "char *""'");
  }
  arg5 = reinterpret_cast< char * >(buf5);
  {
    npy_intp size[1] = {
      -1 
    };
    array6 = obj_to_array_contiguous_allow_conversion(obj5,
      NPY_DOUBLE,
      &is_new_object6);
    if (!array6 || !require_dimensions(array6, 1) ||
      !require_size(array6, size, 1)) SWIG_fail;
    arg6 = (double*) array_data(array6);
    arg7 = (int) array_size(array6,0);
  }
  if (obj6) {
    {
      npy_intp size[1] = {
        -1 
      };
      array8 = obj_to_array_contiguous_allow_conversion(obj6,
        NPY_INT,
        &is_new_object8);
      if (!array8 || !require_dimensions(array8, 1) ||
        !require_size(array8, size, 1)) SWIG_fail;
      arg8 = (int*) array_data(array8);
      arg9 = (int) array_size(array8,0);
    }
  }
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      MBS2D_addContactor(arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9);
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_Py_Void();
  if (alloc4 == SWIG_NEWOBJ) delete[] buf4;
  if (alloc5 == SWIG_NEWOBJ) delete[] buf5;
  {
    if (is_new_object6 && array6)
    {
      Py_DECREF(array6); 
    }
  }
  {
    if (is_new_object8 && array8)
    {
      Py_DECREF(array8); 
    }
  }
  return resultobj;
fail:
  if (alloc4 == SWIG_NEWOBJ) delete[] buf4;
  if (alloc5 == SWIG_NEWOBJ) delete[] buf5;
  {
    if (is_new_object6 && array6)
    {
      Py_DECREF(array6); 
    }
  }
  {
    if (is_new_object8 && array8)
    {
      Py_DECREF(array8); 
    }
  }
  return NULL;
}


SWIGINTERN PyObject *_wrap_MBS2D_initialize(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  
  if (!PyArg_ParseTuple(args,(char *)":MBS2D_initialize")) SWIG_fail;
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      MBS2D_initialize();
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MBS2D_finalize(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  
  if (!PyArg_ParseTuple(args,(char *)":MBS2D_finalize")) SWIG_fail;
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      MBS2D_finalize();
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MBS2D_IncrementStep(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  
  if (!PyArg_ParseTuple(args,(char *)":MBS2D_IncrementStep")) SWIG_fail;
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      MBS2D_IncrementStep();
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MBS2D_ComputeFreeVelocity(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  
  if (!PyArg_ParseTuple(args,(char *)":MBS2D_ComputeFreeVelocity")) SWIG_fail;
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      MBS2D_ComputeFreeVelocity();
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MBS2D_ComputeDof(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  
  if (!PyArg_ParseTuple(args,(char *)":MBS2D_ComputeDof")) SWIG_fail;
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      MBS2D_ComputeDof();
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MBS2D_UpdateDof(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  
  if (!PyArg_ParseTuple(args,(char *)":MBS2D_UpdateDof")) SWIG_fail;
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      MBS2D_UpdateDof();
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MBS3D_setNb(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  int arg1 ;
  int val1 ;
  int ecode1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:MBS3D_setNb",&obj0)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "MBS3D_setNb" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = static_cast< int >(val1);
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      MBS3D_setNb(arg1);
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MBS3D_getNb(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)":MBS3D_getNb")) SWIG_fail;
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      result = (int)MBS3D_getNb();
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MBS3D_setNbNodes(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  int arg1 ;
  int arg2 ;
  int val1 ;
  int ecode1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:MBS3D_setNbNodes",&obj0,&obj1)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "MBS3D_setNbNodes" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = static_cast< int >(val1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "MBS3D_setNbNodes" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      MBS3D_setNbNodes(arg1,arg2);
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MBS3D_setNbTactors(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  int arg1 ;
  int arg2 ;
  int val1 ;
  int ecode1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:MBS3D_setNbTactors",&obj0,&obj1)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "MBS3D_setNbTactors" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = static_cast< int >(val1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "MBS3D_setNbTactors" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      MBS3D_setNbTactors(arg1,arg2);
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MBS3D_getPtrCoor(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  int arg1 ;
  double **arg2 = (double **) 0 ;
  int *arg3 = (int *) 0 ;
  int *arg4 = (int *) 0 ;
  int val1 ;
  int ecode1 = 0 ;
  double *data_temp2 ;
  int dim1_temp2 ;
  int dim2_temp2 ;
  PyObject * obj0 = 0 ;
  
  {
    arg2 = &data_temp2;
    arg3 = &dim1_temp2;
    arg4 = &dim2_temp2;
  }
  if (!PyArg_ParseTuple(args,(char *)"O:MBS3D_getPtrCoor",&obj0)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "MBS3D_getPtrCoor" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = static_cast< int >(val1);
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      MBS3D_getPtrCoor(arg1,arg2,arg3,arg4);
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_Py_Void();
  {
    npy_intp dims[2] = {
      *arg4, *arg3 
    };
    PyObject * array = PyArray_SimpleNewFromData(2, dims, NPY_DOUBLE, (void*)(*arg2));
    if (!array) SWIG_fail;
    resultobj = SWIG_Python_AppendOutput(resultobj, array);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MBS3D_getPtrCoorTT(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  int arg1 ;
  double **arg2 = (double **) 0 ;
  int *arg3 = (int *) 0 ;
  int *arg4 = (int *) 0 ;
  int val1 ;
  int ecode1 = 0 ;
  double *data_temp2 ;
  int dim1_temp2 ;
  int dim2_temp2 ;
  PyObject * obj0 = 0 ;
  
  {
    arg2 = &data_temp2;
    arg3 = &dim1_temp2;
    arg4 = &dim2_temp2;
  }
  if (!PyArg_ParseTuple(args,(char *)"O:MBS3D_getPtrCoorTT",&obj0)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "MBS3D_getPtrCoorTT" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = static_cast< int >(val1);
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      MBS3D_getPtrCoorTT(arg1,arg2,arg3,arg4);
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_Py_Void();
  {
    npy_intp dims[2] = {
      *arg4, *arg3 
    };
    PyObject * array = PyArray_SimpleNewFromData(2, dims, NPY_DOUBLE, (void*)(*arg2));
    if (!array) SWIG_fail;
    resultobj = SWIG_Python_AppendOutput(resultobj, array);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MBS3D_getPtrLocalFrame(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  int arg1 ;
  double **arg2 = (double **) 0 ;
  int *arg3 = (int *) 0 ;
  int *arg4 = (int *) 0 ;
  int val1 ;
  int ecode1 = 0 ;
  double *data_temp2 ;
  int dim1_temp2 ;
  int dim2_temp2 ;
  PyObject * obj0 = 0 ;
  
  {
    arg2 = &data_temp2;
    arg3 = &dim1_temp2;
    arg4 = &dim2_temp2;
  }
  if (!PyArg_ParseTuple(args,(char *)"O:MBS3D_getPtrLocalFrame",&obj0)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "MBS3D_getPtrLocalFrame" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = static_cast< int >(val1);
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      MBS3D_getPtrLocalFrame(arg1,arg2,arg3,arg4);
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_Py_Void();
  {
    npy_intp dims[2] = {
      *arg4, *arg3 
    };
    PyObject * array = PyArray_SimpleNewFromData(2, dims, NPY_DOUBLE, (void*)(*arg2));
    if (!array) SWIG_fail;
    resultobj = SWIG_Python_AppendOutput(resultobj, array);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MBS3D_getPtrLocalFrameTT(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  int arg1 ;
  double **arg2 = (double **) 0 ;
  int *arg3 = (int *) 0 ;
  int *arg4 = (int *) 0 ;
  int val1 ;
  int ecode1 = 0 ;
  double *data_temp2 ;
  int dim1_temp2 ;
  int dim2_temp2 ;
  PyObject * obj0 = 0 ;
  
  {
    arg2 = &data_temp2;
    arg3 = &dim1_temp2;
    arg4 = &dim2_temp2;
  }
  if (!PyArg_ParseTuple(args,(char *)"O:MBS3D_getPtrLocalFrameTT",&obj0)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "MBS3D_getPtrLocalFrameTT" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = static_cast< int >(val1);
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      MBS3D_getPtrLocalFrameTT(arg1,arg2,arg3,arg4);
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_Py_Void();
  {
    npy_intp dims[2] = {
      *arg4, *arg3 
    };
    PyObject * array = PyArray_SimpleNewFromData(2, dims, NPY_DOUBLE, (void*)(*arg2));
    if (!array) SWIG_fail;
    resultobj = SWIG_Python_AppendOutput(resultobj, array);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MBS3D_addContactor(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  int arg1 ;
  int arg2 ;
  int arg3 ;
  char *arg4 = (char *) 0 ;
  char *arg5 = (char *) 0 ;
  double *arg6 = (double *) 0 ;
  int arg7 ;
  int *arg8 = (int *) NULL ;
  int arg9 = (int) 0 ;
  int val1 ;
  int ecode1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  int res4 ;
  char *buf4 = 0 ;
  int alloc4 = 0 ;
  int res5 ;
  char *buf5 = 0 ;
  int alloc5 = 0 ;
  PyArrayObject *array6 = NULL ;
  int is_new_object6 = 0 ;
  PyArrayObject *array8 = NULL ;
  int is_new_object8 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  PyObject * obj5 = 0 ;
  PyObject * obj6 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOOO|O:MBS3D_addContactor",&obj0,&obj1,&obj2,&obj3,&obj4,&obj5,&obj6)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "MBS3D_addContactor" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = static_cast< int >(val1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "MBS3D_addContactor" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "MBS3D_addContactor" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  res4 = SWIG_AsCharPtrAndSize(obj3, &buf4, NULL, &alloc4);
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "MBS3D_addContactor" "', argument " "4"" of type '" "char *""'");
  }
  arg4 = reinterpret_cast< char * >(buf4);
  res5 = SWIG_AsCharPtrAndSize(obj4, &buf5, NULL, &alloc5);
  if (!SWIG_IsOK(res5)) {
    SWIG_exception_fail(SWIG_ArgError(res5), "in method '" "MBS3D_addContactor" "', argument " "5"" of type '" "char *""'");
  }
  arg5 = reinterpret_cast< char * >(buf5);
  {
    npy_intp size[1] = {
      -1 
    };
    array6 = obj_to_array_contiguous_allow_conversion(obj5,
      NPY_DOUBLE,
      &is_new_object6);
    if (!array6 || !require_dimensions(array6, 1) ||
      !require_size(array6, size, 1)) SWIG_fail;
    arg6 = (double*) array_data(array6);
    arg7 = (int) array_size(array6,0);
  }
  if (obj6) {
    {
      npy_intp size[1] = {
        -1 
      };
      array8 = obj_to_array_contiguous_allow_conversion(obj6,
        NPY_INT,
        &is_new_object8);
      if (!array8 || !require_dimensions(array8, 1) ||
        !require_size(array8, size, 1)) SWIG_fail;
      arg8 = (int*) array_data(array8);
      arg9 = (int) array_size(array8,0);
    }
  }
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      MBS3D_addContactor(arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9);
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_Py_Void();
  if (alloc4 == SWIG_NEWOBJ) delete[] buf4;
  if (alloc5 == SWIG_NEWOBJ) delete[] buf5;
  {
    if (is_new_object6 && array6)
    {
      Py_DECREF(array6); 
    }
  }
  {
    if (is_new_object8 && array8)
    {
      Py_DECREF(array8); 
    }
  }
  return resultobj;
fail:
  if (alloc4 == SWIG_NEWOBJ) delete[] buf4;
  if (alloc5 == SWIG_NEWOBJ) delete[] buf5;
  {
    if (is_new_object6 && array6)
    {
      Py_DECREF(array6); 
    }
  }
  {
    if (is_new_object8 && array8)
    {
      Py_DECREF(array8); 
    }
  }
  return NULL;
}


SWIGINTERN PyObject *_wrap_MBS3D_initialize(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  
  if (!PyArg_ParseTuple(args,(char *)":MBS3D_initialize")) SWIG_fail;
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      MBS3D_initialize();
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MBS3D_finalize(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  
  if (!PyArg_ParseTuple(args,(char *)":MBS3D_finalize")) SWIG_fail;
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      MBS3D_finalize();
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MBS3D_IncrementStep(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  
  if (!PyArg_ParseTuple(args,(char *)":MBS3D_IncrementStep")) SWIG_fail;
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      MBS3D_IncrementStep();
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MBS3D_ComputeFreeVelocity(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  
  if (!PyArg_ParseTuple(args,(char *)":MBS3D_ComputeFreeVelocity")) SWIG_fail;
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      MBS3D_ComputeFreeVelocity();
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MBS3D_ComputeDof(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  
  if (!PyArg_ParseTuple(args,(char *)":MBS3D_ComputeDof")) SWIG_fail;
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      MBS3D_ComputeDof();
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MBS3D_UpdateDof(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  
  if (!PyArg_ParseTuple(args,(char *)":MBS3D_UpdateDof")) SWIG_fail;
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      MBS3D_UpdateDof();
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ALpxx_LoadTactors(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  
  if (!PyArg_ParseTuple(args,(char *)":ALpxx_LoadTactors")) SWIG_fail;
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      ALpxx_LoadTactors();
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ALpxx_PushPreconNodes(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  
  if (!PyArg_ParseTuple(args,(char *)":ALpxx_PushPreconNodes")) SWIG_fail;
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      ALpxx_PushPreconNodes();
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ALpxx_GetAllConnec(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  int **arg1 = (int **) 0 ;
  int *arg2 = (int *) 0 ;
  int *data_temp1 ;
  int dim_temp1 ;
  
  {
    arg1 = &data_temp1;
    arg2 = &dim_temp1;
  }
  if (!PyArg_ParseTuple(args,(char *)":ALpxx_GetAllConnec")) SWIG_fail;
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      ALpxx_GetAllConnec(arg1,arg2);
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_Py_Void();
  {
    npy_intp dims[1] = {
      *arg2 
    };
    PyObject * obj = PyArray_SimpleNewFromData(1, dims, NPY_INT, (void*)(*arg1));
    if (!obj) SWIG_fail;
    PyArrayObject * array = (PyArrayObject*) obj;
    attach_fortran_memory_to_numpy_array(array, (void*)(*arg1), NPY_INT, dims[0], 0);
    PyArray_ENABLEFLAGS(array,NPY_ARRAY_WRITEABLE);
    
    resultobj = SWIG_Python_AppendOutput(resultobj, obj);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ALpxx_GetAllData(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  int **arg1 = (int **) 0 ;
  int *arg2 = (int *) 0 ;
  int *arg3 = (int *) 0 ;
  double **arg4 = (double **) 0 ;
  int *arg5 = (int *) 0 ;
  int *arg6 = (int *) 0 ;
  int *data_temp1 ;
  int dim1_temp1 ;
  int dim2_temp1 ;
  double *data_temp4 ;
  int dim1_temp4 ;
  int dim2_temp4 ;
  
  {
    arg1 = &data_temp1;
    arg2 = &dim1_temp1;
    arg3 = &dim2_temp1;
  }
  {
    arg4 = &data_temp4;
    arg5 = &dim1_temp4;
    arg6 = &dim2_temp4;
  }
  if (!PyArg_ParseTuple(args,(char *)":ALpxx_GetAllData")) SWIG_fail;
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      ALpxx_GetAllData(arg1,arg2,arg3,arg4,arg5,arg6);
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_Py_Void();
  {
    npy_intp dims[2] = {
      *arg3, *arg2 
    };
    PyObject * obj = PyArray_SimpleNewFromData(2, dims, NPY_INT, (void*)(*arg1));
    if (!obj) SWIG_fail;
    PyArrayObject * array = (PyArrayObject*) obj;
    attach_fortran_memory_to_numpy_array(array, (void*)(*arg1), NPY_INT, dims[1], dims[0]);
    PyArray_ENABLEFLAGS(array,NPY_ARRAY_WRITEABLE);
    resultobj = SWIG_Python_AppendOutput(resultobj, obj);
  }
  {
    npy_intp dims[2] = {
      *arg6, *arg5 
    };
    PyObject * obj = PyArray_SimpleNewFromData(2, dims, NPY_DOUBLE, (void*)(*arg4));
    if (!obj) SWIG_fail;
    PyArrayObject * array = (PyArrayObject*) obj;
    attach_fortran_memory_to_numpy_array(array, (void*)(*arg4), NPY_DOUBLE, dims[1], dims[0]);
    PyArray_ENABLEFLAGS(array,NPY_ARRAY_WRITEABLE);
    resultobj = SWIG_Python_AppendOutput(resultobj, obj);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ALpxx_CleanMemory(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  
  if (!PyArg_ParseTuple(args,(char *)":ALpxx_CleanMemory")) SWIG_fail;
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      ALpxx_CleanMemory();
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ASpxx_LoadTactors(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  
  if (!PyArg_ParseTuple(args,(char *)":ASpxx_LoadTactors")) SWIG_fail;
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      ASpxx_LoadTactors();
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ASpxx_PushPreconNodes(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  
  if (!PyArg_ParseTuple(args,(char *)":ASpxx_PushPreconNodes")) SWIG_fail;
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      ASpxx_PushPreconNodes();
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ASpxx_GetAllConnec(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  int **arg1 = (int **) 0 ;
  int *arg2 = (int *) 0 ;
  int *data_temp1 ;
  int dim_temp1 ;
  
  {
    arg1 = &data_temp1;
    arg2 = &dim_temp1;
  }
  if (!PyArg_ParseTuple(args,(char *)":ASpxx_GetAllConnec")) SWIG_fail;
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      ASpxx_GetAllConnec(arg1,arg2);
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_Py_Void();
  {
    npy_intp dims[1] = {
      *arg2 
    };
    PyObject * obj = PyArray_SimpleNewFromData(1, dims, NPY_INT, (void*)(*arg1));
    if (!obj) SWIG_fail;
    PyArrayObject * array = (PyArrayObject*) obj;
    attach_fortran_memory_to_numpy_array(array, (void*)(*arg1), NPY_INT, dims[0], 0);
    PyArray_ENABLEFLAGS(array,NPY_ARRAY_WRITEABLE);
    
    resultobj = SWIG_Python_AppendOutput(resultobj, obj);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ASpxx_GetAllData(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  int **arg1 = (int **) 0 ;
  int *arg2 = (int *) 0 ;
  int *arg3 = (int *) 0 ;
  double **arg4 = (double **) 0 ;
  int *arg5 = (int *) 0 ;
  int *arg6 = (int *) 0 ;
  int *data_temp1 ;
  int dim1_temp1 ;
  int dim2_temp1 ;
  double *data_temp4 ;
  int dim1_temp4 ;
  int dim2_temp4 ;
  
  {
    arg1 = &data_temp1;
    arg2 = &dim1_temp1;
    arg3 = &dim2_temp1;
  }
  {
    arg4 = &data_temp4;
    arg5 = &dim1_temp4;
    arg6 = &dim2_temp4;
  }
  if (!PyArg_ParseTuple(args,(char *)":ASpxx_GetAllData")) SWIG_fail;
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      ASpxx_GetAllData(arg1,arg2,arg3,arg4,arg5,arg6);
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_Py_Void();
  {
    npy_intp dims[2] = {
      *arg3, *arg2 
    };
    PyObject * obj = PyArray_SimpleNewFromData(2, dims, NPY_INT, (void*)(*arg1));
    if (!obj) SWIG_fail;
    PyArrayObject * array = (PyArrayObject*) obj;
    attach_fortran_memory_to_numpy_array(array, (void*)(*arg1), NPY_INT, dims[1], dims[0]);
    PyArray_ENABLEFLAGS(array,NPY_ARRAY_WRITEABLE);
    resultobj = SWIG_Python_AppendOutput(resultobj, obj);
  }
  {
    npy_intp dims[2] = {
      *arg6, *arg5 
    };
    PyObject * obj = PyArray_SimpleNewFromData(2, dims, NPY_DOUBLE, (void*)(*arg4));
    if (!obj) SWIG_fail;
    PyArrayObject * array = (PyArrayObject*) obj;
    attach_fortran_memory_to_numpy_array(array, (void*)(*arg4), NPY_DOUBLE, dims[1], dims[0]);
    PyArray_ENABLEFLAGS(array,NPY_ARRAY_WRITEABLE);
    resultobj = SWIG_Python_AppendOutput(resultobj, obj);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ASpxx_CleanMemory(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  
  if (!PyArg_ParseTuple(args,(char *)":ASpxx_CleanMemory")) SWIG_fail;
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      ASpxx_CleanMemory();
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ASpxx_ExplodePatch(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  
  if (!PyArg_ParseTuple(args,(char *)":ASpxx_ExplodePatch")) SWIG_fail;
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      ASpxx_ExplodePatch();
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CLxxx_LoadTactors(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  
  if (!PyArg_ParseTuple(args,(char *)":CLxxx_LoadTactors")) SWIG_fail;
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      CLxxx_LoadTactors();
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CLxxx_SetNbNodesByCLxxx(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  int arg1 ;
  int val1 ;
  int ecode1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:CLxxx_SetNbNodesByCLxxx",&obj0)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "CLxxx_SetNbNodesByCLxxx" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = static_cast< int >(val1);
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      CLxxx_SetNbNodesByCLxxx(arg1);
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CLxxx_PushPreconNodes(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  
  if (!PyArg_ParseTuple(args,(char *)":CLxxx_PushPreconNodes")) SWIG_fail;
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      CLxxx_PushPreconNodes();
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CLxxx_GetNbCLxxx(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)":CLxxx_GetNbCLxxx")) SWIG_fail;
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      result = (int)CLxxx_GetNbCLxxx();
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CLpxx_GetAllConnec(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  int **arg1 = (int **) 0 ;
  int *arg2 = (int *) 0 ;
  int *data_temp1 ;
  int dim_temp1 ;
  
  {
    arg1 = &data_temp1;
    arg2 = &dim_temp1;
  }
  if (!PyArg_ParseTuple(args,(char *)":CLpxx_GetAllConnec")) SWIG_fail;
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      CLpxx_GetAllConnec(arg1,arg2);
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_Py_Void();
  {
    npy_intp dims[1] = {
      *arg2 
    };
    PyObject * obj = PyArray_SimpleNewFromData(1, dims, NPY_INT, (void*)(*arg1));
    if (!obj) SWIG_fail;
    PyArrayObject * array = (PyArrayObject*) obj;
    attach_fortran_memory_to_numpy_array(array, (void*)(*arg1), NPY_INT, dims[0], 0);
    PyArray_ENABLEFLAGS(array,NPY_ARRAY_WRITEABLE);
    
    resultobj = SWIG_Python_AppendOutput(resultobj, obj);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CLpxx_GetAllData(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  int **arg1 = (int **) 0 ;
  int *arg2 = (int *) 0 ;
  int *arg3 = (int *) 0 ;
  double **arg4 = (double **) 0 ;
  int *arg5 = (int *) 0 ;
  int *arg6 = (int *) 0 ;
  int *data_temp1 ;
  int dim1_temp1 ;
  int dim2_temp1 ;
  double *data_temp4 ;
  int dim1_temp4 ;
  int dim2_temp4 ;
  
  {
    arg1 = &data_temp1;
    arg2 = &dim1_temp1;
    arg3 = &dim2_temp1;
  }
  {
    arg4 = &data_temp4;
    arg5 = &dim1_temp4;
    arg6 = &dim2_temp4;
  }
  if (!PyArg_ParseTuple(args,(char *)":CLpxx_GetAllData")) SWIG_fail;
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      CLpxx_GetAllData(arg1,arg2,arg3,arg4,arg5,arg6);
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_Py_Void();
  {
    npy_intp dims[2] = {
      *arg3, *arg2 
    };
    PyObject * obj = PyArray_SimpleNewFromData(2, dims, NPY_INT, (void*)(*arg1));
    if (!obj) SWIG_fail;
    PyArrayObject * array = (PyArrayObject*) obj;
    attach_fortran_memory_to_numpy_array(array, (void*)(*arg1), NPY_INT, dims[1], dims[0]);
    PyArray_ENABLEFLAGS(array,NPY_ARRAY_WRITEABLE);
    resultobj = SWIG_Python_AppendOutput(resultobj, obj);
  }
  {
    npy_intp dims[2] = {
      *arg6, *arg5 
    };
    PyObject * obj = PyArray_SimpleNewFromData(2, dims, NPY_DOUBLE, (void*)(*arg4));
    if (!obj) SWIG_fail;
    PyArrayObject * array = (PyArrayObject*) obj;
    attach_fortran_memory_to_numpy_array(array, (void*)(*arg4), NPY_DOUBLE, dims[1], dims[0]);
    PyArray_ENABLEFLAGS(array,NPY_ARRAY_WRITEABLE);
    resultobj = SWIG_Python_AppendOutput(resultobj, obj);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CLxxx_CleanMemory(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  
  if (!PyArg_ParseTuple(args,(char *)":CLxxx_CleanMemory")) SWIG_fail;
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      CLxxx_CleanMemory();
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CSxxx_LoadTactors(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  
  if (!PyArg_ParseTuple(args,(char *)":CSxxx_LoadTactors")) SWIG_fail;
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      CSxxx_LoadTactors();
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CSxxx_PushPreconNodes(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  
  if (!PyArg_ParseTuple(args,(char *)":CSxxx_PushPreconNodes")) SWIG_fail;
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      CSxxx_PushPreconNodes();
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CSxxx_FlipOrientation(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  int arg1 ;
  int val1 ;
  int ecode1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:CSxxx_FlipOrientation",&obj0)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "CSxxx_FlipOrientation" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = static_cast< int >(val1);
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      CSxxx_FlipOrientation(arg1);
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CSxxx_FlipOrientationOnePatch(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  int arg1 ;
  int arg2 ;
  int val1 ;
  int ecode1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:CSxxx_FlipOrientationOnePatch",&obj0,&obj1)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "CSxxx_FlipOrientationOnePatch" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = static_cast< int >(val1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "CSxxx_FlipOrientationOnePatch" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      CSxxx_FlipOrientationOnePatch(arg1,arg2);
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CSxxx_SetShrink(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  double arg1 ;
  double val1 ;
  int ecode1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:CSxxx_SetShrink",&obj0)) SWIG_fail;
  ecode1 = SWIG_AsVal_double(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "CSxxx_SetShrink" "', argument " "1"" of type '" "double""'");
  } 
  arg1 = static_cast< double >(val1);
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      CSxxx_SetShrink(arg1);
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CSxxx_SetQuadrature(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  int arg1 ;
  int val1 ;
  int ecode1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:CSxxx_SetQuadrature",&obj0)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "CSxxx_SetQuadrature" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = static_cast< int >(val1);
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      CSxxx_SetQuadrature(arg1);
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CSxxx_AddReac(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  char *arg1 = (char *) 0 ;
  int arg2 ;
  double *arg3 = (double *) 0 ;
  int arg4 ;
  int res1 ;
  char *buf1 = 0 ;
  int alloc1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyArrayObject *array3 = NULL ;
  int is_new_object3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:CSxxx_AddReac",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_AsCharPtrAndSize(obj0, &buf1, NULL, &alloc1);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CSxxx_AddReac" "', argument " "1"" of type '" "char *""'");
  }
  arg1 = reinterpret_cast< char * >(buf1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "CSxxx_AddReac" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    npy_intp size[1] = {
      -1 
    };
    array3 = obj_to_array_contiguous_allow_conversion(obj2,
      NPY_DOUBLE,
      &is_new_object3);
    if (!array3 || !require_dimensions(array3, 1) ||
      !require_size(array3, size, 1)) SWIG_fail;
    arg3 = (double*) array_data(array3);
    arg4 = (int) array_size(array3,0);
  }
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      CSxxx_AddReac(arg1,arg2,arg3,arg4);
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_Py_Void();
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  {
    if (is_new_object3 && array3)
    {
      Py_DECREF(array3); 
    }
  }
  return resultobj;
fail:
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  {
    if (is_new_object3 && array3)
    {
      Py_DECREF(array3); 
    }
  }
  return NULL;
}


SWIGINTERN PyObject *_wrap_CSpxx_ApplySurfaceLoad(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  int arg1 ;
  double *arg2 = (double *) 0 ;
  int arg3 ;
  int val1 ;
  int ecode1 = 0 ;
  PyArrayObject *array2 = NULL ;
  int is_new_object2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:CSpxx_ApplySurfaceLoad",&obj0,&obj1)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "CSpxx_ApplySurfaceLoad" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = static_cast< int >(val1);
  {
    npy_intp size[1] = {
      -1 
    };
    array2 = obj_to_array_contiguous_allow_conversion(obj1,
      NPY_DOUBLE,
      &is_new_object2);
    if (!array2 || !require_dimensions(array2, 1) ||
      !require_size(array2, size, 1)) SWIG_fail;
    arg2 = (double*) array_data(array2);
    arg3 = (int) array_size(array2,0);
  }
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      CSpxx_ApplySurfaceLoad(arg1,arg2,arg3);
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_Py_Void();
  {
    if (is_new_object2 && array2)
    {
      Py_DECREF(array2); 
    }
  }
  return resultobj;
fail:
  {
    if (is_new_object2 && array2)
    {
      Py_DECREF(array2); 
    }
  }
  return NULL;
}


SWIGINTERN PyObject *_wrap_CSpxx_ApplyPressure(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  int arg1 ;
  double arg2 ;
  int val1 ;
  int ecode1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:CSpxx_ApplyPressure",&obj0,&obj1)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "CSpxx_ApplyPressure" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = static_cast< int >(val1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "CSpxx_ApplyPressure" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      CSpxx_ApplyPressure(arg1,arg2);
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CSxxx_GetNbCSxxx(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)":CSxxx_GetNbCSxxx")) SWIG_fail;
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      result = (int)CSxxx_GetNbCSxxx();
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CSpxx_GetAllConnec(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  int **arg1 = (int **) 0 ;
  int *arg2 = (int *) 0 ;
  int *data_temp1 ;
  int dim_temp1 ;
  
  {
    arg1 = &data_temp1;
    arg2 = &dim_temp1;
  }
  if (!PyArg_ParseTuple(args,(char *)":CSpxx_GetAllConnec")) SWIG_fail;
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      CSpxx_GetAllConnec(arg1,arg2);
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_Py_Void();
  {
    npy_intp dims[1] = {
      *arg2 
    };
    PyObject * obj = PyArray_SimpleNewFromData(1, dims, NPY_INT, (void*)(*arg1));
    if (!obj) SWIG_fail;
    PyArrayObject * array = (PyArrayObject*) obj;
    attach_fortran_memory_to_numpy_array(array, (void*)(*arg1), NPY_INT, dims[0], 0);
    PyArray_ENABLEFLAGS(array,NPY_ARRAY_WRITEABLE);
    
    resultobj = SWIG_Python_AppendOutput(resultobj, obj);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CSpxx_GetAllData(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  int **arg1 = (int **) 0 ;
  int *arg2 = (int *) 0 ;
  int *arg3 = (int *) 0 ;
  double **arg4 = (double **) 0 ;
  int *arg5 = (int *) 0 ;
  int *arg6 = (int *) 0 ;
  int *data_temp1 ;
  int dim1_temp1 ;
  int dim2_temp1 ;
  double *data_temp4 ;
  int dim1_temp4 ;
  int dim2_temp4 ;
  
  {
    arg1 = &data_temp1;
    arg2 = &dim1_temp1;
    arg3 = &dim2_temp1;
  }
  {
    arg4 = &data_temp4;
    arg5 = &dim1_temp4;
    arg6 = &dim2_temp4;
  }
  if (!PyArg_ParseTuple(args,(char *)":CSpxx_GetAllData")) SWIG_fail;
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      CSpxx_GetAllData(arg1,arg2,arg3,arg4,arg5,arg6);
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_Py_Void();
  {
    npy_intp dims[2] = {
      *arg3, *arg2 
    };
    PyObject * obj = PyArray_SimpleNewFromData(2, dims, NPY_INT, (void*)(*arg1));
    if (!obj) SWIG_fail;
    PyArrayObject * array = (PyArrayObject*) obj;
    attach_fortran_memory_to_numpy_array(array, (void*)(*arg1), NPY_INT, dims[1], dims[0]);
    PyArray_ENABLEFLAGS(array,NPY_ARRAY_WRITEABLE);
    resultobj = SWIG_Python_AppendOutput(resultobj, obj);
  }
  {
    npy_intp dims[2] = {
      *arg6, *arg5 
    };
    PyObject * obj = PyArray_SimpleNewFromData(2, dims, NPY_DOUBLE, (void*)(*arg4));
    if (!obj) SWIG_fail;
    PyArrayObject * array = (PyArrayObject*) obj;
    attach_fortran_memory_to_numpy_array(array, (void*)(*arg4), NPY_DOUBLE, dims[1], dims[0]);
    PyArray_ENABLEFLAGS(array,NPY_ARRAY_WRITEABLE);
    resultobj = SWIG_Python_AppendOutput(resultobj, obj);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CSxxx_CleanMemory(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  
  if (!PyArg_ParseTuple(args,(char *)":CSxxx_CleanMemory")) SWIG_fail;
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      CSxxx_CleanMemory();
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DISKL_LoadTactors(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  
  if (!PyArg_ParseTuple(args,(char *)":DISKL_LoadTactors")) SWIG_fail;
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      DISKL_LoadTactors();
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DISKL_PushPreconNodes(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  
  if (!PyArg_ParseTuple(args,(char *)":DISKL_PushPreconNodes")) SWIG_fail;
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      DISKL_PushPreconNodes();
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DISKL_CleanMemory(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  
  if (!PyArg_ParseTuple(args,(char *)":DISKL_CleanMemory")) SWIG_fail;
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      DISKL_CleanMemory();
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MAILx_ReadBodies(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  char *arg1 = (char *) "" ;
  int res1 ;
  char *buf1 = 0 ;
  int alloc1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"|O:MAILx_ReadBodies",&obj0)) SWIG_fail;
  if (obj0) {
    res1 = SWIG_AsCharPtrAndSize(obj0, &buf1, NULL, &alloc1);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MAILx_ReadBodies" "', argument " "1"" of type '" "char const *""'");
    }
    arg1 = reinterpret_cast< char * >(buf1);
  }
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      MAILx_ReadBodies((char const *)arg1);
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_Py_Void();
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  return resultobj;
fail:
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  return NULL;
}


SWIGINTERN PyObject *_wrap_MAILx_WriteBodies(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  char *arg1 = (char *) "" ;
  int res1 ;
  char *buf1 = 0 ;
  int alloc1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"|O:MAILx_WriteBodies",&obj0)) SWIG_fail;
  if (obj0) {
    res1 = SWIG_AsCharPtrAndSize(obj0, &buf1, NULL, &alloc1);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MAILx_WriteBodies" "', argument " "1"" of type '" "char const *""'");
    }
    arg1 = reinterpret_cast< char * >(buf1);
  }
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      MAILx_WriteBodies((char const *)arg1);
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_Py_Void();
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  return resultobj;
fail:
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  return NULL;
}


SWIGINTERN PyObject *_wrap_MAILx_WriteLastGPV(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  
  if (!PyArg_ParseTuple(args,(char *)":MAILx_WriteLastGPV")) SWIG_fail;
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      MAILx_WriteLastGPV();
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MAILx_WriteOutGPV(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  
  if (!PyArg_ParseTuple(args,(char *)":MAILx_WriteOutGPV")) SWIG_fail;
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      MAILx_WriteOutGPV();
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MAILx_DisplayOutGPV(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  
  if (!PyArg_ParseTuple(args,(char *)":MAILx_DisplayOutGPV")) SWIG_fail;
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      MAILx_DisplayOutGPV();
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MAILx_AddDof2InBodies(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  
  if (!PyArg_ParseTuple(args,(char *)":MAILx_AddDof2InBodies")) SWIG_fail;
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      MAILx_AddDof2InBodies();
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MAILx_GetNbMAILx(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)":MAILx_GetNbMAILx")) SWIG_fail;
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      result = (int)MAILx_GetNbMAILx();
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MAILx_GetNbCell(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  int arg1 ;
  int val1 ;
  int ecode1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:MAILx_GetNbCell",&obj0)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "MAILx_GetNbCell" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = static_cast< int >(val1);
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      result = (int)MAILx_GetNbCell(arg1);
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MAILx_SetCoorRef(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  int arg1 ;
  double *arg2 = (double *) 0 ;
  int arg3 ;
  int val1 ;
  int ecode1 = 0 ;
  PyArrayObject *array2 = NULL ;
  int is_new_object2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:MAILx_SetCoorRef",&obj0,&obj1)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "MAILx_SetCoorRef" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = static_cast< int >(val1);
  {
    npy_intp size[1] = {
      -1 
    };
    array2 = obj_to_array_contiguous_allow_conversion(obj1,
      NPY_DOUBLE,
      &is_new_object2);
    if (!array2 || !require_dimensions(array2, 1) ||
      !require_size(array2, size, 1)) SWIG_fail;
    arg2 = (double*) array_data(array2);
    arg3 = (int) array_size(array2,0);
  }
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      MAILx_SetCoorRef(arg1,arg2,arg3);
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_Py_Void();
  {
    if (is_new_object2 && array2)
    {
      Py_DECREF(array2); 
    }
  }
  return resultobj;
fail:
  {
    if (is_new_object2 && array2)
    {
      Py_DECREF(array2); 
    }
  }
  return NULL;
}


SWIGINTERN PyObject *_wrap_MAILx_GetCoordNodty(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  int arg1 ;
  int arg2 ;
  int arg3 ;
  int val1 ;
  int ecode1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:MAILx_GetCoordNodty",&obj0,&obj1,&obj2)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "MAILx_GetCoordNodty" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = static_cast< int >(val1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "MAILx_GetCoordNodty" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "MAILx_GetCoordNodty" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      result = (double)MAILx_GetCoordNodty(arg1,arg2,arg3);
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MAILx_GetCoordsNodty(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  int arg1 ;
  int arg2 ;
  double *arg3 = (double *) 0 ;
  int arg4 ;
  int val1 ;
  int ecode1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject *array3 = NULL ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:MAILx_GetCoordsNodty",&obj0,&obj1,&obj2)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "MAILx_GetCoordsNodty" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = static_cast< int >(val1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "MAILx_GetCoordsNodty" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    npy_intp dims[1];
    if (!PyLong_Check(obj2))
    {
      const char* typestring = pytype_string(obj2);
      PyErr_Format(PyExc_TypeError,
        "Int dimension expected.  '%s' given.",
        typestring);
      SWIG_fail;
    }
    arg4 = (int) PyLong_AsSsize_t(obj2);
    if (arg4 == -1 && PyErr_Occurred()) SWIG_fail;
    dims[0] = (npy_intp) arg4;
    array3 = PyArray_SimpleNew(1, dims, NPY_DOUBLE);
    if (!array3) SWIG_fail;
    arg3 = (double*) array_data(array3);
  }
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      MAILx_GetCoordsNodty(arg1,arg2,arg3,arg4);
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_Py_Void();
  {
    resultobj = SWIG_Python_AppendOutput(resultobj, (PyObject*)array3);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MAILx_GetNbNodes(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  int arg1 ;
  int val1 ;
  int ecode1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:MAILx_GetNbNodes",&obj0)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "MAILx_GetNbNodes" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = static_cast< int >(val1);
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      result = (int)MAILx_GetNbNodes(arg1);
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MAILx_InitNodalFields(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  int arg1 ;
  int arg2 ;
  int val1 ;
  int ecode1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:MAILx_InitNodalFields",&obj0,&obj1)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "MAILx_InitNodalFields" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = static_cast< int >(val1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "MAILx_InitNodalFields" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      MAILx_InitNodalFields(arg1,arg2);
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MAILx_InitNodalField(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  int arg1 ;
  char *arg2 = (char *) 0 ;
  int arg3 ;
  int arg4 ;
  int val1 ;
  int ecode1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:MAILx_InitNodalField",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "MAILx_InitNodalField" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = static_cast< int >(val1);
  res2 = SWIG_AsCharPtrAndSize(obj1, &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "MAILx_InitNodalField" "', argument " "2"" of type '" "char *""'");
  }
  arg2 = reinterpret_cast< char * >(buf2);
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "MAILx_InitNodalField" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  ecode4 = SWIG_AsVal_int(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "MAILx_InitNodalField" "', argument " "4"" of type '" "int""'");
  } 
  arg4 = static_cast< int >(val4);
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      MAILx_InitNodalField(arg1,arg2,arg3,arg4);
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_Py_Void();
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return resultobj;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_MAILx_SetNodalField(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  int arg1 ;
  int arg2 ;
  double *arg3 = (double *) 0 ;
  int arg4 ;
  int val1 ;
  int ecode1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyArrayObject *array3 = NULL ;
  int is_new_object3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:MAILx_SetNodalField",&obj0,&obj1,&obj2)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "MAILx_SetNodalField" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = static_cast< int >(val1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "MAILx_SetNodalField" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    npy_intp size[1] = {
      -1 
    };
    array3 = obj_to_array_contiguous_allow_conversion(obj2,
      NPY_DOUBLE,
      &is_new_object3);
    if (!array3 || !require_dimensions(array3, 1) ||
      !require_size(array3, size, 1)) SWIG_fail;
    arg3 = (double*) array_data(array3);
    arg4 = (int) array_size(array3,0);
  }
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      MAILx_SetNodalField(arg1,arg2,arg3,arg4);
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_Py_Void();
  {
    if (is_new_object3 && array3)
    {
      Py_DECREF(array3); 
    }
  }
  return resultobj;
fail:
  {
    if (is_new_object3 && array3)
    {
      Py_DECREF(array3); 
    }
  }
  return NULL;
}


SWIGINTERN PyObject *_wrap_MAILx_CleanMemory(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  
  if (!PyArg_ParseTuple(args,(char *)":MAILx_CleanMemory")) SWIG_fail;
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      MAILx_CleanMemory();
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PT2DL_LoadTactors(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  
  if (!PyArg_ParseTuple(args,(char *)":PT2DL_LoadTactors")) SWIG_fail;
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      PT2DL_LoadTactors();
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PT2DL_PushPreconNodes(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  
  if (!PyArg_ParseTuple(args,(char *)":PT2DL_PushPreconNodes")) SWIG_fail;
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      PT2DL_PushPreconNodes();
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PT2DL_GetNbPT2DL(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)":PT2DL_GetNbPT2DL")) SWIG_fail;
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      result = (int)PT2DL_GetNbPT2DL();
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PT2DL_GetNbPT2TL(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  int arg1 ;
  int val1 ;
  int ecode1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:PT2DL_GetNbPT2TL",&obj0)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "PT2DL_GetNbPT2TL" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = static_cast< int >(val1);
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      result = (int)PT2DL_GetNbPT2TL(arg1);
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PT2DL_ComputeConvectiveFlux(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  
  if (!PyArg_ParseTuple(args,(char *)":PT2DL_ComputeConvectiveFlux")) SWIG_fail;
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      PT2DL_ComputeConvectiveFlux();
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PT2DL_AssembThermKT(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  
  if (!PyArg_ParseTuple(args,(char *)":PT2DL_AssembThermKT")) SWIG_fail;
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      PT2DL_AssembThermKT();
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PT2DL_AssembThermRHS(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  
  if (!PyArg_ParseTuple(args,(char *)":PT2DL_AssembThermRHS")) SWIG_fail;
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      PT2DL_AssembThermRHS();
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PT2DL_GetBody(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  int arg1 ;
  int val1 ;
  int ecode1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:PT2DL_GetBody",&obj0)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "PT2DL_GetBody" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = static_cast< int >(val1);
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      result = (int)PT2DL_GetBody(arg1);
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PT2DL_CleanMemory(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  
  if (!PyArg_ParseTuple(args,(char *)":PT2DL_CleanMemory")) SWIG_fail;
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      PT2DL_CleanMemory();
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_mecaMAILx_WithoutRenumbering(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)":mecaMAILx_WithoutRenumbering")) SWIG_fail;
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      result = (int)mecaMAILx_WithoutRenumbering();
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_mecaMAILx_BandStorage(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)":mecaMAILx_BandStorage")) SWIG_fail;
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      result = (int)mecaMAILx_BandStorage();
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_mecaMAILx_SparseStorage(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)":mecaMAILx_SparseStorage")) SWIG_fail;
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      result = (int)mecaMAILx_SparseStorage();
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_mecaMAILx_ExplodedStorage(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)":mecaMAILx_ExplodedStorage")) SWIG_fail;
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      result = (int)mecaMAILx_ExplodedStorage();
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_mecaMAILx_DiagonalStorage(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)":mecaMAILx_DiagonalStorage")) SWIG_fail;
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      result = (int)mecaMAILx_DiagonalStorage();
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_mecaMAILx_SkylineStorage(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)":mecaMAILx_SkylineStorage")) SWIG_fail;
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      result = (int)mecaMAILx_SkylineStorage();
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_mecaMAILx_FullStorage(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)":mecaMAILx_FullStorage")) SWIG_fail;
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      result = (int)mecaMAILx_FullStorage();
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_mecaMAILx_SymmetricShape(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)":mecaMAILx_SymmetricShape")) SWIG_fail;
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      result = (int)mecaMAILx_SymmetricShape();
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_mecaMAILx_UnspecifiedShape(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)":mecaMAILx_UnspecifiedShape")) SWIG_fail;
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      result = (int)mecaMAILx_UnspecifiedShape();
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_mecaMAILx_GetNbMecaMAILx(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)":mecaMAILx_GetNbMecaMAILx")) SWIG_fail;
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      result = (int)mecaMAILx_GetNbMecaMAILx();
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_mecaMAILx_GetNbNodes(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  int arg1 ;
  int val1 ;
  int ecode1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:mecaMAILx_GetNbNodes",&obj0)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "mecaMAILx_GetNbNodes" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = static_cast< int >(val1);
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      result = (int)mecaMAILx_GetNbNodes(arg1);
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_mecaMAILx_GetNbElements(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  int arg1 ;
  int val1 ;
  int ecode1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:mecaMAILx_GetNbElements",&obj0)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "mecaMAILx_GetNbElements" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = static_cast< int >(val1);
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      result = (int)mecaMAILx_GetNbElements(arg1);
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_mecaMAILx_GetNbGp(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  int arg1 ;
  int arg2 ;
  int val1 ;
  int ecode1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:mecaMAILx_GetNbGp",&obj0,&obj1)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "mecaMAILx_GetNbGp" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = static_cast< int >(val1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "mecaMAILx_GetNbGp" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      result = (int)mecaMAILx_GetNbGp(arg1,arg2);
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_mecaMAILx_SetPreconBody(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  int arg1 ;
  int val1 ;
  int ecode1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:mecaMAILx_SetPreconBody",&obj0)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "mecaMAILx_SetPreconBody" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = static_cast< int >(val1);
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      mecaMAILx_SetPreconBody(arg1);
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_mecaMAILx_SetPreconAllBodies(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  
  if (!PyArg_ParseTuple(args,(char *)":mecaMAILx_SetPreconAllBodies")) SWIG_fail;
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      mecaMAILx_SetPreconAllBodies();
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_mecaMAILx_ComputePreconW(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  
  if (!PyArg_ParseTuple(args,(char *)":mecaMAILx_ComputePreconW")) SWIG_fail;
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      mecaMAILx_ComputePreconW();
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_mecaMAILx_InitPreconW(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  
  if (!PyArg_ParseTuple(args,(char *)":mecaMAILx_InitPreconW")) SWIG_fail;
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      mecaMAILx_InitPreconW();
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_mecaMAILx_PutPreconW(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  int arg1 ;
  int arg2 ;
  int arg3 ;
  double *arg4 = (double *) 0 ;
  int arg5 ;
  int val1 ;
  int ecode1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  PyArrayObject *array4 = NULL ;
  int is_new_object4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:mecaMAILx_PutPreconW",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "mecaMAILx_PutPreconW" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = static_cast< int >(val1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "mecaMAILx_PutPreconW" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "mecaMAILx_PutPreconW" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  {
    npy_intp size[1] = {
      -1 
    };
    array4 = obj_to_array_contiguous_allow_conversion(obj3,
      NPY_DOUBLE,
      &is_new_object4);
    if (!array4 || !require_dimensions(array4, 1) ||
      !require_size(array4, size, 1)) SWIG_fail;
    arg4 = (double*) array_data(array4);
    arg5 = (int) array_size(array4,0);
  }
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      mecaMAILx_PutPreconW(arg1,arg2,arg3,arg4,arg5);
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_Py_Void();
  {
    if (is_new_object4 && array4)
    {
      Py_DECREF(array4); 
    }
  }
  return resultobj;
fail:
  {
    if (is_new_object4 && array4)
    {
      Py_DECREF(array4); 
    }
  }
  return NULL;
}


SWIGINTERN PyObject *_wrap_mecaMAILx_GetNodesPrecon(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  int arg1 ;
  int **arg2 = (int **) 0 ;
  int *arg3 = (int *) 0 ;
  int val1 ;
  int ecode1 = 0 ;
  int *data_temp2 ;
  int dim_temp2 ;
  PyObject * obj0 = 0 ;
  
  {
    arg2 = &data_temp2;
    arg3 = &dim_temp2;
  }
  if (!PyArg_ParseTuple(args,(char *)"O:mecaMAILx_GetNodesPrecon",&obj0)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "mecaMAILx_GetNodesPrecon" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = static_cast< int >(val1);
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      mecaMAILx_GetNodesPrecon(arg1,arg2,arg3);
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_Py_Void();
  {
    npy_intp dims[1] = {
      *arg3 
    };
    PyObject * obj = PyArray_SimpleNewFromData(1, dims, NPY_INT, (void*)(*arg2));
    if (!obj) SWIG_fail;
    PyArrayObject * array = (PyArrayObject*) obj;
    attach_fortran_memory_to_numpy_array(array, (void*)(*arg2), NPY_INT, dims[0], 0);
    PyArray_ENABLEFLAGS(array,NPY_ARRAY_WRITEABLE);
    
    resultobj = SWIG_Python_AppendOutput(resultobj, obj);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_mecaMAILx_SetCoroAllBodies(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  
  if (!PyArg_ParseTuple(args,(char *)":mecaMAILx_SetCoroAllBodies")) SWIG_fail;
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      mecaMAILx_SetCoroAllBodies();
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_mecaMAILx_SetCoroBody(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  int arg1 ;
  int val1 ;
  int ecode1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:mecaMAILx_SetCoroBody",&obj0)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "mecaMAILx_SetCoroBody" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = static_cast< int >(val1);
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      mecaMAILx_SetCoroBody(arg1);
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_mecaMAILx_SetTolCoro(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  double arg1 ;
  double val1 ;
  int ecode1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:mecaMAILx_SetTolCoro",&obj0)) SWIG_fail;
  ecode1 = SWIG_AsVal_double(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "mecaMAILx_SetTolCoro" "', argument " "1"" of type '" "double""'");
  } 
  arg1 = static_cast< double >(val1);
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      mecaMAILx_SetTolCoro(arg1);
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_mecaMAILx_SetRigidAllBodies(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  
  if (!PyArg_ParseTuple(args,(char *)":mecaMAILx_SetRigidAllBodies")) SWIG_fail;
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      mecaMAILx_SetRigidAllBodies();
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_mecaMAILx_SetRigidBody(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  int arg1 ;
  int val1 ;
  int ecode1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:mecaMAILx_SetRigidBody",&obj0)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "mecaMAILx_SetRigidBody" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = static_cast< int >(val1);
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      mecaMAILx_SetRigidBody(arg1);
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_mecaMAILx_SkipDeformableComputationAllBodies(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  
  if (!PyArg_ParseTuple(args,(char *)":mecaMAILx_SkipDeformableComputationAllBodies")) SWIG_fail;
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      mecaMAILx_SkipDeformableComputationAllBodies();
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_mecaMAILx_SkipDeformableComputationBody(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  int arg1 ;
  int val1 ;
  int ecode1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:mecaMAILx_SkipDeformableComputationBody",&obj0)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "mecaMAILx_SkipDeformableComputationBody" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = static_cast< int >(val1);
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      mecaMAILx_SkipDeformableComputationBody(arg1);
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_mecaMAILx_BuildRigidBodies(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  
  if (!PyArg_ParseTuple(args,(char *)":mecaMAILx_BuildRigidBodies")) SWIG_fail;
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      mecaMAILx_BuildRigidBodies();
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_mecaMAILx_IsRigid(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  int arg1 ;
  int val1 ;
  int ecode1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:mecaMAILx_IsRigid",&obj0)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "mecaMAILx_IsRigid" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = static_cast< int >(val1);
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      result = (int)mecaMAILx_IsRigid(arg1);
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_mecaMAILx_GetRigidFrame(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  char *arg1 = (char *) 0 ;
  int arg2 ;
  double **arg3 = (double **) 0 ;
  int *arg4 = (int *) 0 ;
  int *arg5 = (int *) 0 ;
  int res1 ;
  char *buf1 = 0 ;
  int alloc1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  double *data_temp3 ;
  int dim1_temp3 ;
  int dim2_temp3 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  {
    arg3 = &data_temp3;
    arg4 = &dim1_temp3;
    arg5 = &dim2_temp3;
  }
  if (!PyArg_ParseTuple(args,(char *)"OO:mecaMAILx_GetRigidFrame",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_AsCharPtrAndSize(obj0, &buf1, NULL, &alloc1);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "mecaMAILx_GetRigidFrame" "', argument " "1"" of type '" "char *""'");
  }
  arg1 = reinterpret_cast< char * >(buf1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "mecaMAILx_GetRigidFrame" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      mecaMAILx_GetRigidFrame(arg1,arg2,arg3,arg4,arg5);
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_Py_Void();
  {
    npy_intp dims[2] = {
      *arg5, *arg4 
    };
    PyObject * obj = PyArray_SimpleNewFromData(2, dims, NPY_DOUBLE, (void*)(*arg3));
    if (!obj) SWIG_fail;
    PyArrayObject * array = (PyArrayObject*) obj;
    attach_fortran_memory_to_numpy_array(array, (void*)(*arg3), NPY_DOUBLE, dims[1], dims[0]);
    PyArray_ENABLEFLAGS(array,NPY_ARRAY_WRITEABLE);
    resultobj = SWIG_Python_AppendOutput(resultobj, obj);
  }
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  return resultobj;
fail:
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  return NULL;
}


SWIGINTERN PyObject *_wrap_mecaMAILx_GetRigidCoorTT(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  int arg1 ;
  double **arg2 = (double **) 0 ;
  int *arg3 = (int *) 0 ;
  int val1 ;
  int ecode1 = 0 ;
  double *data_temp2 ;
  int dim_temp2 ;
  PyObject * obj0 = 0 ;
  
  {
    arg2 = &data_temp2;
    arg3 = &dim_temp2;
  }
  if (!PyArg_ParseTuple(args,(char *)"O:mecaMAILx_GetRigidCoorTT",&obj0)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "mecaMAILx_GetRigidCoorTT" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = static_cast< int >(val1);
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      mecaMAILx_GetRigidCoorTT(arg1,arg2,arg3);
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_Py_Void();
  {
    npy_intp dims[1] = {
      *arg3 
    };
    PyObject * obj = PyArray_SimpleNewFromData(1, dims, NPY_DOUBLE, (void*)(*arg2));
    if (!obj) SWIG_fail;
    PyArrayObject * array = (PyArrayObject*) obj;
    attach_fortran_memory_to_numpy_array(array, (void*)(*arg2), NPY_DOUBLE, dims[0], 0);
    PyArray_ENABLEFLAGS(array,NPY_ARRAY_WRITEABLE);
    
    resultobj = SWIG_Python_AppendOutput(resultobj, obj);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_mecaMAILx_GetRigidCooref(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  int arg1 ;
  double **arg2 = (double **) 0 ;
  int *arg3 = (int *) 0 ;
  int val1 ;
  int ecode1 = 0 ;
  double *data_temp2 ;
  int dim_temp2 ;
  PyObject * obj0 = 0 ;
  
  {
    arg2 = &data_temp2;
    arg3 = &dim_temp2;
  }
  if (!PyArg_ParseTuple(args,(char *)"O:mecaMAILx_GetRigidCooref",&obj0)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "mecaMAILx_GetRigidCooref" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = static_cast< int >(val1);
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      mecaMAILx_GetRigidCooref(arg1,arg2,arg3);
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_Py_Void();
  {
    npy_intp dims[1] = {
      *arg3 
    };
    PyObject * obj = PyArray_SimpleNewFromData(1, dims, NPY_DOUBLE, (void*)(*arg2));
    if (!obj) SWIG_fail;
    PyArrayObject * array = (PyArrayObject*) obj;
    attach_fortran_memory_to_numpy_array(array, (void*)(*arg2), NPY_DOUBLE, dims[0], 0);
    PyArray_ENABLEFLAGS(array,NPY_ARRAY_WRITEABLE);
    
    resultobj = SWIG_Python_AppendOutput(resultobj, obj);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_mecaMAILx_SetRVDrivenDofs(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  int arg1 ;
  int *arg2 = (int *) 0 ;
  int arg3 ;
  int val1 ;
  int ecode1 = 0 ;
  PyArrayObject *array2 = NULL ;
  int is_new_object2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:mecaMAILx_SetRVDrivenDofs",&obj0,&obj1)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "mecaMAILx_SetRVDrivenDofs" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = static_cast< int >(val1);
  {
    npy_intp size[1] = {
      -1 
    };
    array2 = obj_to_array_contiguous_allow_conversion(obj1,
      NPY_INT,
      &is_new_object2);
    if (!array2 || !require_dimensions(array2, 1) ||
      !require_size(array2, size, 1)) SWIG_fail;
    arg2 = (int*) array_data(array2);
    arg3 = (int) array_size(array2,0);
  }
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      mecaMAILx_SetRVDrivenDofs(arg1,arg2,arg3);
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_Py_Void();
  {
    if (is_new_object2 && array2)
    {
      Py_DECREF(array2); 
    }
  }
  return resultobj;
fail:
  {
    if (is_new_object2 && array2)
    {
      Py_DECREF(array2); 
    }
  }
  return NULL;
}


SWIGINTERN PyObject *_wrap_mecaMAILx_SetRVDrivenDofValue(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  int arg1 ;
  int arg2 ;
  double arg3 ;
  int val1 ;
  int ecode1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:mecaMAILx_SetRVDrivenDofValue",&obj0,&obj1,&obj2)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "mecaMAILx_SetRVDrivenDofValue" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = static_cast< int >(val1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "mecaMAILx_SetRVDrivenDofValue" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_double(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "mecaMAILx_SetRVDrivenDofValue" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast< double >(val3);
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      mecaMAILx_SetRVDrivenDofValue(arg1,arg2,arg3);
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_mecaMAILx_PutBodyRVector(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  char *arg1 = (char *) 0 ;
  int arg2 ;
  double *arg3 = (double *) 0 ;
  int arg4 ;
  int res1 ;
  char *buf1 = 0 ;
  int alloc1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyArrayObject *array3 = NULL ;
  int is_new_object3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:mecaMAILx_PutBodyRVector",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_AsCharPtrAndSize(obj0, &buf1, NULL, &alloc1);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "mecaMAILx_PutBodyRVector" "', argument " "1"" of type '" "char *""'");
  }
  arg1 = reinterpret_cast< char * >(buf1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "mecaMAILx_PutBodyRVector" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    npy_intp size[1] = {
      -1 
    };
    array3 = obj_to_array_contiguous_allow_conversion(obj2,
      NPY_DOUBLE,
      &is_new_object3);
    if (!array3 || !require_dimensions(array3, 1) ||
      !require_size(array3, size, 1)) SWIG_fail;
    arg3 = (double*) array_data(array3);
    arg4 = (int) array_size(array3,0);
  }
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      mecaMAILx_PutBodyRVector(arg1,arg2,arg3,arg4);
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_Py_Void();
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  {
    if (is_new_object3 && array3)
    {
      Py_DECREF(array3); 
    }
  }
  return resultobj;
fail:
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  {
    if (is_new_object3 && array3)
    {
      Py_DECREF(array3); 
    }
  }
  return NULL;
}


SWIGINTERN PyObject *_wrap_mecaMAILx_GetBodyRVector(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  char *arg1 = (char *) 0 ;
  int arg2 ;
  double **arg3 = (double **) 0 ;
  int *arg4 = (int *) 0 ;
  int res1 ;
  char *buf1 = 0 ;
  int alloc1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  double *data_temp3 ;
  int dim_temp3 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  {
    arg3 = &data_temp3;
    arg4 = &dim_temp3;
  }
  if (!PyArg_ParseTuple(args,(char *)"OO:mecaMAILx_GetBodyRVector",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_AsCharPtrAndSize(obj0, &buf1, NULL, &alloc1);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "mecaMAILx_GetBodyRVector" "', argument " "1"" of type '" "char *""'");
  }
  arg1 = reinterpret_cast< char * >(buf1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "mecaMAILx_GetBodyRVector" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      mecaMAILx_GetBodyRVector(arg1,arg2,arg3,arg4);
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_Py_Void();
  {
    npy_intp dims[1] = {
      *arg4 
    };
    PyObject * obj = PyArray_SimpleNewFromData(1, dims, NPY_DOUBLE, (void*)(*arg3));
    if (!obj) SWIG_fail;
    PyArrayObject * array = (PyArrayObject*) obj;
    attach_fortran_memory_to_numpy_array(array, (void*)(*arg3), NPY_DOUBLE, dims[0], 0);
    PyArray_ENABLEFLAGS(array,NPY_ARRAY_WRITEABLE);
    
    resultobj = SWIG_Python_AppendOutput(resultobj, obj);
  }
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  return resultobj;
fail:
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  return NULL;
}


SWIGINTERN PyObject *_wrap_mecaMAILx_PutBodyVector(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  char *arg1 = (char *) 0 ;
  int arg2 ;
  double *arg3 = (double *) 0 ;
  int arg4 ;
  int arg5 ;
  int res1 ;
  char *buf1 = 0 ;
  int alloc1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyArrayObject *array3 = NULL ;
  int is_new_object3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:mecaMAILx_PutBodyVector",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_AsCharPtrAndSize(obj0, &buf1, NULL, &alloc1);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "mecaMAILx_PutBodyVector" "', argument " "1"" of type '" "char *""'");
  }
  arg1 = reinterpret_cast< char * >(buf1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "mecaMAILx_PutBodyVector" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    npy_intp size[2] = {
      -1, -1 
    };
    array3 = obj_to_array_contiguous_allow_conversion(obj2, NPY_DOUBLE,
      &is_new_object3);
    if (!array3 || !require_dimensions(array3, 2) ||
      !require_size(array3, size, 2)) SWIG_fail;
    arg3 = (double*) array_data(array3);
    arg4 = (int) array_size(array3,0);
    arg5 = (int) array_size(array3,1);
  }
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      mecaMAILx_PutBodyVector(arg1,arg2,arg3,arg4,arg5);
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_Py_Void();
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  {
    if (is_new_object3 && array3)
    {
      Py_DECREF(array3); 
    }
  }
  return resultobj;
fail:
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  {
    if (is_new_object3 && array3)
    {
      Py_DECREF(array3); 
    }
  }
  return NULL;
}


SWIGINTERN PyObject *_wrap_mecaMAILx_GetBodyVector(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  char *arg1 = (char *) 0 ;
  int arg2 ;
  double **arg3 = (double **) 0 ;
  int *arg4 = (int *) 0 ;
  int *arg5 = (int *) 0 ;
  int res1 ;
  char *buf1 = 0 ;
  int alloc1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  double *data_temp3 ;
  int dim1_temp3 ;
  int dim2_temp3 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  {
    arg3 = &data_temp3;
    arg4 = &dim1_temp3;
    arg5 = &dim2_temp3;
  }
  if (!PyArg_ParseTuple(args,(char *)"OO:mecaMAILx_GetBodyVector",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_AsCharPtrAndSize(obj0, &buf1, NULL, &alloc1);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "mecaMAILx_GetBodyVector" "', argument " "1"" of type '" "char *""'");
  }
  arg1 = reinterpret_cast< char * >(buf1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "mecaMAILx_GetBodyVector" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      mecaMAILx_GetBodyVector(arg1,arg2,arg3,arg4,arg5);
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_Py_Void();
  {
    npy_intp dims[2] = {
      *arg5, *arg4 
    };
    PyObject * obj = PyArray_SimpleNewFromData(2, dims, NPY_DOUBLE, (void*)(*arg3));
    if (!obj) SWIG_fail;
    PyArrayObject * array = (PyArrayObject*) obj;
    attach_fortran_memory_to_numpy_array(array, (void*)(*arg3), NPY_DOUBLE, dims[1], dims[0]);
    PyArray_ENABLEFLAGS(array,NPY_ARRAY_WRITEABLE);
    resultobj = SWIG_Python_AppendOutput(resultobj, obj);
  }
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  return resultobj;
fail:
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  return NULL;
}


SWIGINTERN PyObject *_wrap_mecaMAILx_GetMaterials(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  int arg1 ;
  int **arg2 = (int **) 0 ;
  int *arg3 = (int *) 0 ;
  int val1 ;
  int ecode1 = 0 ;
  int *data_temp2 ;
  int dim_temp2 ;
  PyObject * obj0 = 0 ;
  
  {
    arg2 = &data_temp2;
    arg3 = &dim_temp2;
  }
  if (!PyArg_ParseTuple(args,(char *)"O:mecaMAILx_GetMaterials",&obj0)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "mecaMAILx_GetMaterials" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = static_cast< int >(val1);
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      mecaMAILx_GetMaterials(arg1,arg2,arg3);
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_Py_Void();
  {
    npy_intp dims[1] = {
      *arg3 
    };
    PyObject * obj = PyArray_SimpleNewFromData(1, dims, NPY_INT, (void*)(*arg2));
    if (!obj) SWIG_fail;
    PyArrayObject * array = (PyArrayObject*) obj;
    attach_fortran_memory_to_numpy_array(array, (void*)(*arg2), NPY_INT, dims[0], 0);
    PyArray_ENABLEFLAGS(array,NPY_ARRAY_WRITEABLE);
    
    resultobj = SWIG_Python_AppendOutput(resultobj, obj);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_mecaMAILx_GetStress(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  int arg1 ;
  double **arg2 = (double **) 0 ;
  int *arg3 = (int *) 0 ;
  int *arg4 = (int *) 0 ;
  int val1 ;
  int ecode1 = 0 ;
  double *data_temp2 ;
  int dim1_temp2 ;
  int dim2_temp2 ;
  PyObject * obj0 = 0 ;
  
  {
    arg2 = &data_temp2;
    arg3 = &dim1_temp2;
    arg4 = &dim2_temp2;
  }
  if (!PyArg_ParseTuple(args,(char *)"O:mecaMAILx_GetStress",&obj0)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "mecaMAILx_GetStress" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = static_cast< int >(val1);
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      mecaMAILx_GetStress(arg1,arg2,arg3,arg4);
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_Py_Void();
  {
    npy_intp dims[2] = {
      *arg4, *arg3 
    };
    PyObject * obj = PyArray_SimpleNewFromData(2, dims, NPY_DOUBLE, (void*)(*arg2));
    if (!obj) SWIG_fail;
    PyArrayObject * array = (PyArrayObject*) obj;
    attach_fortran_memory_to_numpy_array(array, (void*)(*arg2), NPY_DOUBLE, dims[1], dims[0]);
    PyArray_ENABLEFLAGS(array,NPY_ARRAY_WRITEABLE);
    resultobj = SWIG_Python_AppendOutput(resultobj, obj);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_mecaMAILx_GetStrain(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  int arg1 ;
  double **arg2 = (double **) 0 ;
  int *arg3 = (int *) 0 ;
  int *arg4 = (int *) 0 ;
  int val1 ;
  int ecode1 = 0 ;
  double *data_temp2 ;
  int dim1_temp2 ;
  int dim2_temp2 ;
  PyObject * obj0 = 0 ;
  
  {
    arg2 = &data_temp2;
    arg3 = &dim1_temp2;
    arg4 = &dim2_temp2;
  }
  if (!PyArg_ParseTuple(args,(char *)"O:mecaMAILx_GetStrain",&obj0)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "mecaMAILx_GetStrain" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = static_cast< int >(val1);
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      mecaMAILx_GetStrain(arg1,arg2,arg3,arg4);
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_Py_Void();
  {
    npy_intp dims[2] = {
      *arg4, *arg3 
    };
    PyObject * obj = PyArray_SimpleNewFromData(2, dims, NPY_DOUBLE, (void*)(*arg2));
    if (!obj) SWIG_fail;
    PyArrayObject * array = (PyArrayObject*) obj;
    attach_fortran_memory_to_numpy_array(array, (void*)(*arg2), NPY_DOUBLE, dims[1], dims[0]);
    PyArray_ENABLEFLAGS(array,NPY_ARRAY_WRITEABLE);
    resultobj = SWIG_Python_AppendOutput(resultobj, obj);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_mecaMAILx_GetInternalVariables(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  int arg1 ;
  double **arg2 = (double **) 0 ;
  int *arg3 = (int *) 0 ;
  int *arg4 = (int *) 0 ;
  int val1 ;
  int ecode1 = 0 ;
  double *data_temp2 ;
  int dim1_temp2 ;
  int dim2_temp2 ;
  PyObject * obj0 = 0 ;
  
  {
    arg2 = &data_temp2;
    arg3 = &dim1_temp2;
    arg4 = &dim2_temp2;
  }
  if (!PyArg_ParseTuple(args,(char *)"O:mecaMAILx_GetInternalVariables",&obj0)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "mecaMAILx_GetInternalVariables" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = static_cast< int >(val1);
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      mecaMAILx_GetInternalVariables(arg1,arg2,arg3,arg4);
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_Py_Void();
  {
    npy_intp dims[2] = {
      *arg4, *arg3 
    };
    PyObject * obj = PyArray_SimpleNewFromData(2, dims, NPY_DOUBLE, (void*)(*arg2));
    if (!obj) SWIG_fail;
    PyArrayObject * array = (PyArrayObject*) obj;
    attach_fortran_memory_to_numpy_array(array, (void*)(*arg2), NPY_DOUBLE, dims[1], dims[0]);
    PyArray_ENABLEFLAGS(array,NPY_ARRAY_WRITEABLE);
    resultobj = SWIG_Python_AppendOutput(resultobj, obj);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_mecaMAILx_GetElementStress(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  int arg1 ;
  double **arg2 = (double **) 0 ;
  int *arg3 = (int *) 0 ;
  int *arg4 = (int *) 0 ;
  int val1 ;
  int ecode1 = 0 ;
  double *data_temp2 ;
  int dim1_temp2 ;
  int dim2_temp2 ;
  PyObject * obj0 = 0 ;
  
  {
    arg2 = &data_temp2;
    arg3 = &dim1_temp2;
    arg4 = &dim2_temp2;
  }
  if (!PyArg_ParseTuple(args,(char *)"O:mecaMAILx_GetElementStress",&obj0)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "mecaMAILx_GetElementStress" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = static_cast< int >(val1);
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      mecaMAILx_GetElementStress(arg1,arg2,arg3,arg4);
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_Py_Void();
  {
    npy_intp dims[2] = {
      *arg4, *arg3 
    };
    PyObject * obj = PyArray_SimpleNewFromData(2, dims, NPY_DOUBLE, (void*)(*arg2));
    if (!obj) SWIG_fail;
    PyArrayObject * array = (PyArrayObject*) obj;
    attach_fortran_memory_to_numpy_array(array, (void*)(*arg2), NPY_DOUBLE, dims[1], dims[0]);
    PyArray_ENABLEFLAGS(array,NPY_ARRAY_WRITEABLE);
    resultobj = SWIG_Python_AppendOutput(resultobj, obj);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_mecaMAILx_PushProperties(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  
  if (!PyArg_ParseTuple(args,(char *)":mecaMAILx_PushProperties")) SWIG_fail;
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      mecaMAILx_PushProperties();
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_mecaMAILx_UseNewPPSet(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)":mecaMAILx_UseNewPPSet")) SWIG_fail;
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      result = (int)mecaMAILx_UseNewPPSet();
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_mecaMAILx_ComputeFreeVelocity(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  int *arg1 = (int *) NULL ;
  int arg2 = (int) 0 ;
  PyArrayObject *array1 = NULL ;
  int is_new_object1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"|O:mecaMAILx_ComputeFreeVelocity",&obj0)) SWIG_fail;
  if (obj0) {
    {
      npy_intp size[1] = {
        -1 
      };
      array1 = obj_to_array_contiguous_allow_conversion(obj0,
        NPY_INT,
        &is_new_object1);
      if (!array1 || !require_dimensions(array1, 1) ||
        !require_size(array1, size, 1)) SWIG_fail;
      arg1 = (int*) array_data(array1);
      arg2 = (int) array_size(array1,0);
    }
  }
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      mecaMAILx_ComputeFreeVelocity(arg1,arg2);
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_Py_Void();
  {
    if (is_new_object1 && array1)
    {
      Py_DECREF(array1); 
    }
  }
  return resultobj;
fail:
  {
    if (is_new_object1 && array1)
    {
      Py_DECREF(array1); 
    }
  }
  return NULL;
}


SWIGINTERN PyObject *_wrap_mecaMAILx_AssembKT(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  int *arg1 = (int *) NULL ;
  int arg2 = (int) 0 ;
  PyArrayObject *array1 = NULL ;
  int is_new_object1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"|O:mecaMAILx_AssembKT",&obj0)) SWIG_fail;
  if (obj0) {
    {
      npy_intp size[1] = {
        -1 
      };
      array1 = obj_to_array_contiguous_allow_conversion(obj0,
        NPY_INT,
        &is_new_object1);
      if (!array1 || !require_dimensions(array1, 1) ||
        !require_size(array1, size, 1)) SWIG_fail;
      arg1 = (int*) array_data(array1);
      arg2 = (int) array_size(array1,0);
    }
  }
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      mecaMAILx_AssembKT(arg1,arg2);
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_Py_Void();
  {
    if (is_new_object1 && array1)
    {
      Py_DECREF(array1); 
    }
  }
  return resultobj;
fail:
  {
    if (is_new_object1 && array1)
    {
      Py_DECREF(array1); 
    }
  }
  return NULL;
}


SWIGINTERN PyObject *_wrap_mecaMAILx_OnlyAssembKT(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  int *arg1 = (int *) NULL ;
  int arg2 = (int) 0 ;
  PyArrayObject *array1 = NULL ;
  int is_new_object1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"|O:mecaMAILx_OnlyAssembKT",&obj0)) SWIG_fail;
  if (obj0) {
    {
      npy_intp size[1] = {
        -1 
      };
      array1 = obj_to_array_contiguous_allow_conversion(obj0,
        NPY_INT,
        &is_new_object1);
      if (!array1 || !require_dimensions(array1, 1) ||
        !require_size(array1, size, 1)) SWIG_fail;
      arg1 = (int*) array_data(array1);
      arg2 = (int) array_size(array1,0);
    }
  }
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      mecaMAILx_OnlyAssembKT(arg1,arg2);
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_Py_Void();
  {
    if (is_new_object1 && array1)
    {
      Py_DECREF(array1); 
    }
  }
  return resultobj;
fail:
  {
    if (is_new_object1 && array1)
    {
      Py_DECREF(array1); 
    }
  }
  return NULL;
}


SWIGINTERN PyObject *_wrap_mecaMAILx_ApplyDrvDofKT(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  int *arg1 = (int *) NULL ;
  int arg2 = (int) 0 ;
  PyArrayObject *array1 = NULL ;
  int is_new_object1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"|O:mecaMAILx_ApplyDrvDofKT",&obj0)) SWIG_fail;
  if (obj0) {
    {
      npy_intp size[1] = {
        -1 
      };
      array1 = obj_to_array_contiguous_allow_conversion(obj0,
        NPY_INT,
        &is_new_object1);
      if (!array1 || !require_dimensions(array1, 1) ||
        !require_size(array1, size, 1)) SWIG_fail;
      arg1 = (int*) array_data(array1);
      arg2 = (int) array_size(array1,0);
    }
  }
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      mecaMAILx_ApplyDrvDofKT(arg1,arg2);
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_Py_Void();
  {
    if (is_new_object1 && array1)
    {
      Py_DECREF(array1); 
    }
  }
  return resultobj;
fail:
  {
    if (is_new_object1 && array1)
    {
      Py_DECREF(array1); 
    }
  }
  return NULL;
}


SWIGINTERN PyObject *_wrap_mecaMAILx_AssembRHS(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  int *arg1 = (int *) NULL ;
  int arg2 = (int) 0 ;
  PyArrayObject *array1 = NULL ;
  int is_new_object1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"|O:mecaMAILx_AssembRHS",&obj0)) SWIG_fail;
  if (obj0) {
    {
      npy_intp size[1] = {
        -1 
      };
      array1 = obj_to_array_contiguous_allow_conversion(obj0,
        NPY_INT,
        &is_new_object1);
      if (!array1 || !require_dimensions(array1, 1) ||
        !require_size(array1, size, 1)) SWIG_fail;
      arg1 = (int*) array_data(array1);
      arg2 = (int) array_size(array1,0);
    }
  }
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      mecaMAILx_AssembRHS(arg1,arg2);
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_Py_Void();
  {
    if (is_new_object1 && array1)
    {
      Py_DECREF(array1); 
    }
  }
  return resultobj;
fail:
  {
    if (is_new_object1 && array1)
    {
      Py_DECREF(array1); 
    }
  }
  return NULL;
}


SWIGINTERN PyObject *_wrap_mecaMAILx_ComputeResidueNorm(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  int *arg1 = (int *) NULL ;
  int arg2 = (int) 0 ;
  PyArrayObject *array1 = NULL ;
  int is_new_object1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"|O:mecaMAILx_ComputeResidueNorm",&obj0)) SWIG_fail;
  if (obj0) {
    {
      npy_intp size[1] = {
        -1 
      };
      array1 = obj_to_array_contiguous_allow_conversion(obj0,
        NPY_INT,
        &is_new_object1);
      if (!array1 || !require_dimensions(array1, 1) ||
        !require_size(array1, size, 1)) SWIG_fail;
      arg1 = (int*) array_data(array1);
      arg2 = (int) array_size(array1,0);
    }
  }
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      result = (double)mecaMAILx_ComputeResidueNorm(arg1,arg2);
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  {
    if (is_new_object1 && array1)
    {
      Py_DECREF(array1); 
    }
  }
  return resultobj;
fail:
  {
    if (is_new_object1 && array1)
    {
      Py_DECREF(array1); 
    }
  }
  return NULL;
}


SWIGINTERN PyObject *_wrap_mecaMAILx_ComputeBulk(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  int *arg1 = (int *) NULL ;
  int arg2 = (int) 0 ;
  PyArrayObject *array1 = NULL ;
  int is_new_object1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"|O:mecaMAILx_ComputeBulk",&obj0)) SWIG_fail;
  if (obj0) {
    {
      npy_intp size[1] = {
        -1 
      };
      array1 = obj_to_array_contiguous_allow_conversion(obj0,
        NPY_INT,
        &is_new_object1);
      if (!array1 || !require_dimensions(array1, 1) ||
        !require_size(array1, size, 1)) SWIG_fail;
      arg1 = (int*) array_data(array1);
      arg2 = (int) array_size(array1,0);
    }
  }
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      mecaMAILx_ComputeBulk(arg1,arg2);
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_Py_Void();
  {
    if (is_new_object1 && array1)
    {
      Py_DECREF(array1); 
    }
  }
  return resultobj;
fail:
  {
    if (is_new_object1 && array1)
    {
      Py_DECREF(array1); 
    }
  }
  return NULL;
}


SWIGINTERN PyObject *_wrap_mecaMAILx_ComputeField(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  int *arg1 = (int *) NULL ;
  int arg2 = (int) 0 ;
  PyArrayObject *array1 = NULL ;
  int is_new_object1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"|O:mecaMAILx_ComputeField",&obj0)) SWIG_fail;
  if (obj0) {
    {
      npy_intp size[1] = {
        -1 
      };
      array1 = obj_to_array_contiguous_allow_conversion(obj0,
        NPY_INT,
        &is_new_object1);
      if (!array1 || !require_dimensions(array1, 1) ||
        !require_size(array1, size, 1)) SWIG_fail;
      arg1 = (int*) array_data(array1);
      arg2 = (int) array_size(array1,0);
    }
  }
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      mecaMAILx_ComputeField(arg1,arg2);
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_Py_Void();
  {
    if (is_new_object1 && array1)
    {
      Py_DECREF(array1); 
    }
  }
  return resultobj;
fail:
  {
    if (is_new_object1 && array1)
    {
      Py_DECREF(array1); 
    }
  }
  return NULL;
}


SWIGINTERN PyObject *_wrap_mecaMAILx_ComputeFint(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  int *arg1 = (int *) NULL ;
  int arg2 = (int) 0 ;
  PyArrayObject *array1 = NULL ;
  int is_new_object1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"|O:mecaMAILx_ComputeFint",&obj0)) SWIG_fail;
  if (obj0) {
    {
      npy_intp size[1] = {
        -1 
      };
      array1 = obj_to_array_contiguous_allow_conversion(obj0,
        NPY_INT,
        &is_new_object1);
      if (!array1 || !require_dimensions(array1, 1) ||
        !require_size(array1, size, 1)) SWIG_fail;
      arg1 = (int*) array_data(array1);
      arg2 = (int) array_size(array1,0);
    }
  }
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      mecaMAILx_ComputeFint(arg1,arg2);
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_Py_Void();
  {
    if (is_new_object1 && array1)
    {
      Py_DECREF(array1); 
    }
  }
  return resultobj;
fail:
  {
    if (is_new_object1 && array1)
    {
      Py_DECREF(array1); 
    }
  }
  return NULL;
}


SWIGINTERN PyObject *_wrap_mecaMAILx_UpdateBulk(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  int *arg1 = (int *) NULL ;
  int arg2 = (int) 0 ;
  PyArrayObject *array1 = NULL ;
  int is_new_object1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"|O:mecaMAILx_UpdateBulk",&obj0)) SWIG_fail;
  if (obj0) {
    {
      npy_intp size[1] = {
        -1 
      };
      array1 = obj_to_array_contiguous_allow_conversion(obj0,
        NPY_INT,
        &is_new_object1);
      if (!array1 || !require_dimensions(array1, 1) ||
        !require_size(array1, size, 1)) SWIG_fail;
      arg1 = (int*) array_data(array1);
      arg2 = (int) array_size(array1,0);
    }
  }
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      mecaMAILx_UpdateBulk(arg1,arg2);
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_Py_Void();
  {
    if (is_new_object1 && array1)
    {
      Py_DECREF(array1); 
    }
  }
  return resultobj;
fail:
  {
    if (is_new_object1 && array1)
    {
      Py_DECREF(array1); 
    }
  }
  return NULL;
}


SWIGINTERN PyObject *_wrap_mecaMAILx_UpdateDof(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  int *arg1 = (int *) NULL ;
  int arg2 = (int) 0 ;
  PyArrayObject *array1 = NULL ;
  int is_new_object1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"|O:mecaMAILx_UpdateDof",&obj0)) SWIG_fail;
  if (obj0) {
    {
      npy_intp size[1] = {
        -1 
      };
      array1 = obj_to_array_contiguous_allow_conversion(obj0,
        NPY_INT,
        &is_new_object1);
      if (!array1 || !require_dimensions(array1, 1) ||
        !require_size(array1, size, 1)) SWIG_fail;
      arg1 = (int*) array_data(array1);
      arg2 = (int) array_size(array1,0);
    }
  }
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      mecaMAILx_UpdateDof(arg1,arg2);
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_Py_Void();
  {
    if (is_new_object1 && array1)
    {
      Py_DECREF(array1); 
    }
  }
  return resultobj;
fail:
  {
    if (is_new_object1 && array1)
    {
      Py_DECREF(array1); 
    }
  }
  return NULL;
}


SWIGINTERN PyObject *_wrap_mecaMAILx_ComputeDof(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  int *arg1 = (int *) NULL ;
  int arg2 = (int) 0 ;
  PyArrayObject *array1 = NULL ;
  int is_new_object1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"|O:mecaMAILx_ComputeDof",&obj0)) SWIG_fail;
  if (obj0) {
    {
      npy_intp size[1] = {
        -1 
      };
      array1 = obj_to_array_contiguous_allow_conversion(obj0,
        NPY_INT,
        &is_new_object1);
      if (!array1 || !require_dimensions(array1, 1) ||
        !require_size(array1, size, 1)) SWIG_fail;
      arg1 = (int*) array_data(array1);
      arg2 = (int) array_size(array1,0);
    }
  }
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      mecaMAILx_ComputeDof(arg1,arg2);
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_Py_Void();
  {
    if (is_new_object1 && array1)
    {
      Py_DECREF(array1); 
    }
  }
  return resultobj;
fail:
  {
    if (is_new_object1 && array1)
    {
      Py_DECREF(array1); 
    }
  }
  return NULL;
}


SWIGINTERN PyObject *_wrap_mecaMAILx_IncrementStep(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  
  if (!PyArg_ParseTuple(args,(char *)":mecaMAILx_IncrementStep")) SWIG_fail;
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      mecaMAILx_IncrementStep();
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_mecaMAILx_ComputeFext(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  int *arg1 = (int *) NULL ;
  int arg2 = (int) 0 ;
  PyArrayObject *array1 = NULL ;
  int is_new_object1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"|O:mecaMAILx_ComputeFext",&obj0)) SWIG_fail;
  if (obj0) {
    {
      npy_intp size[1] = {
        -1 
      };
      array1 = obj_to_array_contiguous_allow_conversion(obj0,
        NPY_INT,
        &is_new_object1);
      if (!array1 || !require_dimensions(array1, 1) ||
        !require_size(array1, size, 1)) SWIG_fail;
      arg1 = (int*) array_data(array1);
      arg2 = (int) array_size(array1,0);
    }
  }
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      mecaMAILx_ComputeFext(arg1,arg2);
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_Py_Void();
  {
    if (is_new_object1 && array1)
    {
      Py_DECREF(array1); 
    }
  }
  return resultobj;
fail:
  {
    if (is_new_object1 && array1)
    {
      Py_DECREF(array1); 
    }
  }
  return NULL;
}


SWIGINTERN PyObject *_wrap_mecaMAILx_ComputeMass(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  int *arg1 = (int *) NULL ;
  int arg2 = (int) 0 ;
  PyArrayObject *array1 = NULL ;
  int is_new_object1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"|O:mecaMAILx_ComputeMass",&obj0)) SWIG_fail;
  if (obj0) {
    {
      npy_intp size[1] = {
        -1 
      };
      array1 = obj_to_array_contiguous_allow_conversion(obj0,
        NPY_INT,
        &is_new_object1);
      if (!array1 || !require_dimensions(array1, 1) ||
        !require_size(array1, size, 1)) SWIG_fail;
      arg1 = (int*) array_data(array1);
      arg2 = (int) array_size(array1,0);
    }
  }
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      mecaMAILx_ComputeMass(arg1,arg2);
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_Py_Void();
  {
    if (is_new_object1 && array1)
    {
      Py_DECREF(array1); 
    }
  }
  return resultobj;
fail:
  {
    if (is_new_object1 && array1)
    {
      Py_DECREF(array1); 
    }
  }
  return NULL;
}


SWIGINTERN PyObject *_wrap_mecaMAILx_FatalDamping(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  int *arg1 = (int *) NULL ;
  int arg2 = (int) 0 ;
  PyArrayObject *array1 = NULL ;
  int is_new_object1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"|O:mecaMAILx_FatalDamping",&obj0)) SWIG_fail;
  if (obj0) {
    {
      npy_intp size[1] = {
        -1 
      };
      array1 = obj_to_array_contiguous_allow_conversion(obj0,
        NPY_INT,
        &is_new_object1);
      if (!array1 || !require_dimensions(array1, 1) ||
        !require_size(array1, size, 1)) SWIG_fail;
      arg1 = (int*) array_data(array1);
      arg2 = (int) array_size(array1,0);
    }
  }
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      mecaMAILx_FatalDamping(arg1,arg2);
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_Py_Void();
  {
    if (is_new_object1 && array1)
    {
      Py_DECREF(array1); 
    }
  }
  return resultobj;
fail:
  {
    if (is_new_object1 && array1)
    {
      Py_DECREF(array1); 
    }
  }
  return NULL;
}


SWIGINTERN PyObject *_wrap_mecaMAILx_CheckEquilibriumState(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)":mecaMAILx_CheckEquilibriumState")) SWIG_fail;
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      result = (int)mecaMAILx_CheckEquilibriumState();
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_mecaMAILx_SetEquilibriumNorm(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  char *arg1 = (char *) 0 ;
  double arg2 ;
  int res1 ;
  char *buf1 = 0 ;
  int alloc1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:mecaMAILx_SetEquilibriumNorm",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_AsCharPtrAndSize(obj0, &buf1, NULL, &alloc1);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "mecaMAILx_SetEquilibriumNorm" "', argument " "1"" of type '" "char *""'");
  }
  arg1 = reinterpret_cast< char * >(buf1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "mecaMAILx_SetEquilibriumNorm" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      mecaMAILx_SetEquilibriumNorm(arg1,arg2);
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_Py_Void();
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  return resultobj;
fail:
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  return NULL;
}


SWIGINTERN PyObject *_wrap_mecaMAILx_ReadDrivenDof(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  
  if (!PyArg_ParseTuple(args,(char *)":mecaMAILx_ReadDrivenDof")) SWIG_fail;
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      mecaMAILx_ReadDrivenDof();
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_mecaMAILx_ReadIniGPV(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  int arg1 = (int) 0 ;
  int val1 ;
  int ecode1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"|O:mecaMAILx_ReadIniGPV",&obj0)) SWIG_fail;
  if (obj0) {
    ecode1 = SWIG_AsVal_int(obj0, &val1);
    if (!SWIG_IsOK(ecode1)) {
      SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "mecaMAILx_ReadIniGPV" "', argument " "1"" of type '" "int""'");
    } 
    arg1 = static_cast< int >(val1);
  }
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      mecaMAILx_ReadIniGPV(arg1);
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_mecaMAILx_ReadIniDof(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  int arg1 = (int) 0 ;
  int val1 ;
  int ecode1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"|O:mecaMAILx_ReadIniDof",&obj0)) SWIG_fail;
  if (obj0) {
    ecode1 = SWIG_AsVal_int(obj0, &val1);
    if (!SWIG_IsOK(ecode1)) {
      SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "mecaMAILx_ReadIniDof" "', argument " "1"" of type '" "int""'");
    } 
    arg1 = static_cast< int >(val1);
  }
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      mecaMAILx_ReadIniDof(arg1);
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_mecaMAILx_LoadBehaviours(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  
  if (!PyArg_ParseTuple(args,(char *)":mecaMAILx_LoadBehaviours")) SWIG_fail;
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      mecaMAILx_LoadBehaviours();
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_mecaMAILx_LoadModels(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  
  if (!PyArg_ParseTuple(args,(char *)":mecaMAILx_LoadModels")) SWIG_fail;
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      mecaMAILx_LoadModels();
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_mecaMAILx_WriteDrivenDof(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  
  if (!PyArg_ParseTuple(args,(char *)":mecaMAILx_WriteDrivenDof")) SWIG_fail;
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      mecaMAILx_WriteDrivenDof();
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_mecaMAILx_WriteLastDof(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  
  if (!PyArg_ParseTuple(args,(char *)":mecaMAILx_WriteLastDof")) SWIG_fail;
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      mecaMAILx_WriteLastDof();
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_mecaMAILx_WriteOutDof(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  
  if (!PyArg_ParseTuple(args,(char *)":mecaMAILx_WriteOutDof")) SWIG_fail;
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      mecaMAILx_WriteOutDof();
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_mecaMAILx_DisplayOutDof(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  
  if (!PyArg_ParseTuple(args,(char *)":mecaMAILx_DisplayOutDof")) SWIG_fail;
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      mecaMAILx_DisplayOutDof();
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_mecaMAILx_DisplayBulkElement(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  int arg1 ;
  int arg2 ;
  int val1 ;
  int ecode1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:mecaMAILx_DisplayBulkElement",&obj0,&obj1)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "mecaMAILx_DisplayBulkElement" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = static_cast< int >(val1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "mecaMAILx_DisplayBulkElement" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      mecaMAILx_DisplayBulkElement(arg1,arg2);
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_mecaMAILx_WriteLastRnod(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  int *arg1 = (int *) NULL ;
  int arg2 = (int) 0 ;
  PyArrayObject *array1 = NULL ;
  int is_new_object1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"|O:mecaMAILx_WriteLastRnod",&obj0)) SWIG_fail;
  if (obj0) {
    {
      npy_intp size[1] = {
        -1 
      };
      array1 = obj_to_array_contiguous_allow_conversion(obj0,
        NPY_INT,
        &is_new_object1);
      if (!array1 || !require_dimensions(array1, 1) ||
        !require_size(array1, size, 1)) SWIG_fail;
      arg1 = (int*) array_data(array1);
      arg2 = (int) array_size(array1,0);
    }
  }
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      mecaMAILx_WriteLastRnod(arg1,arg2);
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_Py_Void();
  {
    if (is_new_object1 && array1)
    {
      Py_DECREF(array1); 
    }
  }
  return resultobj;
fail:
  {
    if (is_new_object1 && array1)
    {
      Py_DECREF(array1); 
    }
  }
  return NULL;
}


SWIGINTERN PyObject *_wrap_mecaMAILx_WriteOutRnod(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  int *arg1 = (int *) NULL ;
  int arg2 = (int) 0 ;
  PyArrayObject *array1 = NULL ;
  int is_new_object1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"|O:mecaMAILx_WriteOutRnod",&obj0)) SWIG_fail;
  if (obj0) {
    {
      npy_intp size[1] = {
        -1 
      };
      array1 = obj_to_array_contiguous_allow_conversion(obj0,
        NPY_INT,
        &is_new_object1);
      if (!array1 || !require_dimensions(array1, 1) ||
        !require_size(array1, size, 1)) SWIG_fail;
      arg1 = (int*) array_data(array1);
      arg2 = (int) array_size(array1,0);
    }
  }
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      mecaMAILx_WriteOutRnod(arg1,arg2);
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_Py_Void();
  {
    if (is_new_object1 && array1)
    {
      Py_DECREF(array1); 
    }
  }
  return resultobj;
fail:
  {
    if (is_new_object1 && array1)
    {
      Py_DECREF(array1); 
    }
  }
  return NULL;
}


SWIGINTERN PyObject *_wrap_mecaMAILx_DisplayOutRnod(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  int *arg1 = (int *) NULL ;
  int arg2 = (int) 0 ;
  PyArrayObject *array1 = NULL ;
  int is_new_object1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"|O:mecaMAILx_DisplayOutRnod",&obj0)) SWIG_fail;
  if (obj0) {
    {
      npy_intp size[1] = {
        -1 
      };
      array1 = obj_to_array_contiguous_allow_conversion(obj0,
        NPY_INT,
        &is_new_object1);
      if (!array1 || !require_dimensions(array1, 1) ||
        !require_size(array1, size, 1)) SWIG_fail;
      arg1 = (int*) array_data(array1);
      arg2 = (int) array_size(array1,0);
    }
  }
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      mecaMAILx_DisplayOutRnod(arg1,arg2);
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_Py_Void();
  {
    if (is_new_object1 && array1)
    {
      Py_DECREF(array1); 
    }
  }
  return resultobj;
fail:
  {
    if (is_new_object1 && array1)
    {
      Py_DECREF(array1); 
    }
  }
  return NULL;
}


SWIGINTERN PyObject *_wrap_mecaMAILx_WriteLastNodalForces(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  int *arg1 = (int *) NULL ;
  int arg2 = (int) 0 ;
  PyArrayObject *array1 = NULL ;
  int is_new_object1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"|O:mecaMAILx_WriteLastNodalForces",&obj0)) SWIG_fail;
  if (obj0) {
    {
      npy_intp size[1] = {
        -1 
      };
      array1 = obj_to_array_contiguous_allow_conversion(obj0,
        NPY_INT,
        &is_new_object1);
      if (!array1 || !require_dimensions(array1, 1) ||
        !require_size(array1, size, 1)) SWIG_fail;
      arg1 = (int*) array_data(array1);
      arg2 = (int) array_size(array1,0);
    }
  }
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      mecaMAILx_WriteLastNodalForces(arg1,arg2);
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_Py_Void();
  {
    if (is_new_object1 && array1)
    {
      Py_DECREF(array1); 
    }
  }
  return resultobj;
fail:
  {
    if (is_new_object1 && array1)
    {
      Py_DECREF(array1); 
    }
  }
  return NULL;
}


SWIGINTERN PyObject *_wrap_mecaMAILx_WriteOutNodalForces(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  int *arg1 = (int *) NULL ;
  int arg2 = (int) 0 ;
  PyArrayObject *array1 = NULL ;
  int is_new_object1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"|O:mecaMAILx_WriteOutNodalForces",&obj0)) SWIG_fail;
  if (obj0) {
    {
      npy_intp size[1] = {
        -1 
      };
      array1 = obj_to_array_contiguous_allow_conversion(obj0,
        NPY_INT,
        &is_new_object1);
      if (!array1 || !require_dimensions(array1, 1) ||
        !require_size(array1, size, 1)) SWIG_fail;
      arg1 = (int*) array_data(array1);
      arg2 = (int) array_size(array1,0);
    }
  }
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      mecaMAILx_WriteOutNodalForces(arg1,arg2);
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_Py_Void();
  {
    if (is_new_object1 && array1)
    {
      Py_DECREF(array1); 
    }
  }
  return resultobj;
fail:
  {
    if (is_new_object1 && array1)
    {
      Py_DECREF(array1); 
    }
  }
  return NULL;
}


SWIGINTERN PyObject *_wrap_mecaMAILx_DisplayOutNodalForces(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  int *arg1 = (int *) NULL ;
  int arg2 = (int) 0 ;
  PyArrayObject *array1 = NULL ;
  int is_new_object1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"|O:mecaMAILx_DisplayOutNodalForces",&obj0)) SWIG_fail;
  if (obj0) {
    {
      npy_intp size[1] = {
        -1 
      };
      array1 = obj_to_array_contiguous_allow_conversion(obj0,
        NPY_INT,
        &is_new_object1);
      if (!array1 || !require_dimensions(array1, 1) ||
        !require_size(array1, size, 1)) SWIG_fail;
      arg1 = (int*) array_data(array1);
      arg2 = (int) array_size(array1,0);
    }
  }
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      mecaMAILx_DisplayOutNodalForces(arg1,arg2);
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_Py_Void();
  {
    if (is_new_object1 && array1)
    {
      Py_DECREF(array1); 
    }
  }
  return resultobj;
fail:
  {
    if (is_new_object1 && array1)
    {
      Py_DECREF(array1); 
    }
  }
  return NULL;
}


SWIGINTERN PyObject *_wrap_mecaMAILx_GetScalarFieldRank(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  int arg1 ;
  int arg2 ;
  char *arg3 = (char *) 0 ;
  int val1 ;
  int ecode1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int res3 ;
  char *buf3 = 0 ;
  int alloc3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:mecaMAILx_GetScalarFieldRank",&obj0,&obj1,&obj2)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "mecaMAILx_GetScalarFieldRank" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = static_cast< int >(val1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "mecaMAILx_GetScalarFieldRank" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  res3 = SWIG_AsCharPtrAndSize(obj2, &buf3, NULL, &alloc3);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "mecaMAILx_GetScalarFieldRank" "', argument " "3"" of type '" "char *""'");
  }
  arg3 = reinterpret_cast< char * >(buf3);
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      result = (int)mecaMAILx_GetScalarFieldRank(arg1,arg2,arg3);
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return resultobj;
fail:
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_mecaMAILx_SetScalarFieldByNode(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  int arg1 ;
  int arg2 ;
  double *arg3 = (double *) 0 ;
  int arg4 ;
  int val1 ;
  int ecode1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyArrayObject *array3 = NULL ;
  int is_new_object3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:mecaMAILx_SetScalarFieldByNode",&obj0,&obj1,&obj2)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "mecaMAILx_SetScalarFieldByNode" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = static_cast< int >(val1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "mecaMAILx_SetScalarFieldByNode" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    npy_intp size[1] = {
      -1 
    };
    array3 = obj_to_array_contiguous_allow_conversion(obj2,
      NPY_DOUBLE,
      &is_new_object3);
    if (!array3 || !require_dimensions(array3, 1) ||
      !require_size(array3, size, 1)) SWIG_fail;
    arg3 = (double*) array_data(array3);
    arg4 = (int) array_size(array3,0);
  }
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      mecaMAILx_SetScalarFieldByNode(arg1,arg2,arg3,arg4);
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_Py_Void();
  {
    if (is_new_object3 && array3)
    {
      Py_DECREF(array3); 
    }
  }
  return resultobj;
fail:
  {
    if (is_new_object3 && array3)
    {
      Py_DECREF(array3); 
    }
  }
  return NULL;
}


SWIGINTERN PyObject *_wrap_mecaMAILx_SetScalarFieldByElement(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  int arg1 ;
  int arg2 ;
  double *arg3 = (double *) 0 ;
  int arg4 ;
  int val1 ;
  int ecode1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyArrayObject *array3 = NULL ;
  int is_new_object3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:mecaMAILx_SetScalarFieldByElement",&obj0,&obj1,&obj2)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "mecaMAILx_SetScalarFieldByElement" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = static_cast< int >(val1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "mecaMAILx_SetScalarFieldByElement" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    npy_intp size[1] = {
      -1 
    };
    array3 = obj_to_array_contiguous_allow_conversion(obj2,
      NPY_DOUBLE,
      &is_new_object3);
    if (!array3 || !require_dimensions(array3, 1) ||
      !require_size(array3, size, 1)) SWIG_fail;
    arg3 = (double*) array_data(array3);
    arg4 = (int) array_size(array3,0);
  }
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      mecaMAILx_SetScalarFieldByElement(arg1,arg2,arg3,arg4);
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_Py_Void();
  {
    if (is_new_object3 && array3)
    {
      Py_DECREF(array3); 
    }
  }
  return resultobj;
fail:
  {
    if (is_new_object3 && array3)
    {
      Py_DECREF(array3); 
    }
  }
  return NULL;
}


SWIGINTERN PyObject *_wrap_mecaMAILx_GetVectorFieldRank(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  int arg1 ;
  int arg2 ;
  char *arg3 = (char *) 0 ;
  int val1 ;
  int ecode1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int res3 ;
  char *buf3 = 0 ;
  int alloc3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:mecaMAILx_GetVectorFieldRank",&obj0,&obj1,&obj2)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "mecaMAILx_GetVectorFieldRank" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = static_cast< int >(val1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "mecaMAILx_GetVectorFieldRank" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  res3 = SWIG_AsCharPtrAndSize(obj2, &buf3, NULL, &alloc3);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "mecaMAILx_GetVectorFieldRank" "', argument " "3"" of type '" "char *""'");
  }
  arg3 = reinterpret_cast< char * >(buf3);
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      result = (int)mecaMAILx_GetVectorFieldRank(arg1,arg2,arg3);
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return resultobj;
fail:
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_mecaMAILx_SetVectorFieldByNode(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  int arg1 ;
  int arg2 ;
  double *arg3 = (double *) 0 ;
  int arg4 ;
  int arg5 ;
  int val1 ;
  int ecode1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyArrayObject *array3 = NULL ;
  int is_new_object3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:mecaMAILx_SetVectorFieldByNode",&obj0,&obj1,&obj2)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "mecaMAILx_SetVectorFieldByNode" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = static_cast< int >(val1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "mecaMAILx_SetVectorFieldByNode" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    npy_intp size[2] = {
      -1, -1 
    };
    array3 = obj_to_array_contiguous_allow_conversion(obj2, NPY_DOUBLE,
      &is_new_object3);
    if (!array3 || !require_dimensions(array3, 2) ||
      !require_size(array3, size, 2)) SWIG_fail;
    arg3 = (double*) array_data(array3);
    arg4 = (int) array_size(array3,0);
    arg5 = (int) array_size(array3,1);
  }
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      mecaMAILx_SetVectorFieldByNode(arg1,arg2,arg3,arg4,arg5);
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_Py_Void();
  {
    if (is_new_object3 && array3)
    {
      Py_DECREF(array3); 
    }
  }
  return resultobj;
fail:
  {
    if (is_new_object3 && array3)
    {
      Py_DECREF(array3); 
    }
  }
  return NULL;
}


SWIGINTERN PyObject *_wrap_mecaMAILx_SetVectorFieldByElement(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  int arg1 ;
  int arg2 ;
  double *arg3 = (double *) 0 ;
  int arg4 ;
  int arg5 ;
  int val1 ;
  int ecode1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyArrayObject *array3 = NULL ;
  int is_new_object3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:mecaMAILx_SetVectorFieldByElement",&obj0,&obj1,&obj2)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "mecaMAILx_SetVectorFieldByElement" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = static_cast< int >(val1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "mecaMAILx_SetVectorFieldByElement" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    npy_intp size[2] = {
      -1, -1 
    };
    array3 = obj_to_array_contiguous_allow_conversion(obj2, NPY_DOUBLE,
      &is_new_object3);
    if (!array3 || !require_dimensions(array3, 2) ||
      !require_size(array3, size, 2)) SWIG_fail;
    arg3 = (double*) array_data(array3);
    arg4 = (int) array_size(array3,0);
    arg5 = (int) array_size(array3,1);
  }
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      mecaMAILx_SetVectorFieldByElement(arg1,arg2,arg3,arg4,arg5);
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_Py_Void();
  {
    if (is_new_object3 && array3)
    {
      Py_DECREF(array3); 
    }
  }
  return resultobj;
fail:
  {
    if (is_new_object3 && array3)
    {
      Py_DECREF(array3); 
    }
  }
  return NULL;
}


SWIGINTERN PyObject *_wrap_mecaMAILx_Terminate(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  
  if (!PyArg_ParseTuple(args,(char *)":mecaMAILx_Terminate")) SWIG_fail;
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      mecaMAILx_Terminate();
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_mecaMAILx_ComputeOrthoFrame(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  int *arg1 = (int *) NULL ;
  int arg2 = (int) 0 ;
  PyArrayObject *array1 = NULL ;
  int is_new_object1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"|O:mecaMAILx_ComputeOrthoFrame",&obj0)) SWIG_fail;
  if (obj0) {
    {
      npy_intp size[1] = {
        -1 
      };
      array1 = obj_to_array_contiguous_allow_conversion(obj0,
        NPY_INT,
        &is_new_object1);
      if (!array1 || !require_dimensions(array1, 1) ||
        !require_size(array1, size, 1)) SWIG_fail;
      arg1 = (int*) array_data(array1);
      arg2 = (int) array_size(array1,0);
    }
  }
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      mecaMAILx_ComputeOrthoFrame(arg1,arg2);
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_Py_Void();
  {
    if (is_new_object1 && array1)
    {
      Py_DECREF(array1); 
    }
  }
  return resultobj;
fail:
  {
    if (is_new_object1 && array1)
    {
      Py_DECREF(array1); 
    }
  }
  return NULL;
}


SWIGINTERN PyObject *_wrap_mecaMAILx_ComputeUserField(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  int arg1 ;
  int *arg2 = (int *) NULL ;
  int arg3 = (int) 0 ;
  int val1 ;
  int ecode1 = 0 ;
  PyArrayObject *array2 = NULL ;
  int is_new_object2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O|O:mecaMAILx_ComputeUserField",&obj0,&obj1)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "mecaMAILx_ComputeUserField" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = static_cast< int >(val1);
  if (obj1) {
    {
      npy_intp size[1] = {
        -1 
      };
      array2 = obj_to_array_contiguous_allow_conversion(obj1,
        NPY_INT,
        &is_new_object2);
      if (!array2 || !require_dimensions(array2, 1) ||
        !require_size(array2, size, 1)) SWIG_fail;
      arg2 = (int*) array_data(array2);
      arg3 = (int) array_size(array2,0);
    }
  }
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      mecaMAILx_ComputeUserField(arg1,arg2,arg3);
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_Py_Void();
  {
    if (is_new_object2 && array2)
    {
      Py_DECREF(array2); 
    }
  }
  return resultobj;
fail:
  {
    if (is_new_object2 && array2)
    {
      Py_DECREF(array2); 
    }
  }
  return NULL;
}


SWIGINTERN PyObject *_wrap_mecaMAILx_SetVisible(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  int arg1 ;
  int val1 ;
  int ecode1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:mecaMAILx_SetVisible",&obj0)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "mecaMAILx_SetVisible" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = static_cast< int >(val1);
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      mecaMAILx_SetVisible(arg1);
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_mecaMAILx_SetInvisible(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  int arg1 ;
  int val1 ;
  int ecode1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:mecaMAILx_SetInvisible",&obj0)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "mecaMAILx_SetInvisible" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = static_cast< int >(val1);
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      mecaMAILx_SetInvisible(arg1);
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_mecaMAILx_IsVisible(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  int arg1 ;
  int val1 ;
  int ecode1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:mecaMAILx_IsVisible",&obj0)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "mecaMAILx_IsVisible" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = static_cast< int >(val1);
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      result = (int)mecaMAILx_IsVisible(arg1);
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_mecaMAILx_ComputeRayleighDamping(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  double arg1 ;
  double arg2 ;
  int *arg3 = (int *) NULL ;
  int arg4 = (int) 0 ;
  double val1 ;
  int ecode1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyArrayObject *array3 = NULL ;
  int is_new_object3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO|O:mecaMAILx_ComputeRayleighDamping",&obj0,&obj1,&obj2)) SWIG_fail;
  ecode1 = SWIG_AsVal_double(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "mecaMAILx_ComputeRayleighDamping" "', argument " "1"" of type '" "double""'");
  } 
  arg1 = static_cast< double >(val1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "mecaMAILx_ComputeRayleighDamping" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  if (obj2) {
    {
      npy_intp size[1] = {
        -1 
      };
      array3 = obj_to_array_contiguous_allow_conversion(obj2,
        NPY_INT,
        &is_new_object3);
      if (!array3 || !require_dimensions(array3, 1) ||
        !require_size(array3, size, 1)) SWIG_fail;
      arg3 = (int*) array_data(array3);
      arg4 = (int) array_size(array3,0);
    }
  }
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      mecaMAILx_ComputeRayleighDamping(arg1,arg2,arg3,arg4);
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_Py_Void();
  {
    if (is_new_object3 && array3)
    {
      Py_DECREF(array3); 
    }
  }
  return resultobj;
fail:
  {
    if (is_new_object3 && array3)
    {
      Py_DECREF(array3); 
    }
  }
  return NULL;
}


SWIGINTERN PyObject *_wrap_mecaMAILx_ComputeRayleighDampingDiscreteElement(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  double arg1 ;
  int *arg2 = (int *) NULL ;
  int arg3 = (int) 0 ;
  double val1 ;
  int ecode1 = 0 ;
  PyArrayObject *array2 = NULL ;
  int is_new_object2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O|O:mecaMAILx_ComputeRayleighDampingDiscreteElement",&obj0,&obj1)) SWIG_fail;
  ecode1 = SWIG_AsVal_double(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "mecaMAILx_ComputeRayleighDampingDiscreteElement" "', argument " "1"" of type '" "double""'");
  } 
  arg1 = static_cast< double >(val1);
  if (obj1) {
    {
      npy_intp size[1] = {
        -1 
      };
      array2 = obj_to_array_contiguous_allow_conversion(obj1,
        NPY_INT,
        &is_new_object2);
      if (!array2 || !require_dimensions(array2, 1) ||
        !require_size(array2, size, 1)) SWIG_fail;
      arg2 = (int*) array_data(array2);
      arg3 = (int) array_size(array2,0);
    }
  }
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      mecaMAILx_ComputeRayleighDampingDiscreteElement(arg1,arg2,arg3);
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_Py_Void();
  {
    if (is_new_object2 && array2)
    {
      Py_DECREF(array2); 
    }
  }
  return resultobj;
fail:
  {
    if (is_new_object2 && array2)
    {
      Py_DECREF(array2); 
    }
  }
  return NULL;
}


SWIGINTERN PyObject *_wrap_mecaMAILx_GetNodeCoorTT(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  int arg1 ;
  int arg2 ;
  double **arg3 = (double **) 0 ;
  int *arg4 = (int *) 0 ;
  int val1 ;
  int ecode1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  double *data_temp3 ;
  int dim_temp3 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  {
    arg3 = &data_temp3;
    arg4 = &dim_temp3;
  }
  if (!PyArg_ParseTuple(args,(char *)"OO:mecaMAILx_GetNodeCoorTT",&obj0,&obj1)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "mecaMAILx_GetNodeCoorTT" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = static_cast< int >(val1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "mecaMAILx_GetNodeCoorTT" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      mecaMAILx_GetNodeCoorTT(arg1,arg2,arg3,arg4);
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_Py_Void();
  {
    npy_intp dims[1] = {
      *arg4 
    };
    PyObject * obj = PyArray_SimpleNewFromData(1, dims, NPY_DOUBLE, (void*)(*arg3));
    if (!obj) SWIG_fail;
    PyArrayObject * array = (PyArrayObject*) obj;
    attach_fortran_memory_to_numpy_array(array, (void*)(*arg3), NPY_DOUBLE, dims[0], 0);
    PyArray_ENABLEFLAGS(array,NPY_ARRAY_WRITEABLE);
    
    resultobj = SWIG_Python_AppendOutput(resultobj, obj);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_mecaMAILx_GetNodeCooref(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  int arg1 ;
  int arg2 ;
  double **arg3 = (double **) 0 ;
  int *arg4 = (int *) 0 ;
  int val1 ;
  int ecode1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  double *data_temp3 ;
  int dim_temp3 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  {
    arg3 = &data_temp3;
    arg4 = &dim_temp3;
  }
  if (!PyArg_ParseTuple(args,(char *)"OO:mecaMAILx_GetNodeCooref",&obj0,&obj1)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "mecaMAILx_GetNodeCooref" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = static_cast< int >(val1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "mecaMAILx_GetNodeCooref" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      mecaMAILx_GetNodeCooref(arg1,arg2,arg3,arg4);
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_Py_Void();
  {
    npy_intp dims[1] = {
      *arg4 
    };
    PyObject * obj = PyArray_SimpleNewFromData(1, dims, NPY_DOUBLE, (void*)(*arg3));
    if (!obj) SWIG_fail;
    PyArrayObject * array = (PyArrayObject*) obj;
    attach_fortran_memory_to_numpy_array(array, (void*)(*arg3), NPY_DOUBLE, dims[0], 0);
    PyArray_ENABLEFLAGS(array,NPY_ARRAY_WRITEABLE);
    
    resultobj = SWIG_Python_AppendOutput(resultobj, obj);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_mecaMAILx_GetBodyMatrix(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  char *arg1 = (char *) 0 ;
  int arg2 ;
  double **arg3 = (double **) 0 ;
  int *arg4 = (int *) 0 ;
  int *arg5 = (int *) 0 ;
  int res1 ;
  char *buf1 = 0 ;
  int alloc1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  double *data_temp3 ;
  int dim1_temp3 ;
  int dim2_temp3 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  {
    arg3 = &data_temp3;
    arg4 = &dim1_temp3;
    arg5 = &dim2_temp3;
  }
  if (!PyArg_ParseTuple(args,(char *)"OO:mecaMAILx_GetBodyMatrix",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_AsCharPtrAndSize(obj0, &buf1, NULL, &alloc1);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "mecaMAILx_GetBodyMatrix" "', argument " "1"" of type '" "char *""'");
  }
  arg1 = reinterpret_cast< char * >(buf1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "mecaMAILx_GetBodyMatrix" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      mecaMAILx_GetBodyMatrix(arg1,arg2,arg3,arg4,arg5);
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_Py_Void();
  {
    npy_intp dims[2] = {
      *arg5, *arg4 
    };
    PyObject * obj = PyArray_SimpleNewFromData(2, dims, NPY_DOUBLE, (void*)(*arg3));
    if (!obj) SWIG_fail;
    PyArrayObject * array = (PyArrayObject*) obj;
    attach_fortran_memory_to_numpy_array(array, (void*)(*arg3), NPY_DOUBLE, dims[1], dims[0]);
    PyArray_ENABLEFLAGS(array,NPY_ARRAY_WRITEABLE);
    resultobj = SWIG_Python_AppendOutput(resultobj, obj);
  }
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  return resultobj;
fail:
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  return NULL;
}


SWIGINTERN PyObject *_wrap_mecaMAILx_getDrvVlocy(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  int arg1 ;
  int **arg2 = (int **) 0 ;
  int *arg3 = (int *) 0 ;
  double **arg4 = (double **) 0 ;
  int *arg5 = (int *) 0 ;
  int val1 ;
  int ecode1 = 0 ;
  int *data_temp2 ;
  int dim_temp2 ;
  double *data_temp4 ;
  int dim_temp4 ;
  PyObject * obj0 = 0 ;
  
  {
    arg2 = &data_temp2;
    arg3 = &dim_temp2;
  }
  {
    arg4 = &data_temp4;
    arg5 = &dim_temp4;
  }
  if (!PyArg_ParseTuple(args,(char *)"O:mecaMAILx_getDrvVlocy",&obj0)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "mecaMAILx_getDrvVlocy" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = static_cast< int >(val1);
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      mecaMAILx_getDrvVlocy(arg1,arg2,arg3,arg4,arg5);
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_Py_Void();
  {
    npy_intp dims[1] = {
      *arg3 
    };
    PyObject * obj = PyArray_SimpleNewFromData(1, dims, NPY_INT, (void*)(*arg2));
    if (!obj) SWIG_fail;
    PyArrayObject * array = (PyArrayObject*) obj;
    attach_fortran_memory_to_numpy_array(array, (void*)(*arg2), NPY_INT, dims[0], 0);
    PyArray_ENABLEFLAGS(array,NPY_ARRAY_WRITEABLE);
    
    resultobj = SWIG_Python_AppendOutput(resultobj, obj);
  }
  {
    npy_intp dims[1] = {
      *arg5 
    };
    PyObject * obj = PyArray_SimpleNewFromData(1, dims, NPY_DOUBLE, (void*)(*arg4));
    if (!obj) SWIG_fail;
    PyArrayObject * array = (PyArrayObject*) obj;
    attach_fortran_memory_to_numpy_array(array, (void*)(*arg4), NPY_DOUBLE, dims[0], 0);
    PyArray_ENABLEFLAGS(array,NPY_ARRAY_WRITEABLE);
    
    resultobj = SWIG_Python_AppendOutput(resultobj, obj);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_mecaMAILx_computeDrvVlocy(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  int arg1 ;
  double *arg2 = (double *) 0 ;
  int arg3 ;
  int val1 ;
  int ecode1 = 0 ;
  PyArrayObject *array2 = NULL ;
  int is_new_object2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:mecaMAILx_computeDrvVlocy",&obj0,&obj1)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "mecaMAILx_computeDrvVlocy" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = static_cast< int >(val1);
  {
    npy_intp size[1] = {
      -1 
    };
    array2 = obj_to_array_contiguous_allow_conversion(obj1,
      NPY_DOUBLE,
      &is_new_object2);
    if (!array2 || !require_dimensions(array2, 1) ||
      !require_size(array2, size, 1)) SWIG_fail;
    arg2 = (double*) array_data(array2);
    arg3 = (int) array_size(array2,0);
  }
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      mecaMAILx_computeDrvVlocy(arg1,arg2,arg3);
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_Py_Void();
  {
    if (is_new_object2 && array2)
    {
      Py_DECREF(array2); 
    }
  }
  return resultobj;
fail:
  {
    if (is_new_object2 && array2)
    {
      Py_DECREF(array2); 
    }
  }
  return NULL;
}


SWIGINTERN PyObject *_wrap_mecaMAILx_SetVlocyDrivenDof(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  int arg1 ;
  int arg2 ;
  int arg3 ;
  double arg4 ;
  int val1 ;
  int ecode1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  double val4 ;
  int ecode4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:mecaMAILx_SetVlocyDrivenDof",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "mecaMAILx_SetVlocyDrivenDof" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = static_cast< int >(val1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "mecaMAILx_SetVlocyDrivenDof" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "mecaMAILx_SetVlocyDrivenDof" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  ecode4 = SWIG_AsVal_double(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "mecaMAILx_SetVlocyDrivenDof" "', argument " "4"" of type '" "double""'");
  } 
  arg4 = static_cast< double >(val4);
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      mecaMAILx_SetVlocyDrivenDof(arg1,arg2,arg3,arg4);
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_mecaMAILx_ComputeContactDetectionConfiguration(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  int *arg1 = (int *) NULL ;
  int arg2 = (int) 0 ;
  PyArrayObject *array1 = NULL ;
  int is_new_object1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"|O:mecaMAILx_ComputeContactDetectionConfiguration",&obj0)) SWIG_fail;
  if (obj0) {
    {
      npy_intp size[1] = {
        -1 
      };
      array1 = obj_to_array_contiguous_allow_conversion(obj0,
        NPY_INT,
        &is_new_object1);
      if (!array1 || !require_dimensions(array1, 1) ||
        !require_size(array1, size, 1)) SWIG_fail;
      arg1 = (int*) array_data(array1);
      arg2 = (int) array_size(array1,0);
    }
  }
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      mecaMAILx_ComputeContactDetectionConfiguration(arg1,arg2);
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_Py_Void();
  {
    if (is_new_object1 && array1)
    {
      Py_DECREF(array1); 
    }
  }
  return resultobj;
fail:
  {
    if (is_new_object1 && array1)
    {
      Py_DECREF(array1); 
    }
  }
  return NULL;
}


SWIGINTERN PyObject *_wrap_mecaMAILx_NullifyReac(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  char *arg1 = (char *) 0 ;
  int arg2 ;
  int res1 ;
  char *buf1 = 0 ;
  int alloc1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:mecaMAILx_NullifyReac",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_AsCharPtrAndSize(obj0, &buf1, NULL, &alloc1);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "mecaMAILx_NullifyReac" "', argument " "1"" of type '" "char *""'");
  }
  arg1 = reinterpret_cast< char * >(buf1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "mecaMAILx_NullifyReac" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      mecaMAILx_NullifyReac(arg1,arg2);
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_Py_Void();
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  return resultobj;
fail:
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  return NULL;
}


SWIGINTERN PyObject *_wrap_mecaMAILx_GetAll(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  int arg1 ;
  double **arg2 = (double **) 0 ;
  int *arg3 = (int *) 0 ;
  int *arg4 = (int *) 0 ;
  int val1 ;
  int ecode1 = 0 ;
  double *data_temp2 ;
  int dim1_temp2 ;
  int dim2_temp2 ;
  PyObject * obj0 = 0 ;
  
  {
    arg2 = &data_temp2;
    arg3 = &dim1_temp2;
    arg4 = &dim2_temp2;
  }
  if (!PyArg_ParseTuple(args,(char *)"O:mecaMAILx_GetAll",&obj0)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "mecaMAILx_GetAll" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = static_cast< int >(val1);
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      mecaMAILx_GetAll(arg1,arg2,arg3,arg4);
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_Py_Void();
  {
    npy_intp dims[2] = {
      *arg4, *arg3 
    };
    PyObject * obj = PyArray_SimpleNewFromData(2, dims, NPY_DOUBLE, (void*)(*arg2));
    if (!obj) SWIG_fail;
    PyArrayObject * array = (PyArrayObject*) obj;
    attach_fortran_memory_to_numpy_array(array, (void*)(*arg2), NPY_DOUBLE, dims[1], dims[0]);
    PyArray_ENABLEFLAGS(array,NPY_ARRAY_WRITEABLE);
    resultobj = SWIG_Python_AppendOutput(resultobj, obj);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_mecaMAILx_GetCooref(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  int arg1 ;
  double **arg2 = (double **) 0 ;
  int *arg3 = (int *) 0 ;
  int *arg4 = (int *) 0 ;
  int val1 ;
  int ecode1 = 0 ;
  double *data_temp2 ;
  int dim1_temp2 ;
  int dim2_temp2 ;
  PyObject * obj0 = 0 ;
  
  {
    arg2 = &data_temp2;
    arg3 = &dim1_temp2;
    arg4 = &dim2_temp2;
  }
  if (!PyArg_ParseTuple(args,(char *)"O:mecaMAILx_GetCooref",&obj0)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "mecaMAILx_GetCooref" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = static_cast< int >(val1);
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      mecaMAILx_GetCooref(arg1,arg2,arg3,arg4);
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_Py_Void();
  {
    npy_intp dims[2] = {
      *arg4, *arg3 
    };
    PyObject * obj = PyArray_SimpleNewFromData(2, dims, NPY_DOUBLE, (void*)(*arg2));
    if (!obj) SWIG_fail;
    PyArrayObject * array = (PyArrayObject*) obj;
    attach_fortran_memory_to_numpy_array(array, (void*)(*arg2), NPY_DOUBLE, dims[1], dims[0]);
    PyArray_ENABLEFLAGS(array,NPY_ARRAY_WRITEABLE);
    resultobj = SWIG_Python_AppendOutput(resultobj, obj);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_mecaMAILx_GetConnectivity(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  int arg1 ;
  int **arg2 = (int **) 0 ;
  int *arg3 = (int *) 0 ;
  int val1 ;
  int ecode1 = 0 ;
  int *data_temp2 ;
  int dim_temp2 ;
  PyObject * obj0 = 0 ;
  
  {
    arg2 = &data_temp2;
    arg3 = &dim_temp2;
  }
  if (!PyArg_ParseTuple(args,(char *)"O:mecaMAILx_GetConnectivity",&obj0)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "mecaMAILx_GetConnectivity" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = static_cast< int >(val1);
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      mecaMAILx_GetConnectivity(arg1,arg2,arg3);
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_Py_Void();
  {
    npy_intp dims[1] = {
      *arg3 
    };
    PyObject * obj = PyArray_SimpleNewFromData(1, dims, NPY_INT, (void*)(*arg2));
    if (!obj) SWIG_fail;
    PyArrayObject * array = (PyArrayObject*) obj;
    attach_fortran_memory_to_numpy_array(array, (void*)(*arg2), NPY_INT, dims[0], 0);
    PyArray_ENABLEFLAGS(array,NPY_ARRAY_WRITEABLE);
    
    resultobj = SWIG_Python_AppendOutput(resultobj, obj);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_mecaMAILx_GetElementsVolume(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  int arg1 ;
  double **arg2 = (double **) 0 ;
  int *arg3 = (int *) 0 ;
  int val1 ;
  int ecode1 = 0 ;
  double *data_temp2 ;
  int dim_temp2 ;
  PyObject * obj0 = 0 ;
  
  {
    arg2 = &data_temp2;
    arg3 = &dim_temp2;
  }
  if (!PyArg_ParseTuple(args,(char *)"O:mecaMAILx_GetElementsVolume",&obj0)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "mecaMAILx_GetElementsVolume" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = static_cast< int >(val1);
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      mecaMAILx_GetElementsVolume(arg1,arg2,arg3);
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_Py_Void();
  {
    npy_intp dims[1] = {
      *arg3 
    };
    PyObject * obj = PyArray_SimpleNewFromData(1, dims, NPY_DOUBLE, (void*)(*arg2));
    if (!obj) SWIG_fail;
    PyArrayObject * array = (PyArrayObject*) obj;
    attach_fortran_memory_to_numpy_array(array, (void*)(*arg2), NPY_DOUBLE, dims[0], 0);
    PyArray_ENABLEFLAGS(array,NPY_ARRAY_WRITEABLE);
    
    resultobj = SWIG_Python_AppendOutput(resultobj, obj);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_mecaMAILx_GetGpCoor(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  int arg1 ;
  double **arg2 = (double **) 0 ;
  int *arg3 = (int *) 0 ;
  int *arg4 = (int *) 0 ;
  int val1 ;
  int ecode1 = 0 ;
  double *data_temp2 ;
  int dim1_temp2 ;
  int dim2_temp2 ;
  PyObject * obj0 = 0 ;
  
  {
    arg2 = &data_temp2;
    arg3 = &dim1_temp2;
    arg4 = &dim2_temp2;
  }
  if (!PyArg_ParseTuple(args,(char *)"O:mecaMAILx_GetGpCoor",&obj0)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "mecaMAILx_GetGpCoor" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = static_cast< int >(val1);
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      mecaMAILx_GetGpCoor(arg1,arg2,arg3,arg4);
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_Py_Void();
  {
    npy_intp dims[2] = {
      *arg4, *arg3 
    };
    PyObject * obj = PyArray_SimpleNewFromData(2, dims, NPY_DOUBLE, (void*)(*arg2));
    if (!obj) SWIG_fail;
    PyArrayObject * array = (PyArrayObject*) obj;
    attach_fortran_memory_to_numpy_array(array, (void*)(*arg2), NPY_DOUBLE, dims[1], dims[0]);
    PyArray_ENABLEFLAGS(array,NPY_ARRAY_WRITEABLE);
    resultobj = SWIG_Python_AppendOutput(resultobj, obj);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_mecaMAILx_GetGpStrain(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  int arg1 ;
  int arg2 ;
  int arg3 ;
  double **arg4 = (double **) 0 ;
  int *arg5 = (int *) 0 ;
  int val1 ;
  int ecode1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  double *data_temp4 ;
  int dim_temp4 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  {
    arg4 = &data_temp4;
    arg5 = &dim_temp4;
  }
  if (!PyArg_ParseTuple(args,(char *)"OOO:mecaMAILx_GetGpStrain",&obj0,&obj1,&obj2)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "mecaMAILx_GetGpStrain" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = static_cast< int >(val1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "mecaMAILx_GetGpStrain" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "mecaMAILx_GetGpStrain" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      mecaMAILx_GetGpStrain(arg1,arg2,arg3,arg4,arg5);
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_Py_Void();
  {
    npy_intp dims[1] = {
      *arg5 
    };
    PyObject * obj = PyArray_SimpleNewFromData(1, dims, NPY_DOUBLE, (void*)(*arg4));
    if (!obj) SWIG_fail;
    PyArrayObject * array = (PyArrayObject*) obj;
    attach_fortran_memory_to_numpy_array(array, (void*)(*arg4), NPY_DOUBLE, dims[0], 0);
    PyArray_ENABLEFLAGS(array,NPY_ARRAY_WRITEABLE);
    
    resultobj = SWIG_Python_AppendOutput(resultobj, obj);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_mecaMAILx_GetGpStress(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  int arg1 ;
  int arg2 ;
  int arg3 ;
  double **arg4 = (double **) 0 ;
  int *arg5 = (int *) 0 ;
  int val1 ;
  int ecode1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  double *data_temp4 ;
  int dim_temp4 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  {
    arg4 = &data_temp4;
    arg5 = &dim_temp4;
  }
  if (!PyArg_ParseTuple(args,(char *)"OOO:mecaMAILx_GetGpStress",&obj0,&obj1,&obj2)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "mecaMAILx_GetGpStress" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = static_cast< int >(val1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "mecaMAILx_GetGpStress" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "mecaMAILx_GetGpStress" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      mecaMAILx_GetGpStress(arg1,arg2,arg3,arg4,arg5);
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_Py_Void();
  {
    npy_intp dims[1] = {
      *arg5 
    };
    PyObject * obj = PyArray_SimpleNewFromData(1, dims, NPY_DOUBLE, (void*)(*arg4));
    if (!obj) SWIG_fail;
    PyArrayObject * array = (PyArrayObject*) obj;
    attach_fortran_memory_to_numpy_array(array, (void*)(*arg4), NPY_DOUBLE, dims[0], 0);
    PyArray_ENABLEFLAGS(array,NPY_ARRAY_WRITEABLE);
    
    resultobj = SWIG_Python_AppendOutput(resultobj, obj);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_mecaMAILx_GetGpInternals(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  int arg1 ;
  int arg2 ;
  int arg3 ;
  double **arg4 = (double **) 0 ;
  int *arg5 = (int *) 0 ;
  int val1 ;
  int ecode1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  double *data_temp4 ;
  int dim_temp4 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  {
    arg4 = &data_temp4;
    arg5 = &dim_temp4;
  }
  if (!PyArg_ParseTuple(args,(char *)"OOO:mecaMAILx_GetGpInternals",&obj0,&obj1,&obj2)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "mecaMAILx_GetGpInternals" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = static_cast< int >(val1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "mecaMAILx_GetGpInternals" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "mecaMAILx_GetGpInternals" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      mecaMAILx_GetGpInternals(arg1,arg2,arg3,arg4,arg5);
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_Py_Void();
  {
    npy_intp dims[1] = {
      *arg5 
    };
    PyObject * obj = PyArray_SimpleNewFromData(1, dims, NPY_DOUBLE, (void*)(*arg4));
    if (!obj) SWIG_fail;
    PyArrayObject * array = (PyArrayObject*) obj;
    attach_fortran_memory_to_numpy_array(array, (void*)(*arg4), NPY_DOUBLE, dims[0], 0);
    PyArray_ENABLEFLAGS(array,NPY_ARRAY_WRITEABLE);
    
    resultobj = SWIG_Python_AppendOutput(resultobj, obj);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_mecaMAILx_GetGpPrincipalField(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  int arg1 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  double **arg5 = (double **) 0 ;
  int *arg6 = (int *) 0 ;
  int *arg7 = (int *) 0 ;
  int val1 ;
  int ecode1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  double *data_temp5 ;
  int dim1_temp5 ;
  int dim2_temp5 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  
  {
    arg5 = &data_temp5;
    arg6 = &dim1_temp5;
    arg7 = &dim2_temp5;
  }
  if (!PyArg_ParseTuple(args,(char *)"OOOO:mecaMAILx_GetGpPrincipalField",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "mecaMAILx_GetGpPrincipalField" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = static_cast< int >(val1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "mecaMAILx_GetGpPrincipalField" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "mecaMAILx_GetGpPrincipalField" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  ecode4 = SWIG_AsVal_int(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "mecaMAILx_GetGpPrincipalField" "', argument " "4"" of type '" "int""'");
  } 
  arg4 = static_cast< int >(val4);
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      mecaMAILx_GetGpPrincipalField(arg1,arg2,arg3,arg4,arg5,arg6,arg7);
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_Py_Void();
  {
    npy_intp dims[2] = {
      *arg7, *arg6 
    };
    PyObject * obj = PyArray_SimpleNewFromData(2, dims, NPY_DOUBLE, (void*)(*arg5));
    if (!obj) SWIG_fail;
    PyArrayObject * array = (PyArrayObject*) obj;
    attach_fortran_memory_to_numpy_array(array, (void*)(*arg5), NPY_DOUBLE, dims[1], dims[0]);
    PyArray_ENABLEFLAGS(array,NPY_ARRAY_WRITEABLE);
    resultobj = SWIG_Python_AppendOutput(resultobj, obj);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_mecaMAILx_GetElementsInternal(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  int arg1 ;
  int arg2 ;
  int arg3 ;
  double **arg4 = (double **) 0 ;
  int *arg5 = (int *) 0 ;
  int val1 ;
  int ecode1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  double *data_temp4 ;
  int dim_temp4 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  {
    arg4 = &data_temp4;
    arg5 = &dim_temp4;
  }
  if (!PyArg_ParseTuple(args,(char *)"OOO:mecaMAILx_GetElementsInternal",&obj0,&obj1,&obj2)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "mecaMAILx_GetElementsInternal" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = static_cast< int >(val1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "mecaMAILx_GetElementsInternal" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "mecaMAILx_GetElementsInternal" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      mecaMAILx_GetElementsInternal(arg1,arg2,arg3,arg4,arg5);
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_Py_Void();
  {
    npy_intp dims[1] = {
      *arg5 
    };
    PyObject * obj = PyArray_SimpleNewFromData(1, dims, NPY_DOUBLE, (void*)(*arg4));
    if (!obj) SWIG_fail;
    PyArrayObject * array = (PyArrayObject*) obj;
    attach_fortran_memory_to_numpy_array(array, (void*)(*arg4), NPY_DOUBLE, dims[0], 0);
    PyArray_ENABLEFLAGS(array,NPY_ARRAY_WRITEABLE);
    
    resultobj = SWIG_Python_AppendOutput(resultobj, obj);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_mecaMAILx_GetElementsInternalIntegral(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  int arg1 ;
  int arg2 ;
  double **arg3 = (double **) 0 ;
  int *arg4 = (int *) 0 ;
  int val1 ;
  int ecode1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  double *data_temp3 ;
  int dim_temp3 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  {
    arg3 = &data_temp3;
    arg4 = &dim_temp3;
  }
  if (!PyArg_ParseTuple(args,(char *)"OO:mecaMAILx_GetElementsInternalIntegral",&obj0,&obj1)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "mecaMAILx_GetElementsInternalIntegral" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = static_cast< int >(val1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "mecaMAILx_GetElementsInternalIntegral" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      mecaMAILx_GetElementsInternalIntegral(arg1,arg2,arg3,arg4);
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_Py_Void();
  {
    npy_intp dims[1] = {
      *arg4 
    };
    PyObject * obj = PyArray_SimpleNewFromData(1, dims, NPY_DOUBLE, (void*)(*arg3));
    if (!obj) SWIG_fail;
    PyArrayObject * array = (PyArrayObject*) obj;
    attach_fortran_memory_to_numpy_array(array, (void*)(*arg3), NPY_DOUBLE, dims[0], 0);
    PyArray_ENABLEFLAGS(array,NPY_ARRAY_WRITEABLE);
    
    resultobj = SWIG_Python_AppendOutput(resultobj, obj);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_mecaMAILx_GetElementsCenter(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  int arg1 ;
  double **arg2 = (double **) 0 ;
  int *arg3 = (int *) 0 ;
  int val1 ;
  int ecode1 = 0 ;
  double *data_temp2 ;
  int dim_temp2 ;
  PyObject * obj0 = 0 ;
  
  {
    arg2 = &data_temp2;
    arg3 = &dim_temp2;
  }
  if (!PyArg_ParseTuple(args,(char *)"O:mecaMAILx_GetElementsCenter",&obj0)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "mecaMAILx_GetElementsCenter" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = static_cast< int >(val1);
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      mecaMAILx_GetElementsCenter(arg1,arg2,arg3);
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_Py_Void();
  {
    npy_intp dims[1] = {
      *arg3 
    };
    PyObject * obj = PyArray_SimpleNewFromData(1, dims, NPY_DOUBLE, (void*)(*arg2));
    if (!obj) SWIG_fail;
    PyArrayObject * array = (PyArrayObject*) obj;
    attach_fortran_memory_to_numpy_array(array, (void*)(*arg2), NPY_DOUBLE, dims[0], 0);
    PyArray_ENABLEFLAGS(array,NPY_ARRAY_WRITEABLE);
    
    resultobj = SWIG_Python_AppendOutput(resultobj, obj);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_mecaMAILx_GetElementsJacobian(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  int arg1 ;
  double **arg2 = (double **) 0 ;
  int *arg3 = (int *) 0 ;
  int val1 ;
  int ecode1 = 0 ;
  double *data_temp2 ;
  int dim_temp2 ;
  PyObject * obj0 = 0 ;
  
  {
    arg2 = &data_temp2;
    arg3 = &dim_temp2;
  }
  if (!PyArg_ParseTuple(args,(char *)"O:mecaMAILx_GetElementsJacobian",&obj0)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "mecaMAILx_GetElementsJacobian" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = static_cast< int >(val1);
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      mecaMAILx_GetElementsJacobian(arg1,arg2,arg3);
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_Py_Void();
  {
    npy_intp dims[1] = {
      *arg3 
    };
    PyObject * obj = PyArray_SimpleNewFromData(1, dims, NPY_DOUBLE, (void*)(*arg2));
    if (!obj) SWIG_fail;
    PyArrayObject * array = (PyArrayObject*) obj;
    attach_fortran_memory_to_numpy_array(array, (void*)(*arg2), NPY_DOUBLE, dims[0], 0);
    PyArray_ENABLEFLAGS(array,NPY_ARRAY_WRITEABLE);
    
    resultobj = SWIG_Python_AppendOutput(resultobj, obj);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_mecaMAILx_ComputeElementsEnergy(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  
  if (!PyArg_ParseTuple(args,(char *)":mecaMAILx_ComputeElementsEnergy")) SWIG_fail;
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      mecaMAILx_ComputeElementsEnergy();
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_mecaMAILx_GetPtrElementsEnergy(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  int arg1 ;
  double **arg2 = (double **) 0 ;
  int *arg3 = (int *) 0 ;
  int val1 ;
  int ecode1 = 0 ;
  double *data_temp2 = NULL ;
  int dim_temp2 ;
  PyObject * obj0 = 0 ;
  
  {
    arg2 = &data_temp2;
    arg3 = &dim_temp2;
  }
  if (!PyArg_ParseTuple(args,(char *)"O:mecaMAILx_GetPtrElementsEnergy",&obj0)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "mecaMAILx_GetPtrElementsEnergy" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = static_cast< int >(val1);
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      mecaMAILx_GetPtrElementsEnergy(arg1,arg2,arg3);
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_Py_Void();
  {
    npy_intp dims[1] = {
      *arg3 
    };
    PyObject* obj = PyArray_SimpleNewFromData(1, dims, NPY_DOUBLE, (void*)(*arg2));
    PyArrayObject* array = (PyArrayObject*) obj;
    
    if (!array) SWIG_fail;
    resultobj = SWIG_Python_AppendOutput(resultobj, obj);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_mecaMAILx_GetElementsNeighbor(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  int arg1 ;
  double arg2 ;
  int **arg3 = (int **) 0 ;
  int *arg4 = (int *) 0 ;
  int *arg5 = (int *) 0 ;
  int val1 ;
  int ecode1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  int *data_temp3 ;
  int dim1_temp3 ;
  int dim2_temp3 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  {
    arg3 = &data_temp3;
    arg4 = &dim1_temp3;
    arg5 = &dim2_temp3;
  }
  if (!PyArg_ParseTuple(args,(char *)"OO:mecaMAILx_GetElementsNeighbor",&obj0,&obj1)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "mecaMAILx_GetElementsNeighbor" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = static_cast< int >(val1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "mecaMAILx_GetElementsNeighbor" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      mecaMAILx_GetElementsNeighbor(arg1,arg2,arg3,arg4,arg5);
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_Py_Void();
  {
    npy_intp dims[2] = {
      *arg5, *arg4 
    };
    PyObject * obj = PyArray_SimpleNewFromData(2, dims, NPY_INT, (void*)(*arg3));
    if (!obj) SWIG_fail;
    PyArrayObject * array = (PyArrayObject*) obj;
    attach_fortran_memory_to_numpy_array(array, (void*)(*arg3), NPY_INT, dims[1], dims[0]);
    PyArray_ENABLEFLAGS(array,NPY_ARRAY_WRITEABLE);
    resultobj = SWIG_Python_AppendOutput(resultobj, obj);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_mecaMAILx_GetPtrElementsVisibility(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  int arg1 ;
  int **arg2 = (int **) 0 ;
  int *arg3 = (int *) 0 ;
  int val1 ;
  int ecode1 = 0 ;
  int *data_temp2 = NULL ;
  int dim_temp2 ;
  PyObject * obj0 = 0 ;
  
  {
    arg2 = &data_temp2;
    arg3 = &dim_temp2;
  }
  if (!PyArg_ParseTuple(args,(char *)"O:mecaMAILx_GetPtrElementsVisibility",&obj0)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "mecaMAILx_GetPtrElementsVisibility" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = static_cast< int >(val1);
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      mecaMAILx_GetPtrElementsVisibility(arg1,arg2,arg3);
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_Py_Void();
  {
    npy_intp dims[1] = {
      *arg3 
    };
    PyObject* obj = PyArray_SimpleNewFromData(1, dims, NPY_INT, (void*)(*arg2));
    PyArrayObject* array = (PyArrayObject*) obj;
    
    if (!array) SWIG_fail;
    resultobj = SWIG_Python_AppendOutput(resultobj, obj);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_mecaMAILx_AddNodalFieldDivergence(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  int arg1 ;
  int arg2 ;
  int val1 ;
  int ecode1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:mecaMAILx_AddNodalFieldDivergence",&obj0,&obj1)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "mecaMAILx_AddNodalFieldDivergence" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = static_cast< int >(val1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "mecaMAILx_AddNodalFieldDivergence" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      mecaMAILx_AddNodalFieldDivergence(arg1,arg2);
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_mecaMAILx_CleanMemory(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  
  if (!PyArg_ParseTuple(args,(char *)":mecaMAILx_CleanMemory")) SWIG_fail;
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      mecaMAILx_CleanMemory();
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_mecaMAILx_ComputeInfoPrincipalStressField(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  int arg1 ;
  double **arg2 = (double **) 0 ;
  int *arg3 = (int *) 0 ;
  int val1 ;
  int ecode1 = 0 ;
  double *data_temp2 ;
  int dim_temp2 ;
  PyObject * obj0 = 0 ;
  
  {
    arg2 = &data_temp2;
    arg3 = &dim_temp2;
  }
  if (!PyArg_ParseTuple(args,(char *)"O:mecaMAILx_ComputeInfoPrincipalStressField",&obj0)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "mecaMAILx_ComputeInfoPrincipalStressField" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = static_cast< int >(val1);
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      mecaMAILx_ComputeInfoPrincipalStressField(arg1,arg2,arg3);
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_Py_Void();
  {
    npy_intp dims[1] = {
      *arg3 
    };
    PyObject * obj = PyArray_SimpleNewFromData(1, dims, NPY_DOUBLE, (void*)(*arg2));
    if (!obj) SWIG_fail;
    PyArrayObject * array = (PyArrayObject*) obj;
    attach_fortran_memory_to_numpy_array(array, (void*)(*arg2), NPY_DOUBLE, dims[0], 0);
    PyArray_ENABLEFLAGS(array,NPY_ARRAY_WRITEABLE);
    
    resultobj = SWIG_Python_AppendOutput(resultobj, obj);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_mecaMAILx_ComputePDFPressure(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  double **arg1 = (double **) 0 ;
  int *arg2 = (int *) 0 ;
  double *data_temp1 ;
  int dim_temp1 ;
  
  {
    arg1 = &data_temp1;
    arg2 = &dim_temp1;
  }
  if (!PyArg_ParseTuple(args,(char *)":mecaMAILx_ComputePDFPressure")) SWIG_fail;
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      mecaMAILx_ComputePDFPressure(arg1,arg2);
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_Py_Void();
  {
    npy_intp dims[1] = {
      *arg2 
    };
    PyObject * obj = PyArray_SimpleNewFromData(1, dims, NPY_DOUBLE, (void*)(*arg1));
    if (!obj) SWIG_fail;
    PyArrayObject * array = (PyArrayObject*) obj;
    attach_fortran_memory_to_numpy_array(array, (void*)(*arg1), NPY_DOUBLE, dims[0], 0);
    PyArray_ENABLEFLAGS(array,NPY_ARRAY_WRITEABLE);
    
    resultobj = SWIG_Python_AppendOutput(resultobj, obj);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_mecaMAILx_GetDeformationEnergy(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  int arg1 ;
  double *arg2 = (double *) 0 ;
  int arg3 ;
  int val1 ;
  int ecode1 = 0 ;
  PyArrayObject *array2 = NULL ;
  int is_new_object2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:mecaMAILx_GetDeformationEnergy",&obj0,&obj1)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "mecaMAILx_GetDeformationEnergy" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = static_cast< int >(val1);
  {
    npy_intp size[1] = {
      -1 
    };
    array2 = obj_to_array_contiguous_allow_conversion(obj1,
      NPY_DOUBLE,
      &is_new_object2);
    if (!array2 || !require_dimensions(array2, 1) ||
      !require_size(array2, size, 1)) SWIG_fail;
    arg2 = (double*) array_data(array2);
    arg3 = (int) array_size(array2,0);
  }
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      result = (double)mecaMAILx_GetDeformationEnergy(arg1,arg2,arg3);
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  {
    if (is_new_object2 && array2)
    {
      Py_DECREF(array2); 
    }
  }
  return resultobj;
fail:
  {
    if (is_new_object2 && array2)
    {
      Py_DECREF(array2); 
    }
  }
  return NULL;
}


SWIGINTERN PyObject *_wrap_mecaMAILx_GetKineticEnergy(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  int arg1 ;
  double *arg2 = (double *) 0 ;
  int arg3 ;
  int val1 ;
  int ecode1 = 0 ;
  PyArrayObject *array2 = NULL ;
  int is_new_object2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:mecaMAILx_GetKineticEnergy",&obj0,&obj1)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "mecaMAILx_GetKineticEnergy" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = static_cast< int >(val1);
  {
    npy_intp size[1] = {
      -1 
    };
    array2 = obj_to_array_contiguous_allow_conversion(obj1,
      NPY_DOUBLE,
      &is_new_object2);
    if (!array2 || !require_dimensions(array2, 1) ||
      !require_size(array2, size, 1)) SWIG_fail;
    arg2 = (double*) array_data(array2);
    arg3 = (int) array_size(array2,0);
  }
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      result = (double)mecaMAILx_GetKineticEnergy(arg1,arg2,arg3);
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  {
    if (is_new_object2 && array2)
    {
      Py_DECREF(array2); 
    }
  }
  return resultobj;
fail:
  {
    if (is_new_object2 && array2)
    {
      Py_DECREF(array2); 
    }
  }
  return NULL;
}


SWIGINTERN PyObject *_wrap_mecaMAILx_GetNeighborElementsToElement(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  int arg1 ;
  int arg2 ;
  int **arg3 = (int **) 0 ;
  int *arg4 = (int *) 0 ;
  int val1 ;
  int ecode1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int *data_temp3 ;
  int dim_temp3 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  {
    arg3 = &data_temp3;
    arg4 = &dim_temp3;
  }
  if (!PyArg_ParseTuple(args,(char *)"OO:mecaMAILx_GetNeighborElementsToElement",&obj0,&obj1)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "mecaMAILx_GetNeighborElementsToElement" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = static_cast< int >(val1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "mecaMAILx_GetNeighborElementsToElement" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      mecaMAILx_GetNeighborElementsToElement(arg1,arg2,arg3,arg4);
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_Py_Void();
  {
    npy_intp dims[1] = {
      *arg4 
    };
    PyObject * obj = PyArray_SimpleNewFromData(1, dims, NPY_INT, (void*)(*arg3));
    if (!obj) SWIG_fail;
    PyArrayObject * array = (PyArrayObject*) obj;
    attach_fortran_memory_to_numpy_array(array, (void*)(*arg3), NPY_INT, dims[0], 0);
    PyArray_ENABLEFLAGS(array,NPY_ARRAY_WRITEABLE);
    
    resultobj = SWIG_Python_AppendOutput(resultobj, obj);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_mecaMAILx_GetNeighborElementsToNode(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  int arg1 ;
  int arg2 ;
  int **arg3 = (int **) 0 ;
  int *arg4 = (int *) 0 ;
  int val1 ;
  int ecode1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int *data_temp3 ;
  int dim_temp3 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  {
    arg3 = &data_temp3;
    arg4 = &dim_temp3;
  }
  if (!PyArg_ParseTuple(args,(char *)"OO:mecaMAILx_GetNeighborElementsToNode",&obj0,&obj1)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "mecaMAILx_GetNeighborElementsToNode" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = static_cast< int >(val1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "mecaMAILx_GetNeighborElementsToNode" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      mecaMAILx_GetNeighborElementsToNode(arg1,arg2,arg3,arg4);
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_Py_Void();
  {
    npy_intp dims[1] = {
      *arg4 
    };
    PyObject * obj = PyArray_SimpleNewFromData(1, dims, NPY_INT, (void*)(*arg3));
    if (!obj) SWIG_fail;
    PyArrayObject * array = (PyArrayObject*) obj;
    attach_fortran_memory_to_numpy_array(array, (void*)(*arg3), NPY_INT, dims[0], 0);
    PyArray_ENABLEFLAGS(array,NPY_ARRAY_WRITEABLE);
    
    resultobj = SWIG_Python_AppendOutput(resultobj, obj);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_mecaMAILx_GetBoundaryElements(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  int arg1 ;
  int **arg2 = (int **) 0 ;
  int *arg3 = (int *) 0 ;
  int val1 ;
  int ecode1 = 0 ;
  int *data_temp2 ;
  int dim_temp2 ;
  PyObject * obj0 = 0 ;
  
  {
    arg2 = &data_temp2;
    arg3 = &dim_temp2;
  }
  if (!PyArg_ParseTuple(args,(char *)"O:mecaMAILx_GetBoundaryElements",&obj0)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "mecaMAILx_GetBoundaryElements" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = static_cast< int >(val1);
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      mecaMAILx_GetBoundaryElements(arg1,arg2,arg3);
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_Py_Void();
  {
    npy_intp dims[1] = {
      *arg3 
    };
    PyObject * obj = PyArray_SimpleNewFromData(1, dims, NPY_INT, (void*)(*arg2));
    if (!obj) SWIG_fail;
    PyArrayObject * array = (PyArrayObject*) obj;
    attach_fortran_memory_to_numpy_array(array, (void*)(*arg2), NPY_INT, dims[0], 0);
    PyArray_ENABLEFLAGS(array,NPY_ARRAY_WRITEABLE);
    
    resultobj = SWIG_Python_AppendOutput(resultobj, obj);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_mecaMAILx_LoadWPreconBody(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  int arg1 ;
  int val1 ;
  int ecode1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:mecaMAILx_LoadWPreconBody",&obj0)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "mecaMAILx_LoadWPreconBody" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = static_cast< int >(val1);
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      mecaMAILx_LoadWPreconBody(arg1);
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_mecaMAILx_GetPtrPreconW(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  int arg1 ;
  double **arg2 = (double **) 0 ;
  int *arg3 = (int *) 0 ;
  int *arg4 = (int *) 0 ;
  int val1 ;
  int ecode1 = 0 ;
  double *data_temp2 ;
  int dim1_temp2 ;
  int dim2_temp2 ;
  PyObject * obj0 = 0 ;
  
  {
    arg2 = &data_temp2;
    arg3 = &dim1_temp2;
    arg4 = &dim2_temp2;
  }
  if (!PyArg_ParseTuple(args,(char *)"O:mecaMAILx_GetPtrPreconW",&obj0)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "mecaMAILx_GetPtrPreconW" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = static_cast< int >(val1);
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      mecaMAILx_GetPtrPreconW(arg1,arg2,arg3,arg4);
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_Py_Void();
  {
    npy_intp dims[2] = {
      *arg4, *arg3 
    };
    PyObject * array = PyArray_SimpleNewFromData(2, dims, NPY_DOUBLE, (void*)(*arg2));
    if (!array) SWIG_fail;
    resultobj = SWIG_Python_AppendOutput(resultobj, array);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_mecaMAILx_GetInternalVariable(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  int arg1 ;
  double **arg2 = (double **) 0 ;
  int *arg3 = (int *) 0 ;
  int *arg4 = (int *) 0 ;
  int val1 ;
  int ecode1 = 0 ;
  double *data_temp2 ;
  int dim1_temp2 ;
  int dim2_temp2 ;
  PyObject * obj0 = 0 ;
  
  {
    arg2 = &data_temp2;
    arg3 = &dim1_temp2;
    arg4 = &dim2_temp2;
  }
  if (!PyArg_ParseTuple(args,(char *)"O:mecaMAILx_GetInternalVariable",&obj0)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "mecaMAILx_GetInternalVariable" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = static_cast< int >(val1);
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      mecaMAILx_GetInternalVariable(arg1,arg2,arg3,arg4);
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_Py_Void();
  {
    npy_intp dims[2] = {
      *arg4, *arg3 
    };
    PyObject * obj = PyArray_SimpleNewFromData(2, dims, NPY_DOUBLE, (void*)(*arg2));
    if (!obj) SWIG_fail;
    PyArrayObject * array = (PyArrayObject*) obj;
    attach_fortran_memory_to_numpy_array(array, (void*)(*arg2), NPY_DOUBLE, dims[1], dims[0]);
    PyArray_ENABLEFLAGS(array,NPY_ARRAY_WRITEABLE);
    resultobj = SWIG_Python_AppendOutput(resultobj, obj);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_mecaMAILx_GetNbInternal(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  int arg1 ;
  int val1 ;
  int ecode1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:mecaMAILx_GetNbInternal",&obj0)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "mecaMAILx_GetNbInternal" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = static_cast< int >(val1);
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      result = (int)mecaMAILx_GetNbInternal(arg1);
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_mecaMAILx_GetPtrBodyVector(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  char *arg1 = (char *) 0 ;
  int arg2 ;
  double **arg3 = (double **) 0 ;
  int *arg4 = (int *) 0 ;
  int res1 ;
  char *buf1 = 0 ;
  int alloc1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  double *data_temp3 = NULL ;
  int dim_temp3 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  {
    arg3 = &data_temp3;
    arg4 = &dim_temp3;
  }
  if (!PyArg_ParseTuple(args,(char *)"OO:mecaMAILx_GetPtrBodyVector",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_AsCharPtrAndSize(obj0, &buf1, NULL, &alloc1);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "mecaMAILx_GetPtrBodyVector" "', argument " "1"" of type '" "char *""'");
  }
  arg1 = reinterpret_cast< char * >(buf1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "mecaMAILx_GetPtrBodyVector" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      mecaMAILx_GetPtrBodyVector(arg1,arg2,arg3,arg4);
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_Py_Void();
  {
    npy_intp dims[1] = {
      *arg4 
    };
    PyObject* obj = PyArray_SimpleNewFromData(1, dims, NPY_DOUBLE, (void*)(*arg3));
    PyArrayObject* array = (PyArrayObject*) obj;
    
    if (!array) SWIG_fail;
    resultobj = SWIG_Python_AppendOutput(resultobj, obj);
  }
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  return resultobj;
fail:
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  return NULL;
}


SWIGINTERN PyObject *_wrap_mecaMAILx_GetDofStatus(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  int arg1 ;
  double **arg2 = (double **) 0 ;
  int *arg3 = (int *) 0 ;
  int val1 ;
  int ecode1 = 0 ;
  double *data_temp2 ;
  int dim_temp2 ;
  PyObject * obj0 = 0 ;
  
  {
    arg2 = &data_temp2;
    arg3 = &dim_temp2;
  }
  if (!PyArg_ParseTuple(args,(char *)"O:mecaMAILx_GetDofStatus",&obj0)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "mecaMAILx_GetDofStatus" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = static_cast< int >(val1);
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      mecaMAILx_GetDofStatus(arg1,arg2,arg3);
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_Py_Void();
  {
    npy_intp dims[1] = {
      *arg3 
    };
    PyObject * obj = PyArray_SimpleNewFromData(1, dims, NPY_DOUBLE, (void*)(*arg2));
    if (!obj) SWIG_fail;
    PyArrayObject * array = (PyArrayObject*) obj;
    attach_fortran_memory_to_numpy_array(array, (void*)(*arg2), NPY_DOUBLE, dims[0], 0);
    PyArray_ENABLEFLAGS(array,NPY_ARRAY_WRITEABLE);
    
    resultobj = SWIG_Python_AppendOutput(resultobj, obj);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_mecaMAILx_PrepGlobalSolver(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  int *arg1 = (int *) NULL ;
  int arg2 = (int) 0 ;
  PyArrayObject *array1 = NULL ;
  int is_new_object1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"|O:mecaMAILx_PrepGlobalSolver",&obj0)) SWIG_fail;
  if (obj0) {
    {
      npy_intp size[1] = {
        -1 
      };
      array1 = obj_to_array_contiguous_allow_conversion(obj0,
        NPY_INT,
        &is_new_object1);
      if (!array1 || !require_dimensions(array1, 1) ||
        !require_size(array1, size, 1)) SWIG_fail;
      arg1 = (int*) array_data(array1);
      arg2 = (int) array_size(array1,0);
    }
  }
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      mecaMAILx_PrepGlobalSolver(arg1,arg2);
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_Py_Void();
  {
    if (is_new_object1 && array1)
    {
      Py_DECREF(array1); 
    }
  }
  return resultobj;
fail:
  {
    if (is_new_object1 && array1)
    {
      Py_DECREF(array1); 
    }
  }
  return NULL;
}


SWIGINTERN PyObject *_wrap_mecaMAILx_PostGlobalSolver(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  int *arg1 = (int *) NULL ;
  int arg2 = (int) 0 ;
  PyArrayObject *array1 = NULL ;
  int is_new_object1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"|O:mecaMAILx_PostGlobalSolver",&obj0)) SWIG_fail;
  if (obj0) {
    {
      npy_intp size[1] = {
        -1 
      };
      array1 = obj_to_array_contiguous_allow_conversion(obj0,
        NPY_INT,
        &is_new_object1);
      if (!array1 || !require_dimensions(array1, 1) ||
        !require_size(array1, size, 1)) SWIG_fail;
      arg1 = (int*) array_data(array1);
      arg2 = (int) array_size(array1,0);
    }
  }
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      mecaMAILx_PostGlobalSolver(arg1,arg2);
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_Py_Void();
  {
    if (is_new_object1 && array1)
    {
      Py_DECREF(array1); 
    }
  }
  return resultobj;
fail:
  {
    if (is_new_object1 && array1)
    {
      Py_DECREF(array1); 
    }
  }
  return NULL;
}


SWIGINTERN PyObject *_wrap_mecaMAILx_AddBodyForceToFext(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  int arg1 ;
  double *arg2 = (double *) 0 ;
  int arg3 ;
  int arg4 ;
  int val1 ;
  int ecode1 = 0 ;
  PyArrayObject *array2 = NULL ;
  int is_new_object2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:mecaMAILx_AddBodyForceToFext",&obj0,&obj1)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "mecaMAILx_AddBodyForceToFext" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = static_cast< int >(val1);
  {
    npy_intp size[2] = {
      -1, -1 
    };
    array2 = obj_to_array_contiguous_allow_conversion(obj1, NPY_DOUBLE,
      &is_new_object2);
    if (!array2 || !require_dimensions(array2, 2) ||
      !require_size(array2, size, 2)) SWIG_fail;
    arg2 = (double*) array_data(array2);
    arg3 = (int) array_size(array2,0);
    arg4 = (int) array_size(array2,1);
  }
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      mecaMAILx_AddBodyForceToFext(arg1,arg2,arg3,arg4);
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_Py_Void();
  {
    if (is_new_object2 && array2)
    {
      Py_DECREF(array2); 
    }
  }
  return resultobj;
fail:
  {
    if (is_new_object2 && array2)
    {
      Py_DECREF(array2); 
    }
  }
  return NULL;
}


SWIGINTERN PyObject *_wrap_mecaMAILx_CheckProperties(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)":mecaMAILx_CheckProperties")) SWIG_fail;
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      result = (int)mecaMAILx_CheckProperties();
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_mecaMAILx_GetNbGpByElem(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  char **arg1 = (char **) 0 ;
  int *arg2 = (int *) 0 ;
  int *arg3 = (int *) 0 ;
  int **arg4 = (int **) 0 ;
  int *arg5 = (int *) 0 ;
  char *tmp_vector1 ;
  int tmp_vsize1 ;
  int tmp_csize1 ;
  int *data_temp4 ;
  int dim_temp4 ;
  
  {
    arg1 = &tmp_vector1;
    arg2 = &tmp_vsize1;
    arg3 = &tmp_csize1;
  }
  {
    arg4 = &data_temp4;
    arg5 = &dim_temp4;
  }
  if (!PyArg_ParseTuple(args,(char *)":mecaMAILx_GetNbGpByElem")) SWIG_fail;
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      mecaMAILx_GetNbGpByElem(arg1,arg2,arg3,arg4,arg5);
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_Py_Void();
  {
    int i;
    PyObject *liste, *chaine;
    liste = PyTuple_New(*arg2);
    for( i=0; i<*arg2; i++ )
    {
      chaine = PyString_FromStringAndSize((*arg1+i*(*arg3)), *arg3);
      PyTuple_SetItem(liste, i, chaine);
    }
    
    resultobj = SWIG_Python_AppendOutput(resultobj, liste);
  }
  {
    npy_intp dims[1] = {
      *arg5 
    };
    PyObject * obj = PyArray_SimpleNewFromData(1, dims, NPY_INT, (void*)(*arg4));
    if (!obj) SWIG_fail;
    PyArrayObject * array = (PyArrayObject*) obj;
    attach_fortran_memory_to_numpy_array(array, (void*)(*arg4), NPY_INT, dims[0], 0);
    PyArray_ENABLEFLAGS(array,NPY_ARRAY_WRITEABLE);
    
    resultobj = SWIG_Python_AppendOutput(resultobj, obj);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_mecaMAILx_MassScaling(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  double arg1 ;
  double val1 ;
  int ecode1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:mecaMAILx_MassScaling",&obj0)) SWIG_fail;
  ecode1 = SWIG_AsVal_double(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "mecaMAILx_MassScaling" "', argument " "1"" of type '" "double""'");
  } 
  arg1 = static_cast< double >(val1);
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      mecaMAILx_MassScaling(arg1);
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_mecaMAILx_GetGpAllJoint(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  double **arg1 = (double **) 0 ;
  int *arg2 = (int *) 0 ;
  int *arg3 = (int *) 0 ;
  double *data_temp1 ;
  int dim1_temp1 ;
  int dim2_temp1 ;
  
  {
    arg1 = &data_temp1;
    arg2 = &dim1_temp1;
    arg3 = &dim2_temp1;
  }
  if (!PyArg_ParseTuple(args,(char *)":mecaMAILx_GetGpAllJoint")) SWIG_fail;
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      mecaMAILx_GetGpAllJoint(arg1,arg2,arg3);
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_Py_Void();
  {
    npy_intp dims[2] = {
      *arg3, *arg2 
    };
    PyObject * obj = PyArray_SimpleNewFromData(2, dims, NPY_DOUBLE, (void*)(*arg1));
    if (!obj) SWIG_fail;
    PyArrayObject * array = (PyArrayObject*) obj;
    attach_fortran_memory_to_numpy_array(array, (void*)(*arg1), NPY_DOUBLE, dims[1], dims[0]);
    PyArray_ENABLEFLAGS(array,NPY_ARRAY_WRITEABLE);
    resultobj = SWIG_Python_AppendOutput(resultobj, obj);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_mecaMAILx_SetVisibleVlocyDrivenDof(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  int arg1 ;
  int arg2 ;
  int arg3 ;
  int val1 ;
  int ecode1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:mecaMAILx_SetVisibleVlocyDrivenDof",&obj0,&obj1,&obj2)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "mecaMAILx_SetVisibleVlocyDrivenDof" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = static_cast< int >(val1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "mecaMAILx_SetVisibleVlocyDrivenDof" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "mecaMAILx_SetVisibleVlocyDrivenDof" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      mecaMAILx_SetVisibleVlocyDrivenDof(arg1,arg2,arg3);
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_mecaMAILx_SetInvisibleVlocyDrivenDof(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  int arg1 ;
  int arg2 ;
  int arg3 ;
  int val1 ;
  int ecode1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:mecaMAILx_SetInvisibleVlocyDrivenDof",&obj0,&obj1,&obj2)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "mecaMAILx_SetInvisibleVlocyDrivenDof" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = static_cast< int >(val1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "mecaMAILx_SetInvisibleVlocyDrivenDof" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "mecaMAILx_SetInvisibleVlocyDrivenDof" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      mecaMAILx_SetInvisibleVlocyDrivenDof(arg1,arg2,arg3);
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_mecaMAILx_UpdateVlocyDrivenDofStructures(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  int arg1 ;
  int val1 ;
  int ecode1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:mecaMAILx_UpdateVlocyDrivenDofStructures",&obj0)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "mecaMAILx_UpdateVlocyDrivenDofStructures" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = static_cast< int >(val1);
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      mecaMAILx_UpdateVlocyDrivenDofStructures(arg1);
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_therMAILx_GetNbTherMAILx(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)":therMAILx_GetNbTherMAILx")) SWIG_fail;
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      result = (int)therMAILx_GetNbTherMAILx();
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_therMAILx_GetNbNodes(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  int arg1 ;
  int val1 ;
  int ecode1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:therMAILx_GetNbNodes",&obj0)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "therMAILx_GetNbNodes" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = static_cast< int >(val1);
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      result = (int)therMAILx_GetNbNodes(arg1);
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_therMAILx_GetNbElements(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  int arg1 ;
  int val1 ;
  int ecode1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:therMAILx_GetNbElements",&obj0)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "therMAILx_GetNbElements" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = static_cast< int >(val1);
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      result = (int)therMAILx_GetNbElements(arg1);
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_therMAILx_GetNbDofs(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  int arg1 ;
  int val1 ;
  int ecode1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:therMAILx_GetNbDofs",&obj0)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "therMAILx_GetNbDofs" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = static_cast< int >(val1);
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      result = (int)therMAILx_GetNbDofs(arg1);
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_therMAILx_IncrementStep(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  
  if (!PyArg_ParseTuple(args,(char *)":therMAILx_IncrementStep")) SWIG_fail;
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      therMAILx_IncrementStep();
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_therMAILx_ComputeConductivity(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  int *arg1 = (int *) NULL ;
  int arg2 = (int) 0 ;
  PyArrayObject *array1 = NULL ;
  int is_new_object1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"|O:therMAILx_ComputeConductivity",&obj0)) SWIG_fail;
  if (obj0) {
    {
      npy_intp size[1] = {
        -1 
      };
      array1 = obj_to_array_contiguous_allow_conversion(obj0,
        NPY_INT,
        &is_new_object1);
      if (!array1 || !require_dimensions(array1, 1) ||
        !require_size(array1, size, 1)) SWIG_fail;
      arg1 = (int*) array_data(array1);
      arg2 = (int) array_size(array1,0);
    }
  }
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      therMAILx_ComputeConductivity(arg1,arg2);
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_Py_Void();
  {
    if (is_new_object1 && array1)
    {
      Py_DECREF(array1); 
    }
  }
  return resultobj;
fail:
  {
    if (is_new_object1 && array1)
    {
      Py_DECREF(array1); 
    }
  }
  return NULL;
}


SWIGINTERN PyObject *_wrap_therMAILx_ComputeCapacity(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  int *arg1 = (int *) NULL ;
  int arg2 = (int) 0 ;
  PyArrayObject *array1 = NULL ;
  int is_new_object1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"|O:therMAILx_ComputeCapacity",&obj0)) SWIG_fail;
  if (obj0) {
    {
      npy_intp size[1] = {
        -1 
      };
      array1 = obj_to_array_contiguous_allow_conversion(obj0,
        NPY_INT,
        &is_new_object1);
      if (!array1 || !require_dimensions(array1, 1) ||
        !require_size(array1, size, 1)) SWIG_fail;
      arg1 = (int*) array_data(array1);
      arg2 = (int) array_size(array1,0);
    }
  }
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      therMAILx_ComputeCapacity(arg1,arg2);
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_Py_Void();
  {
    if (is_new_object1 && array1)
    {
      Py_DECREF(array1); 
    }
  }
  return resultobj;
fail:
  {
    if (is_new_object1 && array1)
    {
      Py_DECREF(array1); 
    }
  }
  return NULL;
}


SWIGINTERN PyObject *_wrap_therMAILx_ComputeConvection(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  int *arg1 = (int *) NULL ;
  int arg2 = (int) 0 ;
  PyArrayObject *array1 = NULL ;
  int is_new_object1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"|O:therMAILx_ComputeConvection",&obj0)) SWIG_fail;
  if (obj0) {
    {
      npy_intp size[1] = {
        -1 
      };
      array1 = obj_to_array_contiguous_allow_conversion(obj0,
        NPY_INT,
        &is_new_object1);
      if (!array1 || !require_dimensions(array1, 1) ||
        !require_size(array1, size, 1)) SWIG_fail;
      arg1 = (int*) array_data(array1);
      arg2 = (int) array_size(array1,0);
    }
  }
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      therMAILx_ComputeConvection(arg1,arg2);
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_Py_Void();
  {
    if (is_new_object1 && array1)
    {
      Py_DECREF(array1); 
    }
  }
  return resultobj;
fail:
  {
    if (is_new_object1 && array1)
    {
      Py_DECREF(array1); 
    }
  }
  return NULL;
}


SWIGINTERN PyObject *_wrap_therMAILx_ComputeInternalFlux(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  int *arg1 = (int *) NULL ;
  int arg2 = (int) 0 ;
  PyArrayObject *array1 = NULL ;
  int is_new_object1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"|O:therMAILx_ComputeInternalFlux",&obj0)) SWIG_fail;
  if (obj0) {
    {
      npy_intp size[1] = {
        -1 
      };
      array1 = obj_to_array_contiguous_allow_conversion(obj0,
        NPY_INT,
        &is_new_object1);
      if (!array1 || !require_dimensions(array1, 1) ||
        !require_size(array1, size, 1)) SWIG_fail;
      arg1 = (int*) array_data(array1);
      arg2 = (int) array_size(array1,0);
    }
  }
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      therMAILx_ComputeInternalFlux(arg1,arg2);
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_Py_Void();
  {
    if (is_new_object1 && array1)
    {
      Py_DECREF(array1); 
    }
  }
  return resultobj;
fail:
  {
    if (is_new_object1 && array1)
    {
      Py_DECREF(array1); 
    }
  }
  return NULL;
}


SWIGINTERN PyObject *_wrap_therMAILx_ComputeExternalFlux(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  int *arg1 = (int *) NULL ;
  int arg2 = (int) 0 ;
  PyArrayObject *array1 = NULL ;
  int is_new_object1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"|O:therMAILx_ComputeExternalFlux",&obj0)) SWIG_fail;
  if (obj0) {
    {
      npy_intp size[1] = {
        -1 
      };
      array1 = obj_to_array_contiguous_allow_conversion(obj0,
        NPY_INT,
        &is_new_object1);
      if (!array1 || !require_dimensions(array1, 1) ||
        !require_size(array1, size, 1)) SWIG_fail;
      arg1 = (int*) array_data(array1);
      arg2 = (int) array_size(array1,0);
    }
  }
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      therMAILx_ComputeExternalFlux(arg1,arg2);
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_Py_Void();
  {
    if (is_new_object1 && array1)
    {
      Py_DECREF(array1); 
    }
  }
  return resultobj;
fail:
  {
    if (is_new_object1 && array1)
    {
      Py_DECREF(array1); 
    }
  }
  return NULL;
}


SWIGINTERN PyObject *_wrap_therMAILx_AssembThermKT(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  int *arg1 = (int *) NULL ;
  int arg2 = (int) 0 ;
  PyArrayObject *array1 = NULL ;
  int is_new_object1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"|O:therMAILx_AssembThermKT",&obj0)) SWIG_fail;
  if (obj0) {
    {
      npy_intp size[1] = {
        -1 
      };
      array1 = obj_to_array_contiguous_allow_conversion(obj0,
        NPY_INT,
        &is_new_object1);
      if (!array1 || !require_dimensions(array1, 1) ||
        !require_size(array1, size, 1)) SWIG_fail;
      arg1 = (int*) array_data(array1);
      arg2 = (int) array_size(array1,0);
    }
  }
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      therMAILx_AssembThermKT(arg1,arg2);
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_Py_Void();
  {
    if (is_new_object1 && array1)
    {
      Py_DECREF(array1); 
    }
  }
  return resultobj;
fail:
  {
    if (is_new_object1 && array1)
    {
      Py_DECREF(array1); 
    }
  }
  return NULL;
}


SWIGINTERN PyObject *_wrap_therMAILx_AssembThermRHS(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  int *arg1 = (int *) NULL ;
  int arg2 = (int) 0 ;
  PyArrayObject *array1 = NULL ;
  int is_new_object1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"|O:therMAILx_AssembThermRHS",&obj0)) SWIG_fail;
  if (obj0) {
    {
      npy_intp size[1] = {
        -1 
      };
      array1 = obj_to_array_contiguous_allow_conversion(obj0,
        NPY_INT,
        &is_new_object1);
      if (!array1 || !require_dimensions(array1, 1) ||
        !require_size(array1, size, 1)) SWIG_fail;
      arg1 = (int*) array_data(array1);
      arg2 = (int) array_size(array1,0);
    }
  }
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      therMAILx_AssembThermRHS(arg1,arg2);
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_Py_Void();
  {
    if (is_new_object1 && array1)
    {
      Py_DECREF(array1); 
    }
  }
  return resultobj;
fail:
  {
    if (is_new_object1 && array1)
    {
      Py_DECREF(array1); 
    }
  }
  return NULL;
}


SWIGINTERN PyObject *_wrap_therMAILx_ComputeThermDof(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  int *arg1 = (int *) NULL ;
  int arg2 = (int) 0 ;
  PyArrayObject *array1 = NULL ;
  int is_new_object1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"|O:therMAILx_ComputeThermDof",&obj0)) SWIG_fail;
  if (obj0) {
    {
      npy_intp size[1] = {
        -1 
      };
      array1 = obj_to_array_contiguous_allow_conversion(obj0,
        NPY_INT,
        &is_new_object1);
      if (!array1 || !require_dimensions(array1, 1) ||
        !require_size(array1, size, 1)) SWIG_fail;
      arg1 = (int*) array_data(array1);
      arg2 = (int) array_size(array1,0);
    }
  }
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      therMAILx_ComputeThermDof(arg1,arg2);
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_Py_Void();
  {
    if (is_new_object1 && array1)
    {
      Py_DECREF(array1); 
    }
  }
  return resultobj;
fail:
  {
    if (is_new_object1 && array1)
    {
      Py_DECREF(array1); 
    }
  }
  return NULL;
}


SWIGINTERN PyObject *_wrap_therMAILx_ComputeThermFields(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  int *arg1 = (int *) NULL ;
  int arg2 = (int) 0 ;
  PyArrayObject *array1 = NULL ;
  int is_new_object1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"|O:therMAILx_ComputeThermFields",&obj0)) SWIG_fail;
  if (obj0) {
    {
      npy_intp size[1] = {
        -1 
      };
      array1 = obj_to_array_contiguous_allow_conversion(obj0,
        NPY_INT,
        &is_new_object1);
      if (!array1 || !require_dimensions(array1, 1) ||
        !require_size(array1, size, 1)) SWIG_fail;
      arg1 = (int*) array_data(array1);
      arg2 = (int) array_size(array1,0);
    }
  }
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      therMAILx_ComputeThermFields(arg1,arg2);
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_Py_Void();
  {
    if (is_new_object1 && array1)
    {
      Py_DECREF(array1); 
    }
  }
  return resultobj;
fail:
  {
    if (is_new_object1 && array1)
    {
      Py_DECREF(array1); 
    }
  }
  return NULL;
}


SWIGINTERN PyObject *_wrap_therMAILx_UpdateThermDof(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  int *arg1 = (int *) NULL ;
  int arg2 = (int) 0 ;
  PyArrayObject *array1 = NULL ;
  int is_new_object1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"|O:therMAILx_UpdateThermDof",&obj0)) SWIG_fail;
  if (obj0) {
    {
      npy_intp size[1] = {
        -1 
      };
      array1 = obj_to_array_contiguous_allow_conversion(obj0,
        NPY_INT,
        &is_new_object1);
      if (!array1 || !require_dimensions(array1, 1) ||
        !require_size(array1, size, 1)) SWIG_fail;
      arg1 = (int*) array_data(array1);
      arg2 = (int) array_size(array1,0);
    }
  }
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      therMAILx_UpdateThermDof(arg1,arg2);
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_Py_Void();
  {
    if (is_new_object1 && array1)
    {
      Py_DECREF(array1); 
    }
  }
  return resultobj;
fail:
  {
    if (is_new_object1 && array1)
    {
      Py_DECREF(array1); 
    }
  }
  return NULL;
}


SWIGINTERN PyObject *_wrap_therMAILx_UpdateThermBulk(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  int *arg1 = (int *) NULL ;
  int arg2 = (int) 0 ;
  PyArrayObject *array1 = NULL ;
  int is_new_object1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"|O:therMAILx_UpdateThermBulk",&obj0)) SWIG_fail;
  if (obj0) {
    {
      npy_intp size[1] = {
        -1 
      };
      array1 = obj_to_array_contiguous_allow_conversion(obj0,
        NPY_INT,
        &is_new_object1);
      if (!array1 || !require_dimensions(array1, 1) ||
        !require_size(array1, size, 1)) SWIG_fail;
      arg1 = (int*) array_data(array1);
      arg2 = (int) array_size(array1,0);
    }
  }
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      therMAILx_UpdateThermBulk(arg1,arg2);
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_Py_Void();
  {
    if (is_new_object1 && array1)
    {
      Py_DECREF(array1); 
    }
  }
  return resultobj;
fail:
  {
    if (is_new_object1 && array1)
    {
      Py_DECREF(array1); 
    }
  }
  return NULL;
}


SWIGINTERN PyObject *_wrap_therMAILx_ComputeResidueNorm(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  int *arg1 = (int *) NULL ;
  int arg2 = (int) 0 ;
  PyArrayObject *array1 = NULL ;
  int is_new_object1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"|O:therMAILx_ComputeResidueNorm",&obj0)) SWIG_fail;
  if (obj0) {
    {
      npy_intp size[1] = {
        -1 
      };
      array1 = obj_to_array_contiguous_allow_conversion(obj0,
        NPY_INT,
        &is_new_object1);
      if (!array1 || !require_dimensions(array1, 1) ||
        !require_size(array1, size, 1)) SWIG_fail;
      arg1 = (int*) array_data(array1);
      arg2 = (int) array_size(array1,0);
    }
  }
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      result = (double)therMAILx_ComputeResidueNorm(arg1,arg2);
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  {
    if (is_new_object1 && array1)
    {
      Py_DECREF(array1); 
    }
  }
  return resultobj;
fail:
  {
    if (is_new_object1 && array1)
    {
      Py_DECREF(array1); 
    }
  }
  return NULL;
}


SWIGINTERN PyObject *_wrap_therMAILx_ReadDrivenDof(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  
  if (!PyArg_ParseTuple(args,(char *)":therMAILx_ReadDrivenDof")) SWIG_fail;
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      therMAILx_ReadDrivenDof();
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_therMAILx_WriteDrivenDof(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  
  if (!PyArg_ParseTuple(args,(char *)":therMAILx_WriteDrivenDof")) SWIG_fail;
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      therMAILx_WriteDrivenDof();
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_therMAILx_LoadModels(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  
  if (!PyArg_ParseTuple(args,(char *)":therMAILx_LoadModels")) SWIG_fail;
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      therMAILx_LoadModels();
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_therMAILx_LoadBehaviours(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  
  if (!PyArg_ParseTuple(args,(char *)":therMAILx_LoadBehaviours")) SWIG_fail;
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      therMAILx_LoadBehaviours();
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_therMAILx_ReadIniDof(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  int arg1 = (int) 0 ;
  int val1 ;
  int ecode1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"|O:therMAILx_ReadIniDof",&obj0)) SWIG_fail;
  if (obj0) {
    ecode1 = SWIG_AsVal_int(obj0, &val1);
    if (!SWIG_IsOK(ecode1)) {
      SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "therMAILx_ReadIniDof" "', argument " "1"" of type '" "int""'");
    } 
    arg1 = static_cast< int >(val1);
  }
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      therMAILx_ReadIniDof(arg1);
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_therMAILx_ReadIniGPV(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  int arg1 = (int) 0 ;
  int val1 ;
  int ecode1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"|O:therMAILx_ReadIniGPV",&obj0)) SWIG_fail;
  if (obj0) {
    ecode1 = SWIG_AsVal_int(obj0, &val1);
    if (!SWIG_IsOK(ecode1)) {
      SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "therMAILx_ReadIniGPV" "', argument " "1"" of type '" "int""'");
    } 
    arg1 = static_cast< int >(val1);
  }
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      therMAILx_ReadIniGPV(arg1);
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_therMAILx_WriteLastDof(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  
  if (!PyArg_ParseTuple(args,(char *)":therMAILx_WriteLastDof")) SWIG_fail;
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      therMAILx_WriteLastDof();
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_therMAILx_WriteOutDof(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  
  if (!PyArg_ParseTuple(args,(char *)":therMAILx_WriteOutDof")) SWIG_fail;
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      therMAILx_WriteOutDof();
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_therMAILx_DisplayOutDof(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  
  if (!PyArg_ParseTuple(args,(char *)":therMAILx_DisplayOutDof")) SWIG_fail;
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      therMAILx_DisplayOutDof();
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_therMAILx_PutBodyVector(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  char *arg1 = (char *) 0 ;
  int arg2 ;
  double *arg3 = (double *) 0 ;
  int arg4 ;
  int arg5 ;
  int res1 ;
  char *buf1 = 0 ;
  int alloc1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyArrayObject *array3 = NULL ;
  int is_new_object3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:therMAILx_PutBodyVector",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_AsCharPtrAndSize(obj0, &buf1, NULL, &alloc1);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "therMAILx_PutBodyVector" "', argument " "1"" of type '" "char *""'");
  }
  arg1 = reinterpret_cast< char * >(buf1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "therMAILx_PutBodyVector" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    npy_intp size[2] = {
      -1, -1 
    };
    array3 = obj_to_array_contiguous_allow_conversion(obj2, NPY_DOUBLE,
      &is_new_object3);
    if (!array3 || !require_dimensions(array3, 2) ||
      !require_size(array3, size, 2)) SWIG_fail;
    arg3 = (double*) array_data(array3);
    arg4 = (int) array_size(array3,0);
    arg5 = (int) array_size(array3,1);
  }
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      therMAILx_PutBodyVector(arg1,arg2,arg3,arg4,arg5);
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_Py_Void();
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  {
    if (is_new_object3 && array3)
    {
      Py_DECREF(array3); 
    }
  }
  return resultobj;
fail:
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  {
    if (is_new_object3 && array3)
    {
      Py_DECREF(array3); 
    }
  }
  return NULL;
}


SWIGINTERN PyObject *_wrap_therMAILx_GetBodyVector(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  char *arg1 = (char *) 0 ;
  int arg2 ;
  double **arg3 = (double **) 0 ;
  int *arg4 = (int *) 0 ;
  int *arg5 = (int *) 0 ;
  int res1 ;
  char *buf1 = 0 ;
  int alloc1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  double *data_temp3 ;
  int dim1_temp3 ;
  int dim2_temp3 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  {
    arg3 = &data_temp3;
    arg4 = &dim1_temp3;
    arg5 = &dim2_temp3;
  }
  if (!PyArg_ParseTuple(args,(char *)"OO:therMAILx_GetBodyVector",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_AsCharPtrAndSize(obj0, &buf1, NULL, &alloc1);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "therMAILx_GetBodyVector" "', argument " "1"" of type '" "char *""'");
  }
  arg1 = reinterpret_cast< char * >(buf1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "therMAILx_GetBodyVector" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      therMAILx_GetBodyVector(arg1,arg2,arg3,arg4,arg5);
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_Py_Void();
  {
    npy_intp dims[2] = {
      *arg5, *arg4 
    };
    PyObject * obj = PyArray_SimpleNewFromData(2, dims, NPY_DOUBLE, (void*)(*arg3));
    if (!obj) SWIG_fail;
    PyArrayObject * array = (PyArrayObject*) obj;
    attach_fortran_memory_to_numpy_array(array, (void*)(*arg3), NPY_DOUBLE, dims[1], dims[0]);
    PyArray_ENABLEFLAGS(array,NPY_ARRAY_WRITEABLE);
    resultobj = SWIG_Python_AppendOutput(resultobj, obj);
  }
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  return resultobj;
fail:
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  return NULL;
}


SWIGINTERN PyObject *_wrap_therMAILx_GetScalarFieldRank(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  int arg1 ;
  int arg2 ;
  char *arg3 = (char *) 0 ;
  int val1 ;
  int ecode1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int res3 ;
  char *buf3 = 0 ;
  int alloc3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:therMAILx_GetScalarFieldRank",&obj0,&obj1,&obj2)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "therMAILx_GetScalarFieldRank" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = static_cast< int >(val1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "therMAILx_GetScalarFieldRank" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  res3 = SWIG_AsCharPtrAndSize(obj2, &buf3, NULL, &alloc3);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "therMAILx_GetScalarFieldRank" "', argument " "3"" of type '" "char *""'");
  }
  arg3 = reinterpret_cast< char * >(buf3);
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      result = (int)therMAILx_GetScalarFieldRank(arg1,arg2,arg3);
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return resultobj;
fail:
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_therMAILx_SetScalarFieldByNode(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  int arg1 ;
  int arg2 ;
  double *arg3 = (double *) 0 ;
  int arg4 ;
  int val1 ;
  int ecode1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyArrayObject *array3 = NULL ;
  int is_new_object3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:therMAILx_SetScalarFieldByNode",&obj0,&obj1,&obj2)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "therMAILx_SetScalarFieldByNode" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = static_cast< int >(val1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "therMAILx_SetScalarFieldByNode" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    npy_intp size[1] = {
      -1 
    };
    array3 = obj_to_array_contiguous_allow_conversion(obj2,
      NPY_DOUBLE,
      &is_new_object3);
    if (!array3 || !require_dimensions(array3, 1) ||
      !require_size(array3, size, 1)) SWIG_fail;
    arg3 = (double*) array_data(array3);
    arg4 = (int) array_size(array3,0);
  }
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      therMAILx_SetScalarFieldByNode(arg1,arg2,arg3,arg4);
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_Py_Void();
  {
    if (is_new_object3 && array3)
    {
      Py_DECREF(array3); 
    }
  }
  return resultobj;
fail:
  {
    if (is_new_object3 && array3)
    {
      Py_DECREF(array3); 
    }
  }
  return NULL;
}


SWIGINTERN PyObject *_wrap_therMAILx_SetScalarFieldByElement(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  int arg1 ;
  int arg2 ;
  double *arg3 = (double *) 0 ;
  int arg4 ;
  int val1 ;
  int ecode1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyArrayObject *array3 = NULL ;
  int is_new_object3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:therMAILx_SetScalarFieldByElement",&obj0,&obj1,&obj2)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "therMAILx_SetScalarFieldByElement" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = static_cast< int >(val1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "therMAILx_SetScalarFieldByElement" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    npy_intp size[1] = {
      -1 
    };
    array3 = obj_to_array_contiguous_allow_conversion(obj2,
      NPY_DOUBLE,
      &is_new_object3);
    if (!array3 || !require_dimensions(array3, 1) ||
      !require_size(array3, size, 1)) SWIG_fail;
    arg3 = (double*) array_data(array3);
    arg4 = (int) array_size(array3,0);
  }
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      therMAILx_SetScalarFieldByElement(arg1,arg2,arg3,arg4);
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_Py_Void();
  {
    if (is_new_object3 && array3)
    {
      Py_DECREF(array3); 
    }
  }
  return resultobj;
fail:
  {
    if (is_new_object3 && array3)
    {
      Py_DECREF(array3); 
    }
  }
  return NULL;
}


SWIGINTERN PyObject *_wrap_therMAILx_GetVectorFieldRank(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  int arg1 ;
  int arg2 ;
  char *arg3 = (char *) 0 ;
  int val1 ;
  int ecode1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int res3 ;
  char *buf3 = 0 ;
  int alloc3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:therMAILx_GetVectorFieldRank",&obj0,&obj1,&obj2)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "therMAILx_GetVectorFieldRank" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = static_cast< int >(val1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "therMAILx_GetVectorFieldRank" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  res3 = SWIG_AsCharPtrAndSize(obj2, &buf3, NULL, &alloc3);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "therMAILx_GetVectorFieldRank" "', argument " "3"" of type '" "char *""'");
  }
  arg3 = reinterpret_cast< char * >(buf3);
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      result = (int)therMAILx_GetVectorFieldRank(arg1,arg2,arg3);
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return resultobj;
fail:
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_therMAILx_SetVectorFieldByNode(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  int arg1 ;
  int arg2 ;
  double *arg3 = (double *) 0 ;
  int arg4 ;
  int arg5 ;
  int val1 ;
  int ecode1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyArrayObject *array3 = NULL ;
  int is_new_object3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:therMAILx_SetVectorFieldByNode",&obj0,&obj1,&obj2)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "therMAILx_SetVectorFieldByNode" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = static_cast< int >(val1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "therMAILx_SetVectorFieldByNode" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    npy_intp size[2] = {
      -1, -1 
    };
    array3 = obj_to_array_contiguous_allow_conversion(obj2, NPY_DOUBLE,
      &is_new_object3);
    if (!array3 || !require_dimensions(array3, 2) ||
      !require_size(array3, size, 2)) SWIG_fail;
    arg3 = (double*) array_data(array3);
    arg4 = (int) array_size(array3,0);
    arg5 = (int) array_size(array3,1);
  }
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      therMAILx_SetVectorFieldByNode(arg1,arg2,arg3,arg4,arg5);
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_Py_Void();
  {
    if (is_new_object3 && array3)
    {
      Py_DECREF(array3); 
    }
  }
  return resultobj;
fail:
  {
    if (is_new_object3 && array3)
    {
      Py_DECREF(array3); 
    }
  }
  return NULL;
}


SWIGINTERN PyObject *_wrap_therMAILx_SetVectorFieldByElement(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  int arg1 ;
  int arg2 ;
  double *arg3 = (double *) 0 ;
  int arg4 ;
  int arg5 ;
  int val1 ;
  int ecode1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyArrayObject *array3 = NULL ;
  int is_new_object3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:therMAILx_SetVectorFieldByElement",&obj0,&obj1,&obj2)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "therMAILx_SetVectorFieldByElement" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = static_cast< int >(val1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "therMAILx_SetVectorFieldByElement" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    npy_intp size[2] = {
      -1, -1 
    };
    array3 = obj_to_array_contiguous_allow_conversion(obj2, NPY_DOUBLE,
      &is_new_object3);
    if (!array3 || !require_dimensions(array3, 2) ||
      !require_size(array3, size, 2)) SWIG_fail;
    arg3 = (double*) array_data(array3);
    arg4 = (int) array_size(array3,0);
    arg5 = (int) array_size(array3,1);
  }
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      therMAILx_SetVectorFieldByElement(arg1,arg2,arg3,arg4,arg5);
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_Py_Void();
  {
    if (is_new_object3 && array3)
    {
      Py_DECREF(array3); 
    }
  }
  return resultobj;
fail:
  {
    if (is_new_object3 && array3)
    {
      Py_DECREF(array3); 
    }
  }
  return NULL;
}


SWIGINTERN PyObject *_wrap_therMAILx_AddSource(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  int arg1 ;
  int arg2 ;
  int val1 ;
  int ecode1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:therMAILx_AddSource",&obj0,&obj1)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "therMAILx_AddSource" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = static_cast< int >(val1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "therMAILx_AddSource" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      therMAILx_AddSource(arg1,arg2);
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_therMAILx_AddNodalFieldDivergence(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  int arg1 ;
  int arg2 ;
  int val1 ;
  int ecode1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:therMAILx_AddNodalFieldDivergence",&obj0,&obj1)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "therMAILx_AddNodalFieldDivergence" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = static_cast< int >(val1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "therMAILx_AddNodalFieldDivergence" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      therMAILx_AddNodalFieldDivergence(arg1,arg2);
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_therMAILx_PushProperties(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  
  if (!PyArg_ParseTuple(args,(char *)":therMAILx_PushProperties")) SWIG_fail;
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      therMAILx_PushProperties();
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_therMAILx_WithoutRenumbering(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)":therMAILx_WithoutRenumbering")) SWIG_fail;
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      result = (int)therMAILx_WithoutRenumbering();
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_therMAILx_BandStorage(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)":therMAILx_BandStorage")) SWIG_fail;
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      result = (int)therMAILx_BandStorage();
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_therMAILx_SparseStorage(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)":therMAILx_SparseStorage")) SWIG_fail;
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      result = (int)therMAILx_SparseStorage();
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_therMAILx_ExplodedStorage(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)":therMAILx_ExplodedStorage")) SWIG_fail;
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      result = (int)therMAILx_ExplodedStorage();
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_therMAILx_DiagonalStorage(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)":therMAILx_DiagonalStorage")) SWIG_fail;
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      result = (int)therMAILx_DiagonalStorage();
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_therMAILx_SkylineStorage(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)":therMAILx_SkylineStorage")) SWIG_fail;
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      result = (int)therMAILx_SkylineStorage();
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_therMAILx_FullStorage(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)":therMAILx_FullStorage")) SWIG_fail;
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      result = (int)therMAILx_FullStorage();
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_therMAILx_SymmetricShape(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)":therMAILx_SymmetricShape")) SWIG_fail;
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      result = (int)therMAILx_SymmetricShape();
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_therMAILx_UnspecifiedShape(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)":therMAILx_UnspecifiedShape")) SWIG_fail;
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      result = (int)therMAILx_UnspecifiedShape();
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_therMAILx_GetGrad(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  int arg1 ;
  double **arg2 = (double **) 0 ;
  int *arg3 = (int *) 0 ;
  int *arg4 = (int *) 0 ;
  int val1 ;
  int ecode1 = 0 ;
  double *data_temp2 ;
  int dim1_temp2 ;
  int dim2_temp2 ;
  PyObject * obj0 = 0 ;
  
  {
    arg2 = &data_temp2;
    arg3 = &dim1_temp2;
    arg4 = &dim2_temp2;
  }
  if (!PyArg_ParseTuple(args,(char *)"O:therMAILx_GetGrad",&obj0)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "therMAILx_GetGrad" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = static_cast< int >(val1);
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      therMAILx_GetGrad(arg1,arg2,arg3,arg4);
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_Py_Void();
  {
    npy_intp dims[2] = {
      *arg4, *arg3 
    };
    PyObject * obj = PyArray_SimpleNewFromData(2, dims, NPY_DOUBLE, (void*)(*arg2));
    if (!obj) SWIG_fail;
    PyArrayObject * array = (PyArrayObject*) obj;
    attach_fortran_memory_to_numpy_array(array, (void*)(*arg2), NPY_DOUBLE, dims[1], dims[0]);
    PyArray_ENABLEFLAGS(array,NPY_ARRAY_WRITEABLE);
    resultobj = SWIG_Python_AppendOutput(resultobj, obj);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_therMAILx_GetFlux(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  int arg1 ;
  double **arg2 = (double **) 0 ;
  int *arg3 = (int *) 0 ;
  int *arg4 = (int *) 0 ;
  int val1 ;
  int ecode1 = 0 ;
  double *data_temp2 ;
  int dim1_temp2 ;
  int dim2_temp2 ;
  PyObject * obj0 = 0 ;
  
  {
    arg2 = &data_temp2;
    arg3 = &dim1_temp2;
    arg4 = &dim2_temp2;
  }
  if (!PyArg_ParseTuple(args,(char *)"O:therMAILx_GetFlux",&obj0)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "therMAILx_GetFlux" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = static_cast< int >(val1);
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      therMAILx_GetFlux(arg1,arg2,arg3,arg4);
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_Py_Void();
  {
    npy_intp dims[2] = {
      *arg4, *arg3 
    };
    PyObject * obj = PyArray_SimpleNewFromData(2, dims, NPY_DOUBLE, (void*)(*arg2));
    if (!obj) SWIG_fail;
    PyArrayObject * array = (PyArrayObject*) obj;
    attach_fortran_memory_to_numpy_array(array, (void*)(*arg2), NPY_DOUBLE, dims[1], dims[0]);
    PyArray_ENABLEFLAGS(array,NPY_ARRAY_WRITEABLE);
    resultobj = SWIG_Python_AppendOutput(resultobj, obj);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_therMAILx_InitializeElementaryFlux(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  
  if (!PyArg_ParseTuple(args,(char *)":therMAILx_InitializeElementaryFlux")) SWIG_fail;
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      therMAILx_InitializeElementaryFlux();
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_therMAILx_GetCoor(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  int arg1 ;
  double **arg2 = (double **) 0 ;
  int *arg3 = (int *) 0 ;
  int *arg4 = (int *) 0 ;
  int val1 ;
  int ecode1 = 0 ;
  double *data_temp2 ;
  int dim1_temp2 ;
  int dim2_temp2 ;
  PyObject * obj0 = 0 ;
  
  {
    arg2 = &data_temp2;
    arg3 = &dim1_temp2;
    arg4 = &dim2_temp2;
  }
  if (!PyArg_ParseTuple(args,(char *)"O:therMAILx_GetCoor",&obj0)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "therMAILx_GetCoor" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = static_cast< int >(val1);
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      therMAILx_GetCoor(arg1,arg2,arg3,arg4);
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_Py_Void();
  {
    npy_intp dims[2] = {
      *arg4, *arg3 
    };
    PyObject * obj = PyArray_SimpleNewFromData(2, dims, NPY_DOUBLE, (void*)(*arg2));
    if (!obj) SWIG_fail;
    PyArrayObject * array = (PyArrayObject*) obj;
    attach_fortran_memory_to_numpy_array(array, (void*)(*arg2), NPY_DOUBLE, dims[1], dims[0]);
    PyArray_ENABLEFLAGS(array,NPY_ARRAY_WRITEABLE);
    resultobj = SWIG_Python_AppendOutput(resultobj, obj);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_therMAILx_GetConnectivity(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  int arg1 ;
  int **arg2 = (int **) 0 ;
  int *arg3 = (int *) 0 ;
  int val1 ;
  int ecode1 = 0 ;
  int *data_temp2 ;
  int dim_temp2 ;
  PyObject * obj0 = 0 ;
  
  {
    arg2 = &data_temp2;
    arg3 = &dim_temp2;
  }
  if (!PyArg_ParseTuple(args,(char *)"O:therMAILx_GetConnectivity",&obj0)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "therMAILx_GetConnectivity" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = static_cast< int >(val1);
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      therMAILx_GetConnectivity(arg1,arg2,arg3);
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_Py_Void();
  {
    npy_intp dims[1] = {
      *arg3 
    };
    PyObject * obj = PyArray_SimpleNewFromData(1, dims, NPY_INT, (void*)(*arg2));
    if (!obj) SWIG_fail;
    PyArrayObject * array = (PyArrayObject*) obj;
    attach_fortran_memory_to_numpy_array(array, (void*)(*arg2), NPY_INT, dims[0], 0);
    PyArray_ENABLEFLAGS(array,NPY_ARRAY_WRITEABLE);
    
    resultobj = SWIG_Python_AppendOutput(resultobj, obj);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_therMAILx_GetAll(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  int arg1 ;
  double **arg2 = (double **) 0 ;
  int *arg3 = (int *) 0 ;
  int *arg4 = (int *) 0 ;
  int val1 ;
  int ecode1 = 0 ;
  double *data_temp2 ;
  int dim1_temp2 ;
  int dim2_temp2 ;
  PyObject * obj0 = 0 ;
  
  {
    arg2 = &data_temp2;
    arg3 = &dim1_temp2;
    arg4 = &dim2_temp2;
  }
  if (!PyArg_ParseTuple(args,(char *)"O:therMAILx_GetAll",&obj0)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "therMAILx_GetAll" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = static_cast< int >(val1);
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      therMAILx_GetAll(arg1,arg2,arg3,arg4);
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_Py_Void();
  {
    npy_intp dims[2] = {
      *arg4, *arg3 
    };
    PyObject * obj = PyArray_SimpleNewFromData(2, dims, NPY_DOUBLE, (void*)(*arg2));
    if (!obj) SWIG_fail;
    PyArrayObject * array = (PyArrayObject*) obj;
    attach_fortran_memory_to_numpy_array(array, (void*)(*arg2), NPY_DOUBLE, dims[1], dims[0]);
    PyArray_ENABLEFLAGS(array,NPY_ARRAY_WRITEABLE);
    resultobj = SWIG_Python_AppendOutput(resultobj, obj);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_therMAILx_GetGpCoor(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  int arg1 ;
  double **arg2 = (double **) 0 ;
  int *arg3 = (int *) 0 ;
  int *arg4 = (int *) 0 ;
  int val1 ;
  int ecode1 = 0 ;
  double *data_temp2 ;
  int dim1_temp2 ;
  int dim2_temp2 ;
  PyObject * obj0 = 0 ;
  
  {
    arg2 = &data_temp2;
    arg3 = &dim1_temp2;
    arg4 = &dim2_temp2;
  }
  if (!PyArg_ParseTuple(args,(char *)"O:therMAILx_GetGpCoor",&obj0)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "therMAILx_GetGpCoor" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = static_cast< int >(val1);
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      therMAILx_GetGpCoor(arg1,arg2,arg3,arg4);
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_Py_Void();
  {
    npy_intp dims[2] = {
      *arg4, *arg3 
    };
    PyObject * obj = PyArray_SimpleNewFromData(2, dims, NPY_DOUBLE, (void*)(*arg2));
    if (!obj) SWIG_fail;
    PyArrayObject * array = (PyArrayObject*) obj;
    attach_fortran_memory_to_numpy_array(array, (void*)(*arg2), NPY_DOUBLE, dims[1], dims[0]);
    PyArray_ENABLEFLAGS(array,NPY_ARRAY_WRITEABLE);
    resultobj = SWIG_Python_AppendOutput(resultobj, obj);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_therMAILx_GetGpField(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  int arg1 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  double **arg5 = (double **) 0 ;
  int *arg6 = (int *) 0 ;
  int val1 ;
  int ecode1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  double *data_temp5 ;
  int dim_temp5 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  
  {
    arg5 = &data_temp5;
    arg6 = &dim_temp5;
  }
  if (!PyArg_ParseTuple(args,(char *)"OOOO:therMAILx_GetGpField",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "therMAILx_GetGpField" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = static_cast< int >(val1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "therMAILx_GetGpField" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "therMAILx_GetGpField" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  ecode4 = SWIG_AsVal_int(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "therMAILx_GetGpField" "', argument " "4"" of type '" "int""'");
  } 
  arg4 = static_cast< int >(val4);
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      therMAILx_GetGpField(arg1,arg2,arg3,arg4,arg5,arg6);
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_Py_Void();
  {
    npy_intp dims[1] = {
      *arg6 
    };
    PyObject * obj = PyArray_SimpleNewFromData(1, dims, NPY_DOUBLE, (void*)(*arg5));
    if (!obj) SWIG_fail;
    PyArrayObject * array = (PyArrayObject*) obj;
    attach_fortran_memory_to_numpy_array(array, (void*)(*arg5), NPY_DOUBLE, dims[0], 0);
    PyArray_ENABLEFLAGS(array,NPY_ARRAY_WRITEABLE);
    
    resultobj = SWIG_Python_AppendOutput(resultobj, obj);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_therMAILx_TrialAssembThermKT(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  
  if (!PyArg_ParseTuple(args,(char *)":therMAILx_TrialAssembThermKT")) SWIG_fail;
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      therMAILx_TrialAssembThermKT();
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_therMAILx_TrialAssembThermRHS(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  
  if (!PyArg_ParseTuple(args,(char *)":therMAILx_TrialAssembThermRHS")) SWIG_fail;
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      therMAILx_TrialAssembThermRHS();
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_therMAILx_CleanMemory(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  
  if (!PyArg_ParseTuple(args,(char *)":therMAILx_CleanMemory")) SWIG_fail;
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      therMAILx_CleanMemory();
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_therMAILx_CheckProperties(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)":therMAILx_CheckProperties")) SWIG_fail;
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      result = (int)therMAILx_CheckProperties();
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_therMAILx_GetNbGpByElem(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  char **arg1 = (char **) 0 ;
  int *arg2 = (int *) 0 ;
  int *arg3 = (int *) 0 ;
  int **arg4 = (int **) 0 ;
  int *arg5 = (int *) 0 ;
  char *tmp_vector1 ;
  int tmp_vsize1 ;
  int tmp_csize1 ;
  int *data_temp4 ;
  int dim_temp4 ;
  
  {
    arg1 = &tmp_vector1;
    arg2 = &tmp_vsize1;
    arg3 = &tmp_csize1;
  }
  {
    arg4 = &data_temp4;
    arg5 = &dim_temp4;
  }
  if (!PyArg_ParseTuple(args,(char *)":therMAILx_GetNbGpByElem")) SWIG_fail;
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      therMAILx_GetNbGpByElem(arg1,arg2,arg3,arg4,arg5);
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_Py_Void();
  {
    int i;
    PyObject *liste, *chaine;
    liste = PyTuple_New(*arg2);
    for( i=0; i<*arg2; i++ )
    {
      chaine = PyString_FromStringAndSize((*arg1+i*(*arg3)), *arg3);
      PyTuple_SetItem(liste, i, chaine);
    }
    
    resultobj = SWIG_Python_AppendOutput(resultobj, liste);
  }
  {
    npy_intp dims[1] = {
      *arg5 
    };
    PyObject * obj = PyArray_SimpleNewFromData(1, dims, NPY_INT, (void*)(*arg4));
    if (!obj) SWIG_fail;
    PyArrayObject * array = (PyArrayObject*) obj;
    attach_fortran_memory_to_numpy_array(array, (void*)(*arg4), NPY_INT, dims[0], 0);
    PyArray_ENABLEFLAGS(array,NPY_ARRAY_WRITEABLE);
    
    resultobj = SWIG_Python_AppendOutput(resultobj, obj);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_therMAILx_GetNbGp(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  int arg1 ;
  int arg2 ;
  int val1 ;
  int ecode1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:therMAILx_GetNbGp",&obj0,&obj1)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "therMAILx_GetNbGp" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = static_cast< int >(val1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "therMAILx_GetNbGp" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      result = (int)therMAILx_GetNbGp(arg1,arg2);
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_poroMAILx_LoadModels(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  
  if (!PyArg_ParseTuple(args,(char *)":poroMAILx_LoadModels")) SWIG_fail;
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      poroMAILx_LoadModels();
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_poroMAILx_LoadBehaviours(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  
  if (!PyArg_ParseTuple(args,(char *)":poroMAILx_LoadBehaviours")) SWIG_fail;
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      poroMAILx_LoadBehaviours();
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_poroMAILx_PushProperties(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  
  if (!PyArg_ParseTuple(args,(char *)":poroMAILx_PushProperties")) SWIG_fail;
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      poroMAILx_PushProperties();
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_poroMAILx_ReadDrivenDof(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  
  if (!PyArg_ParseTuple(args,(char *)":poroMAILx_ReadDrivenDof")) SWIG_fail;
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      poroMAILx_ReadDrivenDof();
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_poroMAILx_WriteDrivenDof(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  
  if (!PyArg_ParseTuple(args,(char *)":poroMAILx_WriteDrivenDof")) SWIG_fail;
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      poroMAILx_WriteDrivenDof();
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_poroMAILx_ReadIniDof(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  int arg1 = (int) 0 ;
  int val1 ;
  int ecode1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"|O:poroMAILx_ReadIniDof",&obj0)) SWIG_fail;
  if (obj0) {
    ecode1 = SWIG_AsVal_int(obj0, &val1);
    if (!SWIG_IsOK(ecode1)) {
      SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "poroMAILx_ReadIniDof" "', argument " "1"" of type '" "int""'");
    } 
    arg1 = static_cast< int >(val1);
  }
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      poroMAILx_ReadIniDof(arg1);
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_poroMAILx_ReadIniMecaDof(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  int arg1 = (int) 0 ;
  int val1 ;
  int ecode1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"|O:poroMAILx_ReadIniMecaDof",&obj0)) SWIG_fail;
  if (obj0) {
    ecode1 = SWIG_AsVal_int(obj0, &val1);
    if (!SWIG_IsOK(ecode1)) {
      SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "poroMAILx_ReadIniMecaDof" "', argument " "1"" of type '" "int""'");
    } 
    arg1 = static_cast< int >(val1);
  }
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      poroMAILx_ReadIniMecaDof(arg1);
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_poroMAILx_ReadIniGPV(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  int arg1 = (int) 0 ;
  int val1 ;
  int ecode1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"|O:poroMAILx_ReadIniGPV",&obj0)) SWIG_fail;
  if (obj0) {
    ecode1 = SWIG_AsVal_int(obj0, &val1);
    if (!SWIG_IsOK(ecode1)) {
      SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "poroMAILx_ReadIniGPV" "', argument " "1"" of type '" "int""'");
    } 
    arg1 = static_cast< int >(val1);
  }
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      poroMAILx_ReadIniGPV(arg1);
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_poroMAILx_ReadIniMecaGPV(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  int arg1 = (int) 0 ;
  int val1 ;
  int ecode1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"|O:poroMAILx_ReadIniMecaGPV",&obj0)) SWIG_fail;
  if (obj0) {
    ecode1 = SWIG_AsVal_int(obj0, &val1);
    if (!SWIG_IsOK(ecode1)) {
      SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "poroMAILx_ReadIniMecaGPV" "', argument " "1"" of type '" "int""'");
    } 
    arg1 = static_cast< int >(val1);
  }
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      poroMAILx_ReadIniMecaGPV(arg1);
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_poroMAILx_WriteLastDof(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  
  if (!PyArg_ParseTuple(args,(char *)":poroMAILx_WriteLastDof")) SWIG_fail;
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      poroMAILx_WriteLastDof();
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_poroMAILx_ComputeMass(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  
  if (!PyArg_ParseTuple(args,(char *)":poroMAILx_ComputeMass")) SWIG_fail;
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      poroMAILx_ComputeMass();
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_poroMAILx_ComputeFext(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  
  if (!PyArg_ParseTuple(args,(char *)":poroMAILx_ComputeFext")) SWIG_fail;
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      poroMAILx_ComputeFext();
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_poroMAILx_ComputeBulk(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  
  if (!PyArg_ParseTuple(args,(char *)":poroMAILx_ComputeBulk")) SWIG_fail;
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      poroMAILx_ComputeBulk();
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_poroMAILx_ComputeDamping(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  
  if (!PyArg_ParseTuple(args,(char *)":poroMAILx_ComputeDamping")) SWIG_fail;
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      poroMAILx_ComputeDamping();
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_poroMAILx_AssembKT(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  
  if (!PyArg_ParseTuple(args,(char *)":poroMAILx_AssembKT")) SWIG_fail;
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      poroMAILx_AssembKT();
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_poroMAILx_AssembRHS(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  
  if (!PyArg_ParseTuple(args,(char *)":poroMAILx_AssembRHS")) SWIG_fail;
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      poroMAILx_AssembRHS();
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_poroMAILx_ComputeFreeVelocity(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  
  if (!PyArg_ParseTuple(args,(char *)":poroMAILx_ComputeFreeVelocity")) SWIG_fail;
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      poroMAILx_ComputeFreeVelocity();
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_poroMAILx_ComputeDof(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  
  if (!PyArg_ParseTuple(args,(char *)":poroMAILx_ComputeDof")) SWIG_fail;
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      poroMAILx_ComputeDof();
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_poroMAILx_DisplayOutDof(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  
  if (!PyArg_ParseTuple(args,(char *)":poroMAILx_DisplayOutDof")) SWIG_fail;
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      poroMAILx_DisplayOutDof();
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_poroMAILx_UpdateDof(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  
  if (!PyArg_ParseTuple(args,(char *)":poroMAILx_UpdateDof")) SWIG_fail;
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      poroMAILx_UpdateDof();
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_poroMAILx_UpdateBulk(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  
  if (!PyArg_ParseTuple(args,(char *)":poroMAILx_UpdateBulk")) SWIG_fail;
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      poroMAILx_UpdateBulk();
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_poroMAILx_ComputeGrad(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  
  if (!PyArg_ParseTuple(args,(char *)":poroMAILx_ComputeGrad")) SWIG_fail;
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      poroMAILx_ComputeGrad();
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_poroMAILx_GetBodyVector(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  char *arg1 = (char *) 0 ;
  int arg2 ;
  double **arg3 = (double **) 0 ;
  int *arg4 = (int *) 0 ;
  int *arg5 = (int *) 0 ;
  int res1 ;
  char *buf1 = 0 ;
  int alloc1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  double *data_temp3 ;
  int dim1_temp3 ;
  int dim2_temp3 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  {
    arg3 = &data_temp3;
    arg4 = &dim1_temp3;
    arg5 = &dim2_temp3;
  }
  if (!PyArg_ParseTuple(args,(char *)"OO:poroMAILx_GetBodyVector",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_AsCharPtrAndSize(obj0, &buf1, NULL, &alloc1);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "poroMAILx_GetBodyVector" "', argument " "1"" of type '" "char *""'");
  }
  arg1 = reinterpret_cast< char * >(buf1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "poroMAILx_GetBodyVector" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      poroMAILx_GetBodyVector(arg1,arg2,arg3,arg4,arg5);
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_Py_Void();
  {
    npy_intp dims[2] = {
      *arg5, *arg4 
    };
    PyObject * obj = PyArray_SimpleNewFromData(2, dims, NPY_DOUBLE, (void*)(*arg3));
    if (!obj) SWIG_fail;
    PyArrayObject * array = (PyArrayObject*) obj;
    attach_fortran_memory_to_numpy_array(array, (void*)(*arg3), NPY_DOUBLE, dims[1], dims[0]);
    PyArray_ENABLEFLAGS(array,NPY_ARRAY_WRITEABLE);
    resultobj = SWIG_Python_AppendOutput(resultobj, obj);
  }
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  return resultobj;
fail:
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  return NULL;
}


SWIGINTERN PyObject *_wrap_poroMAILx_GetNbNodes(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  int arg1 ;
  int val1 ;
  int ecode1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:poroMAILx_GetNbNodes",&obj0)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "poroMAILx_GetNbNodes" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = static_cast< int >(val1);
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      result = (int)poroMAILx_GetNbNodes(arg1);
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_poroMAILx_GetNbElements(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  int arg1 ;
  int val1 ;
  int ecode1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:poroMAILx_GetNbElements",&obj0)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "poroMAILx_GetNbElements" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = static_cast< int >(val1);
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      result = (int)poroMAILx_GetNbElements(arg1);
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_poroMAILx_IncrementStep(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  
  if (!PyArg_ParseTuple(args,(char *)":poroMAILx_IncrementStep")) SWIG_fail;
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      poroMAILx_IncrementStep();
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_poroMAILx_WithoutRenumbering(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)":poroMAILx_WithoutRenumbering")) SWIG_fail;
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      result = (int)poroMAILx_WithoutRenumbering();
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_poroMAILx_BandStorage(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)":poroMAILx_BandStorage")) SWIG_fail;
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      result = (int)poroMAILx_BandStorage();
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_poroMAILx_SparseStorage(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)":poroMAILx_SparseStorage")) SWIG_fail;
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      result = (int)poroMAILx_SparseStorage();
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_poroMAILx_ExplodedStorage(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)":poroMAILx_ExplodedStorage")) SWIG_fail;
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      result = (int)poroMAILx_ExplodedStorage();
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_poroMAILx_DiagonalStorage(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)":poroMAILx_DiagonalStorage")) SWIG_fail;
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      result = (int)poroMAILx_DiagonalStorage();
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_poroMAILx_SkylineStorage(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)":poroMAILx_SkylineStorage")) SWIG_fail;
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      result = (int)poroMAILx_SkylineStorage();
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_poroMAILx_FullStorage(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)":poroMAILx_FullStorage")) SWIG_fail;
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      result = (int)poroMAILx_FullStorage();
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_poroMAILx_SymmetricShape(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)":poroMAILx_SymmetricShape")) SWIG_fail;
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      result = (int)poroMAILx_SymmetricShape();
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_poroMAILx_UnspecifiedShape(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)":poroMAILx_UnspecifiedShape")) SWIG_fail;
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      result = (int)poroMAILx_UnspecifiedShape();
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_poroMAILx_SetMecaScalarFieldByNode(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  int arg1 ;
  int arg2 ;
  double *arg3 = (double *) 0 ;
  int arg4 ;
  int val1 ;
  int ecode1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyArrayObject *array3 = NULL ;
  int is_new_object3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:poroMAILx_SetMecaScalarFieldByNode",&obj0,&obj1,&obj2)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "poroMAILx_SetMecaScalarFieldByNode" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = static_cast< int >(val1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "poroMAILx_SetMecaScalarFieldByNode" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    npy_intp size[1] = {
      -1 
    };
    array3 = obj_to_array_contiguous_allow_conversion(obj2,
      NPY_DOUBLE,
      &is_new_object3);
    if (!array3 || !require_dimensions(array3, 1) ||
      !require_size(array3, size, 1)) SWIG_fail;
    arg3 = (double*) array_data(array3);
    arg4 = (int) array_size(array3,0);
  }
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      poroMAILx_SetMecaScalarFieldByNode(arg1,arg2,arg3,arg4);
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_Py_Void();
  {
    if (is_new_object3 && array3)
    {
      Py_DECREF(array3); 
    }
  }
  return resultobj;
fail:
  {
    if (is_new_object3 && array3)
    {
      Py_DECREF(array3); 
    }
  }
  return NULL;
}


SWIGINTERN PyObject *_wrap_poroMAILx_SetTherScalarFieldByNode(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  int arg1 ;
  int arg2 ;
  double *arg3 = (double *) 0 ;
  int arg4 ;
  int val1 ;
  int ecode1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyArrayObject *array3 = NULL ;
  int is_new_object3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:poroMAILx_SetTherScalarFieldByNode",&obj0,&obj1,&obj2)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "poroMAILx_SetTherScalarFieldByNode" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = static_cast< int >(val1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "poroMAILx_SetTherScalarFieldByNode" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    npy_intp size[1] = {
      -1 
    };
    array3 = obj_to_array_contiguous_allow_conversion(obj2,
      NPY_DOUBLE,
      &is_new_object3);
    if (!array3 || !require_dimensions(array3, 1) ||
      !require_size(array3, size, 1)) SWIG_fail;
    arg3 = (double*) array_data(array3);
    arg4 = (int) array_size(array3,0);
  }
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      poroMAILx_SetTherScalarFieldByNode(arg1,arg2,arg3,arg4);
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_Py_Void();
  {
    if (is_new_object3 && array3)
    {
      Py_DECREF(array3); 
    }
  }
  return resultobj;
fail:
  {
    if (is_new_object3 && array3)
    {
      Py_DECREF(array3); 
    }
  }
  return NULL;
}


SWIGINTERN PyObject *_wrap_poroMAILx_SetMecaScalarFieldByElement(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  int arg1 ;
  int arg2 ;
  double *arg3 = (double *) 0 ;
  int arg4 ;
  int val1 ;
  int ecode1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyArrayObject *array3 = NULL ;
  int is_new_object3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:poroMAILx_SetMecaScalarFieldByElement",&obj0,&obj1,&obj2)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "poroMAILx_SetMecaScalarFieldByElement" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = static_cast< int >(val1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "poroMAILx_SetMecaScalarFieldByElement" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    npy_intp size[1] = {
      -1 
    };
    array3 = obj_to_array_contiguous_allow_conversion(obj2,
      NPY_DOUBLE,
      &is_new_object3);
    if (!array3 || !require_dimensions(array3, 1) ||
      !require_size(array3, size, 1)) SWIG_fail;
    arg3 = (double*) array_data(array3);
    arg4 = (int) array_size(array3,0);
  }
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      poroMAILx_SetMecaScalarFieldByElement(arg1,arg2,arg3,arg4);
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_Py_Void();
  {
    if (is_new_object3 && array3)
    {
      Py_DECREF(array3); 
    }
  }
  return resultobj;
fail:
  {
    if (is_new_object3 && array3)
    {
      Py_DECREF(array3); 
    }
  }
  return NULL;
}


SWIGINTERN PyObject *_wrap_poroMAILx_SetTherScalarFieldByElement(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  int arg1 ;
  int arg2 ;
  double *arg3 = (double *) 0 ;
  int arg4 ;
  int val1 ;
  int ecode1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyArrayObject *array3 = NULL ;
  int is_new_object3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:poroMAILx_SetTherScalarFieldByElement",&obj0,&obj1,&obj2)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "poroMAILx_SetTherScalarFieldByElement" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = static_cast< int >(val1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "poroMAILx_SetTherScalarFieldByElement" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    npy_intp size[1] = {
      -1 
    };
    array3 = obj_to_array_contiguous_allow_conversion(obj2,
      NPY_DOUBLE,
      &is_new_object3);
    if (!array3 || !require_dimensions(array3, 1) ||
      !require_size(array3, size, 1)) SWIG_fail;
    arg3 = (double*) array_data(array3);
    arg4 = (int) array_size(array3,0);
  }
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      poroMAILx_SetTherScalarFieldByElement(arg1,arg2,arg3,arg4);
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_Py_Void();
  {
    if (is_new_object3 && array3)
    {
      Py_DECREF(array3); 
    }
  }
  return resultobj;
fail:
  {
    if (is_new_object3 && array3)
    {
      Py_DECREF(array3); 
    }
  }
  return NULL;
}


SWIGINTERN PyObject *_wrap_poroMAILx_GetMecaScalarFieldRank(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  int arg1 ;
  int arg2 ;
  char *arg3 = (char *) 0 ;
  int val1 ;
  int ecode1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int res3 ;
  char *buf3 = 0 ;
  int alloc3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:poroMAILx_GetMecaScalarFieldRank",&obj0,&obj1,&obj2)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "poroMAILx_GetMecaScalarFieldRank" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = static_cast< int >(val1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "poroMAILx_GetMecaScalarFieldRank" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  res3 = SWIG_AsCharPtrAndSize(obj2, &buf3, NULL, &alloc3);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "poroMAILx_GetMecaScalarFieldRank" "', argument " "3"" of type '" "char *""'");
  }
  arg3 = reinterpret_cast< char * >(buf3);
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      result = (int)poroMAILx_GetMecaScalarFieldRank(arg1,arg2,arg3);
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return resultobj;
fail:
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_poroMAILx_GetMecaVectorFieldRank(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  int arg1 ;
  int arg2 ;
  char *arg3 = (char *) 0 ;
  int val1 ;
  int ecode1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int res3 ;
  char *buf3 = 0 ;
  int alloc3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:poroMAILx_GetMecaVectorFieldRank",&obj0,&obj1,&obj2)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "poroMAILx_GetMecaVectorFieldRank" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = static_cast< int >(val1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "poroMAILx_GetMecaVectorFieldRank" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  res3 = SWIG_AsCharPtrAndSize(obj2, &buf3, NULL, &alloc3);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "poroMAILx_GetMecaVectorFieldRank" "', argument " "3"" of type '" "char *""'");
  }
  arg3 = reinterpret_cast< char * >(buf3);
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      result = (int)poroMAILx_GetMecaVectorFieldRank(arg1,arg2,arg3);
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return resultobj;
fail:
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_poroMAILx_GetTherScalarFieldRank(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  int arg1 ;
  int arg2 ;
  char *arg3 = (char *) 0 ;
  int val1 ;
  int ecode1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int res3 ;
  char *buf3 = 0 ;
  int alloc3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:poroMAILx_GetTherScalarFieldRank",&obj0,&obj1,&obj2)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "poroMAILx_GetTherScalarFieldRank" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = static_cast< int >(val1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "poroMAILx_GetTherScalarFieldRank" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  res3 = SWIG_AsCharPtrAndSize(obj2, &buf3, NULL, &alloc3);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "poroMAILx_GetTherScalarFieldRank" "', argument " "3"" of type '" "char *""'");
  }
  arg3 = reinterpret_cast< char * >(buf3);
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      result = (int)poroMAILx_GetTherScalarFieldRank(arg1,arg2,arg3);
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return resultobj;
fail:
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_poroMAILx_GetTherVectorFieldRank(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  int arg1 ;
  int arg2 ;
  char *arg3 = (char *) 0 ;
  int val1 ;
  int ecode1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int res3 ;
  char *buf3 = 0 ;
  int alloc3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:poroMAILx_GetTherVectorFieldRank",&obj0,&obj1,&obj2)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "poroMAILx_GetTherVectorFieldRank" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = static_cast< int >(val1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "poroMAILx_GetTherVectorFieldRank" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  res3 = SWIG_AsCharPtrAndSize(obj2, &buf3, NULL, &alloc3);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "poroMAILx_GetTherVectorFieldRank" "', argument " "3"" of type '" "char *""'");
  }
  arg3 = reinterpret_cast< char * >(buf3);
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      result = (int)poroMAILx_GetTherVectorFieldRank(arg1,arg2,arg3);
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return resultobj;
fail:
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_poroMAILx_SetMecaVectorFieldByNode(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  int arg1 ;
  int arg2 ;
  double *arg3 = (double *) 0 ;
  int arg4 ;
  int arg5 ;
  int val1 ;
  int ecode1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyArrayObject *array3 = NULL ;
  int is_new_object3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:poroMAILx_SetMecaVectorFieldByNode",&obj0,&obj1,&obj2)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "poroMAILx_SetMecaVectorFieldByNode" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = static_cast< int >(val1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "poroMAILx_SetMecaVectorFieldByNode" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    npy_intp size[2] = {
      -1, -1 
    };
    array3 = obj_to_array_contiguous_allow_conversion(obj2, NPY_DOUBLE,
      &is_new_object3);
    if (!array3 || !require_dimensions(array3, 2) ||
      !require_size(array3, size, 2)) SWIG_fail;
    arg3 = (double*) array_data(array3);
    arg4 = (int) array_size(array3,0);
    arg5 = (int) array_size(array3,1);
  }
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      poroMAILx_SetMecaVectorFieldByNode(arg1,arg2,arg3,arg4,arg5);
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_Py_Void();
  {
    if (is_new_object3 && array3)
    {
      Py_DECREF(array3); 
    }
  }
  return resultobj;
fail:
  {
    if (is_new_object3 && array3)
    {
      Py_DECREF(array3); 
    }
  }
  return NULL;
}


SWIGINTERN PyObject *_wrap_poroMAILx_SetMecaVectorFieldByElement(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  int arg1 ;
  int arg2 ;
  double *arg3 = (double *) 0 ;
  int arg4 ;
  int arg5 ;
  int val1 ;
  int ecode1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyArrayObject *array3 = NULL ;
  int is_new_object3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:poroMAILx_SetMecaVectorFieldByElement",&obj0,&obj1,&obj2)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "poroMAILx_SetMecaVectorFieldByElement" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = static_cast< int >(val1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "poroMAILx_SetMecaVectorFieldByElement" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    npy_intp size[2] = {
      -1, -1 
    };
    array3 = obj_to_array_contiguous_allow_conversion(obj2, NPY_DOUBLE,
      &is_new_object3);
    if (!array3 || !require_dimensions(array3, 2) ||
      !require_size(array3, size, 2)) SWIG_fail;
    arg3 = (double*) array_data(array3);
    arg4 = (int) array_size(array3,0);
    arg5 = (int) array_size(array3,1);
  }
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      poroMAILx_SetMecaVectorFieldByElement(arg1,arg2,arg3,arg4,arg5);
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_Py_Void();
  {
    if (is_new_object3 && array3)
    {
      Py_DECREF(array3); 
    }
  }
  return resultobj;
fail:
  {
    if (is_new_object3 && array3)
    {
      Py_DECREF(array3); 
    }
  }
  return NULL;
}


SWIGINTERN PyObject *_wrap_poroMAILx_SetTherVectorFieldByNode(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  int arg1 ;
  int arg2 ;
  double *arg3 = (double *) 0 ;
  int arg4 ;
  int arg5 ;
  int val1 ;
  int ecode1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyArrayObject *array3 = NULL ;
  int is_new_object3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:poroMAILx_SetTherVectorFieldByNode",&obj0,&obj1,&obj2)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "poroMAILx_SetTherVectorFieldByNode" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = static_cast< int >(val1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "poroMAILx_SetTherVectorFieldByNode" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    npy_intp size[2] = {
      -1, -1 
    };
    array3 = obj_to_array_contiguous_allow_conversion(obj2, NPY_DOUBLE,
      &is_new_object3);
    if (!array3 || !require_dimensions(array3, 2) ||
      !require_size(array3, size, 2)) SWIG_fail;
    arg3 = (double*) array_data(array3);
    arg4 = (int) array_size(array3,0);
    arg5 = (int) array_size(array3,1);
  }
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      poroMAILx_SetTherVectorFieldByNode(arg1,arg2,arg3,arg4,arg5);
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_Py_Void();
  {
    if (is_new_object3 && array3)
    {
      Py_DECREF(array3); 
    }
  }
  return resultobj;
fail:
  {
    if (is_new_object3 && array3)
    {
      Py_DECREF(array3); 
    }
  }
  return NULL;
}


SWIGINTERN PyObject *_wrap_poroMAILx_SetTherVectorFieldByElement(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  int arg1 ;
  int arg2 ;
  double *arg3 = (double *) 0 ;
  int arg4 ;
  int arg5 ;
  int val1 ;
  int ecode1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyArrayObject *array3 = NULL ;
  int is_new_object3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:poroMAILx_SetTherVectorFieldByElement",&obj0,&obj1,&obj2)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "poroMAILx_SetTherVectorFieldByElement" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = static_cast< int >(val1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "poroMAILx_SetTherVectorFieldByElement" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    npy_intp size[2] = {
      -1, -1 
    };
    array3 = obj_to_array_contiguous_allow_conversion(obj2, NPY_DOUBLE,
      &is_new_object3);
    if (!array3 || !require_dimensions(array3, 2) ||
      !require_size(array3, size, 2)) SWIG_fail;
    arg3 = (double*) array_data(array3);
    arg4 = (int) array_size(array3,0);
    arg5 = (int) array_size(array3,1);
  }
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      poroMAILx_SetTherVectorFieldByElement(arg1,arg2,arg3,arg4,arg5);
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_Py_Void();
  {
    if (is_new_object3 && array3)
    {
      Py_DECREF(array3); 
    }
  }
  return resultobj;
fail:
  {
    if (is_new_object3 && array3)
    {
      Py_DECREF(array3); 
    }
  }
  return NULL;
}


SWIGINTERN PyObject *_wrap_poroMAILx_LoadALE(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  int arg1 ;
  int val1 ;
  int ecode1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:poroMAILx_LoadALE",&obj0)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "poroMAILx_LoadALE" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = static_cast< int >(val1);
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      poroMAILx_LoadALE(arg1);
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_poroMAILx_PutBodyVector(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  char *arg1 = (char *) 0 ;
  int arg2 ;
  double *arg3 = (double *) 0 ;
  int arg4 ;
  int arg5 ;
  int res1 ;
  char *buf1 = 0 ;
  int alloc1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyArrayObject *array3 = NULL ;
  int is_new_object3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:poroMAILx_PutBodyVector",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_AsCharPtrAndSize(obj0, &buf1, NULL, &alloc1);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "poroMAILx_PutBodyVector" "', argument " "1"" of type '" "char *""'");
  }
  arg1 = reinterpret_cast< char * >(buf1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "poroMAILx_PutBodyVector" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    npy_intp size[2] = {
      -1, -1 
    };
    array3 = obj_to_array_contiguous_allow_conversion(obj2, NPY_DOUBLE,
      &is_new_object3);
    if (!array3 || !require_dimensions(array3, 2) ||
      !require_size(array3, size, 2)) SWIG_fail;
    arg3 = (double*) array_data(array3);
    arg4 = (int) array_size(array3,0);
    arg5 = (int) array_size(array3,1);
  }
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      poroMAILx_PutBodyVector(arg1,arg2,arg3,arg4,arg5);
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_Py_Void();
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  {
    if (is_new_object3 && array3)
    {
      Py_DECREF(array3); 
    }
  }
  return resultobj;
fail:
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  {
    if (is_new_object3 && array3)
    {
      Py_DECREF(array3); 
    }
  }
  return NULL;
}


SWIGINTERN PyObject *_wrap_poroMAILx_ComputeResidueNorm(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)":poroMAILx_ComputeResidueNorm")) SWIG_fail;
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      result = (double)poroMAILx_ComputeResidueNorm();
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_poroMAILx_GetStress(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  int arg1 ;
  double **arg2 = (double **) 0 ;
  int *arg3 = (int *) 0 ;
  int *arg4 = (int *) 0 ;
  int arg5 = (int) 0 ;
  int val1 ;
  int ecode1 = 0 ;
  double *data_temp2 ;
  int dim1_temp2 ;
  int dim2_temp2 ;
  int val5 ;
  int ecode5 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  {
    arg2 = &data_temp2;
    arg3 = &dim1_temp2;
    arg4 = &dim2_temp2;
  }
  if (!PyArg_ParseTuple(args,(char *)"O|O:poroMAILx_GetStress",&obj0,&obj1)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "poroMAILx_GetStress" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = static_cast< int >(val1);
  if (obj1) {
    ecode5 = SWIG_AsVal_int(obj1, &val5);
    if (!SWIG_IsOK(ecode5)) {
      SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "poroMAILx_GetStress" "', argument " "5"" of type '" "int""'");
    } 
    arg5 = static_cast< int >(val5);
  }
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      poroMAILx_GetStress(arg1,arg2,arg3,arg4,arg5);
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_Py_Void();
  {
    npy_intp dims[2] = {
      *arg4, *arg3 
    };
    PyObject * obj = PyArray_SimpleNewFromData(2, dims, NPY_DOUBLE, (void*)(*arg2));
    if (!obj) SWIG_fail;
    PyArrayObject * array = (PyArrayObject*) obj;
    attach_fortran_memory_to_numpy_array(array, (void*)(*arg2), NPY_DOUBLE, dims[1], dims[0]);
    PyArray_ENABLEFLAGS(array,NPY_ARRAY_WRITEABLE);
    resultobj = SWIG_Python_AppendOutput(resultobj, obj);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_poroMAILx_GetStrain(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  int arg1 ;
  double **arg2 = (double **) 0 ;
  int *arg3 = (int *) 0 ;
  int *arg4 = (int *) 0 ;
  int arg5 = (int) 0 ;
  int val1 ;
  int ecode1 = 0 ;
  double *data_temp2 ;
  int dim1_temp2 ;
  int dim2_temp2 ;
  int val5 ;
  int ecode5 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  {
    arg2 = &data_temp2;
    arg3 = &dim1_temp2;
    arg4 = &dim2_temp2;
  }
  if (!PyArg_ParseTuple(args,(char *)"O|O:poroMAILx_GetStrain",&obj0,&obj1)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "poroMAILx_GetStrain" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = static_cast< int >(val1);
  if (obj1) {
    ecode5 = SWIG_AsVal_int(obj1, &val5);
    if (!SWIG_IsOK(ecode5)) {
      SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "poroMAILx_GetStrain" "', argument " "5"" of type '" "int""'");
    } 
    arg5 = static_cast< int >(val5);
  }
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      poroMAILx_GetStrain(arg1,arg2,arg3,arg4,arg5);
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_Py_Void();
  {
    npy_intp dims[2] = {
      *arg4, *arg3 
    };
    PyObject * obj = PyArray_SimpleNewFromData(2, dims, NPY_DOUBLE, (void*)(*arg2));
    if (!obj) SWIG_fail;
    PyArrayObject * array = (PyArrayObject*) obj;
    attach_fortran_memory_to_numpy_array(array, (void*)(*arg2), NPY_DOUBLE, dims[1], dims[0]);
    PyArray_ENABLEFLAGS(array,NPY_ARRAY_WRITEABLE);
    resultobj = SWIG_Python_AppendOutput(resultobj, obj);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_poroMAILx_ComputeContactDetectionConfiguration(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  
  if (!PyArg_ParseTuple(args,(char *)":poroMAILx_ComputeContactDetectionConfiguration")) SWIG_fail;
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      poroMAILx_ComputeContactDetectionConfiguration();
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_poroMAILx_SetPreconAllBodies(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  
  if (!PyArg_ParseTuple(args,(char *)":poroMAILx_SetPreconAllBodies")) SWIG_fail;
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      poroMAILx_SetPreconAllBodies();
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_poroMAILx_ComputePreconW(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  
  if (!PyArg_ParseTuple(args,(char *)":poroMAILx_ComputePreconW")) SWIG_fail;
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      poroMAILx_ComputePreconW();
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_poroMAILx_GetNbPoroMAILx(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)":poroMAILx_GetNbPoroMAILx")) SWIG_fail;
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      result = (int)poroMAILx_GetNbPoroMAILx();
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_poroMAILx_GetCoor(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  int arg1 ;
  double **arg2 = (double **) 0 ;
  int *arg3 = (int *) 0 ;
  int *arg4 = (int *) 0 ;
  int val1 ;
  int ecode1 = 0 ;
  double *data_temp2 ;
  int dim1_temp2 ;
  int dim2_temp2 ;
  PyObject * obj0 = 0 ;
  
  {
    arg2 = &data_temp2;
    arg3 = &dim1_temp2;
    arg4 = &dim2_temp2;
  }
  if (!PyArg_ParseTuple(args,(char *)"O:poroMAILx_GetCoor",&obj0)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "poroMAILx_GetCoor" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = static_cast< int >(val1);
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      poroMAILx_GetCoor(arg1,arg2,arg3,arg4);
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_Py_Void();
  {
    npy_intp dims[2] = {
      *arg4, *arg3 
    };
    PyObject * obj = PyArray_SimpleNewFromData(2, dims, NPY_DOUBLE, (void*)(*arg2));
    if (!obj) SWIG_fail;
    PyArrayObject * array = (PyArrayObject*) obj;
    attach_fortran_memory_to_numpy_array(array, (void*)(*arg2), NPY_DOUBLE, dims[1], dims[0]);
    PyArray_ENABLEFLAGS(array,NPY_ARRAY_WRITEABLE);
    resultobj = SWIG_Python_AppendOutput(resultobj, obj);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_poroMAILx_GetAll(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  int arg1 ;
  double **arg2 = (double **) 0 ;
  int *arg3 = (int *) 0 ;
  int *arg4 = (int *) 0 ;
  int val1 ;
  int ecode1 = 0 ;
  double *data_temp2 ;
  int dim1_temp2 ;
  int dim2_temp2 ;
  PyObject * obj0 = 0 ;
  
  {
    arg2 = &data_temp2;
    arg3 = &dim1_temp2;
    arg4 = &dim2_temp2;
  }
  if (!PyArg_ParseTuple(args,(char *)"O:poroMAILx_GetAll",&obj0)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "poroMAILx_GetAll" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = static_cast< int >(val1);
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      poroMAILx_GetAll(arg1,arg2,arg3,arg4);
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_Py_Void();
  {
    npy_intp dims[2] = {
      *arg4, *arg3 
    };
    PyObject * obj = PyArray_SimpleNewFromData(2, dims, NPY_DOUBLE, (void*)(*arg2));
    if (!obj) SWIG_fail;
    PyArrayObject * array = (PyArrayObject*) obj;
    attach_fortran_memory_to_numpy_array(array, (void*)(*arg2), NPY_DOUBLE, dims[1], dims[0]);
    PyArray_ENABLEFLAGS(array,NPY_ARRAY_WRITEABLE);
    resultobj = SWIG_Python_AppendOutput(resultobj, obj);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_poroMAILx_GetGrad(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  int arg1 ;
  double **arg2 = (double **) 0 ;
  int *arg3 = (int *) 0 ;
  int *arg4 = (int *) 0 ;
  int val1 ;
  int ecode1 = 0 ;
  double *data_temp2 ;
  int dim1_temp2 ;
  int dim2_temp2 ;
  PyObject * obj0 = 0 ;
  
  {
    arg2 = &data_temp2;
    arg3 = &dim1_temp2;
    arg4 = &dim2_temp2;
  }
  if (!PyArg_ParseTuple(args,(char *)"O:poroMAILx_GetGrad",&obj0)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "poroMAILx_GetGrad" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = static_cast< int >(val1);
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      poroMAILx_GetGrad(arg1,arg2,arg3,arg4);
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_Py_Void();
  {
    npy_intp dims[2] = {
      *arg4, *arg3 
    };
    PyObject * obj = PyArray_SimpleNewFromData(2, dims, NPY_DOUBLE, (void*)(*arg2));
    if (!obj) SWIG_fail;
    PyArrayObject * array = (PyArrayObject*) obj;
    attach_fortran_memory_to_numpy_array(array, (void*)(*arg2), NPY_DOUBLE, dims[1], dims[0]);
    PyArray_ENABLEFLAGS(array,NPY_ARRAY_WRITEABLE);
    resultobj = SWIG_Python_AppendOutput(resultobj, obj);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_poroMAILx_GetFlux(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  int arg1 ;
  double **arg2 = (double **) 0 ;
  int *arg3 = (int *) 0 ;
  int *arg4 = (int *) 0 ;
  int val1 ;
  int ecode1 = 0 ;
  double *data_temp2 ;
  int dim1_temp2 ;
  int dim2_temp2 ;
  PyObject * obj0 = 0 ;
  
  {
    arg2 = &data_temp2;
    arg3 = &dim1_temp2;
    arg4 = &dim2_temp2;
  }
  if (!PyArg_ParseTuple(args,(char *)"O:poroMAILx_GetFlux",&obj0)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "poroMAILx_GetFlux" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = static_cast< int >(val1);
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      poroMAILx_GetFlux(arg1,arg2,arg3,arg4);
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_Py_Void();
  {
    npy_intp dims[2] = {
      *arg4, *arg3 
    };
    PyObject * obj = PyArray_SimpleNewFromData(2, dims, NPY_DOUBLE, (void*)(*arg2));
    if (!obj) SWIG_fail;
    PyArrayObject * array = (PyArrayObject*) obj;
    attach_fortran_memory_to_numpy_array(array, (void*)(*arg2), NPY_DOUBLE, dims[1], dims[0]);
    PyArray_ENABLEFLAGS(array,NPY_ARRAY_WRITEABLE);
    resultobj = SWIG_Python_AppendOutput(resultobj, obj);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_poroMAILx_GetInternal(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  int arg1 ;
  double **arg2 = (double **) 0 ;
  int *arg3 = (int *) 0 ;
  int *arg4 = (int *) 0 ;
  int val1 ;
  int ecode1 = 0 ;
  double *data_temp2 ;
  int dim1_temp2 ;
  int dim2_temp2 ;
  PyObject * obj0 = 0 ;
  
  {
    arg2 = &data_temp2;
    arg3 = &dim1_temp2;
    arg4 = &dim2_temp2;
  }
  if (!PyArg_ParseTuple(args,(char *)"O:poroMAILx_GetInternal",&obj0)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "poroMAILx_GetInternal" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = static_cast< int >(val1);
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      poroMAILx_GetInternal(arg1,arg2,arg3,arg4);
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_Py_Void();
  {
    npy_intp dims[2] = {
      *arg4, *arg3 
    };
    PyObject * obj = PyArray_SimpleNewFromData(2, dims, NPY_DOUBLE, (void*)(*arg2));
    if (!obj) SWIG_fail;
    PyArrayObject * array = (PyArrayObject*) obj;
    attach_fortran_memory_to_numpy_array(array, (void*)(*arg2), NPY_DOUBLE, dims[1], dims[0]);
    PyArray_ENABLEFLAGS(array,NPY_ARRAY_WRITEABLE);
    resultobj = SWIG_Python_AppendOutput(resultobj, obj);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_poroMAILx_GetConnectivity(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  int arg1 ;
  int **arg2 = (int **) 0 ;
  int *arg3 = (int *) 0 ;
  int val1 ;
  int ecode1 = 0 ;
  int *data_temp2 ;
  int dim_temp2 ;
  PyObject * obj0 = 0 ;
  
  {
    arg2 = &data_temp2;
    arg3 = &dim_temp2;
  }
  if (!PyArg_ParseTuple(args,(char *)"O:poroMAILx_GetConnectivity",&obj0)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "poroMAILx_GetConnectivity" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = static_cast< int >(val1);
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      poroMAILx_GetConnectivity(arg1,arg2,arg3);
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_Py_Void();
  {
    npy_intp dims[1] = {
      *arg3 
    };
    PyObject * obj = PyArray_SimpleNewFromData(1, dims, NPY_INT, (void*)(*arg2));
    if (!obj) SWIG_fail;
    PyArrayObject * array = (PyArrayObject*) obj;
    attach_fortran_memory_to_numpy_array(array, (void*)(*arg2), NPY_INT, dims[0], 0);
    PyArray_ENABLEFLAGS(array,NPY_ARRAY_WRITEABLE);
    
    resultobj = SWIG_Python_AppendOutput(resultobj, obj);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_poroMAILx_SetVlocyDrivenDof(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  int arg1 ;
  int arg2 ;
  int arg3 ;
  double arg4 ;
  int val1 ;
  int ecode1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  double val4 ;
  int ecode4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:poroMAILx_SetVlocyDrivenDof",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "poroMAILx_SetVlocyDrivenDof" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = static_cast< int >(val1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "poroMAILx_SetVlocyDrivenDof" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "poroMAILx_SetVlocyDrivenDof" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  ecode4 = SWIG_AsVal_double(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "poroMAILx_SetVlocyDrivenDof" "', argument " "4"" of type '" "double""'");
  } 
  arg4 = static_cast< double >(val4);
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      poroMAILx_SetVlocyDrivenDof(arg1,arg2,arg3,arg4);
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_poroMAILx_AddFieldLoad(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  int arg1 ;
  double *arg2 = (double *) 0 ;
  int arg3 ;
  int val1 ;
  int ecode1 = 0 ;
  PyArrayObject *array2 = NULL ;
  int is_new_object2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:poroMAILx_AddFieldLoad",&obj0,&obj1)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "poroMAILx_AddFieldLoad" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = static_cast< int >(val1);
  {
    npy_intp size[1] = {
      -1 
    };
    array2 = obj_to_array_contiguous_allow_conversion(obj1,
      NPY_DOUBLE,
      &is_new_object2);
    if (!array2 || !require_dimensions(array2, 1) ||
      !require_size(array2, size, 1)) SWIG_fail;
    arg2 = (double*) array_data(array2);
    arg3 = (int) array_size(array2,0);
  }
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      poroMAILx_AddFieldLoad(arg1,arg2,arg3);
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_Py_Void();
  {
    if (is_new_object2 && array2)
    {
      Py_DECREF(array2); 
    }
  }
  return resultobj;
fail:
  {
    if (is_new_object2 && array2)
    {
      Py_DECREF(array2); 
    }
  }
  return NULL;
}


SWIGINTERN PyObject *_wrap_poroMAILx_WriteOutDof(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  
  if (!PyArg_ParseTuple(args,(char *)":poroMAILx_WriteOutDof")) SWIG_fail;
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      poroMAILx_WriteOutDof();
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_poroMAILx_PostModels(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  
  if (!PyArg_ParseTuple(args,(char *)":poroMAILx_PostModels")) SWIG_fail;
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      poroMAILx_PostModels();
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_poroMAILx_CleanMemory(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  
  if (!PyArg_ParseTuple(args,(char *)":poroMAILx_CleanMemory")) SWIG_fail;
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      poroMAILx_CleanMemory();
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_poroMAILx_CheckProperties(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)":poroMAILx_CheckProperties")) SWIG_fail;
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      result = (int)poroMAILx_CheckProperties();
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_poroMAILx_GetNbGpByElem(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  char **arg1 = (char **) 0 ;
  int *arg2 = (int *) 0 ;
  int *arg3 = (int *) 0 ;
  int **arg4 = (int **) 0 ;
  int *arg5 = (int *) 0 ;
  int **arg6 = (int **) 0 ;
  int *arg7 = (int *) 0 ;
  char *tmp_vector1 ;
  int tmp_vsize1 ;
  int tmp_csize1 ;
  int *data_temp4 ;
  int dim_temp4 ;
  int *data_temp6 ;
  int dim_temp6 ;
  
  {
    arg1 = &tmp_vector1;
    arg2 = &tmp_vsize1;
    arg3 = &tmp_csize1;
  }
  {
    arg4 = &data_temp4;
    arg5 = &dim_temp4;
  }
  {
    arg6 = &data_temp6;
    arg7 = &dim_temp6;
  }
  if (!PyArg_ParseTuple(args,(char *)":poroMAILx_GetNbGpByElem")) SWIG_fail;
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      poroMAILx_GetNbGpByElem(arg1,arg2,arg3,arg4,arg5,arg6,arg7);
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_Py_Void();
  {
    int i;
    PyObject *liste, *chaine;
    liste = PyTuple_New(*arg2);
    for( i=0; i<*arg2; i++ )
    {
      chaine = PyString_FromStringAndSize((*arg1+i*(*arg3)), *arg3);
      PyTuple_SetItem(liste, i, chaine);
    }
    
    resultobj = SWIG_Python_AppendOutput(resultobj, liste);
  }
  {
    npy_intp dims[1] = {
      *arg5 
    };
    PyObject * obj = PyArray_SimpleNewFromData(1, dims, NPY_INT, (void*)(*arg4));
    if (!obj) SWIG_fail;
    PyArrayObject * array = (PyArrayObject*) obj;
    attach_fortran_memory_to_numpy_array(array, (void*)(*arg4), NPY_INT, dims[0], 0);
    PyArray_ENABLEFLAGS(array,NPY_ARRAY_WRITEABLE);
    
    resultobj = SWIG_Python_AppendOutput(resultobj, obj);
  }
  {
    npy_intp dims[1] = {
      *arg7 
    };
    PyObject * obj = PyArray_SimpleNewFromData(1, dims, NPY_INT, (void*)(*arg6));
    if (!obj) SWIG_fail;
    PyArrayObject * array = (PyArrayObject*) obj;
    attach_fortran_memory_to_numpy_array(array, (void*)(*arg6), NPY_INT, dims[0], 0);
    PyArray_ENABLEFLAGS(array,NPY_ARRAY_WRITEABLE);
    
    resultobj = SWIG_Python_AppendOutput(resultobj, obj);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_multiMAILx_UsePicardScheme(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  
  if (!PyArg_ParseTuple(args,(char *)":multiMAILx_UsePicardScheme")) SWIG_fail;
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      multiMAILx_UsePicardScheme();
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_multiMAILx_UseNewtonScheme(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  
  if (!PyArg_ParseTuple(args,(char *)":multiMAILx_UseNewtonScheme")) SWIG_fail;
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      multiMAILx_UseNewtonScheme();
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_multiMAILx_WithoutRenumbering(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)":multiMAILx_WithoutRenumbering")) SWIG_fail;
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      result = (int)multiMAILx_WithoutRenumbering();
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_multiMAILx_BandStorage(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)":multiMAILx_BandStorage")) SWIG_fail;
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      result = (int)multiMAILx_BandStorage();
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_multiMAILx_SparseStorage(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)":multiMAILx_SparseStorage")) SWIG_fail;
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      result = (int)multiMAILx_SparseStorage();
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_multiMAILx_ExplodedStorage(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)":multiMAILx_ExplodedStorage")) SWIG_fail;
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      result = (int)multiMAILx_ExplodedStorage();
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_multiMAILx_DiagonalStorage(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)":multiMAILx_DiagonalStorage")) SWIG_fail;
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      result = (int)multiMAILx_DiagonalStorage();
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_multiMAILx_SkylineStorage(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)":multiMAILx_SkylineStorage")) SWIG_fail;
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      result = (int)multiMAILx_SkylineStorage();
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_multiMAILx_FullStorage(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)":multiMAILx_FullStorage")) SWIG_fail;
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      result = (int)multiMAILx_FullStorage();
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_multiMAILx_SymmetricShape(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)":multiMAILx_SymmetricShape")) SWIG_fail;
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      result = (int)multiMAILx_SymmetricShape();
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_multiMAILx_UnspecifiedShape(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)":multiMAILx_UnspecifiedShape")) SWIG_fail;
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      result = (int)multiMAILx_UnspecifiedShape();
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_multiMAILx_GetNb(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)":multiMAILx_GetNb")) SWIG_fail;
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      result = (int)multiMAILx_GetNb();
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_multiMAILx_GetNbNodes(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  int arg1 ;
  int val1 ;
  int ecode1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:multiMAILx_GetNbNodes",&obj0)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "multiMAILx_GetNbNodes" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = static_cast< int >(val1);
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      result = (int)multiMAILx_GetNbNodes(arg1);
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_multiMAILx_GetNbElements(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  int arg1 ;
  int val1 ;
  int ecode1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:multiMAILx_GetNbElements",&obj0)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "multiMAILx_GetNbElements" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = static_cast< int >(val1);
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      result = (int)multiMAILx_GetNbElements(arg1);
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_multiMAILx_IsVisible(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  int arg1 ;
  int val1 ;
  int ecode1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:multiMAILx_IsVisible",&obj0)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "multiMAILx_IsVisible" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = static_cast< int >(val1);
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      result = (int)multiMAILx_IsVisible(arg1);
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_multiMAILx_GetBodyVector(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  char *arg1 = (char *) 0 ;
  int arg2 ;
  double **arg3 = (double **) 0 ;
  int *arg4 = (int *) 0 ;
  int *arg5 = (int *) 0 ;
  int res1 ;
  char *buf1 = 0 ;
  int alloc1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  double *data_temp3 ;
  int dim1_temp3 ;
  int dim2_temp3 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  {
    arg3 = &data_temp3;
    arg4 = &dim1_temp3;
    arg5 = &dim2_temp3;
  }
  if (!PyArg_ParseTuple(args,(char *)"OO:multiMAILx_GetBodyVector",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_AsCharPtrAndSize(obj0, &buf1, NULL, &alloc1);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "multiMAILx_GetBodyVector" "', argument " "1"" of type '" "char *""'");
  }
  arg1 = reinterpret_cast< char * >(buf1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "multiMAILx_GetBodyVector" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      multiMAILx_GetBodyVector(arg1,arg2,arg3,arg4,arg5);
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_Py_Void();
  {
    npy_intp dims[2] = {
      *arg5, *arg4 
    };
    PyObject * obj = PyArray_SimpleNewFromData(2, dims, NPY_DOUBLE, (void*)(*arg3));
    if (!obj) SWIG_fail;
    PyArrayObject * array = (PyArrayObject*) obj;
    attach_fortran_memory_to_numpy_array(array, (void*)(*arg3), NPY_DOUBLE, dims[1], dims[0]);
    PyArray_ENABLEFLAGS(array,NPY_ARRAY_WRITEABLE);
    resultobj = SWIG_Python_AppendOutput(resultobj, obj);
  }
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  return resultobj;
fail:
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  return NULL;
}


SWIGINTERN PyObject *_wrap_multiMAILx_PutBodyVector(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  char *arg1 = (char *) 0 ;
  int arg2 ;
  double *arg3 = (double *) 0 ;
  int arg4 ;
  int arg5 ;
  int res1 ;
  char *buf1 = 0 ;
  int alloc1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyArrayObject *array3 = NULL ;
  int is_new_object3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:multiMAILx_PutBodyVector",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_AsCharPtrAndSize(obj0, &buf1, NULL, &alloc1);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "multiMAILx_PutBodyVector" "', argument " "1"" of type '" "char *""'");
  }
  arg1 = reinterpret_cast< char * >(buf1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "multiMAILx_PutBodyVector" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    npy_intp size[2] = {
      -1, -1 
    };
    array3 = obj_to_array_contiguous_allow_conversion(obj2, NPY_DOUBLE,
      &is_new_object3);
    if (!array3 || !require_dimensions(array3, 2) ||
      !require_size(array3, size, 2)) SWIG_fail;
    arg3 = (double*) array_data(array3);
    arg4 = (int) array_size(array3,0);
    arg5 = (int) array_size(array3,1);
  }
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      multiMAILx_PutBodyVector(arg1,arg2,arg3,arg4,arg5);
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_Py_Void();
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  {
    if (is_new_object3 && array3)
    {
      Py_DECREF(array3); 
    }
  }
  return resultobj;
fail:
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  {
    if (is_new_object3 && array3)
    {
      Py_DECREF(array3); 
    }
  }
  return NULL;
}


SWIGINTERN PyObject *_wrap_multiMAILx_ReadDrivenDof(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  
  if (!PyArg_ParseTuple(args,(char *)":multiMAILx_ReadDrivenDof")) SWIG_fail;
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      multiMAILx_ReadDrivenDof();
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_multiMAILx_WriteDrivenDof(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  
  if (!PyArg_ParseTuple(args,(char *)":multiMAILx_WriteDrivenDof")) SWIG_fail;
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      multiMAILx_WriteDrivenDof();
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_multiMAILx_ReadIniGPV(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  int arg1 = (int) 0 ;
  int val1 ;
  int ecode1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"|O:multiMAILx_ReadIniGPV",&obj0)) SWIG_fail;
  if (obj0) {
    ecode1 = SWIG_AsVal_int(obj0, &val1);
    if (!SWIG_IsOK(ecode1)) {
      SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "multiMAILx_ReadIniGPV" "', argument " "1"" of type '" "int""'");
    } 
    arg1 = static_cast< int >(val1);
  }
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      multiMAILx_ReadIniGPV(arg1);
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_multiMAILx_ReadIniDof(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  int arg1 = (int) 0 ;
  int val1 ;
  int ecode1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"|O:multiMAILx_ReadIniDof",&obj0)) SWIG_fail;
  if (obj0) {
    ecode1 = SWIG_AsVal_int(obj0, &val1);
    if (!SWIG_IsOK(ecode1)) {
      SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "multiMAILx_ReadIniDof" "', argument " "1"" of type '" "int""'");
    } 
    arg1 = static_cast< int >(val1);
  }
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      multiMAILx_ReadIniDof(arg1);
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_multiMAILx_WriteLastDof(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  int *arg1 = (int *) NULL ;
  int arg2 = (int) 0 ;
  PyArrayObject *array1 = NULL ;
  int is_new_object1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"|O:multiMAILx_WriteLastDof",&obj0)) SWIG_fail;
  if (obj0) {
    {
      npy_intp size[1] = {
        -1 
      };
      array1 = obj_to_array_contiguous_allow_conversion(obj0,
        NPY_INT,
        &is_new_object1);
      if (!array1 || !require_dimensions(array1, 1) ||
        !require_size(array1, size, 1)) SWIG_fail;
      arg1 = (int*) array_data(array1);
      arg2 = (int) array_size(array1,0);
    }
  }
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      multiMAILx_WriteLastDof(arg1,arg2);
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_Py_Void();
  {
    if (is_new_object1 && array1)
    {
      Py_DECREF(array1); 
    }
  }
  return resultobj;
fail:
  {
    if (is_new_object1 && array1)
    {
      Py_DECREF(array1); 
    }
  }
  return NULL;
}


SWIGINTERN PyObject *_wrap_multiMAILx_WriteOutDof(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  int *arg1 = (int *) NULL ;
  int arg2 = (int) 0 ;
  PyArrayObject *array1 = NULL ;
  int is_new_object1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"|O:multiMAILx_WriteOutDof",&obj0)) SWIG_fail;
  if (obj0) {
    {
      npy_intp size[1] = {
        -1 
      };
      array1 = obj_to_array_contiguous_allow_conversion(obj0,
        NPY_INT,
        &is_new_object1);
      if (!array1 || !require_dimensions(array1, 1) ||
        !require_size(array1, size, 1)) SWIG_fail;
      arg1 = (int*) array_data(array1);
      arg2 = (int) array_size(array1,0);
    }
  }
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      multiMAILx_WriteOutDof(arg1,arg2);
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_Py_Void();
  {
    if (is_new_object1 && array1)
    {
      Py_DECREF(array1); 
    }
  }
  return resultobj;
fail:
  {
    if (is_new_object1 && array1)
    {
      Py_DECREF(array1); 
    }
  }
  return NULL;
}


SWIGINTERN PyObject *_wrap_multiMAILx_LoadBehaviours(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  
  if (!PyArg_ParseTuple(args,(char *)":multiMAILx_LoadBehaviours")) SWIG_fail;
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      multiMAILx_LoadBehaviours();
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_multiMAILx_LoadModels(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  
  if (!PyArg_ParseTuple(args,(char *)":multiMAILx_LoadModels")) SWIG_fail;
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      multiMAILx_LoadModels();
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_multiMAILx_PushProperties(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  
  if (!PyArg_ParseTuple(args,(char *)":multiMAILx_PushProperties")) SWIG_fail;
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      multiMAILx_PushProperties();
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_multiMAILx_IncrementStep(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  
  if (!PyArg_ParseTuple(args,(char *)":multiMAILx_IncrementStep")) SWIG_fail;
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      multiMAILx_IncrementStep();
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_multiMAILx_ComputeMass(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  int *arg1 = (int *) NULL ;
  int arg2 = (int) 0 ;
  PyArrayObject *array1 = NULL ;
  int is_new_object1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"|O:multiMAILx_ComputeMass",&obj0)) SWIG_fail;
  if (obj0) {
    {
      npy_intp size[1] = {
        -1 
      };
      array1 = obj_to_array_contiguous_allow_conversion(obj0,
        NPY_INT,
        &is_new_object1);
      if (!array1 || !require_dimensions(array1, 1) ||
        !require_size(array1, size, 1)) SWIG_fail;
      arg1 = (int*) array_data(array1);
      arg2 = (int) array_size(array1,0);
    }
  }
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      multiMAILx_ComputeMass(arg1,arg2);
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_Py_Void();
  {
    if (is_new_object1 && array1)
    {
      Py_DECREF(array1); 
    }
  }
  return resultobj;
fail:
  {
    if (is_new_object1 && array1)
    {
      Py_DECREF(array1); 
    }
  }
  return NULL;
}


SWIGINTERN PyObject *_wrap_multiMAILx_ComputeBulk(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  int *arg1 = (int *) NULL ;
  int arg2 = (int) 0 ;
  PyArrayObject *array1 = NULL ;
  int is_new_object1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"|O:multiMAILx_ComputeBulk",&obj0)) SWIG_fail;
  if (obj0) {
    {
      npy_intp size[1] = {
        -1 
      };
      array1 = obj_to_array_contiguous_allow_conversion(obj0,
        NPY_INT,
        &is_new_object1);
      if (!array1 || !require_dimensions(array1, 1) ||
        !require_size(array1, size, 1)) SWIG_fail;
      arg1 = (int*) array_data(array1);
      arg2 = (int) array_size(array1,0);
    }
  }
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      multiMAILx_ComputeBulk(arg1,arg2);
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_Py_Void();
  {
    if (is_new_object1 && array1)
    {
      Py_DECREF(array1); 
    }
  }
  return resultobj;
fail:
  {
    if (is_new_object1 && array1)
    {
      Py_DECREF(array1); 
    }
  }
  return NULL;
}


SWIGINTERN PyObject *_wrap_multiMAILx_ComputeFext(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  int *arg1 = (int *) NULL ;
  int arg2 = (int) 0 ;
  PyArrayObject *array1 = NULL ;
  int is_new_object1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"|O:multiMAILx_ComputeFext",&obj0)) SWIG_fail;
  if (obj0) {
    {
      npy_intp size[1] = {
        -1 
      };
      array1 = obj_to_array_contiguous_allow_conversion(obj0,
        NPY_INT,
        &is_new_object1);
      if (!array1 || !require_dimensions(array1, 1) ||
        !require_size(array1, size, 1)) SWIG_fail;
      arg1 = (int*) array_data(array1);
      arg2 = (int) array_size(array1,0);
    }
  }
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      multiMAILx_ComputeFext(arg1,arg2);
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_Py_Void();
  {
    if (is_new_object1 && array1)
    {
      Py_DECREF(array1); 
    }
  }
  return resultobj;
fail:
  {
    if (is_new_object1 && array1)
    {
      Py_DECREF(array1); 
    }
  }
  return NULL;
}


SWIGINTERN PyObject *_wrap_multiMAILx_AssembKT(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  int *arg1 = (int *) NULL ;
  int arg2 = (int) 0 ;
  PyArrayObject *array1 = NULL ;
  int is_new_object1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"|O:multiMAILx_AssembKT",&obj0)) SWIG_fail;
  if (obj0) {
    {
      npy_intp size[1] = {
        -1 
      };
      array1 = obj_to_array_contiguous_allow_conversion(obj0,
        NPY_INT,
        &is_new_object1);
      if (!array1 || !require_dimensions(array1, 1) ||
        !require_size(array1, size, 1)) SWIG_fail;
      arg1 = (int*) array_data(array1);
      arg2 = (int) array_size(array1,0);
    }
  }
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      multiMAILx_AssembKT(arg1,arg2);
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_Py_Void();
  {
    if (is_new_object1 && array1)
    {
      Py_DECREF(array1); 
    }
  }
  return resultobj;
fail:
  {
    if (is_new_object1 && array1)
    {
      Py_DECREF(array1); 
    }
  }
  return NULL;
}


SWIGINTERN PyObject *_wrap_multiMAILx_AssembRHS(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  int *arg1 = (int *) NULL ;
  int arg2 = (int) 0 ;
  PyArrayObject *array1 = NULL ;
  int is_new_object1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"|O:multiMAILx_AssembRHS",&obj0)) SWIG_fail;
  if (obj0) {
    {
      npy_intp size[1] = {
        -1 
      };
      array1 = obj_to_array_contiguous_allow_conversion(obj0,
        NPY_INT,
        &is_new_object1);
      if (!array1 || !require_dimensions(array1, 1) ||
        !require_size(array1, size, 1)) SWIG_fail;
      arg1 = (int*) array_data(array1);
      arg2 = (int) array_size(array1,0);
    }
  }
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      multiMAILx_AssembRHS(arg1,arg2);
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_Py_Void();
  {
    if (is_new_object1 && array1)
    {
      Py_DECREF(array1); 
    }
  }
  return resultobj;
fail:
  {
    if (is_new_object1 && array1)
    {
      Py_DECREF(array1); 
    }
  }
  return NULL;
}


SWIGINTERN PyObject *_wrap_multiMAILx_ComputeResidueNorm(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  int *arg1 = (int *) NULL ;
  int arg2 = (int) 0 ;
  PyArrayObject *array1 = NULL ;
  int is_new_object1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"|O:multiMAILx_ComputeResidueNorm",&obj0)) SWIG_fail;
  if (obj0) {
    {
      npy_intp size[1] = {
        -1 
      };
      array1 = obj_to_array_contiguous_allow_conversion(obj0,
        NPY_INT,
        &is_new_object1);
      if (!array1 || !require_dimensions(array1, 1) ||
        !require_size(array1, size, 1)) SWIG_fail;
      arg1 = (int*) array_data(array1);
      arg2 = (int) array_size(array1,0);
    }
  }
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      result = (double)multiMAILx_ComputeResidueNorm(arg1,arg2);
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  {
    if (is_new_object1 && array1)
    {
      Py_DECREF(array1); 
    }
  }
  return resultobj;
fail:
  {
    if (is_new_object1 && array1)
    {
      Py_DECREF(array1); 
    }
  }
  return NULL;
}


SWIGINTERN PyObject *_wrap_multiMAILx_ComputeFreeState(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  int *arg1 = (int *) NULL ;
  int arg2 = (int) 0 ;
  PyArrayObject *array1 = NULL ;
  int is_new_object1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"|O:multiMAILx_ComputeFreeState",&obj0)) SWIG_fail;
  if (obj0) {
    {
      npy_intp size[1] = {
        -1 
      };
      array1 = obj_to_array_contiguous_allow_conversion(obj0,
        NPY_INT,
        &is_new_object1);
      if (!array1 || !require_dimensions(array1, 1) ||
        !require_size(array1, size, 1)) SWIG_fail;
      arg1 = (int*) array_data(array1);
      arg2 = (int) array_size(array1,0);
    }
  }
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      multiMAILx_ComputeFreeState(arg1,arg2);
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_Py_Void();
  {
    if (is_new_object1 && array1)
    {
      Py_DECREF(array1); 
    }
  }
  return resultobj;
fail:
  {
    if (is_new_object1 && array1)
    {
      Py_DECREF(array1); 
    }
  }
  return NULL;
}


SWIGINTERN PyObject *_wrap_multiMAILx_ComputeDof(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  int *arg1 = (int *) NULL ;
  int arg2 = (int) 0 ;
  PyArrayObject *array1 = NULL ;
  int is_new_object1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"|O:multiMAILx_ComputeDof",&obj0)) SWIG_fail;
  if (obj0) {
    {
      npy_intp size[1] = {
        -1 
      };
      array1 = obj_to_array_contiguous_allow_conversion(obj0,
        NPY_INT,
        &is_new_object1);
      if (!array1 || !require_dimensions(array1, 1) ||
        !require_size(array1, size, 1)) SWIG_fail;
      arg1 = (int*) array_data(array1);
      arg2 = (int) array_size(array1,0);
    }
  }
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      multiMAILx_ComputeDof(arg1,arg2);
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_Py_Void();
  {
    if (is_new_object1 && array1)
    {
      Py_DECREF(array1); 
    }
  }
  return resultobj;
fail:
  {
    if (is_new_object1 && array1)
    {
      Py_DECREF(array1); 
    }
  }
  return NULL;
}


SWIGINTERN PyObject *_wrap_multiMAILx_ComputeField(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  int *arg1 = (int *) NULL ;
  int arg2 = (int) 0 ;
  PyArrayObject *array1 = NULL ;
  int is_new_object1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"|O:multiMAILx_ComputeField",&obj0)) SWIG_fail;
  if (obj0) {
    {
      npy_intp size[1] = {
        -1 
      };
      array1 = obj_to_array_contiguous_allow_conversion(obj0,
        NPY_INT,
        &is_new_object1);
      if (!array1 || !require_dimensions(array1, 1) ||
        !require_size(array1, size, 1)) SWIG_fail;
      arg1 = (int*) array_data(array1);
      arg2 = (int) array_size(array1,0);
    }
  }
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      multiMAILx_ComputeField(arg1,arg2);
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_Py_Void();
  {
    if (is_new_object1 && array1)
    {
      Py_DECREF(array1); 
    }
  }
  return resultobj;
fail:
  {
    if (is_new_object1 && array1)
    {
      Py_DECREF(array1); 
    }
  }
  return NULL;
}


SWIGINTERN PyObject *_wrap_multiMAILx_UpdateBulk(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  int *arg1 = (int *) NULL ;
  int arg2 = (int) 0 ;
  PyArrayObject *array1 = NULL ;
  int is_new_object1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"|O:multiMAILx_UpdateBulk",&obj0)) SWIG_fail;
  if (obj0) {
    {
      npy_intp size[1] = {
        -1 
      };
      array1 = obj_to_array_contiguous_allow_conversion(obj0,
        NPY_INT,
        &is_new_object1);
      if (!array1 || !require_dimensions(array1, 1) ||
        !require_size(array1, size, 1)) SWIG_fail;
      arg1 = (int*) array_data(array1);
      arg2 = (int) array_size(array1,0);
    }
  }
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      multiMAILx_UpdateBulk(arg1,arg2);
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_Py_Void();
  {
    if (is_new_object1 && array1)
    {
      Py_DECREF(array1); 
    }
  }
  return resultobj;
fail:
  {
    if (is_new_object1 && array1)
    {
      Py_DECREF(array1); 
    }
  }
  return NULL;
}


SWIGINTERN PyObject *_wrap_multiMAILx_UpdateDof(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  int *arg1 = (int *) NULL ;
  int arg2 = (int) 0 ;
  PyArrayObject *array1 = NULL ;
  int is_new_object1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"|O:multiMAILx_UpdateDof",&obj0)) SWIG_fail;
  if (obj0) {
    {
      npy_intp size[1] = {
        -1 
      };
      array1 = obj_to_array_contiguous_allow_conversion(obj0,
        NPY_INT,
        &is_new_object1);
      if (!array1 || !require_dimensions(array1, 1) ||
        !require_size(array1, size, 1)) SWIG_fail;
      arg1 = (int*) array_data(array1);
      arg2 = (int) array_size(array1,0);
    }
  }
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      multiMAILx_UpdateDof(arg1,arg2);
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_Py_Void();
  {
    if (is_new_object1 && array1)
    {
      Py_DECREF(array1); 
    }
  }
  return resultobj;
fail:
  {
    if (is_new_object1 && array1)
    {
      Py_DECREF(array1); 
    }
  }
  return NULL;
}


SWIGINTERN PyObject *_wrap_multiMAILx_GetScalarFieldRank(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  int arg1 ;
  int arg2 ;
  char *arg3 = (char *) 0 ;
  int val1 ;
  int ecode1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int res3 ;
  char *buf3 = 0 ;
  int alloc3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:multiMAILx_GetScalarFieldRank",&obj0,&obj1,&obj2)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "multiMAILx_GetScalarFieldRank" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = static_cast< int >(val1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "multiMAILx_GetScalarFieldRank" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  res3 = SWIG_AsCharPtrAndSize(obj2, &buf3, NULL, &alloc3);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "multiMAILx_GetScalarFieldRank" "', argument " "3"" of type '" "char *""'");
  }
  arg3 = reinterpret_cast< char * >(buf3);
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      result = (int)multiMAILx_GetScalarFieldRank(arg1,arg2,arg3);
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return resultobj;
fail:
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_multiMAILx_SetScalarFieldByNode(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  int arg1 ;
  int arg2 ;
  double *arg3 = (double *) 0 ;
  int arg4 ;
  int val1 ;
  int ecode1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyArrayObject *array3 = NULL ;
  int is_new_object3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:multiMAILx_SetScalarFieldByNode",&obj0,&obj1,&obj2)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "multiMAILx_SetScalarFieldByNode" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = static_cast< int >(val1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "multiMAILx_SetScalarFieldByNode" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    npy_intp size[1] = {
      -1 
    };
    array3 = obj_to_array_contiguous_allow_conversion(obj2,
      NPY_DOUBLE,
      &is_new_object3);
    if (!array3 || !require_dimensions(array3, 1) ||
      !require_size(array3, size, 1)) SWIG_fail;
    arg3 = (double*) array_data(array3);
    arg4 = (int) array_size(array3,0);
  }
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      multiMAILx_SetScalarFieldByNode(arg1,arg2,arg3,arg4);
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_Py_Void();
  {
    if (is_new_object3 && array3)
    {
      Py_DECREF(array3); 
    }
  }
  return resultobj;
fail:
  {
    if (is_new_object3 && array3)
    {
      Py_DECREF(array3); 
    }
  }
  return NULL;
}


SWIGINTERN PyObject *_wrap_multiMAILx_SetScalarFieldByElement(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  int arg1 ;
  int arg2 ;
  double *arg3 = (double *) 0 ;
  int arg4 ;
  int val1 ;
  int ecode1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyArrayObject *array3 = NULL ;
  int is_new_object3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:multiMAILx_SetScalarFieldByElement",&obj0,&obj1,&obj2)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "multiMAILx_SetScalarFieldByElement" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = static_cast< int >(val1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "multiMAILx_SetScalarFieldByElement" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    npy_intp size[1] = {
      -1 
    };
    array3 = obj_to_array_contiguous_allow_conversion(obj2,
      NPY_DOUBLE,
      &is_new_object3);
    if (!array3 || !require_dimensions(array3, 1) ||
      !require_size(array3, size, 1)) SWIG_fail;
    arg3 = (double*) array_data(array3);
    arg4 = (int) array_size(array3,0);
  }
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      multiMAILx_SetScalarFieldByElement(arg1,arg2,arg3,arg4);
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_Py_Void();
  {
    if (is_new_object3 && array3)
    {
      Py_DECREF(array3); 
    }
  }
  return resultobj;
fail:
  {
    if (is_new_object3 && array3)
    {
      Py_DECREF(array3); 
    }
  }
  return NULL;
}


SWIGINTERN PyObject *_wrap_multiMAILx_GetVectorFieldRank(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  int arg1 ;
  int arg2 ;
  char *arg3 = (char *) 0 ;
  int val1 ;
  int ecode1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int res3 ;
  char *buf3 = 0 ;
  int alloc3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:multiMAILx_GetVectorFieldRank",&obj0,&obj1,&obj2)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "multiMAILx_GetVectorFieldRank" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = static_cast< int >(val1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "multiMAILx_GetVectorFieldRank" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  res3 = SWIG_AsCharPtrAndSize(obj2, &buf3, NULL, &alloc3);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "multiMAILx_GetVectorFieldRank" "', argument " "3"" of type '" "char *""'");
  }
  arg3 = reinterpret_cast< char * >(buf3);
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      result = (int)multiMAILx_GetVectorFieldRank(arg1,arg2,arg3);
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return resultobj;
fail:
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_multiMAILx_SetVectorFieldByNode(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  int arg1 ;
  int arg2 ;
  double *arg3 = (double *) 0 ;
  int arg4 ;
  int arg5 ;
  int val1 ;
  int ecode1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyArrayObject *array3 = NULL ;
  int is_new_object3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:multiMAILx_SetVectorFieldByNode",&obj0,&obj1,&obj2)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "multiMAILx_SetVectorFieldByNode" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = static_cast< int >(val1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "multiMAILx_SetVectorFieldByNode" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    npy_intp size[2] = {
      -1, -1 
    };
    array3 = obj_to_array_contiguous_allow_conversion(obj2, NPY_DOUBLE,
      &is_new_object3);
    if (!array3 || !require_dimensions(array3, 2) ||
      !require_size(array3, size, 2)) SWIG_fail;
    arg3 = (double*) array_data(array3);
    arg4 = (int) array_size(array3,0);
    arg5 = (int) array_size(array3,1);
  }
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      multiMAILx_SetVectorFieldByNode(arg1,arg2,arg3,arg4,arg5);
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_Py_Void();
  {
    if (is_new_object3 && array3)
    {
      Py_DECREF(array3); 
    }
  }
  return resultobj;
fail:
  {
    if (is_new_object3 && array3)
    {
      Py_DECREF(array3); 
    }
  }
  return NULL;
}


SWIGINTERN PyObject *_wrap_multiMAILx_SetVectorFieldByElement(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  int arg1 ;
  int arg2 ;
  double *arg3 = (double *) 0 ;
  int arg4 ;
  int arg5 ;
  int val1 ;
  int ecode1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyArrayObject *array3 = NULL ;
  int is_new_object3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:multiMAILx_SetVectorFieldByElement",&obj0,&obj1,&obj2)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "multiMAILx_SetVectorFieldByElement" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = static_cast< int >(val1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "multiMAILx_SetVectorFieldByElement" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    npy_intp size[2] = {
      -1, -1 
    };
    array3 = obj_to_array_contiguous_allow_conversion(obj2, NPY_DOUBLE,
      &is_new_object3);
    if (!array3 || !require_dimensions(array3, 2) ||
      !require_size(array3, size, 2)) SWIG_fail;
    arg3 = (double*) array_data(array3);
    arg4 = (int) array_size(array3,0);
    arg5 = (int) array_size(array3,1);
  }
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      multiMAILx_SetVectorFieldByElement(arg1,arg2,arg3,arg4,arg5);
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_Py_Void();
  {
    if (is_new_object3 && array3)
    {
      Py_DECREF(array3); 
    }
  }
  return resultobj;
fail:
  {
    if (is_new_object3 && array3)
    {
      Py_DECREF(array3); 
    }
  }
  return NULL;
}


SWIGINTERN PyObject *_wrap_multiMAILx_GetConnectivity(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  int arg1 ;
  int **arg2 = (int **) 0 ;
  int *arg3 = (int *) 0 ;
  int val1 ;
  int ecode1 = 0 ;
  int *data_temp2 ;
  int dim_temp2 ;
  PyObject * obj0 = 0 ;
  
  {
    arg2 = &data_temp2;
    arg3 = &dim_temp2;
  }
  if (!PyArg_ParseTuple(args,(char *)"O:multiMAILx_GetConnectivity",&obj0)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "multiMAILx_GetConnectivity" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = static_cast< int >(val1);
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      multiMAILx_GetConnectivity(arg1,arg2,arg3);
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_Py_Void();
  {
    npy_intp dims[1] = {
      *arg3 
    };
    PyObject * obj = PyArray_SimpleNewFromData(1, dims, NPY_INT, (void*)(*arg2));
    if (!obj) SWIG_fail;
    PyArrayObject * array = (PyArrayObject*) obj;
    attach_fortran_memory_to_numpy_array(array, (void*)(*arg2), NPY_INT, dims[0], 0);
    PyArray_ENABLEFLAGS(array,NPY_ARRAY_WRITEABLE);
    
    resultobj = SWIG_Python_AppendOutput(resultobj, obj);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_multiMAILx_GetCoor(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  int arg1 ;
  double **arg2 = (double **) 0 ;
  int *arg3 = (int *) 0 ;
  int *arg4 = (int *) 0 ;
  int val1 ;
  int ecode1 = 0 ;
  double *data_temp2 ;
  int dim1_temp2 ;
  int dim2_temp2 ;
  PyObject * obj0 = 0 ;
  
  {
    arg2 = &data_temp2;
    arg3 = &dim1_temp2;
    arg4 = &dim2_temp2;
  }
  if (!PyArg_ParseTuple(args,(char *)"O:multiMAILx_GetCoor",&obj0)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "multiMAILx_GetCoor" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = static_cast< int >(val1);
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      multiMAILx_GetCoor(arg1,arg2,arg3,arg4);
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_Py_Void();
  {
    npy_intp dims[2] = {
      *arg4, *arg3 
    };
    PyObject * obj = PyArray_SimpleNewFromData(2, dims, NPY_DOUBLE, (void*)(*arg2));
    if (!obj) SWIG_fail;
    PyArrayObject * array = (PyArrayObject*) obj;
    attach_fortran_memory_to_numpy_array(array, (void*)(*arg2), NPY_DOUBLE, dims[1], dims[0]);
    PyArray_ENABLEFLAGS(array,NPY_ARRAY_WRITEABLE);
    resultobj = SWIG_Python_AppendOutput(resultobj, obj);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_multiMAILx_GetAll(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  int arg1 ;
  double **arg2 = (double **) 0 ;
  int *arg3 = (int *) 0 ;
  int *arg4 = (int *) 0 ;
  int val1 ;
  int ecode1 = 0 ;
  double *data_temp2 ;
  int dim1_temp2 ;
  int dim2_temp2 ;
  PyObject * obj0 = 0 ;
  
  {
    arg2 = &data_temp2;
    arg3 = &dim1_temp2;
    arg4 = &dim2_temp2;
  }
  if (!PyArg_ParseTuple(args,(char *)"O:multiMAILx_GetAll",&obj0)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "multiMAILx_GetAll" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = static_cast< int >(val1);
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      multiMAILx_GetAll(arg1,arg2,arg3,arg4);
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_Py_Void();
  {
    npy_intp dims[2] = {
      *arg4, *arg3 
    };
    PyObject * obj = PyArray_SimpleNewFromData(2, dims, NPY_DOUBLE, (void*)(*arg2));
    if (!obj) SWIG_fail;
    PyArrayObject * array = (PyArrayObject*) obj;
    attach_fortran_memory_to_numpy_array(array, (void*)(*arg2), NPY_DOUBLE, dims[1], dims[0]);
    PyArray_ENABLEFLAGS(array,NPY_ARRAY_WRITEABLE);
    resultobj = SWIG_Python_AppendOutput(resultobj, obj);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_multiMAILx_GetElementsVolume(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  int arg1 ;
  double **arg2 = (double **) 0 ;
  int *arg3 = (int *) 0 ;
  int val1 ;
  int ecode1 = 0 ;
  double *data_temp2 ;
  int dim_temp2 ;
  PyObject * obj0 = 0 ;
  
  {
    arg2 = &data_temp2;
    arg3 = &dim_temp2;
  }
  if (!PyArg_ParseTuple(args,(char *)"O:multiMAILx_GetElementsVolume",&obj0)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "multiMAILx_GetElementsVolume" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = static_cast< int >(val1);
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      multiMAILx_GetElementsVolume(arg1,arg2,arg3);
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_Py_Void();
  {
    npy_intp dims[1] = {
      *arg3 
    };
    PyObject * obj = PyArray_SimpleNewFromData(1, dims, NPY_DOUBLE, (void*)(*arg2));
    if (!obj) SWIG_fail;
    PyArrayObject * array = (PyArrayObject*) obj;
    attach_fortran_memory_to_numpy_array(array, (void*)(*arg2), NPY_DOUBLE, dims[0], 0);
    PyArray_ENABLEFLAGS(array,NPY_ARRAY_WRITEABLE);
    
    resultobj = SWIG_Python_AppendOutput(resultobj, obj);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_multiMAILx_GetElementsNeighbor(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  int arg1 ;
  double arg2 ;
  int arg3 ;
  int **arg4 = (int **) 0 ;
  int *arg5 = (int *) 0 ;
  int *arg6 = (int *) 0 ;
  int val1 ;
  int ecode1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  int *data_temp4 ;
  int dim1_temp4 ;
  int dim2_temp4 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  {
    arg4 = &data_temp4;
    arg5 = &dim1_temp4;
    arg6 = &dim2_temp4;
  }
  if (!PyArg_ParseTuple(args,(char *)"OOO:multiMAILx_GetElementsNeighbor",&obj0,&obj1,&obj2)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "multiMAILx_GetElementsNeighbor" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = static_cast< int >(val1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "multiMAILx_GetElementsNeighbor" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "multiMAILx_GetElementsNeighbor" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      multiMAILx_GetElementsNeighbor(arg1,arg2,arg3,arg4,arg5,arg6);
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_Py_Void();
  {
    npy_intp dims[2] = {
      *arg6, *arg5 
    };
    PyObject * obj = PyArray_SimpleNewFromData(2, dims, NPY_INT, (void*)(*arg4));
    if (!obj) SWIG_fail;
    PyArrayObject * array = (PyArrayObject*) obj;
    attach_fortran_memory_to_numpy_array(array, (void*)(*arg4), NPY_INT, dims[1], dims[0]);
    PyArray_ENABLEFLAGS(array,NPY_ARRAY_WRITEABLE);
    resultobj = SWIG_Python_AppendOutput(resultobj, obj);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_multiMAILx_GetPtrElementsEnergy(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  int arg1 ;
  double **arg2 = (double **) 0 ;
  int *arg3 = (int *) 0 ;
  int val1 ;
  int ecode1 = 0 ;
  double *data_temp2 = NULL ;
  int dim_temp2 ;
  PyObject * obj0 = 0 ;
  
  {
    arg2 = &data_temp2;
    arg3 = &dim_temp2;
  }
  if (!PyArg_ParseTuple(args,(char *)"O:multiMAILx_GetPtrElementsEnergy",&obj0)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "multiMAILx_GetPtrElementsEnergy" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = static_cast< int >(val1);
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      multiMAILx_GetPtrElementsEnergy(arg1,arg2,arg3);
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_Py_Void();
  {
    npy_intp dims[1] = {
      *arg3 
    };
    PyObject* obj = PyArray_SimpleNewFromData(1, dims, NPY_DOUBLE, (void*)(*arg2));
    PyArrayObject* array = (PyArrayObject*) obj;
    
    if (!array) SWIG_fail;
    resultobj = SWIG_Python_AppendOutput(resultobj, obj);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_multiMAILx_ComputeElementsEnergy(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  int arg1 ;
  int val1 ;
  int ecode1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:multiMAILx_ComputeElementsEnergy",&obj0)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "multiMAILx_ComputeElementsEnergy" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = static_cast< int >(val1);
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      multiMAILx_ComputeElementsEnergy(arg1);
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_multiMAILx_GetPtrElementsJacobian(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  int arg1 ;
  double **arg2 = (double **) 0 ;
  int *arg3 = (int *) 0 ;
  int val1 ;
  int ecode1 = 0 ;
  double *data_temp2 = NULL ;
  int dim_temp2 ;
  PyObject * obj0 = 0 ;
  
  {
    arg2 = &data_temp2;
    arg3 = &dim_temp2;
  }
  if (!PyArg_ParseTuple(args,(char *)"O:multiMAILx_GetPtrElementsJacobian",&obj0)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "multiMAILx_GetPtrElementsJacobian" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = static_cast< int >(val1);
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      multiMAILx_GetPtrElementsJacobian(arg1,arg2,arg3);
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_Py_Void();
  {
    npy_intp dims[1] = {
      *arg3 
    };
    PyObject* obj = PyArray_SimpleNewFromData(1, dims, NPY_DOUBLE, (void*)(*arg2));
    PyArrayObject* array = (PyArrayObject*) obj;
    
    if (!array) SWIG_fail;
    resultobj = SWIG_Python_AppendOutput(resultobj, obj);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_multiMAILx_ComputeElementsJacobian(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  int arg1 ;
  int val1 ;
  int ecode1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:multiMAILx_ComputeElementsJacobian",&obj0)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "multiMAILx_ComputeElementsJacobian" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = static_cast< int >(val1);
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      multiMAILx_ComputeElementsJacobian(arg1);
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_multiMAILx_GetPtrElementsVisibility(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  int arg1 ;
  int **arg2 = (int **) 0 ;
  int *arg3 = (int *) 0 ;
  int val1 ;
  int ecode1 = 0 ;
  int *data_temp2 = NULL ;
  int dim_temp2 ;
  PyObject * obj0 = 0 ;
  
  {
    arg2 = &data_temp2;
    arg3 = &dim_temp2;
  }
  if (!PyArg_ParseTuple(args,(char *)"O:multiMAILx_GetPtrElementsVisibility",&obj0)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "multiMAILx_GetPtrElementsVisibility" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = static_cast< int >(val1);
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      multiMAILx_GetPtrElementsVisibility(arg1,arg2,arg3);
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_Py_Void();
  {
    npy_intp dims[1] = {
      *arg3 
    };
    PyObject* obj = PyArray_SimpleNewFromData(1, dims, NPY_INT, (void*)(*arg2));
    PyArrayObject* array = (PyArrayObject*) obj;
    
    if (!array) SWIG_fail;
    resultobj = SWIG_Python_AppendOutput(resultobj, obj);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_multiMAILx_GetDeformationEnergy(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  int arg1 ;
  double *arg2 = (double *) 0 ;
  int arg3 ;
  int arg4 ;
  int val1 ;
  int ecode1 = 0 ;
  PyArrayObject *array2 = NULL ;
  int is_new_object2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:multiMAILx_GetDeformationEnergy",&obj0,&obj1)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "multiMAILx_GetDeformationEnergy" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = static_cast< int >(val1);
  {
    npy_intp size[2] = {
      -1, -1 
    };
    array2 = obj_to_array_contiguous_allow_conversion(obj1, NPY_DOUBLE,
      &is_new_object2);
    if (!array2 || !require_dimensions(array2, 2) ||
      !require_size(array2, size, 2)) SWIG_fail;
    arg2 = (double*) array_data(array2);
    arg3 = (int) array_size(array2,0);
    arg4 = (int) array_size(array2,1);
  }
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      result = (double)multiMAILx_GetDeformationEnergy(arg1,arg2,arg3,arg4);
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  {
    if (is_new_object2 && array2)
    {
      Py_DECREF(array2); 
    }
  }
  return resultobj;
fail:
  {
    if (is_new_object2 && array2)
    {
      Py_DECREF(array2); 
    }
  }
  return NULL;
}


SWIGINTERN PyObject *_wrap_multiMAILx_GetPtrBoundaryElements(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  int arg1 ;
  int **arg2 = (int **) 0 ;
  int *arg3 = (int *) 0 ;
  int val1 ;
  int ecode1 = 0 ;
  int *data_temp2 ;
  int dim_temp2 ;
  PyObject * obj0 = 0 ;
  
  {
    arg2 = &data_temp2;
    arg3 = &dim_temp2;
  }
  if (!PyArg_ParseTuple(args,(char *)"O:multiMAILx_GetPtrBoundaryElements",&obj0)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "multiMAILx_GetPtrBoundaryElements" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = static_cast< int >(val1);
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      multiMAILx_GetPtrBoundaryElements(arg1,arg2,arg3);
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_Py_Void();
  {
    npy_intp dims[1] = {
      *arg3 
    };
    PyObject * obj = PyArray_SimpleNewFromData(1, dims, NPY_INT, (void*)(*arg2));
    if (!obj) SWIG_fail;
    PyArrayObject * array = (PyArrayObject*) obj;
    attach_fortran_memory_to_numpy_array(array, (void*)(*arg2), NPY_INT, dims[0], 0);
    PyArray_ENABLEFLAGS(array,NPY_ARRAY_WRITEABLE);
    
    resultobj = SWIG_Python_AppendOutput(resultobj, obj);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_multiMAILx_CleanMemory(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  
  if (!PyArg_ParseTuple(args,(char *)":multiMAILx_CleanMemory")) SWIG_fail;
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      multiMAILx_CleanMemory();
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ExternalModels_InitModels(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  
  if (!PyArg_ParseTuple(args,(char *)":ExternalModels_InitModels")) SWIG_fail;
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      ExternalModels_InitModels();
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ExternalModels_StoreProperties(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  
  if (!PyArg_ParseTuple(args,(char *)":ExternalModels_StoreProperties")) SWIG_fail;
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      ExternalModels_StoreProperties();
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ExternalModels_CleanMemory(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  
  if (!PyArg_ParseTuple(args,(char *)":ExternalModels_CleanMemory")) SWIG_fail;
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      ExternalModels_CleanMemory();
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_bulk_behav_ReadBehaviours(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  
  if (!PyArg_ParseTuple(args,(char *)":bulk_behav_ReadBehaviours")) SWIG_fail;
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      bulk_behav_ReadBehaviours();
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_bulk_behav_WriteBehaviours(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  
  if (!PyArg_ParseTuple(args,(char *)":bulk_behav_WriteBehaviours")) SWIG_fail;
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      bulk_behav_WriteBehaviours();
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_bulk_behav_CollectOutBulkBehav(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  
  if (!PyArg_ParseTuple(args,(char *)":bulk_behav_CollectOutBulkBehav")) SWIG_fail;
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      bulk_behav_CollectOutBulkBehav();
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_bulk_behav_CleanOutBulkBehav(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  
  if (!PyArg_ParseTuple(args,(char *)":bulk_behav_CleanOutBulkBehav")) SWIG_fail;
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      bulk_behav_CleanOutBulkBehav();
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_bulk_behav_AppendOutBulkBehav(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  
  if (!PyArg_ParseTuple(args,(char *)":bulk_behav_AppendOutBulkBehav")) SWIG_fail;
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      bulk_behav_AppendOutBulkBehav();
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_bulk_behav_RebuildInBulkBehav(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  
  if (!PyArg_ParseTuple(args,(char *)":bulk_behav_RebuildInBulkBehav")) SWIG_fail;
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      bulk_behav_RebuildInBulkBehav();
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_bulk_behav_GetGravity(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  double **arg1 = (double **) 0 ;
  int *arg2 = (int *) 0 ;
  double *data_temp1 ;
  int dim_temp1 ;
  
  {
    arg1 = &data_temp1;
    arg2 = &dim_temp1;
  }
  if (!PyArg_ParseTuple(args,(char *)":bulk_behav_GetGravity")) SWIG_fail;
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      bulk_behav_GetGravity(arg1,arg2);
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_Py_Void();
  {
    npy_intp dims[1] = {
      *arg2 
    };
    PyObject * obj = PyArray_SimpleNewFromData(1, dims, NPY_DOUBLE, (void*)(*arg1));
    if (!obj) SWIG_fail;
    PyArrayObject * array = (PyArrayObject*) obj;
    attach_fortran_memory_to_numpy_array(array, (void*)(*arg1), NPY_DOUBLE, dims[0], 0);
    PyArray_ENABLEFLAGS(array,NPY_ARRAY_WRITEABLE);
    
    resultobj = SWIG_Python_AppendOutput(resultobj, obj);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_bulk_behav_SetGravity(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  double *arg1 = (double *) 0 ;
  int arg2 ;
  PyArrayObject *array1 = NULL ;
  int is_new_object1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:bulk_behav_SetGravity",&obj0)) SWIG_fail;
  {
    npy_intp size[1] = {
      -1 
    };
    array1 = obj_to_array_contiguous_allow_conversion(obj0,
      NPY_DOUBLE,
      &is_new_object1);
    if (!array1 || !require_dimensions(array1, 1) ||
      !require_size(array1, size, 1)) SWIG_fail;
    arg1 = (double*) array_data(array1);
    arg2 = (int) array_size(array1,0);
  }
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      bulk_behav_SetGravity(arg1,arg2);
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_Py_Void();
  {
    if (is_new_object1 && array1)
    {
      Py_DECREF(array1); 
    }
  }
  return resultobj;
fail:
  {
    if (is_new_object1 && array1)
    {
      Py_DECREF(array1); 
    }
  }
  return NULL;
}


SWIGINTERN PyObject *_wrap_bulk_behav_SetConductivity(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  char *arg1 = (char *) 0 ;
  int arg2 ;
  double arg3 ;
  int res1 ;
  char *buf1 = 0 ;
  int alloc1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:bulk_behav_SetConductivity",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_AsCharPtrAndSize(obj0, &buf1, NULL, &alloc1);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "bulk_behav_SetConductivity" "', argument " "1"" of type '" "char *""'");
  }
  arg1 = reinterpret_cast< char * >(buf1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "bulk_behav_SetConductivity" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_double(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "bulk_behav_SetConductivity" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast< double >(val3);
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      bulk_behav_SetConductivity(arg1,arg2,arg3);
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_Py_Void();
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  return resultobj;
fail:
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  return NULL;
}


SWIGINTERN PyObject *_wrap_bulk_behav_SetCapacity(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  char *arg1 = (char *) 0 ;
  int arg2 ;
  double arg3 ;
  int res1 ;
  char *buf1 = 0 ;
  int alloc1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:bulk_behav_SetCapacity",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_AsCharPtrAndSize(obj0, &buf1, NULL, &alloc1);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "bulk_behav_SetCapacity" "', argument " "1"" of type '" "char *""'");
  }
  arg1 = reinterpret_cast< char * >(buf1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "bulk_behav_SetCapacity" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_double(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "bulk_behav_SetCapacity" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast< double >(val3);
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      bulk_behav_SetCapacity(arg1,arg2,arg3);
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_Py_Void();
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  return resultobj;
fail:
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  return NULL;
}


SWIGINTERN PyObject *_wrap_bulk_behav_SetBiot(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  char *arg1 = (char *) 0 ;
  int arg2 ;
  double arg3 ;
  int res1 ;
  char *buf1 = 0 ;
  int alloc1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:bulk_behav_SetBiot",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_AsCharPtrAndSize(obj0, &buf1, NULL, &alloc1);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "bulk_behav_SetBiot" "', argument " "1"" of type '" "char *""'");
  }
  arg1 = reinterpret_cast< char * >(buf1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "bulk_behav_SetBiot" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_double(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "bulk_behav_SetBiot" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast< double >(val3);
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      bulk_behav_SetBiot(arg1,arg2,arg3);
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_Py_Void();
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  return resultobj;
fail:
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  return NULL;
}


SWIGINTERN PyObject *_wrap_bulk_behav_SetExternalFlux(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  char *arg1 = (char *) 0 ;
  int arg2 ;
  double arg3 ;
  int res1 ;
  char *buf1 = 0 ;
  int alloc1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:bulk_behav_SetExternalFlux",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_AsCharPtrAndSize(obj0, &buf1, NULL, &alloc1);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "bulk_behav_SetExternalFlux" "', argument " "1"" of type '" "char *""'");
  }
  arg1 = reinterpret_cast< char * >(buf1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "bulk_behav_SetExternalFlux" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_double(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "bulk_behav_SetExternalFlux" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast< double >(val3);
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      bulk_behav_SetExternalFlux(arg1,arg2,arg3);
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_Py_Void();
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  return resultobj;
fail:
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  return NULL;
}


SWIGINTERN PyObject *_wrap_bulk_behav_SetDensity(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  char *arg1 = (char *) 0 ;
  double arg2 ;
  int res1 ;
  char *buf1 = 0 ;
  int alloc1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:bulk_behav_SetDensity",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_AsCharPtrAndSize(obj0, &buf1, NULL, &alloc1);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "bulk_behav_SetDensity" "', argument " "1"" of type '" "char *""'");
  }
  arg1 = reinterpret_cast< char * >(buf1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "bulk_behav_SetDensity" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      bulk_behav_SetDensity(arg1,arg2);
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_Py_Void();
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  return resultobj;
fail:
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  return NULL;
}


SWIGINTERN PyObject *_wrap_bulk_behav_GetNbBulkBehav(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)":bulk_behav_GetNbBulkBehav")) SWIG_fail;
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      result = (int)bulk_behav_GetNbBulkBehav();
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_bulk_behav_GetBulkBehav(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  int arg1 ;
  char **arg2 = (char **) 0 ;
  int *arg3 = (int *) 0 ;
  int *arg4 = (int *) 0 ;
  char **arg5 = (char **) 0 ;
  int val1 ;
  int ecode1 = 0 ;
  char *tmp_vector2 ;
  int tmp_size2 ;
  int tmp_rs2 ;
  char *tmp_c55 ;
  PyObject * obj0 = 0 ;
  
  {
    arg2 = &tmp_vector2;
    arg3 = &tmp_size2;
    arg4 = &tmp_rs2;
  }
  {
    arg5 = &tmp_c55;
  }
  if (!PyArg_ParseTuple(args,(char *)"O:bulk_behav_GetBulkBehav",&obj0)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "bulk_behav_GetBulkBehav" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = static_cast< int >(val1);
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      bulk_behav_GetBulkBehav(arg1,arg2,arg3,arg4,arg5);
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_Py_Void();
  {
    PyObject *chaine;
    chaine = PyString_FromStringAndSize(*arg2, *arg3);
    free_ptrFortranString(*arg2, *arg4);
    resultobj = chaine;
  }
  {
    PyObject *chaine;
    chaine = PyString_FromStringAndSize(*arg5, 5);
    free_ptrFortranString(*arg5, 5);
    resultobj = SWIG_Python_AppendOutput(resultobj, chaine);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_bulk_behav_CleanMemory(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  
  if (!PyArg_ParseTuple(args,(char *)":bulk_behav_CleanMemory")) SWIG_fail;
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      bulk_behav_CleanMemory();
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_models_ReadModels(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  
  if (!PyArg_ParseTuple(args,(char *)":models_ReadModels")) SWIG_fail;
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      models_ReadModels();
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_models_WriteModels(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  
  if (!PyArg_ParseTuple(args,(char *)":models_WriteModels")) SWIG_fail;
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      models_WriteModels();
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_models_InitModels(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  
  if (!PyArg_ParseTuple(args,(char *)":models_InitModels")) SWIG_fail;
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      models_InitModels();
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_models_InitProperties(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  
  if (!PyArg_ParseTuple(args,(char *)":models_InitProperties")) SWIG_fail;
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      models_InitProperties();
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_models_StoreProperties(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  
  if (!PyArg_ParseTuple(args,(char *)":models_StoreProperties")) SWIG_fail;
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      models_StoreProperties();
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_models_CleanMemory(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  
  if (!PyArg_ParseTuple(args,(char *)":models_CleanMemory")) SWIG_fail;
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      models_CleanMemory();
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_overall_Initialize(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  
  if (!PyArg_ParseTuple(args,(char *)":overall_Initialize")) SWIG_fail;
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      overall_Initialize();
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_overall_Finalize(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  
  if (!PyArg_ParseTuple(args,(char *)":overall_Finalize")) SWIG_fail;
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      overall_Finalize();
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_overall_InitEntityList(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  
  if (!PyArg_ParseTuple(args,(char *)":overall_InitEntityList")) SWIG_fail;
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      overall_InitEntityList();
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TimeEvolution_SetTimeStep(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  double arg1 ;
  double val1 ;
  int ecode1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:TimeEvolution_SetTimeStep",&obj0)) SWIG_fail;
  ecode1 = SWIG_AsVal_double(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "TimeEvolution_SetTimeStep" "', argument " "1"" of type '" "double""'");
  } 
  arg1 = static_cast< double >(val1);
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      TimeEvolution_SetTimeStep(arg1);
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TimeEvolution_IncrementStep(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  
  if (!PyArg_ParseTuple(args,(char *)":TimeEvolution_IncrementStep")) SWIG_fail;
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      TimeEvolution_IncrementStep();
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TimeEvolution_UpdateStep(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  
  if (!PyArg_ParseTuple(args,(char *)":TimeEvolution_UpdateStep")) SWIG_fail;
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      TimeEvolution_UpdateStep();
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TimeEvolution_DisplayStep(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  
  if (!PyArg_ParseTuple(args,(char *)":TimeEvolution_DisplayStep")) SWIG_fail;
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      TimeEvolution_DisplayStep();
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TimeEvolution_SetInitialStep(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  int arg1 ;
  int val1 ;
  int ecode1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:TimeEvolution_SetInitialStep",&obj0)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "TimeEvolution_SetInitialStep" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = static_cast< int >(val1);
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      TimeEvolution_SetInitialStep(arg1);
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TimeEvolution_SetInitialTime(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  double arg1 ;
  double val1 ;
  int ecode1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:TimeEvolution_SetInitialTime",&obj0)) SWIG_fail;
  ecode1 = SWIG_AsVal_double(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "TimeEvolution_SetInitialTime" "', argument " "1"" of type '" "double""'");
  } 
  arg1 = static_cast< double >(val1);
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      TimeEvolution_SetInitialTime(arg1);
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TimeEvolution_GetTime(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)":TimeEvolution_GetTime")) SWIG_fail;
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      result = (double)TimeEvolution_GetTime();
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TimeEvolution_GetTimeStep(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)":TimeEvolution_GetTimeStep")) SWIG_fail;
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      result = (double)TimeEvolution_GetTimeStep();
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TimeEvolution_GetStep(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)":TimeEvolution_GetStep")) SWIG_fail;
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      result = (int)TimeEvolution_GetStep();
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TimeEvolution_WriteLastDof(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  
  if (!PyArg_ParseTuple(args,(char *)":TimeEvolution_WriteLastDof")) SWIG_fail;
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      TimeEvolution_WriteLastDof();
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TimeEvolution_WriteOutDof(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  int arg1 = (int) 1 ;
  int val1 ;
  int ecode1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"|O:TimeEvolution_WriteOutDof",&obj0)) SWIG_fail;
  if (obj0) {
    ecode1 = SWIG_AsVal_int(obj0, &val1);
    if (!SWIG_IsOK(ecode1)) {
      SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "TimeEvolution_WriteOutDof" "', argument " "1"" of type '" "int""'");
    } 
    arg1 = static_cast< int >(val1);
  }
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      TimeEvolution_WriteOutDof(arg1);
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TimeEvolution_DisplayOutDof(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  
  if (!PyArg_ParseTuple(args,(char *)":TimeEvolution_DisplayOutDof")) SWIG_fail;
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      TimeEvolution_DisplayOutDof();
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TimeEvolution_WriteLastRnod(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  
  if (!PyArg_ParseTuple(args,(char *)":TimeEvolution_WriteLastRnod")) SWIG_fail;
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      TimeEvolution_WriteLastRnod();
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TimeEvolution_WriteOutRnod(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  int arg1 ;
  int val1 ;
  int ecode1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:TimeEvolution_WriteOutRnod",&obj0)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "TimeEvolution_WriteOutRnod" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = static_cast< int >(val1);
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      TimeEvolution_WriteOutRnod(arg1);
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TimeEvolution_DisplayOutRnod(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  
  if (!PyArg_ParseTuple(args,(char *)":TimeEvolution_DisplayOutRnod")) SWIG_fail;
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      TimeEvolution_DisplayOutRnod();
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TimeEvolution_WriteLastVlocRloc(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  
  if (!PyArg_ParseTuple(args,(char *)":TimeEvolution_WriteLastVlocRloc")) SWIG_fail;
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      TimeEvolution_WriteLastVlocRloc();
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TimeEvolution_WriteOutVlocRloc(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  int arg1 = (int) 1 ;
  int val1 ;
  int ecode1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"|O:TimeEvolution_WriteOutVlocRloc",&obj0)) SWIG_fail;
  if (obj0) {
    ecode1 = SWIG_AsVal_int(obj0, &val1);
    if (!SWIG_IsOK(ecode1)) {
      SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "TimeEvolution_WriteOutVlocRloc" "', argument " "1"" of type '" "int""'");
    } 
    arg1 = static_cast< int >(val1);
  }
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      TimeEvolution_WriteOutVlocRloc(arg1);
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TimeEvolution_DisplayOutVlocRloc(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  
  if (!PyArg_ParseTuple(args,(char *)":TimeEvolution_DisplayOutVlocRloc")) SWIG_fail;
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      TimeEvolution_DisplayOutVlocRloc();
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TimeEvolution_WriteLastGPV(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  
  if (!PyArg_ParseTuple(args,(char *)":TimeEvolution_WriteLastGPV")) SWIG_fail;
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      TimeEvolution_WriteLastGPV();
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TimeEvolution_WriteOutGPV(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  int arg1 ;
  int val1 ;
  int ecode1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:TimeEvolution_WriteOutGPV",&obj0)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "TimeEvolution_WriteOutGPV" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = static_cast< int >(val1);
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      TimeEvolution_WriteOutGPV(arg1);
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TimeEvolution_ReadIniDof(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  int arg1 = (int) 0 ;
  int val1 ;
  int ecode1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"|O:TimeEvolution_ReadIniDof",&obj0)) SWIG_fail;
  if (obj0) {
    ecode1 = SWIG_AsVal_int(obj0, &val1);
    if (!SWIG_IsOK(ecode1)) {
      SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "TimeEvolution_ReadIniDof" "', argument " "1"" of type '" "int""'");
    } 
    arg1 = static_cast< int >(val1);
  }
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      TimeEvolution_ReadIniDof(arg1);
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TimeEvolution_ReadIniVlocRloc(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  int arg1 = (int) 0 ;
  int val1 ;
  int ecode1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"|O:TimeEvolution_ReadIniVlocRloc",&obj0)) SWIG_fail;
  if (obj0) {
    ecode1 = SWIG_AsVal_int(obj0, &val1);
    if (!SWIG_IsOK(ecode1)) {
      SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "TimeEvolution_ReadIniVlocRloc" "', argument " "1"" of type '" "int""'");
    } 
    arg1 = static_cast< int >(val1);
  }
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      TimeEvolution_ReadIniVlocRloc(arg1);
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TimeEvolution_ReadIniGPV(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  int arg1 = (int) 0 ;
  int val1 ;
  int ecode1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"|O:TimeEvolution_ReadIniGPV",&obj0)) SWIG_fail;
  if (obj0) {
    ecode1 = SWIG_AsVal_int(obj0, &val1);
    if (!SWIG_IsOK(ecode1)) {
      SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "TimeEvolution_ReadIniGPV" "', argument " "1"" of type '" "int""'");
    } 
    arg1 = static_cast< int >(val1);
  }
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      TimeEvolution_ReadIniGPV(arg1);
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NewtonRaphson_Initialize(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  double arg1 ;
  double val1 ;
  int ecode1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:NewtonRaphson_Initialize",&obj0)) SWIG_fail;
  ecode1 = SWIG_AsVal_double(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "NewtonRaphson_Initialize" "', argument " "1"" of type '" "double""'");
  } 
  arg1 = static_cast< double >(val1);
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      NewtonRaphson_Initialize(arg1);
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NewtonRaphson_CheckConvergence(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  double arg1 ;
  double val1 ;
  int ecode1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:NewtonRaphson_CheckConvergence",&obj0)) SWIG_fail;
  ecode1 = SWIG_AsVal_double(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "NewtonRaphson_CheckConvergence" "', argument " "1"" of type '" "double""'");
  } 
  arg1 = static_cast< double >(val1);
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      result = (int)NewtonRaphson_CheckConvergence(arg1);
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NewtonRaphson_ComputeTimeStep(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)":NewtonRaphson_ComputeTimeStep")) SWIG_fail;
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      result = (int)NewtonRaphson_ComputeTimeStep();
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NewtonRaphson_SetMinTimeStep(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  double arg1 ;
  double val1 ;
  int ecode1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:NewtonRaphson_SetMinTimeStep",&obj0)) SWIG_fail;
  ecode1 = SWIG_AsVal_double(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "NewtonRaphson_SetMinTimeStep" "', argument " "1"" of type '" "double""'");
  } 
  arg1 = static_cast< double >(val1);
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      NewtonRaphson_SetMinTimeStep(arg1);
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NewtonRaphson_SetMaxTimeStep(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  double arg1 ;
  double val1 ;
  int ecode1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:NewtonRaphson_SetMaxTimeStep",&obj0)) SWIG_fail;
  ecode1 = SWIG_AsVal_double(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "NewtonRaphson_SetMaxTimeStep" "', argument " "1"" of type '" "double""'");
  } 
  arg1 = static_cast< double >(val1);
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      NewtonRaphson_SetMaxTimeStep(arg1);
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NewtonRaphson_SetFinalTime(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  double arg1 ;
  double val1 ;
  int ecode1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:NewtonRaphson_SetFinalTime",&obj0)) SWIG_fail;
  ecode1 = SWIG_AsVal_double(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "NewtonRaphson_SetFinalTime" "', argument " "1"" of type '" "double""'");
  } 
  arg1 = static_cast< double >(val1);
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      NewtonRaphson_SetFinalTime(arg1);
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NewtonRaphson_SetMaxIter(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  int arg1 ;
  int val1 ;
  int ecode1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:NewtonRaphson_SetMaxIter",&obj0)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "NewtonRaphson_SetMaxIter" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = static_cast< int >(val1);
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      NewtonRaphson_SetMaxIter(arg1);
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NewtonRaphson_SetGoodIter(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  int arg1 ;
  int val1 ;
  int ecode1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:NewtonRaphson_SetGoodIter",&obj0)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "NewtonRaphson_SetGoodIter" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = static_cast< int >(val1);
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      NewtonRaphson_SetGoodIter(arg1);
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NewtonRaphson_SetBadIter(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  int arg1 ;
  int val1 ;
  int ecode1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:NewtonRaphson_SetBadIter",&obj0)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "NewtonRaphson_SetBadIter" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = static_cast< int >(val1);
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      NewtonRaphson_SetBadIter(arg1);
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NewtonRaphson_SetIncPatience(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  int arg1 ;
  int val1 ;
  int ecode1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:NewtonRaphson_SetIncPatience",&obj0)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "NewtonRaphson_SetIncPatience" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = static_cast< int >(val1);
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      NewtonRaphson_SetIncPatience(arg1);
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_overall_SelectProxTactors(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  int arg1 = (int) 1 ;
  int val1 ;
  int ecode1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"|O:overall_SelectProxTactors",&obj0)) SWIG_fail;
  if (obj0) {
    ecode1 = SWIG_AsVal_int(obj0, &val1);
    if (!SWIG_IsOK(ecode1)) {
      SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "overall_SelectProxTactors" "', argument " "1"" of type '" "int""'");
    } 
    arg1 = static_cast< int >(val1);
  }
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      overall_SelectProxTactors(arg1);
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_overall_DisplayProxTactors(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  
  if (!PyArg_ParseTuple(args,(char *)":overall_DisplayProxTactors")) SWIG_fail;
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      overall_DisplayProxTactors();
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_overall_DIME(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  int arg1 ;
  int arg2 ;
  int val1 ;
  int ecode1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:overall_DIME",&obj0,&obj1)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "overall_DIME" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = static_cast< int >(val1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "overall_DIME" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      overall_DIME(arg1,arg2);
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Integrator_InitTheta(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  double arg1 ;
  double val1 ;
  int ecode1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Integrator_InitTheta",&obj0)) SWIG_fail;
  ecode1 = SWIG_AsVal_double(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "Integrator_InitTheta" "', argument " "1"" of type '" "double""'");
  } 
  arg1 = static_cast< double >(val1);
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      Integrator_InitTheta(arg1);
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Integrator_InitQS(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  
  if (!PyArg_ParseTuple(args,(char *)":Integrator_InitQS")) SWIG_fail;
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      Integrator_InitQS();
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Integrator_InitCrankNickolson(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  double arg1 ;
  double val1 ;
  int ecode1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Integrator_InitCrankNickolson",&obj0)) SWIG_fail;
  ecode1 = SWIG_AsVal_double(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "Integrator_InitCrankNickolson" "', argument " "1"" of type '" "double""'");
  } 
  arg1 = static_cast< double >(val1);
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      Integrator_InitCrankNickolson(arg1);
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Integrator_InitGear(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  
  if (!PyArg_ParseTuple(args,(char *)":Integrator_InitGear")) SWIG_fail;
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      Integrator_InitGear();
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Integrator_InitVerlet(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  
  if (!PyArg_ParseTuple(args,(char *)":Integrator_InitVerlet")) SWIG_fail;
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      Integrator_InitVerlet();
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Integrator_InitBeta2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  double arg1 ;
  double val1 ;
  int ecode1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Integrator_InitBeta2",&obj0)) SWIG_fail;
  ecode1 = SWIG_AsVal_double(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "Integrator_InitBeta2" "', argument " "1"" of type '" "double""'");
  } 
  arg1 = static_cast< double >(val1);
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      Integrator_InitBeta2(arg1);
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Integrator_SetContactDetectionConfiguration(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  double arg1 ;
  double arg2 ;
  double val1 ;
  int ecode1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Integrator_SetContactDetectionConfiguration",&obj0,&obj1)) SWIG_fail;
  ecode1 = SWIG_AsVal_double(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "Integrator_SetContactDetectionConfiguration" "', argument " "1"" of type '" "double""'");
  } 
  arg1 = static_cast< double >(val1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Integrator_SetContactDetectionConfiguration" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      Integrator_SetContactDetectionConfiguration(arg1,arg2);
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_overall_RequireXxlComputation(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  
  if (!PyArg_ParseTuple(args,(char *)":overall_RequireXxlComputation")) SWIG_fail;
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      overall_RequireXxlComputation();
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_overall_UpdatePostData(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  
  if (!PyArg_ParseTuple(args,(char *)":overall_UpdatePostData")) SWIG_fail;
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      overall_UpdatePostData();
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_overall_InitPostData(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  int arg1 ;
  int arg2 ;
  int val1 ;
  int ecode1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:overall_InitPostData",&obj0,&obj1)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "overall_InitPostData" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = static_cast< int >(val1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "overall_InitPostData" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      overall_InitPostData(arg1,arg2);
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_overall_SetWorkingDirectory(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  char *arg1 = (char *) 0 ;
  int res1 ;
  char *buf1 = 0 ;
  int alloc1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:overall_SetWorkingDirectory",&obj0)) SWIG_fail;
  res1 = SWIG_AsCharPtrAndSize(obj0, &buf1, NULL, &alloc1);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "overall_SetWorkingDirectory" "', argument " "1"" of type '" "char *""'");
  }
  arg1 = reinterpret_cast< char * >(buf1);
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      overall_SetWorkingDirectory(arg1);
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_Py_Void();
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  return resultobj;
fail:
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  return NULL;
}


SWIGINTERN PyObject *_wrap_overall_GetWorkingDirectory(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  char **arg1 = (char **) 0 ;
  int *arg2 = (int *) 0 ;
  int *arg3 = (int *) 0 ;
  char *tmp_vector1 ;
  int tmp_size1 ;
  int tmp_rs1 ;
  
  {
    arg1 = &tmp_vector1;
    arg2 = &tmp_size1;
    arg3 = &tmp_rs1;
  }
  if (!PyArg_ParseTuple(args,(char *)":overall_GetWorkingDirectory")) SWIG_fail;
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      overall_GetWorkingDirectory(arg1,arg2,arg3);
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_Py_Void();
  {
    PyObject *chaine;
    chaine = PyString_FromStringAndSize(*arg1, *arg2);
    free_ptrFortranString(*arg1, *arg3);
    resultobj = chaine;
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_overall_WriteDrivenDof(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  
  if (!PyArg_ParseTuple(args,(char *)":overall_WriteDrivenDof")) SWIG_fail;
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      overall_WriteDrivenDof();
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_overall_WriteOutDisplayFile(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  int arg1 = (int) 0 ;
  int val1 ;
  int ecode1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"|O:overall_WriteOutDisplayFile",&obj0)) SWIG_fail;
  if (obj0) {
    ecode1 = SWIG_AsVal_int(obj0, &val1);
    if (!SWIG_IsOK(ecode1)) {
      SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "overall_WriteOutDisplayFile" "', argument " "1"" of type '" "int""'");
    } 
    arg1 = static_cast< int >(val1);
  }
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      overall_WriteOutDisplayFile(arg1);
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TimeEvolution_ReadIniMpValues(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  int arg1 = (int) 0 ;
  int val1 ;
  int ecode1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"|O:TimeEvolution_ReadIniMpValues",&obj0)) SWIG_fail;
  if (obj0) {
    ecode1 = SWIG_AsVal_int(obj0, &val1);
    if (!SWIG_IsOK(ecode1)) {
      SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "TimeEvolution_ReadIniMpValues" "', argument " "1"" of type '" "int""'");
    } 
    arg1 = static_cast< int >(val1);
  }
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      TimeEvolution_ReadIniMpValues(arg1);
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TimeEvolution_WriteOutMpValues(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  int arg1 = (int) 1 ;
  int val1 ;
  int ecode1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"|O:TimeEvolution_WriteOutMpValues",&obj0)) SWIG_fail;
  if (obj0) {
    ecode1 = SWIG_AsVal_int(obj0, &val1);
    if (!SWIG_IsOK(ecode1)) {
      SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "TimeEvolution_WriteOutMpValues" "', argument " "1"" of type '" "int""'");
    } 
    arg1 = static_cast< int >(val1);
  }
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      TimeEvolution_WriteOutMpValues(arg1);
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TimeEvolution_WriteLastMpValues(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  
  if (!PyArg_ParseTuple(args,(char *)":TimeEvolution_WriteLastMpValues")) SWIG_fail;
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      TimeEvolution_WriteLastMpValues();
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_overall_WriteBodies(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  
  if (!PyArg_ParseTuple(args,(char *)":overall_WriteBodies")) SWIG_fail;
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      overall_WriteBodies();
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_overall_CleanOutBodies(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  
  if (!PyArg_ParseTuple(args,(char *)":overall_CleanOutBodies")) SWIG_fail;
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      overall_CleanOutBodies();
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_overall_RebuildInBodies(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  
  if (!PyArg_ParseTuple(args,(char *)":overall_RebuildInBodies")) SWIG_fail;
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      overall_RebuildInBodies();
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_overall_CleanWriteOutFlags(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  
  if (!PyArg_ParseTuple(args,(char *)":overall_CleanWriteOutFlags")) SWIG_fail;
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      overall_CleanWriteOutFlags();
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_overall_UseExperimentalDev(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  
  if (!PyArg_ParseTuple(args,(char *)":overall_UseExperimentalDev")) SWIG_fail;
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      overall_UseExperimentalDev();
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_overall_UseExternalFem(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  
  if (!PyArg_ParseTuple(args,(char *)":overall_UseExternalFem")) SWIG_fail;
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      overall_UseExternalFem();
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_overall_GetMaxInternalTact(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)":overall_GetMaxInternalTact")) SWIG_fail;
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      result = (int)overall_GetMaxInternalTact();
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_tact_behav_OpenBehavContainer(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  
  if (!PyArg_ParseTuple(args,(char *)":tact_behav_OpenBehavContainer")) SWIG_fail;
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      tact_behav_OpenBehavContainer();
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_tact_behav_CloseBehavContainer(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  
  if (!PyArg_ParseTuple(args,(char *)":tact_behav_CloseBehavContainer")) SWIG_fail;
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      tact_behav_CloseBehavContainer();
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_tact_behav_OpenSeeContainer(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  
  if (!PyArg_ParseTuple(args,(char *)":tact_behav_OpenSeeContainer")) SWIG_fail;
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      tact_behav_OpenSeeContainer();
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_tact_behav_CloseSeeContainer(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  
  if (!PyArg_ParseTuple(args,(char *)":tact_behav_CloseSeeContainer")) SWIG_fail;
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      tact_behav_CloseSeeContainer();
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_tact_behav_FillContainersFromFile(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  
  if (!PyArg_ParseTuple(args,(char *)":tact_behav_FillContainersFromFile")) SWIG_fail;
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      tact_behav_FillContainersFromFile();
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_tact_behav_AddToSeeContainer(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  char *arg1 = (char *) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  char *arg4 = (char *) 0 ;
  char *arg5 = (char *) 0 ;
  char *arg6 = (char *) 0 ;
  char *arg7 = (char *) 0 ;
  double arg8 ;
  double arg9 ;
  int res1 ;
  char *buf1 = 0 ;
  int alloc1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  int res3 ;
  char *buf3 = 0 ;
  int alloc3 = 0 ;
  int res4 ;
  char *buf4 = 0 ;
  int alloc4 = 0 ;
  int res5 ;
  char *buf5 = 0 ;
  int alloc5 = 0 ;
  int res6 ;
  char *buf6 = 0 ;
  int alloc6 = 0 ;
  int res7 ;
  char *buf7 = 0 ;
  int alloc7 = 0 ;
  double val8 ;
  int ecode8 = 0 ;
  double val9 ;
  int ecode9 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  PyObject * obj5 = 0 ;
  PyObject * obj6 = 0 ;
  PyObject * obj7 = 0 ;
  PyObject * obj8 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOOOOOO:tact_behav_AddToSeeContainer",&obj0,&obj1,&obj2,&obj3,&obj4,&obj5,&obj6,&obj7,&obj8)) SWIG_fail;
  res1 = SWIG_AsCharPtrAndSize(obj0, &buf1, NULL, &alloc1);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "tact_behav_AddToSeeContainer" "', argument " "1"" of type '" "char *""'");
  }
  arg1 = reinterpret_cast< char * >(buf1);
  res2 = SWIG_AsCharPtrAndSize(obj1, &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "tact_behav_AddToSeeContainer" "', argument " "2"" of type '" "char *""'");
  }
  arg2 = reinterpret_cast< char * >(buf2);
  res3 = SWIG_AsCharPtrAndSize(obj2, &buf3, NULL, &alloc3);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "tact_behav_AddToSeeContainer" "', argument " "3"" of type '" "char *""'");
  }
  arg3 = reinterpret_cast< char * >(buf3);
  res4 = SWIG_AsCharPtrAndSize(obj3, &buf4, NULL, &alloc4);
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "tact_behav_AddToSeeContainer" "', argument " "4"" of type '" "char *""'");
  }
  arg4 = reinterpret_cast< char * >(buf4);
  res5 = SWIG_AsCharPtrAndSize(obj4, &buf5, NULL, &alloc5);
  if (!SWIG_IsOK(res5)) {
    SWIG_exception_fail(SWIG_ArgError(res5), "in method '" "tact_behav_AddToSeeContainer" "', argument " "5"" of type '" "char *""'");
  }
  arg5 = reinterpret_cast< char * >(buf5);
  res6 = SWIG_AsCharPtrAndSize(obj5, &buf6, NULL, &alloc6);
  if (!SWIG_IsOK(res6)) {
    SWIG_exception_fail(SWIG_ArgError(res6), "in method '" "tact_behav_AddToSeeContainer" "', argument " "6"" of type '" "char *""'");
  }
  arg6 = reinterpret_cast< char * >(buf6);
  res7 = SWIG_AsCharPtrAndSize(obj6, &buf7, NULL, &alloc7);
  if (!SWIG_IsOK(res7)) {
    SWIG_exception_fail(SWIG_ArgError(res7), "in method '" "tact_behav_AddToSeeContainer" "', argument " "7"" of type '" "char *""'");
  }
  arg7 = reinterpret_cast< char * >(buf7);
  ecode8 = SWIG_AsVal_double(obj7, &val8);
  if (!SWIG_IsOK(ecode8)) {
    SWIG_exception_fail(SWIG_ArgError(ecode8), "in method '" "tact_behav_AddToSeeContainer" "', argument " "8"" of type '" "double""'");
  } 
  arg8 = static_cast< double >(val8);
  ecode9 = SWIG_AsVal_double(obj8, &val9);
  if (!SWIG_IsOK(ecode9)) {
    SWIG_exception_fail(SWIG_ArgError(ecode9), "in method '" "tact_behav_AddToSeeContainer" "', argument " "9"" of type '" "double""'");
  } 
  arg9 = static_cast< double >(val9);
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      tact_behav_AddToSeeContainer(arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9);
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_Py_Void();
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  if (alloc4 == SWIG_NEWOBJ) delete[] buf4;
  if (alloc5 == SWIG_NEWOBJ) delete[] buf5;
  if (alloc6 == SWIG_NEWOBJ) delete[] buf6;
  if (alloc7 == SWIG_NEWOBJ) delete[] buf7;
  return resultobj;
fail:
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  if (alloc4 == SWIG_NEWOBJ) delete[] buf4;
  if (alloc5 == SWIG_NEWOBJ) delete[] buf5;
  if (alloc6 == SWIG_NEWOBJ) delete[] buf6;
  if (alloc7 == SWIG_NEWOBJ) delete[] buf7;
  return NULL;
}


SWIGINTERN PyObject *_wrap_tact_behav_ReadBehaviours(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  
  if (!PyArg_ParseTuple(args,(char *)":tact_behav_ReadBehaviours")) SWIG_fail;
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      tact_behav_ReadBehaviours();
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_tact_behav_CollectOutTactBehav(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  
  if (!PyArg_ParseTuple(args,(char *)":tact_behav_CollectOutTactBehav")) SWIG_fail;
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      tact_behav_CollectOutTactBehav();
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_tact_behav_WriteBehaviours(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  
  if (!PyArg_ParseTuple(args,(char *)":tact_behav_WriteBehaviours")) SWIG_fail;
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      tact_behav_WriteBehaviours();
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_tact_behav_AppendOutTactBehav(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  
  if (!PyArg_ParseTuple(args,(char *)":tact_behav_AppendOutTactBehav")) SWIG_fail;
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      tact_behav_AppendOutTactBehav();
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_tact_behav_RebuildInTactBehav(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  
  if (!PyArg_ParseTuple(args,(char *)":tact_behav_RebuildInTactBehav")) SWIG_fail;
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      tact_behav_RebuildInTactBehav();
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_tact_behav_CleanOutTactBehav(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  
  if (!PyArg_ParseTuple(args,(char *)":tact_behav_CleanOutTactBehav")) SWIG_fail;
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      tact_behav_CleanOutTactBehav();
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_tact_behav_GetNbTactBehav(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)":tact_behav_GetNbTactBehav")) SWIG_fail;
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      result = (int)tact_behav_GetNbTactBehav();
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_tact_behav_GetTactBehav(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  int arg1 ;
  char **arg2 = (char **) 0 ;
  int *arg3 = (int *) 0 ;
  int *arg4 = (int *) 0 ;
  char **arg5 = (char **) 0 ;
  double **arg6 = (double **) 0 ;
  int *arg7 = (int *) 0 ;
  int val1 ;
  int ecode1 = 0 ;
  char *tmp_vector2 ;
  int tmp_size2 ;
  int tmp_rs2 ;
  char *tmp_c55 ;
  double *data_temp6 ;
  int dim_temp6 ;
  PyObject * obj0 = 0 ;
  
  {
    arg2 = &tmp_vector2;
    arg3 = &tmp_size2;
    arg4 = &tmp_rs2;
  }
  {
    arg5 = &tmp_c55;
  }
  {
    arg6 = &data_temp6;
    arg7 = &dim_temp6;
  }
  if (!PyArg_ParseTuple(args,(char *)"O:tact_behav_GetTactBehav",&obj0)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "tact_behav_GetTactBehav" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = static_cast< int >(val1);
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      tact_behav_GetTactBehav(arg1,arg2,arg3,arg4,arg5,arg6,arg7);
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_Py_Void();
  {
    PyObject *chaine;
    chaine = PyString_FromStringAndSize(*arg2, *arg3);
    free_ptrFortranString(*arg2, *arg4);
    resultobj = chaine;
  }
  {
    PyObject *chaine;
    chaine = PyString_FromStringAndSize(*arg5, 5);
    free_ptrFortranString(*arg5, 5);
    resultobj = SWIG_Python_AppendOutput(resultobj, chaine);
  }
  {
    npy_intp dims[1] = {
      *arg7 
    };
    PyObject * obj = PyArray_SimpleNewFromData(1, dims, NPY_DOUBLE, (void*)(*arg6));
    if (!obj) SWIG_fail;
    PyArrayObject * array = (PyArrayObject*) obj;
    attach_fortran_memory_to_numpy_array(array, (void*)(*arg6), NPY_DOUBLE, dims[0], 0);
    PyArray_ENABLEFLAGS(array,NPY_ARRAY_WRITEABLE);
    
    resultobj = SWIG_Python_AppendOutput(resultobj, obj);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_tact_behav_GetInternalComment(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  int arg1 ;
  char **arg2 = (char **) 0 ;
  int *arg3 = (int *) 0 ;
  int *arg4 = (int *) 0 ;
  int val1 ;
  int ecode1 = 0 ;
  char *tmp_vector2 ;
  int tmp_size2 ;
  int tmp_rs2 ;
  PyObject * obj0 = 0 ;
  
  {
    arg2 = &tmp_vector2;
    arg3 = &tmp_size2;
    arg4 = &tmp_rs2;
  }
  if (!PyArg_ParseTuple(args,(char *)"O:tact_behav_GetInternalComment",&obj0)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "tact_behav_GetInternalComment" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = static_cast< int >(val1);
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      tact_behav_GetInternalComment(arg1,arg2,arg3,arg4);
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_Py_Void();
  {
    PyObject *chaine;
    chaine = PyString_FromStringAndSize(*arg2, *arg3);
    free_ptrFortranString(*arg2, *arg4);
    resultobj = chaine;
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_tact_behav_SetCZMwithInitialFriction(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  double arg1 = (double) 0. ;
  double val1 ;
  int ecode1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"|O:tact_behav_SetCZMwithInitialFriction",&obj0)) SWIG_fail;
  if (obj0) {
    ecode1 = SWIG_AsVal_double(obj0, &val1);
    if (!SWIG_IsOK(ecode1)) {
      SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "tact_behav_SetCZMwithInitialFriction" "', argument " "1"" of type '" "double""'");
    } 
    arg1 = static_cast< double >(val1);
  }
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      tact_behav_SetCZMwithInitialFriction(arg1);
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_tact_behav_initFrictionEvolution(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  
  if (!PyArg_ParseTuple(args,(char *)":tact_behav_initFrictionEvolution")) SWIG_fail;
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      tact_behav_initFrictionEvolution();
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_tact_behav_setRandomFriction(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  double arg1 ;
  double val1 ;
  int ecode1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:tact_behav_setRandomFriction",&obj0)) SWIG_fail;
  ecode1 = SWIG_AsVal_double(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "tact_behav_setRandomFriction" "', argument " "1"" of type '" "double""'");
  } 
  arg1 = static_cast< double >(val1);
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      tact_behav_setRandomFriction(arg1);
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_tact_behav_GetTactBehavRankFromName(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  char *arg1 = (char *) 0 ;
  int res1 ;
  char *buf1 = 0 ;
  int alloc1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:tact_behav_GetTactBehavRankFromName",&obj0)) SWIG_fail;
  res1 = SWIG_AsCharPtrAndSize(obj0, &buf1, NULL, &alloc1);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "tact_behav_GetTactBehavRankFromName" "', argument " "1"" of type '" "char *""'");
  }
  arg1 = reinterpret_cast< char * >(buf1);
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      result = (int)tact_behav_GetTactBehavRankFromName(arg1);
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  return resultobj;
fail:
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  return NULL;
}


SWIGINTERN PyObject *_wrap_tact_behav_GetParamRankFromName(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  int arg1 ;
  char *arg2 = (char *) 0 ;
  int val1 ;
  int ecode1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:tact_behav_GetParamRankFromName",&obj0,&obj1)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "tact_behav_GetParamRankFromName" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = static_cast< int >(val1);
  res2 = SWIG_AsCharPtrAndSize(obj1, &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "tact_behav_GetParamRankFromName" "', argument " "2"" of type '" "char *""'");
  }
  arg2 = reinterpret_cast< char * >(buf2);
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      result = (int)tact_behav_GetParamRankFromName(arg1,arg2);
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return resultobj;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_tact_behav_GetParam(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  int arg1 ;
  int arg2 ;
  int val1 ;
  int ecode1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:tact_behav_GetParam",&obj0,&obj1)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "tact_behav_GetParam" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = static_cast< int >(val1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "tact_behav_GetParam" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      result = (double)tact_behav_GetParam(arg1,arg2);
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_tact_behav_SetParam(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  int arg1 ;
  int arg2 ;
  double arg3 ;
  int val1 ;
  int ecode1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:tact_behav_SetParam",&obj0,&obj1,&obj2)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "tact_behav_SetParam" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = static_cast< int >(val1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "tact_behav_SetParam" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_double(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "tact_behav_SetParam" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast< double >(val3);
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      tact_behav_SetParam(arg1,arg2,arg3);
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_tact_behav_GetLawInternalComment(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  char *arg1 = (char *) 0 ;
  char **arg2 = (char **) 0 ;
  int *arg3 = (int *) 0 ;
  int *arg4 = (int *) 0 ;
  int res1 ;
  char *buf1 = 0 ;
  int alloc1 = 0 ;
  char *tmp_vector2 ;
  int tmp_size2 ;
  int tmp_rs2 ;
  PyObject * obj0 = 0 ;
  
  {
    arg2 = &tmp_vector2;
    arg3 = &tmp_size2;
    arg4 = &tmp_rs2;
  }
  if (!PyArg_ParseTuple(args,(char *)"O:tact_behav_GetLawInternalComment",&obj0)) SWIG_fail;
  res1 = SWIG_AsCharPtrAndSize(obj0, &buf1, NULL, &alloc1);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "tact_behav_GetLawInternalComment" "', argument " "1"" of type '" "char *""'");
  }
  arg1 = reinterpret_cast< char * >(buf1);
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      tact_behav_GetLawInternalComment(arg1,arg2,arg3,arg4);
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_Py_Void();
  {
    PyObject *chaine;
    chaine = PyString_FromStringAndSize(*arg2, *arg3);
    free_ptrFortranString(*arg2, *arg4);
    resultobj = chaine;
  }
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  return resultobj;
fail:
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  return NULL;
}


SWIGINTERN PyObject *_wrap_tact_behav_SetRNcap(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  double arg1 ;
  double val1 ;
  int ecode1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:tact_behav_SetRNcap",&obj0)) SWIG_fail;
  ecode1 = SWIG_AsVal_double(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "tact_behav_SetRNcap" "', argument " "1"" of type '" "double""'");
  } 
  arg1 = static_cast< double >(val1);
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      tact_behav_SetRNcap(arg1);
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_tact_behav_SetDilatancyParameters(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  double arg1 ;
  double arg2 ;
  double val1 ;
  int ecode1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:tact_behav_SetDilatancyParameters",&obj0,&obj1)) SWIG_fail;
  ecode1 = SWIG_AsVal_double(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "tact_behav_SetDilatancyParameters" "', argument " "1"" of type '" "double""'");
  } 
  arg1 = static_cast< double >(val1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "tact_behav_SetDilatancyParameters" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      tact_behav_SetDilatancyParameters(arg1,arg2);
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_tact_behav_SetPressureParameters(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  int arg1 ;
  int arg2 ;
  double *arg3 = (double *) 0 ;
  int arg4 ;
  int val1 ;
  int ecode1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyArrayObject *array3 = NULL ;
  int is_new_object3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:tact_behav_SetPressureParameters",&obj0,&obj1,&obj2)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "tact_behav_SetPressureParameters" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = static_cast< int >(val1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "tact_behav_SetPressureParameters" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    npy_intp size[1] = {
      -1 
    };
    array3 = obj_to_array_contiguous_allow_conversion(obj2,
      NPY_DOUBLE,
      &is_new_object3);
    if (!array3 || !require_dimensions(array3, 1) ||
      !require_size(array3, size, 1)) SWIG_fail;
    arg3 = (double*) array_data(array3);
    arg4 = (int) array_size(array3,0);
  }
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      tact_behav_SetPressureParameters(arg1,arg2,arg3,arg4);
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_Py_Void();
  {
    if (is_new_object3 && array3)
    {
      Py_DECREF(array3); 
    }
  }
  return resultobj;
fail:
  {
    if (is_new_object3 && array3)
    {
      Py_DECREF(array3); 
    }
  }
  return NULL;
}


SWIGINTERN PyObject *_wrap_tact_behav_CleanMemory(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  
  if (!PyArg_ParseTuple(args,(char *)":tact_behav_CleanMemory")) SWIG_fail;
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      tact_behav_CleanMemory();
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_timer_InitializeTimers(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  
  if (!PyArg_ParseTuple(args,(char *)":timer_InitializeTimers")) SWIG_fail;
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      timer_InitializeTimers();
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_timer_WriteOutTimers(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  
  if (!PyArg_ParseTuple(args,(char *)":timer_WriteOutTimers")) SWIG_fail;
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      timer_WriteOutTimers();
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_timer_GetNewTimer(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  char *arg1 = (char *) 0 ;
  int res1 ;
  char *buf1 = 0 ;
  int alloc1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:timer_GetNewTimer",&obj0)) SWIG_fail;
  res1 = SWIG_AsCharPtrAndSize(obj0, &buf1, NULL, &alloc1);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "timer_GetNewTimer" "', argument " "1"" of type '" "char *""'");
  }
  arg1 = reinterpret_cast< char * >(buf1);
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      result = (int)timer_GetNewTimer(arg1);
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  return resultobj;
fail:
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  return NULL;
}


SWIGINTERN PyObject *_wrap_timer_StartTimer(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  int arg1 ;
  int val1 ;
  int ecode1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:timer_StartTimer",&obj0)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "timer_StartTimer" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = static_cast< int >(val1);
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      timer_StartTimer(arg1);
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_timer_StopTimer(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  int arg1 ;
  int val1 ;
  int ecode1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:timer_StopTimer",&obj0)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "timer_StopTimer" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = static_cast< int >(val1);
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      timer_StopTimer(arg1);
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_timer_ClearAll(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  
  if (!PyArg_ParseTuple(args,(char *)":timer_ClearAll")) SWIG_fail;
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      timer_ClearAll();
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_utilities_logMes(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  char *arg1 = (char *) 0 ;
  int arg2 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:utilities_logMes",&obj0)) SWIG_fail;
  {
    if (PyUnicode_Check(obj0)){
      PyObject *pyStr = PyUnicode_AsEncodedString(obj0, "utf-8", "Error~");
      arg1 = PyString_AsString(pyStr);
      arg2 = PyString_Size(pyStr);
      Py_XDECREF(pyStr);
    }
    else if (PyString_Check(obj0))
    {
      arg1 = PyString_AsString(obj0);
      arg2 = PyString_Size(obj0);
    }
    else
    {
      PyErr_SetString(PyExc_TypeError,"input must be a string");
      return NULL;
    }
  }
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      utilities_logMes(arg1,arg2);
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_utilities_DisableLogMes(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  
  if (!PyArg_ParseTuple(args,(char *)":utilities_DisableLogMes")) SWIG_fail;
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      utilities_DisableLogMes();
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_utilities_EnableLogMes(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  
  if (!PyArg_ParseTuple(args,(char *)":utilities_EnableLogMes")) SWIG_fail;
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      utilities_EnableLogMes();
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_utilities_setIoUnitLimits(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  int arg1 ;
  int arg2 ;
  int val1 ;
  int ecode1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:utilities_setIoUnitLimits",&obj0,&obj1)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "utilities_setIoUnitLimits" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = static_cast< int >(val1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "utilities_setIoUnitLimits" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      utilities_setIoUnitLimits(arg1,arg2);
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_utilities_setStopMode(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  bool arg1 ;
  bool val1 ;
  int ecode1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:utilities_setStopMode",&obj0)) SWIG_fail;
  ecode1 = SWIG_AsVal_bool(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "utilities_setStopMode" "', argument " "1"" of type '" "bool""'");
  } 
  arg1 = static_cast< bool >(val1);
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      utilities_setStopMode(arg1);
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_utilities_resetFatal(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)":utilities_resetFatal")) SWIG_fail;
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      result = (int)utilities_resetFatal();
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_utilities_checkFatal(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  char **arg1 = (char **) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:utilities_checkFatal",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_p_char, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "utilities_checkFatal" "', argument " "1"" of type '" "char **""'"); 
  }
  arg1 = reinterpret_cast< char ** >(argp1);
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      result = (int)utilities_checkFatal(arg1);
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_utilities_OpenFileStandardOutput(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  char *arg1 = (char *) 0 ;
  int arg2 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:utilities_OpenFileStandardOutput",&obj0)) SWIG_fail;
  {
    if (PyUnicode_Check(obj0)){
      PyObject *pyStr = PyUnicode_AsEncodedString(obj0, "utf-8", "Error~");
      arg1 = PyString_AsString(pyStr);
      arg2 = PyString_Size(pyStr);
      Py_XDECREF(pyStr);
    }
    else if (PyString_Check(obj0))
    {
      arg1 = PyString_AsString(obj0);
      arg2 = PyString_Size(obj0);
    }
    else
    {
      PyErr_SetString(PyExc_TypeError,"input must be a string");
      return NULL;
    }
  }
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      utilities_OpenFileStandardOutput(arg1,arg2);
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_utilities_CloseFileStandardOutput(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  
  if (!PyArg_ParseTuple(args,(char *)":utilities_CloseFileStandardOutput")) SWIG_fail;
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      utilities_CloseFileStandardOutput();
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_utilities_InitRandomSeed(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  int *arg1 = (int *) NULL ;
  int arg2 = (int) 0 ;
  PyArrayObject *array1 = NULL ;
  int is_new_object1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"|O:utilities_InitRandomSeed",&obj0)) SWIG_fail;
  if (obj0) {
    {
      npy_intp size[1] = {
        -1 
      };
      array1 = obj_to_array_contiguous_allow_conversion(obj0,
        NPY_INT,
        &is_new_object1);
      if (!array1 || !require_dimensions(array1, 1) ||
        !require_size(array1, size, 1)) SWIG_fail;
      arg1 = (int*) array_data(array1);
      arg2 = (int) array_size(array1,0);
    }
  }
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      utilities_InitRandomSeed(arg1,arg2);
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_Py_Void();
  {
    if (is_new_object1 && array1)
    {
      Py_DECREF(array1); 
    }
  }
  return resultobj;
fail:
  {
    if (is_new_object1 && array1)
    {
      Py_DECREF(array1); 
    }
  }
  return NULL;
}


SWIGINTERN PyObject *_wrap_utilities_Finalize(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  
  if (!PyArg_ParseTuple(args,(char *)":utilities_Finalize")) SWIG_fail;
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      utilities_Finalize();
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_a_EF_InterpolateField(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  double *arg1 = (double *) 0 ;
  int arg2 ;
  double *arg3 = (double *) 0 ;
  int arg4 ;
  double *arg5 = (double *) 0 ;
  PyArrayObject *array1 = NULL ;
  int is_new_object1 = 0 ;
  PyArrayObject *array3 = NULL ;
  int is_new_object3 = 0 ;
  double temp5 ;
  int res5 = SWIG_TMPOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  arg5 = &temp5;
  if (!PyArg_ParseTuple(args,(char *)"OO:a_EF_InterpolateField",&obj0,&obj1)) SWIG_fail;
  {
    npy_intp size[1] = {
      -1 
    };
    array1 = obj_to_array_contiguous_allow_conversion(obj0,
      NPY_DOUBLE,
      &is_new_object1);
    if (!array1 || !require_dimensions(array1, 1) ||
      !require_size(array1, size, 1)) SWIG_fail;
    arg1 = (double*) array_data(array1);
    arg2 = (int) array_size(array1,0);
  }
  {
    npy_intp size[1] = {
      -1 
    };
    array3 = obj_to_array_contiguous_allow_conversion(obj1,
      NPY_DOUBLE,
      &is_new_object3);
    if (!array3 || !require_dimensions(array3, 1) ||
      !require_size(array3, size, 1)) SWIG_fail;
    arg3 = (double*) array_data(array3);
    arg4 = (int) array_size(array3,0);
  }
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      a_EF_InterpolateField(arg1,arg2,arg3,arg4,arg5);
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsTmpObj(res5)) {
    resultobj = SWIG_Python_AppendOutput(resultobj, SWIG_From_double((*arg5)));
  } else {
    int new_flags = SWIG_IsNewObj(res5) ? (SWIG_POINTER_OWN |  0 ) :  0 ;
    resultobj = SWIG_Python_AppendOutput(resultobj, SWIG_NewPointerObj((void*)(arg5), SWIGTYPE_p_double, new_flags));
  }
  {
    if (is_new_object1 && array1)
    {
      Py_DECREF(array1); 
    }
  }
  {
    if (is_new_object3 && array3)
    {
      Py_DECREF(array3); 
    }
  }
  return resultobj;
fail:
  {
    if (is_new_object1 && array1)
    {
      Py_DECREF(array1); 
    }
  }
  {
    if (is_new_object3 && array3)
    {
      Py_DECREF(array3); 
    }
  }
  return NULL;
}


SWIGINTERN PyObject *_wrap_a_EF_ComputeCenter(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  double *arg1 = (double *) 0 ;
  int arg2 ;
  int arg3 ;
  double **arg4 = (double **) 0 ;
  int *arg5 = (int *) 0 ;
  PyArrayObject *array1 = NULL ;
  int is_new_object1 = 0 ;
  double *data_temp4 ;
  int dim_temp4 ;
  PyObject * obj0 = 0 ;
  
  {
    arg4 = &data_temp4;
    arg5 = &dim_temp4;
  }
  if (!PyArg_ParseTuple(args,(char *)"O:a_EF_ComputeCenter",&obj0)) SWIG_fail;
  {
    npy_intp size[2] = {
      -1, -1 
    };
    array1 = obj_to_array_contiguous_allow_conversion(obj0, NPY_DOUBLE,
      &is_new_object1);
    if (!array1 || !require_dimensions(array1, 2) ||
      !require_size(array1, size, 2)) SWIG_fail;
    arg1 = (double*) array_data(array1);
    arg2 = (int) array_size(array1,0);
    arg3 = (int) array_size(array1,1);
  }
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      a_EF_ComputeCenter(arg1,arg2,arg3,arg4,arg5);
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_Py_Void();
  {
    npy_intp dims[1] = {
      *arg5 
    };
    PyObject * obj = PyArray_SimpleNewFromData(1, dims, NPY_DOUBLE, (void*)(*arg4));
    if (!obj) SWIG_fail;
    PyArrayObject * array = (PyArrayObject*) obj;
    attach_fortran_memory_to_numpy_array(array, (void*)(*arg4), NPY_DOUBLE, dims[0], 0);
    PyArray_ENABLEFLAGS(array,NPY_ARRAY_WRITEABLE);
    
    resultobj = SWIG_Python_AppendOutput(resultobj, obj);
  }
  {
    if (is_new_object1 && array1)
    {
      Py_DECREF(array1); 
    }
  }
  return resultobj;
fail:
  {
    if (is_new_object1 && array1)
    {
      Py_DECREF(array1); 
    }
  }
  return NULL;
}


SWIGINTERN PyObject *_wrap_MecaPolyg_CentralKernel(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  double *arg1 = (double *) 0 ;
  int arg2 ;
  int arg3 ;
  int *arg4 = (int *) 0 ;
  int arg5 ;
  double **arg6 = (double **) 0 ;
  int *arg7 = (int *) 0 ;
  int *arg8 = (int *) 0 ;
  PyArrayObject *array1 = NULL ;
  int is_new_object1 = 0 ;
  PyArrayObject *array4 = NULL ;
  int is_new_object4 = 0 ;
  double *data_temp6 ;
  int dim1_temp6 ;
  int dim2_temp6 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  {
    arg6 = &data_temp6;
    arg7 = &dim1_temp6;
    arg8 = &dim2_temp6;
  }
  if (!PyArg_ParseTuple(args,(char *)"OO:MecaPolyg_CentralKernel",&obj0,&obj1)) SWIG_fail;
  {
    npy_intp size[2] = {
      -1, -1 
    };
    array1 = obj_to_array_contiguous_allow_conversion(obj0, NPY_DOUBLE,
      &is_new_object1);
    if (!array1 || !require_dimensions(array1, 2) ||
      !require_size(array1, size, 2)) SWIG_fail;
    arg1 = (double*) array_data(array1);
    arg2 = (int) array_size(array1,0);
    arg3 = (int) array_size(array1,1);
  }
  {
    npy_intp size[1] = {
      -1 
    };
    array4 = obj_to_array_contiguous_allow_conversion(obj1,
      NPY_INT,
      &is_new_object4);
    if (!array4 || !require_dimensions(array4, 1) ||
      !require_size(array4, size, 1)) SWIG_fail;
    arg4 = (int*) array_data(array4);
    arg5 = (int) array_size(array4,0);
  }
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      MecaPolyg_CentralKernel(arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8);
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_Py_Void();
  {
    npy_intp dims[2] = {
      *arg8, *arg7 
    };
    PyObject * obj = PyArray_SimpleNewFromData(2, dims, NPY_DOUBLE, (void*)(*arg6));
    if (!obj) SWIG_fail;
    PyArrayObject * array = (PyArrayObject*) obj;
    attach_fortran_memory_to_numpy_array(array, (void*)(*arg6), NPY_DOUBLE, dims[1], dims[0]);
    PyArray_ENABLEFLAGS(array,NPY_ARRAY_WRITEABLE);
    resultobj = SWIG_Python_AppendOutput(resultobj, obj);
  }
  {
    if (is_new_object1 && array1)
    {
      Py_DECREF(array1); 
    }
  }
  {
    if (is_new_object4 && array4)
    {
      Py_DECREF(array4); 
    }
  }
  return resultobj;
fail:
  {
    if (is_new_object1 && array1)
    {
      Py_DECREF(array1); 
    }
  }
  {
    if (is_new_object4 && array4)
    {
      Py_DECREF(array4); 
    }
  }
  return NULL;
}


SWIGINTERN PyObject *_wrap_MecaPolyg_StressField(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  double *arg1 = (double *) 0 ;
  int arg2 ;
  int arg3 ;
  int *arg4 = (int *) 0 ;
  int arg5 ;
  double *arg6 = (double *) 0 ;
  int arg7 ;
  double *arg8 = (double *) 0 ;
  int arg9 ;
  double **arg10 = (double **) 0 ;
  int *arg11 = (int *) 0 ;
  int *arg12 = (int *) 0 ;
  int **arg13 = (int **) 0 ;
  int *arg14 = (int *) 0 ;
  double **arg15 = (double **) 0 ;
  int *arg16 = (int *) 0 ;
  int *arg17 = (int *) 0 ;
  int **arg18 = (int **) 0 ;
  int *arg19 = (int *) 0 ;
  double **arg20 = (double **) 0 ;
  int *arg21 = (int *) 0 ;
  double *arg22 = (double *) 0 ;
  PyArrayObject *array1 = NULL ;
  int is_new_object1 = 0 ;
  PyArrayObject *array4 = NULL ;
  int is_new_object4 = 0 ;
  PyArrayObject *array6 = NULL ;
  int is_new_object6 = 0 ;
  PyArrayObject *array8 = NULL ;
  int is_new_object8 = 0 ;
  double *data_temp10 ;
  int dim1_temp10 ;
  int dim2_temp10 ;
  int *data_temp13 ;
  int dim_temp13 ;
  double *data_temp15 ;
  int dim1_temp15 ;
  int dim2_temp15 ;
  int *data_temp18 ;
  int dim_temp18 ;
  double *data_temp20 ;
  int dim_temp20 ;
  double temp22 ;
  int res22 = SWIG_TMPOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  
  {
    arg10 = &data_temp10;
    arg11 = &dim1_temp10;
    arg12 = &dim2_temp10;
  }
  {
    arg13 = &data_temp13;
    arg14 = &dim_temp13;
  }
  {
    arg15 = &data_temp15;
    arg16 = &dim1_temp15;
    arg17 = &dim2_temp15;
  }
  {
    arg18 = &data_temp18;
    arg19 = &dim_temp18;
  }
  {
    arg20 = &data_temp20;
    arg21 = &dim_temp20;
  }
  arg22 = &temp22;
  if (!PyArg_ParseTuple(args,(char *)"OOOO:MecaPolyg_StressField",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  {
    npy_intp size[2] = {
      -1, -1 
    };
    array1 = obj_to_array_contiguous_allow_conversion(obj0, NPY_DOUBLE,
      &is_new_object1);
    if (!array1 || !require_dimensions(array1, 2) ||
      !require_size(array1, size, 2)) SWIG_fail;
    arg1 = (double*) array_data(array1);
    arg2 = (int) array_size(array1,0);
    arg3 = (int) array_size(array1,1);
  }
  {
    npy_intp size[1] = {
      -1 
    };
    array4 = obj_to_array_contiguous_allow_conversion(obj1,
      NPY_INT,
      &is_new_object4);
    if (!array4 || !require_dimensions(array4, 1) ||
      !require_size(array4, size, 1)) SWIG_fail;
    arg4 = (int*) array_data(array4);
    arg5 = (int) array_size(array4,0);
  }
  {
    npy_intp size[1] = {
      -1 
    };
    array6 = obj_to_array_contiguous_allow_conversion(obj2,
      NPY_DOUBLE,
      &is_new_object6);
    if (!array6 || !require_dimensions(array6, 1) ||
      !require_size(array6, size, 1)) SWIG_fail;
    arg6 = (double*) array_data(array6);
    arg7 = (int) array_size(array6,0);
  }
  {
    npy_intp size[1] = {
      -1 
    };
    array8 = obj_to_array_contiguous_allow_conversion(obj3,
      NPY_DOUBLE,
      &is_new_object8);
    if (!array8 || !require_dimensions(array8, 1) ||
      !require_size(array8, size, 1)) SWIG_fail;
    arg8 = (double*) array_data(array8);
    arg9 = (int) array_size(array8,0);
  }
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      MecaPolyg_StressField(arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9,arg10,arg11,arg12,arg13,arg14,arg15,arg16,arg17,arg18,arg19,arg20,arg21,arg22);
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_Py_Void();
  {
    npy_intp dims[2] = {
      *arg12, *arg11 
    };
    PyObject * obj = PyArray_SimpleNewFromData(2, dims, NPY_DOUBLE, (void*)(*arg10));
    if (!obj) SWIG_fail;
    PyArrayObject * array = (PyArrayObject*) obj;
    attach_fortran_memory_to_numpy_array(array, (void*)(*arg10), NPY_DOUBLE, dims[1], dims[0]);
    PyArray_ENABLEFLAGS(array,NPY_ARRAY_WRITEABLE);
    resultobj = SWIG_Python_AppendOutput(resultobj, obj);
  }
  {
    npy_intp dims[1] = {
      *arg14 
    };
    PyObject * obj = PyArray_SimpleNewFromData(1, dims, NPY_INT, (void*)(*arg13));
    if (!obj) SWIG_fail;
    PyArrayObject * array = (PyArrayObject*) obj;
    attach_fortran_memory_to_numpy_array(array, (void*)(*arg13), NPY_INT, dims[0], 0);
    PyArray_ENABLEFLAGS(array,NPY_ARRAY_WRITEABLE);
    
    resultobj = SWIG_Python_AppendOutput(resultobj, obj);
  }
  {
    npy_intp dims[2] = {
      *arg17, *arg16 
    };
    PyObject * obj = PyArray_SimpleNewFromData(2, dims, NPY_DOUBLE, (void*)(*arg15));
    if (!obj) SWIG_fail;
    PyArrayObject * array = (PyArrayObject*) obj;
    attach_fortran_memory_to_numpy_array(array, (void*)(*arg15), NPY_DOUBLE, dims[1], dims[0]);
    PyArray_ENABLEFLAGS(array,NPY_ARRAY_WRITEABLE);
    resultobj = SWIG_Python_AppendOutput(resultobj, obj);
  }
  {
    npy_intp dims[1] = {
      *arg19 
    };
    PyObject * obj = PyArray_SimpleNewFromData(1, dims, NPY_INT, (void*)(*arg18));
    if (!obj) SWIG_fail;
    PyArrayObject * array = (PyArrayObject*) obj;
    attach_fortran_memory_to_numpy_array(array, (void*)(*arg18), NPY_INT, dims[0], 0);
    PyArray_ENABLEFLAGS(array,NPY_ARRAY_WRITEABLE);
    
    resultobj = SWIG_Python_AppendOutput(resultobj, obj);
  }
  {
    npy_intp dims[1] = {
      *arg21 
    };
    PyObject * obj = PyArray_SimpleNewFromData(1, dims, NPY_DOUBLE, (void*)(*arg20));
    if (!obj) SWIG_fail;
    PyArrayObject * array = (PyArrayObject*) obj;
    attach_fortran_memory_to_numpy_array(array, (void*)(*arg20), NPY_DOUBLE, dims[0], 0);
    PyArray_ENABLEFLAGS(array,NPY_ARRAY_WRITEABLE);
    
    resultobj = SWIG_Python_AppendOutput(resultobj, obj);
  }
  if (SWIG_IsTmpObj(res22)) {
    resultobj = SWIG_Python_AppendOutput(resultobj, SWIG_From_double((*arg22)));
  } else {
    int new_flags = SWIG_IsNewObj(res22) ? (SWIG_POINTER_OWN |  0 ) :  0 ;
    resultobj = SWIG_Python_AppendOutput(resultobj, SWIG_NewPointerObj((void*)(arg22), SWIGTYPE_p_double, new_flags));
  }
  {
    if (is_new_object1 && array1)
    {
      Py_DECREF(array1); 
    }
  }
  {
    if (is_new_object4 && array4)
    {
      Py_DECREF(array4); 
    }
  }
  {
    if (is_new_object6 && array6)
    {
      Py_DECREF(array6); 
    }
  }
  {
    if (is_new_object8 && array8)
    {
      Py_DECREF(array8); 
    }
  }
  return resultobj;
fail:
  {
    if (is_new_object1 && array1)
    {
      Py_DECREF(array1); 
    }
  }
  {
    if (is_new_object4 && array4)
    {
      Py_DECREF(array4); 
    }
  }
  {
    if (is_new_object6 && array6)
    {
      Py_DECREF(array6); 
    }
  }
  {
    if (is_new_object8 && array8)
    {
      Py_DECREF(array8); 
    }
  }
  return NULL;
}


SWIGINTERN PyObject *_wrap_parameters_getPhysicTypeId(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  char *arg1 = (char *) 0 ;
  int res1 ;
  char *buf1 = 0 ;
  int alloc1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:parameters_getPhysicTypeId",&obj0)) SWIG_fail;
  res1 = SWIG_AsCharPtrAndSize(obj0, &buf1, NULL, &alloc1);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "parameters_getPhysicTypeId" "', argument " "1"" of type '" "char *""'");
  }
  arg1 = reinterpret_cast< char * >(buf1);
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      result = (int)parameters_getPhysicTypeId(arg1);
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  return resultobj;
fail:
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  return NULL;
}


SWIGINTERN PyObject *_wrap_parameters_getPhysicTypeNames(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  char **arg1 = (char **) 0 ;
  int *arg2 = (int *) 0 ;
  int *arg3 = (int *) 0 ;
  char *tmp_vector1 ;
  int tmp_vsize1 ;
  int tmp_csize1 ;
  
  {
    arg1 = &tmp_vector1;
    arg2 = &tmp_vsize1;
    arg3 = &tmp_csize1;
  }
  if (!PyArg_ParseTuple(args,(char *)":parameters_getPhysicTypeNames")) SWIG_fail;
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      parameters_getPhysicTypeNames(arg1,arg2,arg3);
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_Py_Void();
  {
    int i;
    PyObject *liste, *chaine;
    liste = PyTuple_New(*arg2);
    for( i=0; i<*arg2; i++ )
    {
      chaine = PyString_FromStringAndSize((*arg1+i*(*arg3)), *arg3);
      PyTuple_SetItem(liste, i, chaine);
    }
    
    resultobj = SWIG_Python_AppendOutput(resultobj, liste);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_parameters_getBodyModelId(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  char *arg1 = (char *) 0 ;
  int res1 ;
  char *buf1 = 0 ;
  int alloc1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:parameters_getBodyModelId",&obj0)) SWIG_fail;
  res1 = SWIG_AsCharPtrAndSize(obj0, &buf1, NULL, &alloc1);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "parameters_getBodyModelId" "', argument " "1"" of type '" "char *""'");
  }
  arg1 = reinterpret_cast< char * >(buf1);
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      result = (int)parameters_getBodyModelId(arg1);
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  return resultobj;
fail:
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  return NULL;
}


SWIGINTERN PyObject *_wrap_parameters_getBodyModelNames(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  char **arg1 = (char **) 0 ;
  int *arg2 = (int *) 0 ;
  int *arg3 = (int *) 0 ;
  char *tmp_vector1 ;
  int tmp_vsize1 ;
  int tmp_csize1 ;
  
  {
    arg1 = &tmp_vector1;
    arg2 = &tmp_vsize1;
    arg3 = &tmp_csize1;
  }
  if (!PyArg_ParseTuple(args,(char *)":parameters_getBodyModelNames")) SWIG_fail;
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      parameters_getBodyModelNames(arg1,arg2,arg3);
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_Py_Void();
  {
    int i;
    PyObject *liste, *chaine;
    liste = PyTuple_New(*arg2);
    for( i=0; i<*arg2; i++ )
    {
      chaine = PyString_FromStringAndSize((*arg1+i*(*arg3)), *arg3);
      PyTuple_SetItem(liste, i, chaine);
    }
    
    resultobj = SWIG_Python_AppendOutput(resultobj, liste);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_parameters_getContactorId(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  char *arg1 = (char *) 0 ;
  int res1 ;
  char *buf1 = 0 ;
  int alloc1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:parameters_getContactorId",&obj0)) SWIG_fail;
  res1 = SWIG_AsCharPtrAndSize(obj0, &buf1, NULL, &alloc1);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "parameters_getContactorId" "', argument " "1"" of type '" "char *""'");
  }
  arg1 = reinterpret_cast< char * >(buf1);
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      result = (int)parameters_getContactorId(arg1);
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  return resultobj;
fail:
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  return NULL;
}


SWIGINTERN PyObject *_wrap_parameters_getContactorNames(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  char **arg1 = (char **) 0 ;
  int *arg2 = (int *) 0 ;
  int *arg3 = (int *) 0 ;
  char *tmp_vector1 ;
  int tmp_vsize1 ;
  int tmp_csize1 ;
  
  {
    arg1 = &tmp_vector1;
    arg2 = &tmp_vsize1;
    arg3 = &tmp_csize1;
  }
  if (!PyArg_ParseTuple(args,(char *)":parameters_getContactorNames")) SWIG_fail;
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      parameters_getContactorNames(arg1,arg2,arg3);
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_Py_Void();
  {
    int i;
    PyObject *liste, *chaine;
    liste = PyTuple_New(*arg2);
    for( i=0; i<*arg2; i++ )
    {
      chaine = PyString_FromStringAndSize((*arg1+i*(*arg3)), *arg3);
      PyTuple_SetItem(liste, i, chaine);
    }
    
    resultobj = SWIG_Python_AppendOutput(resultobj, liste);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_parameters_getInteractionId(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  char *arg1 = (char *) 0 ;
  int res1 ;
  char *buf1 = 0 ;
  int alloc1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:parameters_getInteractionId",&obj0)) SWIG_fail;
  res1 = SWIG_AsCharPtrAndSize(obj0, &buf1, NULL, &alloc1);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "parameters_getInteractionId" "', argument " "1"" of type '" "char *""'");
  }
  arg1 = reinterpret_cast< char * >(buf1);
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      result = (int)parameters_getInteractionId(arg1);
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  return resultobj;
fail:
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  return NULL;
}


SWIGINTERN PyObject *_wrap_parameters_getInteractionNames(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  char **arg1 = (char **) 0 ;
  int *arg2 = (int *) 0 ;
  int *arg3 = (int *) 0 ;
  char *tmp_vector1 ;
  int tmp_vsize1 ;
  int tmp_csize1 ;
  
  {
    arg1 = &tmp_vector1;
    arg2 = &tmp_vsize1;
    arg3 = &tmp_csize1;
  }
  if (!PyArg_ParseTuple(args,(char *)":parameters_getInteractionNames")) SWIG_fail;
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      parameters_getInteractionNames(arg1,arg2,arg3);
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_Py_Void();
  {
    int i;
    PyObject *liste, *chaine;
    liste = PyTuple_New(*arg2);
    for( i=0; i<*arg2; i++ )
    {
      chaine = PyString_FromStringAndSize((*arg1+i*(*arg3)), *arg3);
      PyTuple_SetItem(liste, i, chaine);
    }
    
    resultobj = SWIG_Python_AppendOutput(resultobj, liste);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_parameters_getMatrixStorageId(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  char *arg1 = (char *) 0 ;
  int res1 ;
  char *buf1 = 0 ;
  int alloc1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:parameters_getMatrixStorageId",&obj0)) SWIG_fail;
  res1 = SWIG_AsCharPtrAndSize(obj0, &buf1, NULL, &alloc1);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "parameters_getMatrixStorageId" "', argument " "1"" of type '" "char *""'");
  }
  arg1 = reinterpret_cast< char * >(buf1);
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      result = (int)parameters_getMatrixStorageId(arg1);
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  return resultobj;
fail:
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  return NULL;
}


SWIGINTERN PyObject *_wrap_parameters_getMatrixStorageNames(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  char **arg1 = (char **) 0 ;
  int *arg2 = (int *) 0 ;
  int *arg3 = (int *) 0 ;
  char *tmp_vector1 ;
  int tmp_vsize1 ;
  int tmp_csize1 ;
  
  {
    arg1 = &tmp_vector1;
    arg2 = &tmp_vsize1;
    arg3 = &tmp_csize1;
  }
  if (!PyArg_ParseTuple(args,(char *)":parameters_getMatrixStorageNames")) SWIG_fail;
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      parameters_getMatrixStorageNames(arg1,arg2,arg3);
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_Py_Void();
  {
    int i;
    PyObject *liste, *chaine;
    liste = PyTuple_New(*arg2);
    for( i=0; i<*arg2; i++ )
    {
      chaine = PyString_FromStringAndSize((*arg1+i*(*arg3)), *arg3);
      PyTuple_SetItem(liste, i, chaine);
    }
    
    resultobj = SWIG_Python_AppendOutput(resultobj, liste);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_parameters_getMatrixShapeId(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  char *arg1 = (char *) 0 ;
  int res1 ;
  char *buf1 = 0 ;
  int alloc1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:parameters_getMatrixShapeId",&obj0)) SWIG_fail;
  res1 = SWIG_AsCharPtrAndSize(obj0, &buf1, NULL, &alloc1);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "parameters_getMatrixShapeId" "', argument " "1"" of type '" "char *""'");
  }
  arg1 = reinterpret_cast< char * >(buf1);
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      result = (int)parameters_getMatrixShapeId(arg1);
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  return resultobj;
fail:
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  return NULL;
}


SWIGINTERN PyObject *_wrap_parameters_getMatrixShapeNames(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  char **arg1 = (char **) 0 ;
  int *arg2 = (int *) 0 ;
  int *arg3 = (int *) 0 ;
  char *tmp_vector1 ;
  int tmp_vsize1 ;
  int tmp_csize1 ;
  
  {
    arg1 = &tmp_vector1;
    arg2 = &tmp_vsize1;
    arg3 = &tmp_csize1;
  }
  if (!PyArg_ParseTuple(args,(char *)":parameters_getMatrixShapeNames")) SWIG_fail;
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      parameters_getMatrixShapeNames(arg1,arg2,arg3);
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_Py_Void();
  {
    int i;
    PyObject *liste, *chaine;
    liste = PyTuple_New(*arg2);
    for( i=0; i<*arg2; i++ )
    {
      chaine = PyString_FromStringAndSize((*arg1+i*(*arg3)), *arg3);
      PyTuple_SetItem(liste, i, chaine);
    }
    
    resultobj = SWIG_Python_AppendOutput(resultobj, liste);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_parameters_getGeneralizedCoordinatesId(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  char *arg1 = (char *) 0 ;
  int res1 ;
  char *buf1 = 0 ;
  int alloc1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:parameters_getGeneralizedCoordinatesId",&obj0)) SWIG_fail;
  res1 = SWIG_AsCharPtrAndSize(obj0, &buf1, NULL, &alloc1);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "parameters_getGeneralizedCoordinatesId" "', argument " "1"" of type '" "char *""'");
  }
  arg1 = reinterpret_cast< char * >(buf1);
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      result = (int)parameters_getGeneralizedCoordinatesId(arg1);
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  return resultobj;
fail:
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  return NULL;
}


SWIGINTERN PyObject *_wrap_parameters_getGeneralizedCoordinatesNames(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  char **arg1 = (char **) 0 ;
  int *arg2 = (int *) 0 ;
  int *arg3 = (int *) 0 ;
  char *tmp_vector1 ;
  int tmp_vsize1 ;
  int tmp_csize1 ;
  
  {
    arg1 = &tmp_vector1;
    arg2 = &tmp_vsize1;
    arg3 = &tmp_csize1;
  }
  if (!PyArg_ParseTuple(args,(char *)":parameters_getGeneralizedCoordinatesNames")) SWIG_fail;
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      parameters_getGeneralizedCoordinatesNames(arg1,arg2,arg3);
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_Py_Void();
  {
    int i;
    PyObject *liste, *chaine;
    liste = PyTuple_New(*arg2);
    for( i=0; i<*arg2; i++ )
    {
      chaine = PyString_FromStringAndSize((*arg1+i*(*arg3)), *arg3);
      PyTuple_SetItem(liste, i, chaine);
    }
    
    resultobj = SWIG_Python_AppendOutput(resultobj, liste);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_parameters_getSurfaceEnergyStatusId(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  char *arg1 = (char *) 0 ;
  int res1 ;
  char *buf1 = 0 ;
  int alloc1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:parameters_getSurfaceEnergyStatusId",&obj0)) SWIG_fail;
  res1 = SWIG_AsCharPtrAndSize(obj0, &buf1, NULL, &alloc1);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "parameters_getSurfaceEnergyStatusId" "', argument " "1"" of type '" "char *""'");
  }
  arg1 = reinterpret_cast< char * >(buf1);
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      result = (int)parameters_getSurfaceEnergyStatusId(arg1);
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  return resultobj;
fail:
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  return NULL;
}


SWIGINTERN PyObject *_wrap_parameters_getSurfaceEnergyStatusNames(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  char **arg1 = (char **) 0 ;
  int *arg2 = (int *) 0 ;
  int *arg3 = (int *) 0 ;
  char *tmp_vector1 ;
  int tmp_vsize1 ;
  int tmp_csize1 ;
  
  {
    arg1 = &tmp_vector1;
    arg2 = &tmp_vsize1;
    arg3 = &tmp_csize1;
  }
  if (!PyArg_ParseTuple(args,(char *)":parameters_getSurfaceEnergyStatusNames")) SWIG_fail;
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      parameters_getSurfaceEnergyStatusNames(arg1,arg2,arg3);
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_Py_Void();
  {
    int i;
    PyObject *liste, *chaine;
    liste = PyTuple_New(*arg2);
    for( i=0; i<*arg2; i++ )
    {
      chaine = PyString_FromStringAndSize((*arg1+i*(*arg3)), *arg3);
      PyTuple_SetItem(liste, i, chaine);
    }
    
    resultobj = SWIG_Python_AppendOutput(resultobj, liste);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_parameters_getInterLawId(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  char *arg1 = (char *) 0 ;
  int res1 ;
  char *buf1 = 0 ;
  int alloc1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:parameters_getInterLawId",&obj0)) SWIG_fail;
  res1 = SWIG_AsCharPtrAndSize(obj0, &buf1, NULL, &alloc1);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "parameters_getInterLawId" "', argument " "1"" of type '" "char *""'");
  }
  arg1 = reinterpret_cast< char * >(buf1);
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      result = (int)parameters_getInterLawId(arg1);
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  return resultobj;
fail:
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  return NULL;
}


SWIGINTERN PyObject *_wrap_parameters_getInterLawNames(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  char **arg1 = (char **) 0 ;
  int *arg2 = (int *) 0 ;
  int *arg3 = (int *) 0 ;
  char *tmp_vector1 ;
  int tmp_vsize1 ;
  int tmp_csize1 ;
  
  {
    arg1 = &tmp_vector1;
    arg2 = &tmp_vsize1;
    arg3 = &tmp_csize1;
  }
  if (!PyArg_ParseTuple(args,(char *)":parameters_getInterLawNames")) SWIG_fail;
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      parameters_getInterLawNames(arg1,arg2,arg3);
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_Py_Void();
  {
    int i;
    PyObject *liste, *chaine;
    liste = PyTuple_New(*arg2);
    for( i=0; i<*arg2; i++ )
    {
      chaine = PyString_FromStringAndSize((*arg1+i*(*arg3)), *arg3);
      PyTuple_SetItem(liste, i, chaine);
    }
    
    resultobj = SWIG_Python_AppendOutput(resultobj, liste);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_parameters_getIntegratorId(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  char *arg1 = (char *) 0 ;
  int res1 ;
  char *buf1 = 0 ;
  int alloc1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:parameters_getIntegratorId",&obj0)) SWIG_fail;
  res1 = SWIG_AsCharPtrAndSize(obj0, &buf1, NULL, &alloc1);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "parameters_getIntegratorId" "', argument " "1"" of type '" "char *""'");
  }
  arg1 = reinterpret_cast< char * >(buf1);
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      result = (int)parameters_getIntegratorId(arg1);
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  return resultobj;
fail:
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  return NULL;
}


SWIGINTERN PyObject *_wrap_parameters_getIntegratorNames(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  char **arg1 = (char **) 0 ;
  int *arg2 = (int *) 0 ;
  int *arg3 = (int *) 0 ;
  char *tmp_vector1 ;
  int tmp_vsize1 ;
  int tmp_csize1 ;
  
  {
    arg1 = &tmp_vector1;
    arg2 = &tmp_vsize1;
    arg3 = &tmp_csize1;
  }
  if (!PyArg_ParseTuple(args,(char *)":parameters_getIntegratorNames")) SWIG_fail;
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      parameters_getIntegratorNames(arg1,arg2,arg3);
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_Py_Void();
  {
    int i;
    PyObject *liste, *chaine;
    liste = PyTuple_New(*arg2);
    for( i=0; i<*arg2; i++ )
    {
      chaine = PyString_FromStringAndSize((*arg1+i*(*arg3)), *arg3);
      PyTuple_SetItem(liste, i, chaine);
    }
    
    resultobj = SWIG_Python_AppendOutput(resultobj, liste);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_parameters_getNodeId(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  char *arg1 = (char *) 0 ;
  int res1 ;
  char *buf1 = 0 ;
  int alloc1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:parameters_getNodeId",&obj0)) SWIG_fail;
  res1 = SWIG_AsCharPtrAndSize(obj0, &buf1, NULL, &alloc1);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "parameters_getNodeId" "', argument " "1"" of type '" "char *""'");
  }
  arg1 = reinterpret_cast< char * >(buf1);
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      result = (int)parameters_getNodeId(arg1);
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  return resultobj;
fail:
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  return NULL;
}


SWIGINTERN PyObject *_wrap_parameters_getNodeNames(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  char **arg1 = (char **) 0 ;
  int *arg2 = (int *) 0 ;
  int *arg3 = (int *) 0 ;
  char *tmp_vector1 ;
  int tmp_vsize1 ;
  int tmp_csize1 ;
  
  {
    arg1 = &tmp_vector1;
    arg2 = &tmp_vsize1;
    arg3 = &tmp_csize1;
  }
  if (!PyArg_ParseTuple(args,(char *)":parameters_getNodeNames")) SWIG_fail;
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      parameters_getNodeNames(arg1,arg2,arg3);
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_Py_Void();
  {
    int i;
    PyObject *liste, *chaine;
    liste = PyTuple_New(*arg2);
    for( i=0; i<*arg2; i++ )
    {
      chaine = PyString_FromStringAndSize((*arg1+i*(*arg3)), *arg3);
      PyTuple_SetItem(liste, i, chaine);
    }
    
    resultobj = SWIG_Python_AppendOutput(resultobj, liste);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_parameters_getDimeModeId(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  char *arg1 = (char *) 0 ;
  int res1 ;
  char *buf1 = 0 ;
  int alloc1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:parameters_getDimeModeId",&obj0)) SWIG_fail;
  res1 = SWIG_AsCharPtrAndSize(obj0, &buf1, NULL, &alloc1);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "parameters_getDimeModeId" "', argument " "1"" of type '" "char *""'");
  }
  arg1 = reinterpret_cast< char * >(buf1);
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      result = (int)parameters_getDimeModeId(arg1);
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  return resultobj;
fail:
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  return NULL;
}


SWIGINTERN PyObject *_wrap_parameters_getDimeModeNames(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  char **arg1 = (char **) 0 ;
  int *arg2 = (int *) 0 ;
  int *arg3 = (int *) 0 ;
  char *tmp_vector1 ;
  int tmp_vsize1 ;
  int tmp_csize1 ;
  
  {
    arg1 = &tmp_vector1;
    arg2 = &tmp_vsize1;
    arg3 = &tmp_csize1;
  }
  if (!PyArg_ParseTuple(args,(char *)":parameters_getDimeModeNames")) SWIG_fail;
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      parameters_getDimeModeNames(arg1,arg2,arg3);
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_Py_Void();
  {
    int i;
    PyObject *liste, *chaine;
    liste = PyTuple_New(*arg2);
    for( i=0; i<*arg2; i++ )
    {
      chaine = PyString_FromStringAndSize((*arg1+i*(*arg3)), *arg3);
      PyTuple_SetItem(liste, i, chaine);
    }
    
    resultobj = SWIG_Python_AppendOutput(resultobj, liste);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_parameters_getBodyVectorId(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  char *arg1 = (char *) 0 ;
  int res1 ;
  char *buf1 = 0 ;
  int alloc1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:parameters_getBodyVectorId",&obj0)) SWIG_fail;
  res1 = SWIG_AsCharPtrAndSize(obj0, &buf1, NULL, &alloc1);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "parameters_getBodyVectorId" "', argument " "1"" of type '" "char *""'");
  }
  arg1 = reinterpret_cast< char * >(buf1);
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      result = (int)parameters_getBodyVectorId(arg1);
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  return resultobj;
fail:
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  return NULL;
}


SWIGINTERN PyObject *_wrap_parameters_getBodyVectorNames(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  char **arg1 = (char **) 0 ;
  int *arg2 = (int *) 0 ;
  int *arg3 = (int *) 0 ;
  char *tmp_vector1 ;
  int tmp_vsize1 ;
  int tmp_csize1 ;
  
  {
    arg1 = &tmp_vector1;
    arg2 = &tmp_vsize1;
    arg3 = &tmp_csize1;
  }
  if (!PyArg_ParseTuple(args,(char *)":parameters_getBodyVectorNames")) SWIG_fail;
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      parameters_getBodyVectorNames(arg1,arg2,arg3);
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_Py_Void();
  {
    int i;
    PyObject *liste, *chaine;
    liste = PyTuple_New(*arg2);
    for( i=0; i<*arg2; i++ )
    {
      chaine = PyString_FromStringAndSize((*arg1+i*(*arg3)), *arg3);
      PyTuple_SetItem(liste, i, chaine);
    }
    
    resultobj = SWIG_Python_AppendOutput(resultobj, liste);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_parameters_getContactStatusId(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  char *arg1 = (char *) 0 ;
  int res1 ;
  char *buf1 = 0 ;
  int alloc1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:parameters_getContactStatusId",&obj0)) SWIG_fail;
  res1 = SWIG_AsCharPtrAndSize(obj0, &buf1, NULL, &alloc1);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "parameters_getContactStatusId" "', argument " "1"" of type '" "char *""'");
  }
  arg1 = reinterpret_cast< char * >(buf1);
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      result = (int)parameters_getContactStatusId(arg1);
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  return resultobj;
fail:
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  return NULL;
}


SWIGINTERN PyObject *_wrap_parameters_getContactStatusNames(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  char **arg1 = (char **) 0 ;
  int *arg2 = (int *) 0 ;
  int *arg3 = (int *) 0 ;
  char *tmp_vector1 ;
  int tmp_vsize1 ;
  int tmp_csize1 ;
  
  {
    arg1 = &tmp_vector1;
    arg2 = &tmp_vsize1;
    arg3 = &tmp_csize1;
  }
  if (!PyArg_ParseTuple(args,(char *)":parameters_getContactStatusNames")) SWIG_fail;
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      parameters_getContactStatusNames(arg1,arg2,arg3);
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_Py_Void();
  {
    int i;
    PyObject *liste, *chaine;
    liste = PyTuple_New(*arg2);
    for( i=0; i<*arg2; i++ )
    {
      chaine = PyString_FromStringAndSize((*arg1+i*(*arg3)), *arg3);
      PyTuple_SetItem(liste, i, chaine);
    }
    
    resultobj = SWIG_Python_AppendOutput(resultobj, liste);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_parameters_checkAll(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  
  if (!PyArg_ParseTuple(args,(char *)":parameters_checkAll")) SWIG_fail;
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      parameters_checkAll();
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CLALp_SelectProxTactors(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  int arg1 = (int) 0 ;
  int arg2 = (int) 0 ;
  int val1 ;
  int ecode1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"|OO:CLALp_SelectProxTactors",&obj0,&obj1)) SWIG_fail;
  if (obj0) {
    ecode1 = SWIG_AsVal_int(obj0, &val1);
    if (!SWIG_IsOK(ecode1)) {
      SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "CLALp_SelectProxTactors" "', argument " "1"" of type '" "int""'");
    } 
    arg1 = static_cast< int >(val1);
  }
  if (obj1) {
    ecode2 = SWIG_AsVal_int(obj1, &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "CLALp_SelectProxTactors" "', argument " "2"" of type '" "int""'");
    } 
    arg2 = static_cast< int >(val2);
  }
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      CLALp_SelectProxTactors(arg1,arg2);
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CLALp_UpdateWear(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  
  if (!PyArg_ParseTuple(args,(char *)":CLALp_UpdateWear")) SWIG_fail;
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      CLALp_UpdateWear();
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CLALp_WriteLastVlocRloc(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  
  if (!PyArg_ParseTuple(args,(char *)":CLALp_WriteLastVlocRloc")) SWIG_fail;
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      CLALp_WriteLastVlocRloc();
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CLALp_WriteOutVlocRloc(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  
  if (!PyArg_ParseTuple(args,(char *)":CLALp_WriteOutVlocRloc")) SWIG_fail;
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      CLALp_WriteOutVlocRloc();
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CLALp_DisplayOutVlocRloc(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  
  if (!PyArg_ParseTuple(args,(char *)":CLALp_DisplayOutVlocRloc")) SWIG_fail;
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      CLALp_DisplayOutVlocRloc();
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CLALp_DisplayProxTactors(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  
  if (!PyArg_ParseTuple(args,(char *)":CLALp_DisplayProxTactors")) SWIG_fail;
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      CLALp_DisplayProxTactors();
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CLALp_ReadIniVlocRloc(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  int arg1 = (int) 0 ;
  int val1 ;
  int ecode1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"|O:CLALp_ReadIniVlocRloc",&obj0)) SWIG_fail;
  if (obj0) {
    ecode1 = SWIG_AsVal_int(obj0, &val1);
    if (!SWIG_IsOK(ecode1)) {
      SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "CLALp_ReadIniVlocRloc" "', argument " "1"" of type '" "int""'");
    } 
    arg1 = static_cast< int >(val1);
  }
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      CLALp_ReadIniVlocRloc(arg1);
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CLALp_SetNonSymmetricDetection(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  
  if (!PyArg_ParseTuple(args,(char *)":CLALp_SetNonSymmetricDetection")) SWIG_fail;
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      CLALp_SetNonSymmetricDetection();
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CLALp_Trim(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  
  if (!PyArg_ParseTuple(args,(char *)":CLALp_Trim")) SWIG_fail;
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      CLALp_Trim();
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CLALp_CleanMemory(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  
  if (!PyArg_ParseTuple(args,(char *)":CLALp_CleanMemory")) SWIG_fail;
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      CLALp_CleanMemory();
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CLJCx_SelectProxTactors(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  int arg1 = (int) 0 ;
  int val1 ;
  int ecode1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"|O:CLJCx_SelectProxTactors",&obj0)) SWIG_fail;
  if (obj0) {
    ecode1 = SWIG_AsVal_int(obj0, &val1);
    if (!SWIG_IsOK(ecode1)) {
      SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "CLJCx_SelectProxTactors" "', argument " "1"" of type '" "int""'");
    } 
    arg1 = static_cast< int >(val1);
  }
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      CLJCx_SelectProxTactors(arg1);
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CLJCx_WriteLastVlocRloc(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  
  if (!PyArg_ParseTuple(args,(char *)":CLJCx_WriteLastVlocRloc")) SWIG_fail;
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      CLJCx_WriteLastVlocRloc();
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CLJCx_WriteOutVlocRloc(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  
  if (!PyArg_ParseTuple(args,(char *)":CLJCx_WriteOutVlocRloc")) SWIG_fail;
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      CLJCx_WriteOutVlocRloc();
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CLJCx_DisplayOutVlocRloc(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  
  if (!PyArg_ParseTuple(args,(char *)":CLJCx_DisplayOutVlocRloc")) SWIG_fail;
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      CLJCx_DisplayOutVlocRloc();
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CLJCx_DisplayProxTactors(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  
  if (!PyArg_ParseTuple(args,(char *)":CLJCx_DisplayProxTactors")) SWIG_fail;
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      CLJCx_DisplayProxTactors();
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CLJCx_ReadIniVlocRloc(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  int arg1 = (int) 0 ;
  int val1 ;
  int ecode1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"|O:CLJCx_ReadIniVlocRloc",&obj0)) SWIG_fail;
  if (obj0) {
    ecode1 = SWIG_AsVal_int(obj0, &val1);
    if (!SWIG_IsOK(ecode1)) {
      SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "CLJCx_ReadIniVlocRloc" "', argument " "1"" of type '" "int""'");
    } 
    arg1 = static_cast< int >(val1);
  }
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      CLJCx_ReadIniVlocRloc(arg1);
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CLJCx_CleanMemory(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  
  if (!PyArg_ParseTuple(args,(char *)":CLJCx_CleanMemory")) SWIG_fail;
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      CLJCx_CleanMemory();
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DKALp_SelectProxTactors(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  int arg1 = (int) 0 ;
  int val1 ;
  int ecode1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"|O:DKALp_SelectProxTactors",&obj0)) SWIG_fail;
  if (obj0) {
    ecode1 = SWIG_AsVal_int(obj0, &val1);
    if (!SWIG_IsOK(ecode1)) {
      SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "DKALp_SelectProxTactors" "', argument " "1"" of type '" "int""'");
    } 
    arg1 = static_cast< int >(val1);
  }
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      DKALp_SelectProxTactors(arg1);
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DKALp_WriteLastVlocRloc(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  
  if (!PyArg_ParseTuple(args,(char *)":DKALp_WriteLastVlocRloc")) SWIG_fail;
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      DKALp_WriteLastVlocRloc();
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DKALp_WriteOutVlocRloc(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  
  if (!PyArg_ParseTuple(args,(char *)":DKALp_WriteOutVlocRloc")) SWIG_fail;
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      DKALp_WriteOutVlocRloc();
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DKALp_DisplayOutVlocRloc(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  
  if (!PyArg_ParseTuple(args,(char *)":DKALp_DisplayOutVlocRloc")) SWIG_fail;
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      DKALp_DisplayOutVlocRloc();
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DKALp_DisplayProxTactors(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  
  if (!PyArg_ParseTuple(args,(char *)":DKALp_DisplayProxTactors")) SWIG_fail;
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      DKALp_DisplayProxTactors();
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DKALp_ReadIniVlocRloc(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  int arg1 = (int) 0 ;
  int val1 ;
  int ecode1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"|O:DKALp_ReadIniVlocRloc",&obj0)) SWIG_fail;
  if (obj0) {
    ecode1 = SWIG_AsVal_int(obj0, &val1);
    if (!SWIG_IsOK(ecode1)) {
      SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "DKALp_ReadIniVlocRloc" "', argument " "1"" of type '" "int""'");
    } 
    arg1 = static_cast< int >(val1);
  }
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      DKALp_ReadIniVlocRloc(arg1);
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DKALp_CleanMemory(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  
  if (!PyArg_ParseTuple(args,(char *)":DKALp_CleanMemory")) SWIG_fail;
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      DKALp_CleanMemory();
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DKDKL_SelectProxTactors(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  int arg1 = (int) 0 ;
  int val1 ;
  int ecode1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"|O:DKDKL_SelectProxTactors",&obj0)) SWIG_fail;
  if (obj0) {
    ecode1 = SWIG_AsVal_int(obj0, &val1);
    if (!SWIG_IsOK(ecode1)) {
      SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "DKDKL_SelectProxTactors" "', argument " "1"" of type '" "int""'");
    } 
    arg1 = static_cast< int >(val1);
  }
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      DKDKL_SelectProxTactors(arg1);
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DKDKL_SmoothForceComputation(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  
  if (!PyArg_ParseTuple(args,(char *)":DKDKL_SmoothForceComputation")) SWIG_fail;
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      DKDKL_SmoothForceComputation();
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DKDKL_WriteLastVlocRloc(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  
  if (!PyArg_ParseTuple(args,(char *)":DKDKL_WriteLastVlocRloc")) SWIG_fail;
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      DKDKL_WriteLastVlocRloc();
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DKDKL_WriteOutVlocRloc(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  
  if (!PyArg_ParseTuple(args,(char *)":DKDKL_WriteOutVlocRloc")) SWIG_fail;
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      DKDKL_WriteOutVlocRloc();
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DKDKL_DisplayOutVlocRloc(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  
  if (!PyArg_ParseTuple(args,(char *)":DKDKL_DisplayOutVlocRloc")) SWIG_fail;
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      DKDKL_DisplayOutVlocRloc();
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DKDKL_DisplayProxTactors(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  
  if (!PyArg_ParseTuple(args,(char *)":DKDKL_DisplayProxTactors")) SWIG_fail;
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      DKDKL_DisplayProxTactors();
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DKDKL_ReadIniVlocRloc(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  int arg1 = (int) 0 ;
  int val1 ;
  int ecode1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"|O:DKDKL_ReadIniVlocRloc",&obj0)) SWIG_fail;
  if (obj0) {
    ecode1 = SWIG_AsVal_int(obj0, &val1);
    if (!SWIG_IsOK(ecode1)) {
      SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "DKDKL_ReadIniVlocRloc" "', argument " "1"" of type '" "int""'");
    } 
    arg1 = static_cast< int >(val1);
  }
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      DKDKL_ReadIniVlocRloc(arg1);
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DKDKL_SetPeriodicCondition(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  double arg1 ;
  double val1 ;
  int ecode1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:DKDKL_SetPeriodicCondition",&obj0)) SWIG_fail;
  ecode1 = SWIG_AsVal_double(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "DKDKL_SetPeriodicCondition" "', argument " "1"" of type '" "double""'");
  } 
  arg1 = static_cast< double >(val1);
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      DKDKL_SetPeriodicCondition(arg1);
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DKDKL_CleanMemory(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  
  if (!PyArg_ParseTuple(args,(char *)":DKDKL_CleanMemory")) SWIG_fail;
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      DKDKL_CleanMemory();
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DKDKx_SelectProxTactors(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  int arg1 = (int) 0 ;
  int val1 ;
  int ecode1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"|O:DKDKx_SelectProxTactors",&obj0)) SWIG_fail;
  if (obj0) {
    ecode1 = SWIG_AsVal_int(obj0, &val1);
    if (!SWIG_IsOK(ecode1)) {
      SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "DKDKx_SelectProxTactors" "', argument " "1"" of type '" "int""'");
    } 
    arg1 = static_cast< int >(val1);
  }
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      DKDKx_SelectProxTactors(arg1);
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DKDKx_SmoothForceComputation(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  
  if (!PyArg_ParseTuple(args,(char *)":DKDKx_SmoothForceComputation")) SWIG_fail;
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      DKDKx_SmoothForceComputation();
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DKDKx_UseVaVDetection(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  int arg1 ;
  int val1 ;
  int ecode1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:DKDKx_UseVaVDetection",&obj0)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "DKDKx_UseVaVDetection" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = static_cast< int >(val1);
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      DKDKx_UseVaVDetection(arg1);
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DKDKx_WriteLastVlocRloc(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  
  if (!PyArg_ParseTuple(args,(char *)":DKDKx_WriteLastVlocRloc")) SWIG_fail;
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      DKDKx_WriteLastVlocRloc();
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DKDKx_WriteOutVlocRloc(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  
  if (!PyArg_ParseTuple(args,(char *)":DKDKx_WriteOutVlocRloc")) SWIG_fail;
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      DKDKx_WriteOutVlocRloc();
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DKDKx_DisplayOutVlocRloc(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  
  if (!PyArg_ParseTuple(args,(char *)":DKDKx_DisplayOutVlocRloc")) SWIG_fail;
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      DKDKx_DisplayOutVlocRloc();
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DKDKx_DisplayProxTactors(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  
  if (!PyArg_ParseTuple(args,(char *)":DKDKx_DisplayProxTactors")) SWIG_fail;
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      DKDKx_DisplayProxTactors();
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DKDKx_ReadIniVlocRloc(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  int arg1 = (int) 0 ;
  int val1 ;
  int ecode1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"|O:DKDKx_ReadIniVlocRloc",&obj0)) SWIG_fail;
  if (obj0) {
    ecode1 = SWIG_AsVal_int(obj0, &val1);
    if (!SWIG_IsOK(ecode1)) {
      SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "DKDKx_ReadIniVlocRloc" "', argument " "1"" of type '" "int""'");
    } 
    arg1 = static_cast< int >(val1);
  }
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      DKDKx_ReadIniVlocRloc(arg1);
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DKDKx_SetPeriodicCondition(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  double arg1 ;
  double val1 ;
  int ecode1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:DKDKx_SetPeriodicCondition",&obj0)) SWIG_fail;
  ecode1 = SWIG_AsVal_double(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "DKDKx_SetPeriodicCondition" "', argument " "1"" of type '" "double""'");
  } 
  arg1 = static_cast< double >(val1);
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      DKDKx_SetPeriodicCondition(arg1);
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DKDKx_SetFrictionModel(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  char *arg1 = (char *) 0 ;
  int res1 ;
  char *buf1 = 0 ;
  int alloc1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:DKDKx_SetFrictionModel",&obj0)) SWIG_fail;
  res1 = SWIG_AsCharPtrAndSize(obj0, &buf1, NULL, &alloc1);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DKDKx_SetFrictionModel" "', argument " "1"" of type '" "char *""'");
  }
  arg1 = reinterpret_cast< char * >(buf1);
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      DKDKx_SetFrictionModel(arg1);
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_Py_Void();
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  return resultobj;
fail:
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  return NULL;
}


SWIGINTERN PyObject *_wrap_DKDKx_SetSurfaceSectors(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  int arg1 ;
  int val1 ;
  int ecode1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:DKDKx_SetSurfaceSectors",&obj0)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "DKDKx_SetSurfaceSectors" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = static_cast< int >(val1);
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      DKDKx_SetSurfaceSectors(arg1);
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DKDKx_UpdateSurfaceEnergySector(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  
  if (!PyArg_ParseTuple(args,(char *)":DKDKx_UpdateSurfaceEnergySector")) SWIG_fail;
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      DKDKx_UpdateSurfaceEnergySector();
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DKDKx_ComputeStress(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  
  if (!PyArg_ParseTuple(args,(char *)":DKDKx_ComputeStress")) SWIG_fail;
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      DKDKx_ComputeStress();
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DKDKx_ComputeBetai(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  
  if (!PyArg_ParseTuple(args,(char *)":DKDKx_ComputeBetai")) SWIG_fail;
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      DKDKx_ComputeBetai();
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DKDKx_ComputeCZMEnergy(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  
  if (!PyArg_ParseTuple(args,(char *)":DKDKx_ComputeCZMEnergy")) SWIG_fail;
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      DKDKx_ComputeCZMEnergy();
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DKDKx_CleanMemory(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  
  if (!PyArg_ParseTuple(args,(char *)":DKDKx_CleanMemory")) SWIG_fail;
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      DKDKx_CleanMemory();
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DKDKx_GetCZMEnergy(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  int arg1 ;
  double *arg2 = (double *) 0 ;
  int val1 ;
  int ecode1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:DKDKx_GetCZMEnergy",&obj0,&obj1)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "DKDKx_GetCZMEnergy" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = static_cast< int >(val1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_double, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "DKDKx_GetCZMEnergy" "', argument " "2"" of type '" "double *""'"); 
  }
  arg2 = reinterpret_cast< double * >(argp2);
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      DKDKx_GetCZMEnergy(arg1,arg2);
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DKJCx_SelectProxTactors(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  int arg1 = (int) 0 ;
  int val1 ;
  int ecode1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"|O:DKJCx_SelectProxTactors",&obj0)) SWIG_fail;
  if (obj0) {
    ecode1 = SWIG_AsVal_int(obj0, &val1);
    if (!SWIG_IsOK(ecode1)) {
      SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "DKJCx_SelectProxTactors" "', argument " "1"" of type '" "int""'");
    } 
    arg1 = static_cast< int >(val1);
  }
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      DKJCx_SelectProxTactors(arg1);
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DKJCx_SmoothForceComputation(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  
  if (!PyArg_ParseTuple(args,(char *)":DKJCx_SmoothForceComputation")) SWIG_fail;
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      DKJCx_SmoothForceComputation();
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DKJCx_WriteLastVlocRloc(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  
  if (!PyArg_ParseTuple(args,(char *)":DKJCx_WriteLastVlocRloc")) SWIG_fail;
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      DKJCx_WriteLastVlocRloc();
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DKJCx_WriteOutVlocRloc(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  
  if (!PyArg_ParseTuple(args,(char *)":DKJCx_WriteOutVlocRloc")) SWIG_fail;
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      DKJCx_WriteOutVlocRloc();
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DKJCx_DisplayOutVlocRloc(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  
  if (!PyArg_ParseTuple(args,(char *)":DKJCx_DisplayOutVlocRloc")) SWIG_fail;
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      DKJCx_DisplayOutVlocRloc();
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DKJCx_DisplayProxTactors(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  
  if (!PyArg_ParseTuple(args,(char *)":DKJCx_DisplayProxTactors")) SWIG_fail;
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      DKJCx_DisplayProxTactors();
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DKJCx_ReadIniVlocRloc(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  int arg1 = (int) 0 ;
  int val1 ;
  int ecode1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"|O:DKJCx_ReadIniVlocRloc",&obj0)) SWIG_fail;
  if (obj0) {
    ecode1 = SWIG_AsVal_int(obj0, &val1);
    if (!SWIG_IsOK(ecode1)) {
      SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "DKJCx_ReadIniVlocRloc" "', argument " "1"" of type '" "int""'");
    } 
    arg1 = static_cast< int >(val1);
  }
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      DKJCx_ReadIniVlocRloc(arg1);
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DKJCx_SetSurfaceSectors(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  int arg1 ;
  int val1 ;
  int ecode1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:DKJCx_SetSurfaceSectors",&obj0)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "DKJCx_SetSurfaceSectors" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = static_cast< int >(val1);
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      DKJCx_SetSurfaceSectors(arg1);
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DKJCx_ComputeStress(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  
  if (!PyArg_ParseTuple(args,(char *)":DKJCx_ComputeStress")) SWIG_fail;
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      DKJCx_ComputeStress();
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DKJCx_CleanMemory(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  
  if (!PyArg_ParseTuple(args,(char *)":DKJCx_CleanMemory")) SWIG_fail;
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      DKJCx_CleanMemory();
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DKJCx_SetFrictionModel(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  char *arg1 = (char *) 0 ;
  int res1 ;
  char *buf1 = 0 ;
  int alloc1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:DKJCx_SetFrictionModel",&obj0)) SWIG_fail;
  res1 = SWIG_AsCharPtrAndSize(obj0, &buf1, NULL, &alloc1);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DKJCx_SetFrictionModel" "', argument " "1"" of type '" "char *""'");
  }
  arg1 = reinterpret_cast< char * >(buf1);
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      DKJCx_SetFrictionModel(arg1);
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_Py_Void();
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  return resultobj;
fail:
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  return NULL;
}


SWIGINTERN PyObject *_wrap_DKKDx_SelectProxTactors(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  int arg1 = (int) 0 ;
  int val1 ;
  int ecode1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"|O:DKKDx_SelectProxTactors",&obj0)) SWIG_fail;
  if (obj0) {
    ecode1 = SWIG_AsVal_int(obj0, &val1);
    if (!SWIG_IsOK(ecode1)) {
      SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "DKKDx_SelectProxTactors" "', argument " "1"" of type '" "int""'");
    } 
    arg1 = static_cast< int >(val1);
  }
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      DKKDx_SelectProxTactors(arg1);
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DKKDx_SmoothForceComputation(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  
  if (!PyArg_ParseTuple(args,(char *)":DKKDx_SmoothForceComputation")) SWIG_fail;
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      DKKDx_SmoothForceComputation();
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DKKDx_WriteLastVlocRloc(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  
  if (!PyArg_ParseTuple(args,(char *)":DKKDx_WriteLastVlocRloc")) SWIG_fail;
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      DKKDx_WriteLastVlocRloc();
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DKKDx_WriteOutVlocRloc(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  
  if (!PyArg_ParseTuple(args,(char *)":DKKDx_WriteOutVlocRloc")) SWIG_fail;
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      DKKDx_WriteOutVlocRloc();
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DKKDx_DisplayOutVlocRloc(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  
  if (!PyArg_ParseTuple(args,(char *)":DKKDx_DisplayOutVlocRloc")) SWIG_fail;
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      DKKDx_DisplayOutVlocRloc();
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DKKDx_DisplayProxTactors(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  
  if (!PyArg_ParseTuple(args,(char *)":DKKDx_DisplayProxTactors")) SWIG_fail;
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      DKKDx_DisplayProxTactors();
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DKKDx_ReadIniVlocRloc(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  int arg1 = (int) 0 ;
  int val1 ;
  int ecode1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"|O:DKKDx_ReadIniVlocRloc",&obj0)) SWIG_fail;
  if (obj0) {
    ecode1 = SWIG_AsVal_int(obj0, &val1);
    if (!SWIG_IsOK(ecode1)) {
      SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "DKKDx_ReadIniVlocRloc" "', argument " "1"" of type '" "int""'");
    } 
    arg1 = static_cast< int >(val1);
  }
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      DKKDx_ReadIniVlocRloc(arg1);
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DKKDx_SetSurfaceSectors(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  int arg1 ;
  int val1 ;
  int ecode1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:DKKDx_SetSurfaceSectors",&obj0)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "DKKDx_SetSurfaceSectors" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = static_cast< int >(val1);
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      DKKDx_SetSurfaceSectors(arg1);
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DKKDx_CleanMemory(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  
  if (!PyArg_ParseTuple(args,(char *)":DKKDx_CleanMemory")) SWIG_fail;
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      DKKDx_CleanMemory();
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DKPLx_SelectProxTactors(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  int arg1 = (int) 0 ;
  int val1 ;
  int ecode1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"|O:DKPLx_SelectProxTactors",&obj0)) SWIG_fail;
  if (obj0) {
    ecode1 = SWIG_AsVal_int(obj0, &val1);
    if (!SWIG_IsOK(ecode1)) {
      SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "DKPLx_SelectProxTactors" "', argument " "1"" of type '" "int""'");
    } 
    arg1 = static_cast< int >(val1);
  }
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      DKPLx_SelectProxTactors(arg1);
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DKPLx_WriteLastVlocRloc(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  
  if (!PyArg_ParseTuple(args,(char *)":DKPLx_WriteLastVlocRloc")) SWIG_fail;
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      DKPLx_WriteLastVlocRloc();
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DKPLx_WriteOutVlocRloc(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  
  if (!PyArg_ParseTuple(args,(char *)":DKPLx_WriteOutVlocRloc")) SWIG_fail;
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      DKPLx_WriteOutVlocRloc();
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DKPLx_DisplayOutVlocRloc(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  
  if (!PyArg_ParseTuple(args,(char *)":DKPLx_DisplayOutVlocRloc")) SWIG_fail;
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      DKPLx_DisplayOutVlocRloc();
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DKPLx_DisplayProxTactors(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  
  if (!PyArg_ParseTuple(args,(char *)":DKPLx_DisplayProxTactors")) SWIG_fail;
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      DKPLx_DisplayProxTactors();
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DKPLx_ReadIniVlocRloc(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  int arg1 = (int) 0 ;
  int val1 ;
  int ecode1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"|O:DKPLx_ReadIniVlocRloc",&obj0)) SWIG_fail;
  if (obj0) {
    ecode1 = SWIG_AsVal_int(obj0, &val1);
    if (!SWIG_IsOK(ecode1)) {
      SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "DKPLx_ReadIniVlocRloc" "', argument " "1"" of type '" "int""'");
    } 
    arg1 = static_cast< int >(val1);
  }
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      DKPLx_ReadIniVlocRloc(arg1);
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DKPLx_SetPeriodicCondition(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  double arg1 ;
  double val1 ;
  int ecode1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:DKPLx_SetPeriodicCondition",&obj0)) SWIG_fail;
  ecode1 = SWIG_AsVal_double(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "DKPLx_SetPeriodicCondition" "', argument " "1"" of type '" "double""'");
  } 
  arg1 = static_cast< double >(val1);
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      DKPLx_SetPeriodicCondition(arg1);
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DKPLx_CleanMemory(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  
  if (!PyArg_ParseTuple(args,(char *)":DKPLx_CleanMemory")) SWIG_fail;
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      DKPLx_CleanMemory();
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_P2P2L_SelectProxTactors(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  int arg1 = (int) 0 ;
  int val1 ;
  int ecode1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"|O:P2P2L_SelectProxTactors",&obj0)) SWIG_fail;
  if (obj0) {
    ecode1 = SWIG_AsVal_int(obj0, &val1);
    if (!SWIG_IsOK(ecode1)) {
      SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "P2P2L_SelectProxTactors" "', argument " "1"" of type '" "int""'");
    } 
    arg1 = static_cast< int >(val1);
  }
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      P2P2L_SelectProxTactors(arg1);
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_P2P2L_WriteLastVlocRloc(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  
  if (!PyArg_ParseTuple(args,(char *)":P2P2L_WriteLastVlocRloc")) SWIG_fail;
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      P2P2L_WriteLastVlocRloc();
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_P2P2L_WriteOutVlocRloc(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  
  if (!PyArg_ParseTuple(args,(char *)":P2P2L_WriteOutVlocRloc")) SWIG_fail;
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      P2P2L_WriteOutVlocRloc();
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_P2P2L_DisplayOutVlocRloc(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  
  if (!PyArg_ParseTuple(args,(char *)":P2P2L_DisplayOutVlocRloc")) SWIG_fail;
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      P2P2L_DisplayOutVlocRloc();
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_P2P2L_DisplayProxTactors(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  
  if (!PyArg_ParseTuple(args,(char *)":P2P2L_DisplayProxTactors")) SWIG_fail;
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      P2P2L_DisplayProxTactors();
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_P2P2L_ReadIniVlocRloc(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  int arg1 = (int) 0 ;
  int val1 ;
  int ecode1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"|O:P2P2L_ReadIniVlocRloc",&obj0)) SWIG_fail;
  if (obj0) {
    ecode1 = SWIG_AsVal_int(obj0, &val1);
    if (!SWIG_IsOK(ecode1)) {
      SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "P2P2L_ReadIniVlocRloc" "', argument " "1"" of type '" "int""'");
    } 
    arg1 = static_cast< int >(val1);
  }
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      P2P2L_ReadIniVlocRloc(arg1);
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_P2P2L_CleanMemory(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  
  if (!PyArg_ParseTuple(args,(char *)":P2P2L_CleanMemory")) SWIG_fail;
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      P2P2L_CleanMemory();
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PLALp_SelectProxTactors(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  int arg1 = (int) 0 ;
  int val1 ;
  int ecode1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"|O:PLALp_SelectProxTactors",&obj0)) SWIG_fail;
  if (obj0) {
    ecode1 = SWIG_AsVal_int(obj0, &val1);
    if (!SWIG_IsOK(ecode1)) {
      SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "PLALp_SelectProxTactors" "', argument " "1"" of type '" "int""'");
    } 
    arg1 = static_cast< int >(val1);
  }
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      PLALp_SelectProxTactors(arg1);
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PLALp_WriteLastVlocRloc(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  
  if (!PyArg_ParseTuple(args,(char *)":PLALp_WriteLastVlocRloc")) SWIG_fail;
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      PLALp_WriteLastVlocRloc();
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PLALp_WriteOutVlocRloc(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  
  if (!PyArg_ParseTuple(args,(char *)":PLALp_WriteOutVlocRloc")) SWIG_fail;
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      PLALp_WriteOutVlocRloc();
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PLALp_DisplayOutVlocRloc(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  
  if (!PyArg_ParseTuple(args,(char *)":PLALp_DisplayOutVlocRloc")) SWIG_fail;
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      PLALp_DisplayOutVlocRloc();
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PLALp_DisplayProxTactors(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  
  if (!PyArg_ParseTuple(args,(char *)":PLALp_DisplayProxTactors")) SWIG_fail;
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      PLALp_DisplayProxTactors();
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PLALp_ReadIniVlocRloc(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  int arg1 = (int) 0 ;
  int val1 ;
  int ecode1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"|O:PLALp_ReadIniVlocRloc",&obj0)) SWIG_fail;
  if (obj0) {
    ecode1 = SWIG_AsVal_int(obj0, &val1);
    if (!SWIG_IsOK(ecode1)) {
      SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "PLALp_ReadIniVlocRloc" "', argument " "1"" of type '" "int""'");
    } 
    arg1 = static_cast< int >(val1);
  }
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      PLALp_ReadIniVlocRloc(arg1);
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PLALp_CleanMemory(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  
  if (!PyArg_ParseTuple(args,(char *)":PLALp_CleanMemory")) SWIG_fail;
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      PLALp_CleanMemory();
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PLJCx_SelectProxTactors(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  int arg1 = (int) 0 ;
  int val1 ;
  int ecode1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"|O:PLJCx_SelectProxTactors",&obj0)) SWIG_fail;
  if (obj0) {
    ecode1 = SWIG_AsVal_int(obj0, &val1);
    if (!SWIG_IsOK(ecode1)) {
      SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "PLJCx_SelectProxTactors" "', argument " "1"" of type '" "int""'");
    } 
    arg1 = static_cast< int >(val1);
  }
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      PLJCx_SelectProxTactors(arg1);
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PLJCx_WriteLastVlocRloc(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  
  if (!PyArg_ParseTuple(args,(char *)":PLJCx_WriteLastVlocRloc")) SWIG_fail;
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      PLJCx_WriteLastVlocRloc();
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PLJCx_WriteOutVlocRloc(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  
  if (!PyArg_ParseTuple(args,(char *)":PLJCx_WriteOutVlocRloc")) SWIG_fail;
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      PLJCx_WriteOutVlocRloc();
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PLJCx_DisplayOutVlocRloc(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  
  if (!PyArg_ParseTuple(args,(char *)":PLJCx_DisplayOutVlocRloc")) SWIG_fail;
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      PLJCx_DisplayOutVlocRloc();
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PLJCx_DisplayProxTactors(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  
  if (!PyArg_ParseTuple(args,(char *)":PLJCx_DisplayProxTactors")) SWIG_fail;
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      PLJCx_DisplayProxTactors();
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PLJCx_ReadIniVlocRloc(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  int arg1 = (int) 0 ;
  int val1 ;
  int ecode1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"|O:PLJCx_ReadIniVlocRloc",&obj0)) SWIG_fail;
  if (obj0) {
    ecode1 = SWIG_AsVal_int(obj0, &val1);
    if (!SWIG_IsOK(ecode1)) {
      SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "PLJCx_ReadIniVlocRloc" "', argument " "1"" of type '" "int""'");
    } 
    arg1 = static_cast< int >(val1);
  }
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      PLJCx_ReadIniVlocRloc(arg1);
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PLJCx_ComputeStress(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  
  if (!PyArg_ParseTuple(args,(char *)":PLJCx_ComputeStress")) SWIG_fail;
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      PLJCx_ComputeStress();
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PLJCx_CleanMemory(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  
  if (!PyArg_ParseTuple(args,(char *)":PLJCx_CleanMemory")) SWIG_fail;
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      PLJCx_CleanMemory();
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PLJCx_SetFrictionModel(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  char *arg1 = (char *) 0 ;
  int res1 ;
  char *buf1 = 0 ;
  int alloc1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:PLJCx_SetFrictionModel",&obj0)) SWIG_fail;
  res1 = SWIG_AsCharPtrAndSize(obj0, &buf1, NULL, &alloc1);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PLJCx_SetFrictionModel" "', argument " "1"" of type '" "char *""'");
  }
  arg1 = reinterpret_cast< char * >(buf1);
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      PLJCx_SetFrictionModel(arg1);
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_Py_Void();
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  return resultobj;
fail:
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  return NULL;
}


SWIGINTERN PyObject *_wrap_PLPLx_SelectProxTactors(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  int arg1 = (int) 0 ;
  int val1 ;
  int ecode1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"|O:PLPLx_SelectProxTactors",&obj0)) SWIG_fail;
  if (obj0) {
    ecode1 = SWIG_AsVal_int(obj0, &val1);
    if (!SWIG_IsOK(ecode1)) {
      SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "PLPLx_SelectProxTactors" "', argument " "1"" of type '" "int""'");
    } 
    arg1 = static_cast< int >(val1);
  }
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      PLPLx_SelectProxTactors(arg1);
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PLPLx_WriteLastVlocRloc(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  
  if (!PyArg_ParseTuple(args,(char *)":PLPLx_WriteLastVlocRloc")) SWIG_fail;
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      PLPLx_WriteLastVlocRloc();
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PLPLx_WriteOutVlocRloc(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  
  if (!PyArg_ParseTuple(args,(char *)":PLPLx_WriteOutVlocRloc")) SWIG_fail;
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      PLPLx_WriteOutVlocRloc();
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PLPLx_DisplayOutVlocRloc(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  
  if (!PyArg_ParseTuple(args,(char *)":PLPLx_DisplayOutVlocRloc")) SWIG_fail;
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      PLPLx_DisplayOutVlocRloc();
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PLPLx_DisplayProxTactors(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  
  if (!PyArg_ParseTuple(args,(char *)":PLPLx_DisplayProxTactors")) SWIG_fail;
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      PLPLx_DisplayProxTactors();
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PLPLx_ReadIniVlocRloc(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  int arg1 = (int) 0 ;
  int val1 ;
  int ecode1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"|O:PLPLx_ReadIniVlocRloc",&obj0)) SWIG_fail;
  if (obj0) {
    ecode1 = SWIG_AsVal_int(obj0, &val1);
    if (!SWIG_IsOK(ecode1)) {
      SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "PLPLx_ReadIniVlocRloc" "', argument " "1"" of type '" "int""'");
    } 
    arg1 = static_cast< int >(val1);
  }
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      PLPLx_ReadIniVlocRloc(arg1);
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PLPLx_SetPeriodicCondition(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  double arg1 ;
  double val1 ;
  int ecode1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:PLPLx_SetPeriodicCondition",&obj0)) SWIG_fail;
  ecode1 = SWIG_AsVal_double(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "PLPLx_SetPeriodicCondition" "', argument " "1"" of type '" "double""'");
  } 
  arg1 = static_cast< double >(val1);
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      PLPLx_SetPeriodicCondition(arg1);
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PLPLx_SetFrictionModel(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  char *arg1 = (char *) 0 ;
  int res1 ;
  char *buf1 = 0 ;
  int alloc1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:PLPLx_SetFrictionModel",&obj0)) SWIG_fail;
  res1 = SWIG_AsCharPtrAndSize(obj0, &buf1, NULL, &alloc1);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PLPLx_SetFrictionModel" "', argument " "1"" of type '" "char *""'");
  }
  arg1 = reinterpret_cast< char * >(buf1);
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      PLPLx_SetFrictionModel(arg1);
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_Py_Void();
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  return resultobj;
fail:
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  return NULL;
}


SWIGINTERN PyObject *_wrap_PLPLx_SetBigPolygTolerance(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  double arg1 ;
  double val1 ;
  int ecode1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:PLPLx_SetBigPolygTolerance",&obj0)) SWIG_fail;
  ecode1 = SWIG_AsVal_double(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "PLPLx_SetBigPolygTolerance" "', argument " "1"" of type '" "double""'");
  } 
  arg1 = static_cast< double >(val1);
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      PLPLx_SetBigPolygTolerance(arg1);
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PLPLx_ComputeStress(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  
  if (!PyArg_ParseTuple(args,(char *)":PLPLx_ComputeStress")) SWIG_fail;
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      PLPLx_ComputeStress();
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PLPLx_ComputeBetai(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  
  if (!PyArg_ParseTuple(args,(char *)":PLPLx_ComputeBetai")) SWIG_fail;
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      PLPLx_ComputeBetai();
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PLPLx_ComputeCZMEnergy(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  
  if (!PyArg_ParseTuple(args,(char *)":PLPLx_ComputeCZMEnergy")) SWIG_fail;
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      PLPLx_ComputeCZMEnergy();
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PLPLx_CleanMemory(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  
  if (!PyArg_ParseTuple(args,(char *)":PLPLx_CleanMemory")) SWIG_fail;
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      PLPLx_CleanMemory();
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PLPLx_GetCZMEnergy(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  int arg1 ;
  double *arg2 = (double *) 0 ;
  int val1 ;
  int ecode1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:PLPLx_GetCZMEnergy",&obj0,&obj1)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "PLPLx_GetCZMEnergy" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = static_cast< int >(val1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_double, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "PLPLx_GetCZMEnergy" "', argument " "2"" of type '" "double *""'"); 
  }
  arg2 = reinterpret_cast< double * >(argp2);
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      PLPLx_GetCZMEnergy(arg1,arg2);
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PLPLx_UseNcDetection(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  
  if (!PyArg_ParseTuple(args,(char *)":PLPLx_UseNcDetection")) SWIG_fail;
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      PLPLx_UseNcDetection();
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PLPLx_ShrinkPolygFaces(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  double arg1 ;
  double val1 ;
  int ecode1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:PLPLx_ShrinkPolygFaces",&obj0)) SWIG_fail;
  ecode1 = SWIG_AsVal_double(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "PLPLx_ShrinkPolygFaces" "', argument " "1"" of type '" "double""'");
  } 
  arg1 = static_cast< double >(val1);
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      PLPLx_ShrinkPolygFaces(arg1);
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PTPT2_SelectProxTactors(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  int arg1 = (int) 0 ;
  int val1 ;
  int ecode1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"|O:PTPT2_SelectProxTactors",&obj0)) SWIG_fail;
  if (obj0) {
    ecode1 = SWIG_AsVal_int(obj0, &val1);
    if (!SWIG_IsOK(ecode1)) {
      SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "PTPT2_SelectProxTactors" "', argument " "1"" of type '" "int""'");
    } 
    arg1 = static_cast< int >(val1);
  }
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      PTPT2_SelectProxTactors(arg1);
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PTPT2_WriteLastVlocRloc(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  
  if (!PyArg_ParseTuple(args,(char *)":PTPT2_WriteLastVlocRloc")) SWIG_fail;
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      PTPT2_WriteLastVlocRloc();
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PTPT2_WriteOutVlocRloc(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  
  if (!PyArg_ParseTuple(args,(char *)":PTPT2_WriteOutVlocRloc")) SWIG_fail;
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      PTPT2_WriteOutVlocRloc();
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PTPT2_DisplayOutVlocRloc(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  
  if (!PyArg_ParseTuple(args,(char *)":PTPT2_DisplayOutVlocRloc")) SWIG_fail;
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      PTPT2_DisplayOutVlocRloc();
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PTPT2_DisplayProxTactors(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  
  if (!PyArg_ParseTuple(args,(char *)":PTPT2_DisplayProxTactors")) SWIG_fail;
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      PTPT2_DisplayProxTactors();
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PTPT2_ReadIniVlocRloc(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  int arg1 = (int) 0 ;
  int val1 ;
  int ecode1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"|O:PTPT2_ReadIniVlocRloc",&obj0)) SWIG_fail;
  if (obj0) {
    ecode1 = SWIG_AsVal_int(obj0, &val1);
    if (!SWIG_IsOK(ecode1)) {
      SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "PTPT2_ReadIniVlocRloc" "', argument " "1"" of type '" "int""'");
    } 
    arg1 = static_cast< int >(val1);
  }
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      PTPT2_ReadIniVlocRloc(arg1);
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PTPT2_LoadNetwork(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  
  if (!PyArg_ParseTuple(args,(char *)":PTPT2_LoadNetwork")) SWIG_fail;
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      PTPT2_LoadNetwork();
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PTPT2_SetTolerance(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  double arg1 ;
  double val1 ;
  int ecode1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:PTPT2_SetTolerance",&obj0)) SWIG_fail;
  ecode1 = SWIG_AsVal_double(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "PTPT2_SetTolerance" "', argument " "1"" of type '" "double""'");
  } 
  arg1 = static_cast< double >(val1);
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      PTPT2_SetTolerance(arg1);
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PTPT2_SetExplicitLocalFrame(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  
  if (!PyArg_ParseTuple(args,(char *)":PTPT2_SetExplicitLocalFrame")) SWIG_fail;
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      PTPT2_SetExplicitLocalFrame();
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PTPT2_LoadParams(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  
  if (!PyArg_ParseTuple(args,(char *)":PTPT2_LoadParams")) SWIG_fail;
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      PTPT2_LoadParams();
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PTPT2_UseCurrentNonuc0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  int arg1 ;
  int val1 ;
  int ecode1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:PTPT2_UseCurrentNonuc0",&obj0)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "PTPT2_UseCurrentNonuc0" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = static_cast< int >(val1);
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      PTPT2_UseCurrentNonuc0(arg1);
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PTPT2_CleanMemory(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  
  if (!PyArg_ParseTuple(args,(char *)":PTPT2_CleanMemory")) SWIG_fail;
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      PTPT2_CleanMemory();
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_inter_handler_2D_tgetNb(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  int arg1 ;
  int val1 ;
  int ecode1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:inter_handler_2D_tgetNb",&obj0)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "inter_handler_2D_tgetNb" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = static_cast< int >(val1);
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      result = (int)inter_handler_2D_tgetNb(arg1);
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_inter_handler_2D_tgetTactLawNb(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  int arg1 ;
  int arg2 ;
  int val1 ;
  int ecode1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:inter_handler_2D_tgetTactLawNb",&obj0,&obj1)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "inter_handler_2D_tgetTactLawNb" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = static_cast< int >(val1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "inter_handler_2D_tgetTactLawNb" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      result = (int)inter_handler_2D_tgetTactLawNb(arg1,arg2);
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_inter_handler_2D_tgetIdBodies(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  int arg1 ;
  int arg2 ;
  int **arg3 = (int **) 0 ;
  int *arg4 = (int *) 0 ;
  int val1 ;
  int ecode1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int *data_temp3 ;
  int dim_temp3 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  {
    arg3 = &data_temp3;
    arg4 = &dim_temp3;
  }
  if (!PyArg_ParseTuple(args,(char *)"OO:inter_handler_2D_tgetIdBodies",&obj0,&obj1)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "inter_handler_2D_tgetIdBodies" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = static_cast< int >(val1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "inter_handler_2D_tgetIdBodies" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      inter_handler_2D_tgetIdBodies(arg1,arg2,arg3,arg4);
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_Py_Void();
  {
    npy_intp dims[1] = {
      *arg4 
    };
    PyObject * obj = PyArray_SimpleNewFromData(1, dims, NPY_INT, (void*)(*arg3));
    if (!obj) SWIG_fail;
    PyArrayObject * array = (PyArrayObject*) obj;
    attach_fortran_memory_to_numpy_array(array, (void*)(*arg3), NPY_INT, dims[0], 0);
    PyArray_ENABLEFLAGS(array,NPY_ARRAY_WRITEABLE);
    
    resultobj = SWIG_Python_AppendOutput(resultobj, obj);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_inter_handler_2D_tgetIData(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  int arg1 ;
  int arg2 ;
  int **arg3 = (int **) 0 ;
  int *arg4 = (int *) 0 ;
  int val1 ;
  int ecode1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int *data_temp3 ;
  int dim_temp3 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  {
    arg3 = &data_temp3;
    arg4 = &dim_temp3;
  }
  if (!PyArg_ParseTuple(args,(char *)"OO:inter_handler_2D_tgetIData",&obj0,&obj1)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "inter_handler_2D_tgetIData" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = static_cast< int >(val1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "inter_handler_2D_tgetIData" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      inter_handler_2D_tgetIData(arg1,arg2,arg3,arg4);
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_Py_Void();
  {
    npy_intp dims[1] = {
      *arg4 
    };
    PyObject * obj = PyArray_SimpleNewFromData(1, dims, NPY_INT, (void*)(*arg3));
    if (!obj) SWIG_fail;
    PyArrayObject * array = (PyArrayObject*) obj;
    attach_fortran_memory_to_numpy_array(array, (void*)(*arg3), NPY_INT, dims[0], 0);
    PyArray_ENABLEFLAGS(array,NPY_ARRAY_WRITEABLE);
    
    resultobj = SWIG_Python_AppendOutput(resultobj, obj);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_inter_handler_2D_tgetRData(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  int arg1 ;
  int arg2 ;
  double **arg3 = (double **) 0 ;
  int *arg4 = (int *) 0 ;
  int val1 ;
  int ecode1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  double *data_temp3 ;
  int dim_temp3 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  {
    arg3 = &data_temp3;
    arg4 = &dim_temp3;
  }
  if (!PyArg_ParseTuple(args,(char *)"OO:inter_handler_2D_tgetRData",&obj0,&obj1)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "inter_handler_2D_tgetRData" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = static_cast< int >(val1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "inter_handler_2D_tgetRData" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      inter_handler_2D_tgetRData(arg1,arg2,arg3,arg4);
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_Py_Void();
  {
    npy_intp dims[1] = {
      *arg4 
    };
    PyObject * obj = PyArray_SimpleNewFromData(1, dims, NPY_DOUBLE, (void*)(*arg3));
    if (!obj) SWIG_fail;
    PyArrayObject * array = (PyArrayObject*) obj;
    attach_fortran_memory_to_numpy_array(array, (void*)(*arg3), NPY_DOUBLE, dims[0], 0);
    PyArray_ENABLEFLAGS(array,NPY_ARRAY_WRITEABLE);
    
    resultobj = SWIG_Python_AppendOutput(resultobj, obj);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_inter_handler_2D_tsetInternal__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  int arg1 ;
  int arg2 ;
  double *arg3 = (double *) NULL ;
  int arg4 = (int) 0 ;
  int arg5 = (int) 0 ;
  double arg6 = (double) 0. ;
  int val1 ;
  int ecode1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyArrayObject *array3 = NULL ;
  int is_new_object3 = 0 ;
  int val5 ;
  int ecode5 = 0 ;
  double val6 ;
  int ecode6 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO|OOO:inter_handler_2D_tsetInternal",&obj0,&obj1,&obj2,&obj3,&obj4)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "inter_handler_2D_tsetInternal" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = static_cast< int >(val1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "inter_handler_2D_tsetInternal" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  if (obj2) {
    {
      npy_intp size[1] = {
        -1 
      };
      array3 = obj_to_array_contiguous_allow_conversion(obj2,
        NPY_DOUBLE,
        &is_new_object3);
      if (!array3 || !require_dimensions(array3, 1) ||
        !require_size(array3, size, 1)) SWIG_fail;
      arg3 = (double*) array_data(array3);
      arg4 = (int) array_size(array3,0);
    }
  }
  if (obj3) {
    ecode5 = SWIG_AsVal_int(obj3, &val5);
    if (!SWIG_IsOK(ecode5)) {
      SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "inter_handler_2D_tsetInternal" "', argument " "5"" of type '" "int""'");
    } 
    arg5 = static_cast< int >(val5);
  }
  if (obj4) {
    ecode6 = SWIG_AsVal_double(obj4, &val6);
    if (!SWIG_IsOK(ecode6)) {
      SWIG_exception_fail(SWIG_ArgError(ecode6), "in method '" "inter_handler_2D_tsetInternal" "', argument " "6"" of type '" "double""'");
    } 
    arg6 = static_cast< double >(val6);
  }
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      inter_handler_2D_tsetInternal(arg1,arg2,arg3,arg4,arg5,arg6);
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_Py_Void();
  {
    if (is_new_object3 && array3)
    {
      Py_DECREF(array3); 
    }
  }
  return resultobj;
fail:
  {
    if (is_new_object3 && array3)
    {
      Py_DECREF(array3); 
    }
  }
  return NULL;
}


SWIGINTERN PyObject *_wrap_inter_handler_2D_tsetInternal(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[6] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 5) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if ((argc >= 2) && (argc <= 5)) {
    int _v;
    {
      int res = SWIG_AsVal_int(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        if (argc <= 2) {
          return _wrap_inter_handler_2D_tsetInternal__SWIG_1(self, args);
        }
        {
          _v = is_array(argv[2]) || PySequence_Check(argv[2]);
        }
        if (_v) {
          if (argc <= 3) {
            return _wrap_inter_handler_2D_tsetInternal__SWIG_1(self, args);
          }
          {
            int res = SWIG_AsVal_int(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            if (argc <= 4) {
              return _wrap_inter_handler_2D_tsetInternal__SWIG_1(self, args);
            }
            {
              int res = SWIG_AsVal_double(argv[4], NULL);
              _v = SWIG_CheckState(res);
            }
            if (_v) {
              return _wrap_inter_handler_2D_tsetInternal__SWIG_1(self, args);
            }
          }
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    {
      int res = SWIG_AsVal_int(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_double(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            return _wrap_inter_handler_2D_tsetInternal__SWIG_0(self, args);
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'inter_handler_2D_tsetInternal'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    wrap_tsetInternal_2D(int,int,int,double)\n"
    "    inter_handler_2D_tsetInternal(int,int,double *,int,int,double)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_inter_handler_2D_tgetInternal(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  int arg1 ;
  int arg2 ;
  double **arg3 = (double **) 0 ;
  int *arg4 = (int *) 0 ;
  int val1 ;
  int ecode1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  double *data_temp3 ;
  int dim_temp3 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  {
    arg3 = &data_temp3;
    arg4 = &dim_temp3;
  }
  if (!PyArg_ParseTuple(args,(char *)"OO:inter_handler_2D_tgetInternal",&obj0,&obj1)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "inter_handler_2D_tgetInternal" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = static_cast< int >(val1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "inter_handler_2D_tgetInternal" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      inter_handler_2D_tgetInternal(arg1,arg2,arg3,arg4);
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_Py_Void();
  {
    npy_intp dims[1] = {
      *arg4 
    };
    PyObject * obj = PyArray_SimpleNewFromData(1, dims, NPY_DOUBLE, (void*)(*arg3));
    if (!obj) SWIG_fail;
    PyArrayObject * array = (PyArrayObject*) obj;
    attach_fortran_memory_to_numpy_array(array, (void*)(*arg3), NPY_DOUBLE, dims[0], 0);
    PyArray_ENABLEFLAGS(array,NPY_ARRAY_WRITEABLE);
    
    resultobj = SWIG_Python_AppendOutput(resultobj, obj);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_inter_handler_2D_getNbRecup(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  int arg1 ;
  int val1 ;
  int ecode1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:inter_handler_2D_getNbRecup",&obj0)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "inter_handler_2D_getNbRecup" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = static_cast< int >(val1);
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      result = (int)inter_handler_2D_getNbRecup(arg1);
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_inter_handler_2D_getNb(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  int arg1 ;
  int val1 ;
  int ecode1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:inter_handler_2D_getNb",&obj0)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "inter_handler_2D_getNb" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = static_cast< int >(val1);
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      result = (int)inter_handler_2D_getNb(arg1);
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_inter_handler_2D_getAllTactLawNb(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  int arg1 ;
  int **arg2 = (int **) 0 ;
  int *arg3 = (int *) 0 ;
  int val1 ;
  int ecode1 = 0 ;
  int *data_temp2 ;
  int dim_temp2 ;
  PyObject * obj0 = 0 ;
  
  {
    arg2 = &data_temp2;
    arg3 = &dim_temp2;
  }
  if (!PyArg_ParseTuple(args,(char *)"O:inter_handler_2D_getAllTactLawNb",&obj0)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "inter_handler_2D_getAllTactLawNb" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = static_cast< int >(val1);
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      inter_handler_2D_getAllTactLawNb(arg1,arg2,arg3);
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_Py_Void();
  {
    npy_intp dims[1] = {
      *arg3 
    };
    PyObject * obj = PyArray_SimpleNewFromData(1, dims, NPY_INT, (void*)(*arg2));
    if (!obj) SWIG_fail;
    PyArrayObject * array = (PyArrayObject*) obj;
    attach_fortran_memory_to_numpy_array(array, (void*)(*arg2), NPY_INT, dims[0], 0);
    PyArray_ENABLEFLAGS(array,NPY_ARRAY_WRITEABLE);
    
    resultobj = SWIG_Python_AppendOutput(resultobj, obj);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_inter_handler_2D_getAll(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  int arg1 ;
  double **arg2 = (double **) 0 ;
  int *arg3 = (int *) 0 ;
  int *arg4 = (int *) 0 ;
  int val1 ;
  int ecode1 = 0 ;
  double *data_temp2 ;
  int dim1_temp2 ;
  int dim2_temp2 ;
  PyObject * obj0 = 0 ;
  
  {
    arg2 = &data_temp2;
    arg3 = &dim1_temp2;
    arg4 = &dim2_temp2;
  }
  if (!PyArg_ParseTuple(args,(char *)"O:inter_handler_2D_getAll",&obj0)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "inter_handler_2D_getAll" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = static_cast< int >(val1);
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      inter_handler_2D_getAll(arg1,arg2,arg3,arg4);
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_Py_Void();
  {
    npy_intp dims[2] = {
      *arg4, *arg3 
    };
    PyObject * obj = PyArray_SimpleNewFromData(2, dims, NPY_DOUBLE, (void*)(*arg2));
    if (!obj) SWIG_fail;
    PyArrayObject * array = (PyArrayObject*) obj;
    attach_fortran_memory_to_numpy_array(array, (void*)(*arg2), NPY_DOUBLE, dims[1], dims[0]);
    PyArray_ENABLEFLAGS(array,NPY_ARRAY_WRITEABLE);
    resultobj = SWIG_Python_AppendOutput(resultobj, obj);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_inter_handler_2D_getAllInternal(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  int arg1 ;
  double **arg2 = (double **) 0 ;
  int *arg3 = (int *) 0 ;
  int *arg4 = (int *) 0 ;
  int val1 ;
  int ecode1 = 0 ;
  double *data_temp2 ;
  int dim1_temp2 ;
  int dim2_temp2 ;
  PyObject * obj0 = 0 ;
  
  {
    arg2 = &data_temp2;
    arg3 = &dim1_temp2;
    arg4 = &dim2_temp2;
  }
  if (!PyArg_ParseTuple(args,(char *)"O:inter_handler_2D_getAllInternal",&obj0)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "inter_handler_2D_getAllInternal" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = static_cast< int >(val1);
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      inter_handler_2D_getAllInternal(arg1,arg2,arg3,arg4);
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_Py_Void();
  {
    npy_intp dims[2] = {
      *arg4, *arg3 
    };
    PyObject * obj = PyArray_SimpleNewFromData(2, dims, NPY_DOUBLE, (void*)(*arg2));
    if (!obj) SWIG_fail;
    PyArrayObject * array = (PyArrayObject*) obj;
    attach_fortran_memory_to_numpy_array(array, (void*)(*arg2), NPY_DOUBLE, dims[1], dims[0]);
    PyArray_ENABLEFLAGS(array,NPY_ARRAY_WRITEABLE);
    resultobj = SWIG_Python_AppendOutput(resultobj, obj);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_inter_handler_2D_getAllIdata(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  int arg1 ;
  int **arg2 = (int **) 0 ;
  int *arg3 = (int *) 0 ;
  int *arg4 = (int *) 0 ;
  int val1 ;
  int ecode1 = 0 ;
  int *data_temp2 ;
  int dim1_temp2 ;
  int dim2_temp2 ;
  PyObject * obj0 = 0 ;
  
  {
    arg2 = &data_temp2;
    arg3 = &dim1_temp2;
    arg4 = &dim2_temp2;
  }
  if (!PyArg_ParseTuple(args,(char *)"O:inter_handler_2D_getAllIdata",&obj0)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "inter_handler_2D_getAllIdata" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = static_cast< int >(val1);
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      inter_handler_2D_getAllIdata(arg1,arg2,arg3,arg4);
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_Py_Void();
  {
    npy_intp dims[2] = {
      *arg4, *arg3 
    };
    PyObject * obj = PyArray_SimpleNewFromData(2, dims, NPY_INT, (void*)(*arg2));
    if (!obj) SWIG_fail;
    PyArrayObject * array = (PyArrayObject*) obj;
    attach_fortran_memory_to_numpy_array(array, (void*)(*arg2), NPY_INT, dims[1], dims[0]);
    PyArray_ENABLEFLAGS(array,NPY_ARRAY_WRITEABLE);
    resultobj = SWIG_Python_AppendOutput(resultobj, obj);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_inter_handler_2D_getVerletAdjsz(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  int arg1 ;
  int arg2 ;
  int val1 ;
  int ecode1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:inter_handler_2D_getVerletAdjsz",&obj0,&obj1)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "inter_handler_2D_getVerletAdjsz" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = static_cast< int >(val1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "inter_handler_2D_getVerletAdjsz" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      result = (int)inter_handler_2D_getVerletAdjsz(arg1,arg2);
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_inter_handler_2D_getVerletIantac(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  int arg1 ;
  int arg2 ;
  int arg3 ;
  int val1 ;
  int ecode1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:inter_handler_2D_getVerletIantac",&obj0,&obj1,&obj2)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "inter_handler_2D_getVerletIantac" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = static_cast< int >(val1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "inter_handler_2D_getVerletIantac" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "inter_handler_2D_getVerletIantac" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      result = (int)inter_handler_2D_getVerletIantac(arg1,arg2,arg3);
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_inter_handler_2D_computeRnod(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  
  if (!PyArg_ParseTuple(args,(char *)":inter_handler_2D_computeRnod")) SWIG_fail;
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      inter_handler_2D_computeRnod();
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_inter_handler_2D_stockRloc(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  int arg1 ;
  int val1 ;
  int ecode1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:inter_handler_2D_stockRloc",&obj0)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "inter_handler_2D_stockRloc" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = static_cast< int >(val1);
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      inter_handler_2D_stockRloc(arg1);
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_inter_handler_2D_recupRloc(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  int arg1 ;
  int val1 ;
  int ecode1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:inter_handler_2D_recupRloc",&obj0)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "inter_handler_2D_recupRloc" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = static_cast< int >(val1);
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      inter_handler_2D_recupRloc(arg1);
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_inter_handler_2D_recupRlocByPos(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  int arg1 ;
  double arg2 ;
  int val1 ;
  int ecode1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:inter_handler_2D_recupRlocByPos",&obj0,&obj1)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "inter_handler_2D_recupRlocByPos" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = static_cast< int >(val1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "inter_handler_2D_recupRlocByPos" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      inter_handler_2D_recupRlocByPos(arg1,arg2);
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CDCDx_SelectProxTactors(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  int arg1 = (int) 0 ;
  int val1 ;
  int ecode1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"|O:CDCDx_SelectProxTactors",&obj0)) SWIG_fail;
  if (obj0) {
    ecode1 = SWIG_AsVal_int(obj0, &val1);
    if (!SWIG_IsOK(ecode1)) {
      SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "CDCDx_SelectProxTactors" "', argument " "1"" of type '" "int""'");
    } 
    arg1 = static_cast< int >(val1);
  }
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      CDCDx_SelectProxTactors(arg1);
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CDCDx_SmoothForceComputation(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  
  if (!PyArg_ParseTuple(args,(char *)":CDCDx_SmoothForceComputation")) SWIG_fail;
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      CDCDx_SmoothForceComputation();
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CDCDx_WriteLastVlocRloc(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  
  if (!PyArg_ParseTuple(args,(char *)":CDCDx_WriteLastVlocRloc")) SWIG_fail;
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      CDCDx_WriteLastVlocRloc();
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CDCDx_WriteOutVlocRloc(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  
  if (!PyArg_ParseTuple(args,(char *)":CDCDx_WriteOutVlocRloc")) SWIG_fail;
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      CDCDx_WriteOutVlocRloc();
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CDCDx_DisplayOutVlocRloc(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  
  if (!PyArg_ParseTuple(args,(char *)":CDCDx_DisplayOutVlocRloc")) SWIG_fail;
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      CDCDx_DisplayOutVlocRloc();
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CDCDx_DisplayProxTactors(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  
  if (!PyArg_ParseTuple(args,(char *)":CDCDx_DisplayProxTactors")) SWIG_fail;
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      CDCDx_DisplayProxTactors();
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CDCDx_ReadIniVlocRloc(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  int arg1 = (int) 0 ;
  int val1 ;
  int ecode1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"|O:CDCDx_ReadIniVlocRloc",&obj0)) SWIG_fail;
  if (obj0) {
    ecode1 = SWIG_AsVal_int(obj0, &val1);
    if (!SWIG_IsOK(ecode1)) {
      SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "CDCDx_ReadIniVlocRloc" "', argument " "1"" of type '" "int""'");
    } 
    arg1 = static_cast< int >(val1);
  }
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      CDCDx_ReadIniVlocRloc(arg1);
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CDCDx_SetXPeriodicCondition(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  double arg1 ;
  double val1 ;
  int ecode1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:CDCDx_SetXPeriodicCondition",&obj0)) SWIG_fail;
  ecode1 = SWIG_AsVal_double(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "CDCDx_SetXPeriodicCondition" "', argument " "1"" of type '" "double""'");
  } 
  arg1 = static_cast< double >(val1);
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      CDCDx_SetXPeriodicCondition(arg1);
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CDCDx_SetYPeriodicCondition(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  double arg1 ;
  double val1 ;
  int ecode1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:CDCDx_SetYPeriodicCondition",&obj0)) SWIG_fail;
  ecode1 = SWIG_AsVal_double(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "CDCDx_SetYPeriodicCondition" "', argument " "1"" of type '" "double""'");
  } 
  arg1 = static_cast< double >(val1);
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      CDCDx_SetYPeriodicCondition(arg1);
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CDCDx_SetNumberInterByContact(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  int arg1 ;
  int val1 ;
  int ecode1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:CDCDx_SetNumberInterByContact",&obj0)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "CDCDx_SetNumberInterByContact" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = static_cast< int >(val1);
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      CDCDx_SetNumberInterByContact(arg1);
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CDCDx_SetContactRadius(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  double arg1 ;
  double val1 ;
  int ecode1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:CDCDx_SetContactRadius",&obj0)) SWIG_fail;
  ecode1 = SWIG_AsVal_double(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "CDCDx_SetContactRadius" "', argument " "1"" of type '" "double""'");
  } 
  arg1 = static_cast< double >(val1);
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      CDCDx_SetContactRadius(arg1);
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CDCDx_CleanMemory(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  
  if (!PyArg_ParseTuple(args,(char *)":CDCDx_CleanMemory")) SWIG_fail;
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      CDCDx_CleanMemory();
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CDPLx_SelectProxTactors(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  int arg1 = (int) 0 ;
  int val1 ;
  int ecode1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"|O:CDPLx_SelectProxTactors",&obj0)) SWIG_fail;
  if (obj0) {
    ecode1 = SWIG_AsVal_int(obj0, &val1);
    if (!SWIG_IsOK(ecode1)) {
      SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "CDPLx_SelectProxTactors" "', argument " "1"" of type '" "int""'");
    } 
    arg1 = static_cast< int >(val1);
  }
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      CDPLx_SelectProxTactors(arg1);
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CDPLx_SmoothForceComputation(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  
  if (!PyArg_ParseTuple(args,(char *)":CDPLx_SmoothForceComputation")) SWIG_fail;
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      CDPLx_SmoothForceComputation();
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CDPLx_WriteLastVlocRloc(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  
  if (!PyArg_ParseTuple(args,(char *)":CDPLx_WriteLastVlocRloc")) SWIG_fail;
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      CDPLx_WriteLastVlocRloc();
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CDPLx_WriteOutVlocRloc(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  
  if (!PyArg_ParseTuple(args,(char *)":CDPLx_WriteOutVlocRloc")) SWIG_fail;
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      CDPLx_WriteOutVlocRloc();
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CDPLx_DisplayOutVlocRloc(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  
  if (!PyArg_ParseTuple(args,(char *)":CDPLx_DisplayOutVlocRloc")) SWIG_fail;
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      CDPLx_DisplayOutVlocRloc();
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CDPLx_DisplayProxTactors(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  
  if (!PyArg_ParseTuple(args,(char *)":CDPLx_DisplayProxTactors")) SWIG_fail;
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      CDPLx_DisplayProxTactors();
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CDPLx_ReadIniVlocRloc(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  int arg1 = (int) 0 ;
  int val1 ;
  int ecode1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"|O:CDPLx_ReadIniVlocRloc",&obj0)) SWIG_fail;
  if (obj0) {
    ecode1 = SWIG_AsVal_int(obj0, &val1);
    if (!SWIG_IsOK(ecode1)) {
      SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "CDPLx_ReadIniVlocRloc" "', argument " "1"" of type '" "int""'");
    } 
    arg1 = static_cast< int >(val1);
  }
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      CDPLx_ReadIniVlocRloc(arg1);
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CDPLx_CleanMemory(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  
  if (!PyArg_ParseTuple(args,(char *)":CDPLx_CleanMemory")) SWIG_fail;
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      CDPLx_CleanMemory();
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CSASp_SelectProxTactors(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  int arg1 = (int) 0 ;
  int arg2 = (int) 0 ;
  int val1 ;
  int ecode1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"|OO:CSASp_SelectProxTactors",&obj0,&obj1)) SWIG_fail;
  if (obj0) {
    ecode1 = SWIG_AsVal_int(obj0, &val1);
    if (!SWIG_IsOK(ecode1)) {
      SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "CSASp_SelectProxTactors" "', argument " "1"" of type '" "int""'");
    } 
    arg1 = static_cast< int >(val1);
  }
  if (obj1) {
    ecode2 = SWIG_AsVal_int(obj1, &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "CSASp_SelectProxTactors" "', argument " "2"" of type '" "int""'");
    } 
    arg2 = static_cast< int >(val2);
  }
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      CSASp_SelectProxTactors(arg1,arg2);
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CSASp_WriteLastVlocRloc(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  
  if (!PyArg_ParseTuple(args,(char *)":CSASp_WriteLastVlocRloc")) SWIG_fail;
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      CSASp_WriteLastVlocRloc();
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CSASp_WriteOutVlocRloc(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  
  if (!PyArg_ParseTuple(args,(char *)":CSASp_WriteOutVlocRloc")) SWIG_fail;
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      CSASp_WriteOutVlocRloc();
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CSASp_DisplayOutVlocRloc(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  
  if (!PyArg_ParseTuple(args,(char *)":CSASp_DisplayOutVlocRloc")) SWIG_fail;
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      CSASp_DisplayOutVlocRloc();
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CSASp_DisplayProxTactors(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  
  if (!PyArg_ParseTuple(args,(char *)":CSASp_DisplayProxTactors")) SWIG_fail;
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      CSASp_DisplayProxTactors();
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CSASp_ReadIniVlocRloc(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  int arg1 = (int) 0 ;
  int val1 ;
  int ecode1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"|O:CSASp_ReadIniVlocRloc",&obj0)) SWIG_fail;
  if (obj0) {
    ecode1 = SWIG_AsVal_int(obj0, &val1);
    if (!SWIG_IsOK(ecode1)) {
      SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "CSASp_ReadIniVlocRloc" "', argument " "1"" of type '" "int""'");
    } 
    arg1 = static_cast< int >(val1);
  }
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      CSASp_ReadIniVlocRloc(arg1);
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CSASp_SkipAutoContact(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  
  if (!PyArg_ParseTuple(args,(char *)":CSASp_SkipAutoContact")) SWIG_fail;
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      CSASp_SkipAutoContact();
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CSASp_SetNonSymmetricDetection(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  
  if (!PyArg_ParseTuple(args,(char *)":CSASp_SetNonSymmetricDetection")) SWIG_fail;
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      CSASp_SetNonSymmetricDetection();
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CSASp_Trim(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  
  if (!PyArg_ParseTuple(args,(char *)":CSASp_Trim")) SWIG_fail;
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      CSASp_Trim();
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CSASp_SetTrimAngle(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  double arg1 ;
  double val1 ;
  int ecode1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:CSASp_SetTrimAngle",&obj0)) SWIG_fail;
  ecode1 = SWIG_AsVal_double(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "CSASp_SetTrimAngle" "', argument " "1"" of type '" "double""'");
  } 
  arg1 = static_cast< double >(val1);
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      CSASp_SetTrimAngle(arg1);
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CSASp_AddReac(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  
  if (!PyArg_ParseTuple(args,(char *)":CSASp_AddReac")) SWIG_fail;
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      CSASp_AddReac();
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CSASp_AssumeOldFiles(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  
  if (!PyArg_ParseTuple(args,(char *)":CSASp_AssumeOldFiles")) SWIG_fail;
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      CSASp_AssumeOldFiles();
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CSASp_CleanMemory(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  
  if (!PyArg_ParseTuple(args,(char *)":CSASp_CleanMemory")) SWIG_fail;
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      CSASp_CleanMemory();
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CSPRx_SelectProxTactors(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  int arg1 = (int) 0 ;
  int val1 ;
  int ecode1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"|O:CSPRx_SelectProxTactors",&obj0)) SWIG_fail;
  if (obj0) {
    ecode1 = SWIG_AsVal_int(obj0, &val1);
    if (!SWIG_IsOK(ecode1)) {
      SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "CSPRx_SelectProxTactors" "', argument " "1"" of type '" "int""'");
    } 
    arg1 = static_cast< int >(val1);
  }
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      CSPRx_SelectProxTactors(arg1);
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CSPRx_WriteLastVlocRloc(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  
  if (!PyArg_ParseTuple(args,(char *)":CSPRx_WriteLastVlocRloc")) SWIG_fail;
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      CSPRx_WriteLastVlocRloc();
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CSPRx_WriteOutVlocRloc(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  
  if (!PyArg_ParseTuple(args,(char *)":CSPRx_WriteOutVlocRloc")) SWIG_fail;
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      CSPRx_WriteOutVlocRloc();
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CSPRx_DisplayOutVlocRloc(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  
  if (!PyArg_ParseTuple(args,(char *)":CSPRx_DisplayOutVlocRloc")) SWIG_fail;
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      CSPRx_DisplayOutVlocRloc();
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CSPRx_DisplayProxTactors(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  
  if (!PyArg_ParseTuple(args,(char *)":CSPRx_DisplayProxTactors")) SWIG_fail;
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      CSPRx_DisplayProxTactors();
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CSPRx_ReadIniVlocRloc(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  int arg1 = (int) 0 ;
  int val1 ;
  int ecode1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"|O:CSPRx_ReadIniVlocRloc",&obj0)) SWIG_fail;
  if (obj0) {
    ecode1 = SWIG_AsVal_int(obj0, &val1);
    if (!SWIG_IsOK(ecode1)) {
      SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "CSPRx_ReadIniVlocRloc" "', argument " "1"" of type '" "int""'");
    } 
    arg1 = static_cast< int >(val1);
  }
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      CSPRx_ReadIniVlocRloc(arg1);
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CSPRx_Trim(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  
  if (!PyArg_ParseTuple(args,(char *)":CSPRx_Trim")) SWIG_fail;
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      CSPRx_Trim();
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CSPRx_GetInfo(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  int arg1 ;
  int **arg2 = (int **) 0 ;
  int *arg3 = (int *) 0 ;
  int val1 ;
  int ecode1 = 0 ;
  int *data_temp2 ;
  int dim_temp2 ;
  PyObject * obj0 = 0 ;
  
  {
    arg2 = &data_temp2;
    arg3 = &dim_temp2;
  }
  if (!PyArg_ParseTuple(args,(char *)"O:CSPRx_GetInfo",&obj0)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "CSPRx_GetInfo" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = static_cast< int >(val1);
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      CSPRx_GetInfo(arg1,arg2,arg3);
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_Py_Void();
  {
    npy_intp dims[1] = {
      *arg3 
    };
    PyObject * obj = PyArray_SimpleNewFromData(1, dims, NPY_INT, (void*)(*arg2));
    if (!obj) SWIG_fail;
    PyArrayObject * array = (PyArrayObject*) obj;
    attach_fortran_memory_to_numpy_array(array, (void*)(*arg2), NPY_INT, dims[0], 0);
    PyArray_ENABLEFLAGS(array,NPY_ARRAY_WRITEABLE);
    
    resultobj = SWIG_Python_AppendOutput(resultobj, obj);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CSPRx_Smoothing(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  
  if (!PyArg_ParseTuple(args,(char *)":CSPRx_Smoothing")) SWIG_fail;
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      CSPRx_Smoothing();
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CSPRx_AddReac(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  
  if (!PyArg_ParseTuple(args,(char *)":CSPRx_AddReac")) SWIG_fail;
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      CSPRx_AddReac();
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CSPRx_CleanMemory(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  
  if (!PyArg_ParseTuple(args,(char *)":CSPRx_CleanMemory")) SWIG_fail;
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      CSPRx_CleanMemory();
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PRASp_SelectProxTactors(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  int arg1 = (int) 0 ;
  int val1 ;
  int ecode1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"|O:PRASp_SelectProxTactors",&obj0)) SWIG_fail;
  if (obj0) {
    ecode1 = SWIG_AsVal_int(obj0, &val1);
    if (!SWIG_IsOK(ecode1)) {
      SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "PRASp_SelectProxTactors" "', argument " "1"" of type '" "int""'");
    } 
    arg1 = static_cast< int >(val1);
  }
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      PRASp_SelectProxTactors(arg1);
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PRASp_WriteLastVlocRloc(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  
  if (!PyArg_ParseTuple(args,(char *)":PRASp_WriteLastVlocRloc")) SWIG_fail;
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      PRASp_WriteLastVlocRloc();
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PRASp_WriteOutVlocRloc(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  
  if (!PyArg_ParseTuple(args,(char *)":PRASp_WriteOutVlocRloc")) SWIG_fail;
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      PRASp_WriteOutVlocRloc();
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PRASp_DisplayOutVlocRloc(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  
  if (!PyArg_ParseTuple(args,(char *)":PRASp_DisplayOutVlocRloc")) SWIG_fail;
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      PRASp_DisplayOutVlocRloc();
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PRASp_DisplayProxTactors(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  
  if (!PyArg_ParseTuple(args,(char *)":PRASp_DisplayProxTactors")) SWIG_fail;
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      PRASp_DisplayProxTactors();
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PRASp_ReadIniVlocRloc(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  int arg1 = (int) 0 ;
  int val1 ;
  int ecode1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"|O:PRASp_ReadIniVlocRloc",&obj0)) SWIG_fail;
  if (obj0) {
    ecode1 = SWIG_AsVal_int(obj0, &val1);
    if (!SWIG_IsOK(ecode1)) {
      SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "PRASp_ReadIniVlocRloc" "', argument " "1"" of type '" "int""'");
    } 
    arg1 = static_cast< int >(val1);
  }
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      PRASp_ReadIniVlocRloc(arg1);
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PRASp_CleanMemory(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  
  if (!PyArg_ParseTuple(args,(char *)":PRASp_CleanMemory")) SWIG_fail;
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      PRASp_CleanMemory();
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PRPLx_SelectProxTactors(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  int arg1 = (int) 0 ;
  int val1 ;
  int ecode1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"|O:PRPLx_SelectProxTactors",&obj0)) SWIG_fail;
  if (obj0) {
    ecode1 = SWIG_AsVal_int(obj0, &val1);
    if (!SWIG_IsOK(ecode1)) {
      SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "PRPLx_SelectProxTactors" "', argument " "1"" of type '" "int""'");
    } 
    arg1 = static_cast< int >(val1);
  }
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      PRPLx_SelectProxTactors(arg1);
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PRPLx_WriteLastVlocRloc(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  
  if (!PyArg_ParseTuple(args,(char *)":PRPLx_WriteLastVlocRloc")) SWIG_fail;
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      PRPLx_WriteLastVlocRloc();
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PRPLx_WriteOutVlocRloc(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  
  if (!PyArg_ParseTuple(args,(char *)":PRPLx_WriteOutVlocRloc")) SWIG_fail;
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      PRPLx_WriteOutVlocRloc();
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PRPLx_DisplayOutVlocRloc(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  
  if (!PyArg_ParseTuple(args,(char *)":PRPLx_DisplayOutVlocRloc")) SWIG_fail;
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      PRPLx_DisplayOutVlocRloc();
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PRPLx_DisplayProxTactors(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  
  if (!PyArg_ParseTuple(args,(char *)":PRPLx_DisplayProxTactors")) SWIG_fail;
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      PRPLx_DisplayProxTactors();
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PRPLx_ReadIniVlocRloc(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  int arg1 = (int) 0 ;
  int val1 ;
  int ecode1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"|O:PRPLx_ReadIniVlocRloc",&obj0)) SWIG_fail;
  if (obj0) {
    ecode1 = SWIG_AsVal_int(obj0, &val1);
    if (!SWIG_IsOK(ecode1)) {
      SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "PRPLx_ReadIniVlocRloc" "', argument " "1"" of type '" "int""'");
    } 
    arg1 = static_cast< int >(val1);
  }
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      PRPLx_ReadIniVlocRloc(arg1);
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PRPLx_CleanMemory(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  
  if (!PyArg_ParseTuple(args,(char *)":PRPLx_CleanMemory")) SWIG_fail;
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      PRPLx_CleanMemory();
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PRPRx_SelectProxTactors(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  int arg1 = (int) 0 ;
  int val1 ;
  int ecode1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"|O:PRPRx_SelectProxTactors",&obj0)) SWIG_fail;
  if (obj0) {
    ecode1 = SWIG_AsVal_int(obj0, &val1);
    if (!SWIG_IsOK(ecode1)) {
      SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "PRPRx_SelectProxTactors" "', argument " "1"" of type '" "int""'");
    } 
    arg1 = static_cast< int >(val1);
  }
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      PRPRx_SelectProxTactors(arg1);
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PRPRx_UseCpCundallDetection(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  int arg1 ;
  double arg2 = (double) 0. ;
  double arg3 = (double) 0. ;
  double arg4 = (double) 0. ;
  int val1 ;
  int ecode1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  double val4 ;
  int ecode4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O|OOO:PRPRx_UseCpCundallDetection",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "PRPRx_UseCpCundallDetection" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = static_cast< int >(val1);
  if (obj1) {
    ecode2 = SWIG_AsVal_double(obj1, &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "PRPRx_UseCpCundallDetection" "', argument " "2"" of type '" "double""'");
    } 
    arg2 = static_cast< double >(val2);
  }
  if (obj2) {
    ecode3 = SWIG_AsVal_double(obj2, &val3);
    if (!SWIG_IsOK(ecode3)) {
      SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "PRPRx_UseCpCundallDetection" "', argument " "3"" of type '" "double""'");
    } 
    arg3 = static_cast< double >(val3);
  }
  if (obj3) {
    ecode4 = SWIG_AsVal_double(obj3, &val4);
    if (!SWIG_IsOK(ecode4)) {
      SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "PRPRx_UseCpCundallDetection" "', argument " "4"" of type '" "double""'");
    } 
    arg4 = static_cast< double >(val4);
  }
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      PRPRx_UseCpCundallDetection(arg1,arg2,arg3,arg4);
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PRPRx_UseCpF2fExplicitDetection(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  double arg1 ;
  double arg2 = (double) 0. ;
  double arg3 = (double) 0. ;
  double arg4 = (double) 0. ;
  double val1 ;
  int ecode1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  double val4 ;
  int ecode4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O|OOO:PRPRx_UseCpF2fExplicitDetection",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  ecode1 = SWIG_AsVal_double(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "PRPRx_UseCpF2fExplicitDetection" "', argument " "1"" of type '" "double""'");
  } 
  arg1 = static_cast< double >(val1);
  if (obj1) {
    ecode2 = SWIG_AsVal_double(obj1, &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "PRPRx_UseCpF2fExplicitDetection" "', argument " "2"" of type '" "double""'");
    } 
    arg2 = static_cast< double >(val2);
  }
  if (obj2) {
    ecode3 = SWIG_AsVal_double(obj2, &val3);
    if (!SWIG_IsOK(ecode3)) {
      SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "PRPRx_UseCpF2fExplicitDetection" "', argument " "3"" of type '" "double""'");
    } 
    arg3 = static_cast< double >(val3);
  }
  if (obj3) {
    ecode4 = SWIG_AsVal_double(obj3, &val4);
    if (!SWIG_IsOK(ecode4)) {
      SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "PRPRx_UseCpF2fExplicitDetection" "', argument " "4"" of type '" "double""'");
    } 
    arg4 = static_cast< double >(val4);
  }
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      PRPRx_UseCpF2fExplicitDetection(arg1,arg2,arg3,arg4);
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PRPRx_UseCpF2fDetection(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  double arg1 ;
  int arg2 ;
  double arg3 = (double) 0. ;
  double arg4 = (double) 0. ;
  double arg5 = (double) 0. ;
  double val1 ;
  int ecode1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  double val4 ;
  int ecode4 = 0 ;
  double val5 ;
  int ecode5 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO|OOO:PRPRx_UseCpF2fDetection",&obj0,&obj1,&obj2,&obj3,&obj4)) SWIG_fail;
  ecode1 = SWIG_AsVal_double(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "PRPRx_UseCpF2fDetection" "', argument " "1"" of type '" "double""'");
  } 
  arg1 = static_cast< double >(val1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "PRPRx_UseCpF2fDetection" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  if (obj2) {
    ecode3 = SWIG_AsVal_double(obj2, &val3);
    if (!SWIG_IsOK(ecode3)) {
      SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "PRPRx_UseCpF2fDetection" "', argument " "3"" of type '" "double""'");
    } 
    arg3 = static_cast< double >(val3);
  }
  if (obj3) {
    ecode4 = SWIG_AsVal_double(obj3, &val4);
    if (!SWIG_IsOK(ecode4)) {
      SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "PRPRx_UseCpF2fDetection" "', argument " "4"" of type '" "double""'");
    } 
    arg4 = static_cast< double >(val4);
  }
  if (obj4) {
    ecode5 = SWIG_AsVal_double(obj4, &val5);
    if (!SWIG_IsOK(ecode5)) {
      SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "PRPRx_UseCpF2fDetection" "', argument " "5"" of type '" "double""'");
    } 
    arg5 = static_cast< double >(val5);
  }
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      PRPRx_UseCpF2fDetection(arg1,arg2,arg3,arg4,arg5);
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PRPRx_UseNcDetection(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  double arg1 ;
  double val1 ;
  int ecode1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:PRPRx_UseNcDetection",&obj0)) SWIG_fail;
  ecode1 = SWIG_AsVal_double(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "PRPRx_UseNcDetection" "', argument " "1"" of type '" "double""'");
  } 
  arg1 = static_cast< double >(val1);
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      PRPRx_UseNcDetection(arg1);
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PRPRx_UseNcF2fDetection(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  double arg1 ;
  double arg2 ;
  double val1 ;
  int ecode1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:PRPRx_UseNcF2fDetection",&obj0,&obj1)) SWIG_fail;
  ecode1 = SWIG_AsVal_double(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "PRPRx_UseNcF2fDetection" "', argument " "1"" of type '" "double""'");
  } 
  arg1 = static_cast< double >(val1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "PRPRx_UseNcF2fDetection" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      PRPRx_UseNcF2fDetection(arg1,arg2);
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PRPRx_UseNcF2fExplicitDetection(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  double arg1 ;
  double arg2 ;
  double val1 ;
  int ecode1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:PRPRx_UseNcF2fExplicitDetection",&obj0,&obj1)) SWIG_fail;
  ecode1 = SWIG_AsVal_double(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "PRPRx_UseNcF2fExplicitDetection" "', argument " "1"" of type '" "double""'");
  } 
  arg1 = static_cast< double >(val1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "PRPRx_UseNcF2fExplicitDetection" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      PRPRx_UseNcF2fExplicitDetection(arg1,arg2);
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PRPRx_UseTrianglesIntersectionDetection(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  int arg1 = (int) 16 ;
  int val1 ;
  int ecode1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"|O:PRPRx_UseTrianglesIntersectionDetection",&obj0)) SWIG_fail;
  if (obj0) {
    ecode1 = SWIG_AsVal_int(obj0, &val1);
    if (!SWIG_IsOK(ecode1)) {
      SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "PRPRx_UseTrianglesIntersectionDetection" "', argument " "1"" of type '" "int""'");
    } 
    arg1 = static_cast< int >(val1);
  }
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      PRPRx_UseTrianglesIntersectionDetection(arg1);
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PRPRx_SetF2fMinimalSurfaceSize(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  double arg1 ;
  double val1 ;
  int ecode1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:PRPRx_SetF2fMinimalSurfaceSize",&obj0)) SWIG_fail;
  ecode1 = SWIG_AsVal_double(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "PRPRx_SetF2fMinimalSurfaceSize" "', argument " "1"" of type '" "double""'");
  } 
  arg1 = static_cast< double >(val1);
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      PRPRx_SetF2fMinimalSurfaceSize(arg1);
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PRPRx_UseExternalDetection(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  
  if (!PyArg_ParseTuple(args,(char *)":PRPRx_UseExternalDetection")) SWIG_fail;
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      PRPRx_UseExternalDetection();
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PRPRx_WriteLastVlocRloc(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  
  if (!PyArg_ParseTuple(args,(char *)":PRPRx_WriteLastVlocRloc")) SWIG_fail;
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      PRPRx_WriteLastVlocRloc();
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PRPRx_WriteOutVlocRloc(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  
  if (!PyArg_ParseTuple(args,(char *)":PRPRx_WriteOutVlocRloc")) SWIG_fail;
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      PRPRx_WriteOutVlocRloc();
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PRPRx_DisplayOutVlocRloc(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  
  if (!PyArg_ParseTuple(args,(char *)":PRPRx_DisplayOutVlocRloc")) SWIG_fail;
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      PRPRx_DisplayOutVlocRloc();
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PRPRx_DisplayProxTactors(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  
  if (!PyArg_ParseTuple(args,(char *)":PRPRx_DisplayProxTactors")) SWIG_fail;
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      PRPRx_DisplayProxTactors();
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PRPRx_ReadIniVlocRloc(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  int arg1 = (int) 0 ;
  int val1 ;
  int ecode1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"|O:PRPRx_ReadIniVlocRloc",&obj0)) SWIG_fail;
  if (obj0) {
    ecode1 = SWIG_AsVal_int(obj0, &val1);
    if (!SWIG_IsOK(ecode1)) {
      SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "PRPRx_ReadIniVlocRloc" "', argument " "1"" of type '" "int""'");
    } 
    arg1 = static_cast< int >(val1);
  }
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      PRPRx_ReadIniVlocRloc(arg1);
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PRPRx_ShrinkPolyrFaces(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  double arg1 ;
  double val1 ;
  int ecode1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:PRPRx_ShrinkPolyrFaces",&obj0)) SWIG_fail;
  ecode1 = SWIG_AsVal_double(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "PRPRx_ShrinkPolyrFaces" "', argument " "1"" of type '" "double""'");
  } 
  arg1 = static_cast< double >(val1);
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      PRPRx_ShrinkPolyrFaces(arg1);
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PRPRx_LowSizeArrayPolyr(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  int arg1 ;
  int val1 ;
  int ecode1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:PRPRx_LowSizeArrayPolyr",&obj0)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "PRPRx_LowSizeArrayPolyr" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = static_cast< int >(val1);
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      PRPRx_LowSizeArrayPolyr(arg1);
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PRPRx_SaveProxTactorsToFile(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  
  if (!PyArg_ParseTuple(args,(char *)":PRPRx_SaveProxTactorsToFile")) SWIG_fail;
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      PRPRx_SaveProxTactorsToFile();
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PRPRx_LoadProxTactorsFromFile(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  
  if (!PyArg_ParseTuple(args,(char *)":PRPRx_LoadProxTactorsFromFile")) SWIG_fail;
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      PRPRx_LoadProxTactorsFromFile();
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PRPRx_SetXPeriodicCondition(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  double arg1 ;
  double val1 ;
  int ecode1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:PRPRx_SetXPeriodicCondition",&obj0)) SWIG_fail;
  ecode1 = SWIG_AsVal_double(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "PRPRx_SetXPeriodicCondition" "', argument " "1"" of type '" "double""'");
  } 
  arg1 = static_cast< double >(val1);
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      PRPRx_SetXPeriodicCondition(arg1);
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PRPRx_SetYPeriodicCondition(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  double arg1 ;
  double val1 ;
  int ecode1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:PRPRx_SetYPeriodicCondition",&obj0)) SWIG_fail;
  ecode1 = SWIG_AsVal_double(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "PRPRx_SetYPeriodicCondition" "', argument " "1"" of type '" "double""'");
  } 
  arg1 = static_cast< double >(val1);
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      PRPRx_SetYPeriodicCondition(arg1);
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PRPRx_VerboseF2F(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  int arg1 ;
  int arg2 ;
  int val1 ;
  int ecode1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:PRPRx_VerboseF2F",&obj0,&obj1)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "PRPRx_VerboseF2F" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = static_cast< int >(val1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "PRPRx_VerboseF2F" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      PRPRx_VerboseF2F(arg1,arg2);
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PRPRx_GetNbF2f(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)":PRPRx_GetNbF2f")) SWIG_fail;
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      result = (int)PRPRx_GetNbF2f();
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PRPRx_GetF2f2Inters(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  int **arg1 = (int **) 0 ;
  int *arg2 = (int *) 0 ;
  int *data_temp1 ;
  int dim_temp1 ;
  
  {
    arg1 = &data_temp1;
    arg2 = &dim_temp1;
  }
  if (!PyArg_ParseTuple(args,(char *)":PRPRx_GetF2f2Inters")) SWIG_fail;
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      PRPRx_GetF2f2Inters(arg1,arg2);
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_Py_Void();
  {
    npy_intp dims[1] = {
      *arg2 
    };
    PyObject * obj = PyArray_SimpleNewFromData(1, dims, NPY_INT, (void*)(*arg1));
    if (!obj) SWIG_fail;
    PyArrayObject * array = (PyArrayObject*) obj;
    attach_fortran_memory_to_numpy_array(array, (void*)(*arg1), NPY_INT, dims[0], 0);
    PyArray_ENABLEFLAGS(array,NPY_ARRAY_WRITEABLE);
    
    resultobj = SWIG_Python_AppendOutput(resultobj, obj);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PRPRx_GetF2fOutlines(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  int **arg1 = (int **) 0 ;
  int *arg2 = (int *) 0 ;
  double **arg3 = (double **) 0 ;
  int *arg4 = (int *) 0 ;
  int *arg5 = (int *) 0 ;
  int *data_temp1 ;
  int dim_temp1 ;
  double *data_temp3 ;
  int dim1_temp3 ;
  int dim2_temp3 ;
  
  {
    arg1 = &data_temp1;
    arg2 = &dim_temp1;
  }
  {
    arg3 = &data_temp3;
    arg4 = &dim1_temp3;
    arg5 = &dim2_temp3;
  }
  if (!PyArg_ParseTuple(args,(char *)":PRPRx_GetF2fOutlines")) SWIG_fail;
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      PRPRx_GetF2fOutlines(arg1,arg2,arg3,arg4,arg5);
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_Py_Void();
  {
    npy_intp dims[1] = {
      *arg2 
    };
    PyObject * obj = PyArray_SimpleNewFromData(1, dims, NPY_INT, (void*)(*arg1));
    if (!obj) SWIG_fail;
    PyArrayObject * array = (PyArrayObject*) obj;
    attach_fortran_memory_to_numpy_array(array, (void*)(*arg1), NPY_INT, dims[0], 0);
    PyArray_ENABLEFLAGS(array,NPY_ARRAY_WRITEABLE);
    
    resultobj = SWIG_Python_AppendOutput(resultobj, obj);
  }
  {
    npy_intp dims[2] = {
      *arg5, *arg4 
    };
    PyObject * obj = PyArray_SimpleNewFromData(2, dims, NPY_DOUBLE, (void*)(*arg3));
    if (!obj) SWIG_fail;
    PyArrayObject * array = (PyArrayObject*) obj;
    attach_fortran_memory_to_numpy_array(array, (void*)(*arg3), NPY_DOUBLE, dims[1], dims[0]);
    PyArray_ENABLEFLAGS(array,NPY_ARRAY_WRITEABLE);
    resultobj = SWIG_Python_AppendOutput(resultobj, obj);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PRPRx_GetF2fAllIdata(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  int **arg1 = (int **) 0 ;
  int *arg2 = (int *) 0 ;
  int *arg3 = (int *) 0 ;
  int *data_temp1 ;
  int dim1_temp1 ;
  int dim2_temp1 ;
  
  {
    arg1 = &data_temp1;
    arg2 = &dim1_temp1;
    arg3 = &dim2_temp1;
  }
  if (!PyArg_ParseTuple(args,(char *)":PRPRx_GetF2fAllIdata")) SWIG_fail;
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      PRPRx_GetF2fAllIdata(arg1,arg2,arg3);
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_Py_Void();
  {
    npy_intp dims[2] = {
      *arg3, *arg2 
    };
    PyObject * obj = PyArray_SimpleNewFromData(2, dims, NPY_INT, (void*)(*arg1));
    if (!obj) SWIG_fail;
    PyArrayObject * array = (PyArrayObject*) obj;
    attach_fortran_memory_to_numpy_array(array, (void*)(*arg1), NPY_INT, dims[1], dims[0]);
    PyArray_ENABLEFLAGS(array,NPY_ARRAY_WRITEABLE);
    resultobj = SWIG_Python_AppendOutput(resultobj, obj);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PRPRx_GetF2fCentralKernel(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  int arg1 ;
  double **arg2 = (double **) 0 ;
  int *arg3 = (int *) 0 ;
  int *arg4 = (int *) 0 ;
  double *arg5 = (double *) 0 ;
  int *arg6 = (int *) 0 ;
  int val1 ;
  int ecode1 = 0 ;
  double *data_temp2 ;
  int dim1_temp2 ;
  int dim2_temp2 ;
  double temp5 ;
  int res5 = SWIG_TMPOBJ ;
  int temp6 ;
  int res6 = SWIG_TMPOBJ ;
  PyObject * obj0 = 0 ;
  
  {
    arg2 = &data_temp2;
    arg3 = &dim1_temp2;
    arg4 = &dim2_temp2;
  }
  arg5 = &temp5;
  arg6 = &temp6;
  if (!PyArg_ParseTuple(args,(char *)"O:PRPRx_GetF2fCentralKernel",&obj0)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "PRPRx_GetF2fCentralKernel" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = static_cast< int >(val1);
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      PRPRx_GetF2fCentralKernel(arg1,arg2,arg3,arg4,arg5,arg6);
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_Py_Void();
  {
    npy_intp dims[2] = {
      *arg4, *arg3 
    };
    PyObject * obj = PyArray_SimpleNewFromData(2, dims, NPY_DOUBLE, (void*)(*arg2));
    if (!obj) SWIG_fail;
    PyArrayObject * array = (PyArrayObject*) obj;
    attach_fortran_memory_to_numpy_array(array, (void*)(*arg2), NPY_DOUBLE, dims[1], dims[0]);
    PyArray_ENABLEFLAGS(array,NPY_ARRAY_WRITEABLE);
    resultobj = SWIG_Python_AppendOutput(resultobj, obj);
  }
  if (SWIG_IsTmpObj(res5)) {
    resultobj = SWIG_Python_AppendOutput(resultobj, SWIG_From_double((*arg5)));
  } else {
    int new_flags = SWIG_IsNewObj(res5) ? (SWIG_POINTER_OWN |  0 ) :  0 ;
    resultobj = SWIG_Python_AppendOutput(resultobj, SWIG_NewPointerObj((void*)(arg5), SWIGTYPE_p_double, new_flags));
  }
  if (SWIG_IsTmpObj(res6)) {
    resultobj = SWIG_Python_AppendOutput(resultobj, SWIG_From_int((*arg6)));
  } else {
    int new_flags = SWIG_IsNewObj(res6) ? (SWIG_POINTER_OWN |  0 ) :  0 ;
    resultobj = SWIG_Python_AppendOutput(resultobj, SWIG_NewPointerObj((void*)(arg6), SWIGTYPE_p_int, new_flags));
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PRPRx_GetF2fStress(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  int arg1 ;
  double **arg2 = (double **) 0 ;
  int *arg3 = (int *) 0 ;
  int *arg4 = (int *) 0 ;
  int **arg5 = (int **) 0 ;
  int *arg6 = (int *) 0 ;
  double **arg7 = (double **) 0 ;
  int *arg8 = (int *) 0 ;
  int *arg9 = (int *) 0 ;
  int **arg10 = (int **) 0 ;
  int *arg11 = (int *) 0 ;
  double **arg12 = (double **) 0 ;
  int *arg13 = (int *) 0 ;
  double *arg14 = (double *) 0 ;
  int val1 ;
  int ecode1 = 0 ;
  double *data_temp2 ;
  int dim1_temp2 ;
  int dim2_temp2 ;
  int *data_temp5 ;
  int dim_temp5 ;
  double *data_temp7 ;
  int dim1_temp7 ;
  int dim2_temp7 ;
  int *data_temp10 ;
  int dim_temp10 ;
  double *data_temp12 ;
  int dim_temp12 ;
  double temp14 ;
  int res14 = SWIG_TMPOBJ ;
  PyObject * obj0 = 0 ;
  
  {
    arg2 = &data_temp2;
    arg3 = &dim1_temp2;
    arg4 = &dim2_temp2;
  }
  {
    arg5 = &data_temp5;
    arg6 = &dim_temp5;
  }
  {
    arg7 = &data_temp7;
    arg8 = &dim1_temp7;
    arg9 = &dim2_temp7;
  }
  {
    arg10 = &data_temp10;
    arg11 = &dim_temp10;
  }
  {
    arg12 = &data_temp12;
    arg13 = &dim_temp12;
  }
  arg14 = &temp14;
  if (!PyArg_ParseTuple(args,(char *)"O:PRPRx_GetF2fStress",&obj0)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "PRPRx_GetF2fStress" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = static_cast< int >(val1);
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      PRPRx_GetF2fStress(arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9,arg10,arg11,arg12,arg13,arg14);
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_Py_Void();
  {
    npy_intp dims[2] = {
      *arg4, *arg3 
    };
    PyObject * obj = PyArray_SimpleNewFromData(2, dims, NPY_DOUBLE, (void*)(*arg2));
    if (!obj) SWIG_fail;
    PyArrayObject * array = (PyArrayObject*) obj;
    attach_fortran_memory_to_numpy_array(array, (void*)(*arg2), NPY_DOUBLE, dims[1], dims[0]);
    PyArray_ENABLEFLAGS(array,NPY_ARRAY_WRITEABLE);
    resultobj = SWIG_Python_AppendOutput(resultobj, obj);
  }
  {
    npy_intp dims[1] = {
      *arg6 
    };
    PyObject * obj = PyArray_SimpleNewFromData(1, dims, NPY_INT, (void*)(*arg5));
    if (!obj) SWIG_fail;
    PyArrayObject * array = (PyArrayObject*) obj;
    attach_fortran_memory_to_numpy_array(array, (void*)(*arg5), NPY_INT, dims[0], 0);
    PyArray_ENABLEFLAGS(array,NPY_ARRAY_WRITEABLE);
    
    resultobj = SWIG_Python_AppendOutput(resultobj, obj);
  }
  {
    npy_intp dims[2] = {
      *arg9, *arg8 
    };
    PyObject * obj = PyArray_SimpleNewFromData(2, dims, NPY_DOUBLE, (void*)(*arg7));
    if (!obj) SWIG_fail;
    PyArrayObject * array = (PyArrayObject*) obj;
    attach_fortran_memory_to_numpy_array(array, (void*)(*arg7), NPY_DOUBLE, dims[1], dims[0]);
    PyArray_ENABLEFLAGS(array,NPY_ARRAY_WRITEABLE);
    resultobj = SWIG_Python_AppendOutput(resultobj, obj);
  }
  {
    npy_intp dims[1] = {
      *arg11 
    };
    PyObject * obj = PyArray_SimpleNewFromData(1, dims, NPY_INT, (void*)(*arg10));
    if (!obj) SWIG_fail;
    PyArrayObject * array = (PyArrayObject*) obj;
    attach_fortran_memory_to_numpy_array(array, (void*)(*arg10), NPY_INT, dims[0], 0);
    PyArray_ENABLEFLAGS(array,NPY_ARRAY_WRITEABLE);
    
    resultobj = SWIG_Python_AppendOutput(resultobj, obj);
  }
  {
    npy_intp dims[1] = {
      *arg13 
    };
    PyObject * obj = PyArray_SimpleNewFromData(1, dims, NPY_DOUBLE, (void*)(*arg12));
    if (!obj) SWIG_fail;
    PyArrayObject * array = (PyArrayObject*) obj;
    attach_fortran_memory_to_numpy_array(array, (void*)(*arg12), NPY_DOUBLE, dims[0], 0);
    PyArray_ENABLEFLAGS(array,NPY_ARRAY_WRITEABLE);
    
    resultobj = SWIG_Python_AppendOutput(resultobj, obj);
  }
  if (SWIG_IsTmpObj(res14)) {
    resultobj = SWIG_Python_AppendOutput(resultobj, SWIG_From_double((*arg14)));
  } else {
    int new_flags = SWIG_IsNewObj(res14) ? (SWIG_POINTER_OWN |  0 ) :  0 ;
    resultobj = SWIG_Python_AppendOutput(resultobj, SWIG_NewPointerObj((void*)(arg14), SWIGTYPE_p_double, new_flags));
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PRPRx_SetCundallNeighbor(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  double arg1 ;
  double val1 ;
  int ecode1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:PRPRx_SetCundallNeighbor",&obj0)) SWIG_fail;
  ecode1 = SWIG_AsVal_double(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "PRPRx_SetCundallNeighbor" "', argument " "1"" of type '" "double""'");
  } 
  arg1 = static_cast< double >(val1);
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      PRPRx_SetCundallNeighbor(arg1);
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PRPRx_CpUseOldCcpm(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  
  if (!PyArg_ParseTuple(args,(char *)":PRPRx_CpUseOldCcpm")) SWIG_fail;
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      PRPRx_CpUseOldCcpm();
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PRPRx_SetReactionTrackingLength(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  double arg1 ;
  double val1 ;
  int ecode1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:PRPRx_SetReactionTrackingLength",&obj0)) SWIG_fail;
  ecode1 = SWIG_AsVal_double(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "PRPRx_SetReactionTrackingLength" "', argument " "1"" of type '" "double""'");
  } 
  arg1 = static_cast< double >(val1);
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      PRPRx_SetReactionTrackingLength(arg1);
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PRPRx_SetTolRecupRloc(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  double arg1 ;
  double val1 ;
  int ecode1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:PRPRx_SetTolRecupRloc",&obj0)) SWIG_fail;
  ecode1 = SWIG_AsVal_double(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "PRPRx_SetTolRecupRloc" "', argument " "1"" of type '" "double""'");
  } 
  arg1 = static_cast< double >(val1);
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      PRPRx_SetTolRecupRloc(arg1);
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PRPRx_GetInteractionVector(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  char *arg1 = (char *) 0 ;
  int arg2 ;
  double **arg3 = (double **) 0 ;
  int *arg4 = (int *) 0 ;
  int res1 ;
  char *buf1 = 0 ;
  int alloc1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  double *data_temp3 ;
  int dim_temp3 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  {
    arg3 = &data_temp3;
    arg4 = &dim_temp3;
  }
  if (!PyArg_ParseTuple(args,(char *)"OO:PRPRx_GetInteractionVector",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_AsCharPtrAndSize(obj0, &buf1, NULL, &alloc1);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PRPRx_GetInteractionVector" "', argument " "1"" of type '" "char *""'");
  }
  arg1 = reinterpret_cast< char * >(buf1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "PRPRx_GetInteractionVector" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      PRPRx_GetInteractionVector(arg1,arg2,arg3,arg4);
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_Py_Void();
  {
    npy_intp dims[1] = {
      *arg4 
    };
    PyObject * obj = PyArray_SimpleNewFromData(1, dims, NPY_DOUBLE, (void*)(*arg3));
    if (!obj) SWIG_fail;
    PyArrayObject * array = (PyArrayObject*) obj;
    attach_fortran_memory_to_numpy_array(array, (void*)(*arg3), NPY_DOUBLE, dims[0], 0);
    PyArray_ENABLEFLAGS(array,NPY_ARRAY_WRITEABLE);
    
    resultobj = SWIG_Python_AppendOutput(resultobj, obj);
  }
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  return resultobj;
fail:
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  return NULL;
}


SWIGINTERN PyObject *_wrap_PRPRx_SetInteractionInternal(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  int arg1 ;
  int arg2 ;
  double arg3 ;
  int val1 ;
  int ecode1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:PRPRx_SetInteractionInternal",&obj0,&obj1,&obj2)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "PRPRx_SetInteractionInternal" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = static_cast< int >(val1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "PRPRx_SetInteractionInternal" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_double(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "PRPRx_SetInteractionInternal" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast< double >(val3);
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      PRPRx_SetInteractionInternal(arg1,arg2,arg3);
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PRPRx_GetInteractionInternal(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  int arg1 ;
  int arg2 ;
  int val1 ;
  int ecode1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:PRPRx_GetInteractionInternal",&obj0,&obj1)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "PRPRx_GetInteractionInternal" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = static_cast< int >(val1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "PRPRx_GetInteractionInternal" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      result = (double)PRPRx_GetInteractionInternal(arg1,arg2);
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PRPRx_GetInteractionInternalComment(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  int arg1 ;
  char **arg2 = (char **) 0 ;
  int *arg3 = (int *) 0 ;
  int *arg4 = (int *) 0 ;
  int val1 ;
  int ecode1 = 0 ;
  char *tmp_vector2 ;
  int tmp_size2 ;
  int tmp_rs2 ;
  PyObject * obj0 = 0 ;
  
  {
    arg2 = &tmp_vector2;
    arg3 = &tmp_size2;
    arg4 = &tmp_rs2;
  }
  if (!PyArg_ParseTuple(args,(char *)"O:PRPRx_GetInteractionInternalComment",&obj0)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "PRPRx_GetInteractionInternalComment" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = static_cast< int >(val1);
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      PRPRx_GetInteractionInternalComment(arg1,arg2,arg3,arg4);
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_Py_Void();
  {
    PyObject *chaine;
    chaine = PyString_FromStringAndSize(*arg2, *arg3);
    free_ptrFortranString(*arg2, *arg4);
    resultobj = chaine;
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PRPRx_WithNodalContact(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  
  if (!PyArg_ParseTuple(args,(char *)":PRPRx_WithNodalContact")) SWIG_fail;
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      PRPRx_WithNodalContact();
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PRPRx_SetInternalSurface(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  int arg1 ;
  double arg2 ;
  int val1 ;
  int ecode1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:PRPRx_SetInternalSurface",&obj0,&obj1)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "PRPRx_SetInternalSurface" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = static_cast< int >(val1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "PRPRx_SetInternalSurface" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      PRPRx_SetInternalSurface(arg1,arg2);
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PRPRx_UseStoDetection(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  bool arg1 ;
  double arg2 ;
  double arg3 ;
  bool arg4 = (bool) 0 ;
  bool val1 ;
  int ecode1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  bool val4 ;
  int ecode4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO|O:PRPRx_UseStoDetection",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  ecode1 = SWIG_AsVal_bool(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "PRPRx_UseStoDetection" "', argument " "1"" of type '" "bool""'");
  } 
  arg1 = static_cast< bool >(val1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "PRPRx_UseStoDetection" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  ecode3 = SWIG_AsVal_double(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "PRPRx_UseStoDetection" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast< double >(val3);
  if (obj3) {
    ecode4 = SWIG_AsVal_bool(obj3, &val4);
    if (!SWIG_IsOK(ecode4)) {
      SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "PRPRx_UseStoDetection" "', argument " "4"" of type '" "bool""'");
    } 
    arg4 = static_cast< bool >(val4);
  }
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      PRPRx_UseStoDetection(arg1,arg2,arg3,arg4);
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PRPRx_ForceF2fDetection(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  
  if (!PyArg_ParseTuple(args,(char *)":PRPRx_ForceF2fDetection")) SWIG_fail;
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      PRPRx_ForceF2fDetection();
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PRPRx_ForceNcDetection(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  
  if (!PyArg_ParseTuple(args,(char *)":PRPRx_ForceNcDetection")) SWIG_fail;
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      PRPRx_ForceNcDetection();
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PRPRx_CleanMemory(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  
  if (!PyArg_ParseTuple(args,(char *)":PRPRx_CleanMemory")) SWIG_fail;
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      PRPRx_CleanMemory();
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PTPT3_SelectProxTactors(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  int arg1 = (int) 0 ;
  int val1 ;
  int ecode1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"|O:PTPT3_SelectProxTactors",&obj0)) SWIG_fail;
  if (obj0) {
    ecode1 = SWIG_AsVal_int(obj0, &val1);
    if (!SWIG_IsOK(ecode1)) {
      SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "PTPT3_SelectProxTactors" "', argument " "1"" of type '" "int""'");
    } 
    arg1 = static_cast< int >(val1);
  }
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      PTPT3_SelectProxTactors(arg1);
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PTPT3_SmoothForceComputation(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  
  if (!PyArg_ParseTuple(args,(char *)":PTPT3_SmoothForceComputation")) SWIG_fail;
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      PTPT3_SmoothForceComputation();
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PTPT3_WriteLastVlocRloc(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  
  if (!PyArg_ParseTuple(args,(char *)":PTPT3_WriteLastVlocRloc")) SWIG_fail;
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      PTPT3_WriteLastVlocRloc();
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PTPT3_WriteOutVlocRloc(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  
  if (!PyArg_ParseTuple(args,(char *)":PTPT3_WriteOutVlocRloc")) SWIG_fail;
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      PTPT3_WriteOutVlocRloc();
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PTPT3_DisplayOutVlocRloc(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  
  if (!PyArg_ParseTuple(args,(char *)":PTPT3_DisplayOutVlocRloc")) SWIG_fail;
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      PTPT3_DisplayOutVlocRloc();
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PTPT3_DisplayProxTactors(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  
  if (!PyArg_ParseTuple(args,(char *)":PTPT3_DisplayProxTactors")) SWIG_fail;
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      PTPT3_DisplayProxTactors();
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PTPT3_LoadNetwork(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  
  if (!PyArg_ParseTuple(args,(char *)":PTPT3_LoadNetwork")) SWIG_fail;
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      PTPT3_LoadNetwork();
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PTPT3_ReadIniVlocRloc(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  int arg1 = (int) 0 ;
  int val1 ;
  int ecode1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"|O:PTPT3_ReadIniVlocRloc",&obj0)) SWIG_fail;
  if (obj0) {
    ecode1 = SWIG_AsVal_int(obj0, &val1);
    if (!SWIG_IsOK(ecode1)) {
      SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "PTPT3_ReadIniVlocRloc" "', argument " "1"" of type '" "int""'");
    } 
    arg1 = static_cast< int >(val1);
  }
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      PTPT3_ReadIniVlocRloc(arg1);
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PTPT3_SetXPeriodicCondition(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  double arg1 ;
  double val1 ;
  int ecode1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:PTPT3_SetXPeriodicCondition",&obj0)) SWIG_fail;
  ecode1 = SWIG_AsVal_double(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "PTPT3_SetXPeriodicCondition" "', argument " "1"" of type '" "double""'");
  } 
  arg1 = static_cast< double >(val1);
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      PTPT3_SetXPeriodicCondition(arg1);
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PTPT3_SetYPeriodicCondition(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  double arg1 ;
  double val1 ;
  int ecode1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:PTPT3_SetYPeriodicCondition",&obj0)) SWIG_fail;
  ecode1 = SWIG_AsVal_double(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "PTPT3_SetYPeriodicCondition" "', argument " "1"" of type '" "double""'");
  } 
  arg1 = static_cast< double >(val1);
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      PTPT3_SetYPeriodicCondition(arg1);
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PTPT3_SetExplicitLocalFrame(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  
  if (!PyArg_ParseTuple(args,(char *)":PTPT3_SetExplicitLocalFrame")) SWIG_fail;
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      PTPT3_SetExplicitLocalFrame();
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PTPT3_LoadParams(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  
  if (!PyArg_ParseTuple(args,(char *)":PTPT3_LoadParams")) SWIG_fail;
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      PTPT3_LoadParams();
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PTPT3_UseCurrentNonuc0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  int arg1 ;
  int val1 ;
  int ecode1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:PTPT3_UseCurrentNonuc0",&obj0)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "PTPT3_UseCurrentNonuc0" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = static_cast< int >(val1);
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      PTPT3_UseCurrentNonuc0(arg1);
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PTPT3_CleanMemory(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  
  if (!PyArg_ParseTuple(args,(char *)":PTPT3_CleanMemory")) SWIG_fail;
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      PTPT3_CleanMemory();
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SPCDx_SelectProxTactors(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  int arg1 = (int) 0 ;
  int val1 ;
  int ecode1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"|O:SPCDx_SelectProxTactors",&obj0)) SWIG_fail;
  if (obj0) {
    ecode1 = SWIG_AsVal_int(obj0, &val1);
    if (!SWIG_IsOK(ecode1)) {
      SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "SPCDx_SelectProxTactors" "', argument " "1"" of type '" "int""'");
    } 
    arg1 = static_cast< int >(val1);
  }
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      SPCDx_SelectProxTactors(arg1);
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SPCDx_SmoothForceComputation(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  
  if (!PyArg_ParseTuple(args,(char *)":SPCDx_SmoothForceComputation")) SWIG_fail;
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      SPCDx_SmoothForceComputation();
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SPCDx_WriteLastVlocRloc(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  
  if (!PyArg_ParseTuple(args,(char *)":SPCDx_WriteLastVlocRloc")) SWIG_fail;
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      SPCDx_WriteLastVlocRloc();
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SPCDx_WriteOutVlocRloc(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  
  if (!PyArg_ParseTuple(args,(char *)":SPCDx_WriteOutVlocRloc")) SWIG_fail;
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      SPCDx_WriteOutVlocRloc();
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SPCDx_DisplayOutVlocRloc(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  
  if (!PyArg_ParseTuple(args,(char *)":SPCDx_DisplayOutVlocRloc")) SWIG_fail;
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      SPCDx_DisplayOutVlocRloc();
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SPCDx_DisplayProxTactors(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  
  if (!PyArg_ParseTuple(args,(char *)":SPCDx_DisplayProxTactors")) SWIG_fail;
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      SPCDx_DisplayProxTactors();
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SPCDx_ReadIniVlocRloc(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  int arg1 = (int) 0 ;
  int val1 ;
  int ecode1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"|O:SPCDx_ReadIniVlocRloc",&obj0)) SWIG_fail;
  if (obj0) {
    ecode1 = SWIG_AsVal_int(obj0, &val1);
    if (!SWIG_IsOK(ecode1)) {
      SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "SPCDx_ReadIniVlocRloc" "', argument " "1"" of type '" "int""'");
    } 
    arg1 = static_cast< int >(val1);
  }
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      SPCDx_ReadIniVlocRloc(arg1);
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SPCDx_CleanMemory(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  
  if (!PyArg_ParseTuple(args,(char *)":SPCDx_CleanMemory")) SWIG_fail;
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      SPCDx_CleanMemory();
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SPDCx_SelectProxTactors(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  int arg1 = (int) 0 ;
  int val1 ;
  int ecode1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"|O:SPDCx_SelectProxTactors",&obj0)) SWIG_fail;
  if (obj0) {
    ecode1 = SWIG_AsVal_int(obj0, &val1);
    if (!SWIG_IsOK(ecode1)) {
      SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "SPDCx_SelectProxTactors" "', argument " "1"" of type '" "int""'");
    } 
    arg1 = static_cast< int >(val1);
  }
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      SPDCx_SelectProxTactors(arg1);
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SPDCx_SmoothForceComputation(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  
  if (!PyArg_ParseTuple(args,(char *)":SPDCx_SmoothForceComputation")) SWIG_fail;
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      SPDCx_SmoothForceComputation();
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SPDCx_WriteLastVlocRloc(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  
  if (!PyArg_ParseTuple(args,(char *)":SPDCx_WriteLastVlocRloc")) SWIG_fail;
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      SPDCx_WriteLastVlocRloc();
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SPDCx_WriteOutVlocRloc(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  
  if (!PyArg_ParseTuple(args,(char *)":SPDCx_WriteOutVlocRloc")) SWIG_fail;
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      SPDCx_WriteOutVlocRloc();
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SPDCx_DisplayOutVlocRloc(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  
  if (!PyArg_ParseTuple(args,(char *)":SPDCx_DisplayOutVlocRloc")) SWIG_fail;
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      SPDCx_DisplayOutVlocRloc();
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SPDCx_DisplayProxTactors(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  
  if (!PyArg_ParseTuple(args,(char *)":SPDCx_DisplayProxTactors")) SWIG_fail;
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      SPDCx_DisplayProxTactors();
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SPDCx_ReadIniVlocRloc(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  int arg1 = (int) 0 ;
  int val1 ;
  int ecode1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"|O:SPDCx_ReadIniVlocRloc",&obj0)) SWIG_fail;
  if (obj0) {
    ecode1 = SWIG_AsVal_int(obj0, &val1);
    if (!SWIG_IsOK(ecode1)) {
      SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "SPDCx_ReadIniVlocRloc" "', argument " "1"" of type '" "int""'");
    } 
    arg1 = static_cast< int >(val1);
  }
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      SPDCx_ReadIniVlocRloc(arg1);
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SPDCx_CleanMemory(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  
  if (!PyArg_ParseTuple(args,(char *)":SPDCx_CleanMemory")) SWIG_fail;
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      SPDCx_CleanMemory();
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SPPLx_SelectProxTactors(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  int arg1 = (int) 0 ;
  int val1 ;
  int ecode1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"|O:SPPLx_SelectProxTactors",&obj0)) SWIG_fail;
  if (obj0) {
    ecode1 = SWIG_AsVal_int(obj0, &val1);
    if (!SWIG_IsOK(ecode1)) {
      SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "SPPLx_SelectProxTactors" "', argument " "1"" of type '" "int""'");
    } 
    arg1 = static_cast< int >(val1);
  }
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      SPPLx_SelectProxTactors(arg1);
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SPPLx_SmoothForceComputation(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  
  if (!PyArg_ParseTuple(args,(char *)":SPPLx_SmoothForceComputation")) SWIG_fail;
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      SPPLx_SmoothForceComputation();
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SPPLx_WriteLastVlocRloc(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  
  if (!PyArg_ParseTuple(args,(char *)":SPPLx_WriteLastVlocRloc")) SWIG_fail;
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      SPPLx_WriteLastVlocRloc();
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SPPLx_WriteOutVlocRloc(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  
  if (!PyArg_ParseTuple(args,(char *)":SPPLx_WriteOutVlocRloc")) SWIG_fail;
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      SPPLx_WriteOutVlocRloc();
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SPPLx_DisplayOutVlocRloc(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  
  if (!PyArg_ParseTuple(args,(char *)":SPPLx_DisplayOutVlocRloc")) SWIG_fail;
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      SPPLx_DisplayOutVlocRloc();
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SPPLx_DisplayProxTactors(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  
  if (!PyArg_ParseTuple(args,(char *)":SPPLx_DisplayProxTactors")) SWIG_fail;
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      SPPLx_DisplayProxTactors();
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SPPLx_ReadIniVlocRloc(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  int arg1 = (int) 0 ;
  int val1 ;
  int ecode1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"|O:SPPLx_ReadIniVlocRloc",&obj0)) SWIG_fail;
  if (obj0) {
    ecode1 = SWIG_AsVal_int(obj0, &val1);
    if (!SWIG_IsOK(ecode1)) {
      SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "SPPLx_ReadIniVlocRloc" "', argument " "1"" of type '" "int""'");
    } 
    arg1 = static_cast< int >(val1);
  }
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      SPPLx_ReadIniVlocRloc(arg1);
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SPPLx_CleanMemory(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  
  if (!PyArg_ParseTuple(args,(char *)":SPPLx_CleanMemory")) SWIG_fail;
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      SPPLx_CleanMemory();
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SPPRx_SelectProxTactors(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  int arg1 = (int) 0 ;
  int val1 ;
  int ecode1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"|O:SPPRx_SelectProxTactors",&obj0)) SWIG_fail;
  if (obj0) {
    ecode1 = SWIG_AsVal_int(obj0, &val1);
    if (!SWIG_IsOK(ecode1)) {
      SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "SPPRx_SelectProxTactors" "', argument " "1"" of type '" "int""'");
    } 
    arg1 = static_cast< int >(val1);
  }
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      SPPRx_SelectProxTactors(arg1);
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SPPRx_SmoothForceComputation(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  
  if (!PyArg_ParseTuple(args,(char *)":SPPRx_SmoothForceComputation")) SWIG_fail;
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      SPPRx_SmoothForceComputation();
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SPPRx_WriteLastVlocRloc(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  
  if (!PyArg_ParseTuple(args,(char *)":SPPRx_WriteLastVlocRloc")) SWIG_fail;
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      SPPRx_WriteLastVlocRloc();
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SPPRx_WriteOutVlocRloc(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  
  if (!PyArg_ParseTuple(args,(char *)":SPPRx_WriteOutVlocRloc")) SWIG_fail;
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      SPPRx_WriteOutVlocRloc();
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SPPRx_DisplayOutVlocRloc(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  
  if (!PyArg_ParseTuple(args,(char *)":SPPRx_DisplayOutVlocRloc")) SWIG_fail;
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      SPPRx_DisplayOutVlocRloc();
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SPPRx_DisplayProxTactors(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  
  if (!PyArg_ParseTuple(args,(char *)":SPPRx_DisplayProxTactors")) SWIG_fail;
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      SPPRx_DisplayProxTactors();
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SPPRx_ReadIniVlocRloc(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  int arg1 = (int) 0 ;
  int val1 ;
  int ecode1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"|O:SPPRx_ReadIniVlocRloc",&obj0)) SWIG_fail;
  if (obj0) {
    ecode1 = SWIG_AsVal_int(obj0, &val1);
    if (!SWIG_IsOK(ecode1)) {
      SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "SPPRx_ReadIniVlocRloc" "', argument " "1"" of type '" "int""'");
    } 
    arg1 = static_cast< int >(val1);
  }
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      SPPRx_ReadIniVlocRloc(arg1);
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SPPRx_SetXPeriodicCondition(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  double arg1 ;
  double val1 ;
  int ecode1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:SPPRx_SetXPeriodicCondition",&obj0)) SWIG_fail;
  ecode1 = SWIG_AsVal_double(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "SPPRx_SetXPeriodicCondition" "', argument " "1"" of type '" "double""'");
  } 
  arg1 = static_cast< double >(val1);
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      SPPRx_SetXPeriodicCondition(arg1);
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SPPRx_SetYPeriodicCondition(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  double arg1 ;
  double val1 ;
  int ecode1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:SPPRx_SetYPeriodicCondition",&obj0)) SWIG_fail;
  ecode1 = SWIG_AsVal_double(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "SPPRx_SetYPeriodicCondition" "', argument " "1"" of type '" "double""'");
  } 
  arg1 = static_cast< double >(val1);
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      SPPRx_SetYPeriodicCondition(arg1);
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SPPRx_CleanMemory(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  
  if (!PyArg_ParseTuple(args,(char *)":SPPRx_CleanMemory")) SWIG_fail;
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      SPPRx_CleanMemory();
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SPSPx_SelectProxTactors(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  int arg1 = (int) 0 ;
  int val1 ;
  int ecode1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"|O:SPSPx_SelectProxTactors",&obj0)) SWIG_fail;
  if (obj0) {
    ecode1 = SWIG_AsVal_int(obj0, &val1);
    if (!SWIG_IsOK(ecode1)) {
      SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "SPSPx_SelectProxTactors" "', argument " "1"" of type '" "int""'");
    } 
    arg1 = static_cast< int >(val1);
  }
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      SPSPx_SelectProxTactors(arg1);
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SPSPx_SmoothForceComputation(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  
  if (!PyArg_ParseTuple(args,(char *)":SPSPx_SmoothForceComputation")) SWIG_fail;
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      SPSPx_SmoothForceComputation();
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SPSPx_WriteLastVlocRloc(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  
  if (!PyArg_ParseTuple(args,(char *)":SPSPx_WriteLastVlocRloc")) SWIG_fail;
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      SPSPx_WriteLastVlocRloc();
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SPSPx_WriteOutVlocRloc(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  
  if (!PyArg_ParseTuple(args,(char *)":SPSPx_WriteOutVlocRloc")) SWIG_fail;
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      SPSPx_WriteOutVlocRloc();
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SPSPx_DisplayOutVlocRloc(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  
  if (!PyArg_ParseTuple(args,(char *)":SPSPx_DisplayOutVlocRloc")) SWIG_fail;
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      SPSPx_DisplayOutVlocRloc();
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SPSPx_DisplayProxTactors(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  
  if (!PyArg_ParseTuple(args,(char *)":SPSPx_DisplayProxTactors")) SWIG_fail;
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      SPSPx_DisplayProxTactors();
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SPSPx_ReadIniVlocRloc(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  int arg1 = (int) 0 ;
  int val1 ;
  int ecode1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"|O:SPSPx_ReadIniVlocRloc",&obj0)) SWIG_fail;
  if (obj0) {
    ecode1 = SWIG_AsVal_int(obj0, &val1);
    if (!SWIG_IsOK(ecode1)) {
      SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "SPSPx_ReadIniVlocRloc" "', argument " "1"" of type '" "int""'");
    } 
    arg1 = static_cast< int >(val1);
  }
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      SPSPx_ReadIniVlocRloc(arg1);
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SPSPx_SetXPeriodicCondition(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  double arg1 ;
  double val1 ;
  int ecode1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:SPSPx_SetXPeriodicCondition",&obj0)) SWIG_fail;
  ecode1 = SWIG_AsVal_double(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "SPSPx_SetXPeriodicCondition" "', argument " "1"" of type '" "double""'");
  } 
  arg1 = static_cast< double >(val1);
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      SPSPx_SetXPeriodicCondition(arg1);
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SPSPx_SetYPeriodicCondition(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  double arg1 ;
  double val1 ;
  int ecode1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:SPSPx_SetYPeriodicCondition",&obj0)) SWIG_fail;
  ecode1 = SWIG_AsVal_double(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "SPSPx_SetYPeriodicCondition" "', argument " "1"" of type '" "double""'");
  } 
  arg1 = static_cast< double >(val1);
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      SPSPx_SetYPeriodicCondition(arg1);
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SPSPx_SetNumberInterByContact(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  int arg1 ;
  int val1 ;
  int ecode1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:SPSPx_SetNumberInterByContact",&obj0)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "SPSPx_SetNumberInterByContact" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = static_cast< int >(val1);
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      SPSPx_SetNumberInterByContact(arg1);
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SPSPx_SetContactRadius(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  double arg1 ;
  double val1 ;
  int ecode1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:SPSPx_SetContactRadius",&obj0)) SWIG_fail;
  ecode1 = SWIG_AsVal_double(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "SPSPx_SetContactRadius" "', argument " "1"" of type '" "double""'");
  } 
  arg1 = static_cast< double >(val1);
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      SPSPx_SetContactRadius(arg1);
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SPSPx_FdSelectProxTactors(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  
  if (!PyArg_ParseTuple(args,(char *)":SPSPx_FdSelectProxTactors")) SWIG_fail;
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      SPSPx_FdSelectProxTactors();
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SPSPx_CleanMemory(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  
  if (!PyArg_ParseTuple(args,(char *)":SPSPx_CleanMemory")) SWIG_fail;
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      SPSPx_CleanMemory();
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_inter_handler_3D_tgetNb(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  int arg1 ;
  int val1 ;
  int ecode1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:inter_handler_3D_tgetNb",&obj0)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "inter_handler_3D_tgetNb" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = static_cast< int >(val1);
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      result = (int)inter_handler_3D_tgetNb(arg1);
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_inter_handler_3D_tgetTactLawNb(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  int arg1 ;
  int arg2 ;
  int val1 ;
  int ecode1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:inter_handler_3D_tgetTactLawNb",&obj0,&obj1)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "inter_handler_3D_tgetTactLawNb" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = static_cast< int >(val1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "inter_handler_3D_tgetTactLawNb" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      result = (int)inter_handler_3D_tgetTactLawNb(arg1,arg2);
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_inter_handler_3D_tgetIdBodies(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  int arg1 ;
  int arg2 ;
  int **arg3 = (int **) 0 ;
  int *arg4 = (int *) 0 ;
  int val1 ;
  int ecode1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int *data_temp3 ;
  int dim_temp3 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  {
    arg3 = &data_temp3;
    arg4 = &dim_temp3;
  }
  if (!PyArg_ParseTuple(args,(char *)"OO:inter_handler_3D_tgetIdBodies",&obj0,&obj1)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "inter_handler_3D_tgetIdBodies" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = static_cast< int >(val1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "inter_handler_3D_tgetIdBodies" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      inter_handler_3D_tgetIdBodies(arg1,arg2,arg3,arg4);
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_Py_Void();
  {
    npy_intp dims[1] = {
      *arg4 
    };
    PyObject * obj = PyArray_SimpleNewFromData(1, dims, NPY_INT, (void*)(*arg3));
    if (!obj) SWIG_fail;
    PyArrayObject * array = (PyArrayObject*) obj;
    attach_fortran_memory_to_numpy_array(array, (void*)(*arg3), NPY_INT, dims[0], 0);
    PyArray_ENABLEFLAGS(array,NPY_ARRAY_WRITEABLE);
    
    resultobj = SWIG_Python_AppendOutput(resultobj, obj);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_inter_handler_3D_tgetIData(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  int arg1 ;
  int arg2 ;
  int **arg3 = (int **) 0 ;
  int *arg4 = (int *) 0 ;
  int val1 ;
  int ecode1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int *data_temp3 ;
  int dim_temp3 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  {
    arg3 = &data_temp3;
    arg4 = &dim_temp3;
  }
  if (!PyArg_ParseTuple(args,(char *)"OO:inter_handler_3D_tgetIData",&obj0,&obj1)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "inter_handler_3D_tgetIData" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = static_cast< int >(val1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "inter_handler_3D_tgetIData" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      inter_handler_3D_tgetIData(arg1,arg2,arg3,arg4);
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_Py_Void();
  {
    npy_intp dims[1] = {
      *arg4 
    };
    PyObject * obj = PyArray_SimpleNewFromData(1, dims, NPY_INT, (void*)(*arg3));
    if (!obj) SWIG_fail;
    PyArrayObject * array = (PyArrayObject*) obj;
    attach_fortran_memory_to_numpy_array(array, (void*)(*arg3), NPY_INT, dims[0], 0);
    PyArray_ENABLEFLAGS(array,NPY_ARRAY_WRITEABLE);
    
    resultobj = SWIG_Python_AppendOutput(resultobj, obj);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_inter_handler_3D_tgetRData(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  int arg1 ;
  int arg2 ;
  double **arg3 = (double **) 0 ;
  int *arg4 = (int *) 0 ;
  int val1 ;
  int ecode1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  double *data_temp3 ;
  int dim_temp3 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  {
    arg3 = &data_temp3;
    arg4 = &dim_temp3;
  }
  if (!PyArg_ParseTuple(args,(char *)"OO:inter_handler_3D_tgetRData",&obj0,&obj1)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "inter_handler_3D_tgetRData" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = static_cast< int >(val1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "inter_handler_3D_tgetRData" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      inter_handler_3D_tgetRData(arg1,arg2,arg3,arg4);
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_Py_Void();
  {
    npy_intp dims[1] = {
      *arg4 
    };
    PyObject * obj = PyArray_SimpleNewFromData(1, dims, NPY_DOUBLE, (void*)(*arg3));
    if (!obj) SWIG_fail;
    PyArrayObject * array = (PyArrayObject*) obj;
    attach_fortran_memory_to_numpy_array(array, (void*)(*arg3), NPY_DOUBLE, dims[0], 0);
    PyArray_ENABLEFLAGS(array,NPY_ARRAY_WRITEABLE);
    
    resultobj = SWIG_Python_AppendOutput(resultobj, obj);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_inter_handler_3D_tsetInternal__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  int arg1 ;
  int arg2 ;
  double *arg3 = (double *) NULL ;
  int arg4 = (int) 0 ;
  int arg5 = (int) 0 ;
  double arg6 = (double) 0. ;
  int val1 ;
  int ecode1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyArrayObject *array3 = NULL ;
  int is_new_object3 = 0 ;
  int val5 ;
  int ecode5 = 0 ;
  double val6 ;
  int ecode6 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO|OOO:inter_handler_3D_tsetInternal",&obj0,&obj1,&obj2,&obj3,&obj4)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "inter_handler_3D_tsetInternal" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = static_cast< int >(val1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "inter_handler_3D_tsetInternal" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  if (obj2) {
    {
      npy_intp size[1] = {
        -1 
      };
      array3 = obj_to_array_contiguous_allow_conversion(obj2,
        NPY_DOUBLE,
        &is_new_object3);
      if (!array3 || !require_dimensions(array3, 1) ||
        !require_size(array3, size, 1)) SWIG_fail;
      arg3 = (double*) array_data(array3);
      arg4 = (int) array_size(array3,0);
    }
  }
  if (obj3) {
    ecode5 = SWIG_AsVal_int(obj3, &val5);
    if (!SWIG_IsOK(ecode5)) {
      SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "inter_handler_3D_tsetInternal" "', argument " "5"" of type '" "int""'");
    } 
    arg5 = static_cast< int >(val5);
  }
  if (obj4) {
    ecode6 = SWIG_AsVal_double(obj4, &val6);
    if (!SWIG_IsOK(ecode6)) {
      SWIG_exception_fail(SWIG_ArgError(ecode6), "in method '" "inter_handler_3D_tsetInternal" "', argument " "6"" of type '" "double""'");
    } 
    arg6 = static_cast< double >(val6);
  }
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      inter_handler_3D_tsetInternal(arg1,arg2,arg3,arg4,arg5,arg6);
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_Py_Void();
  {
    if (is_new_object3 && array3)
    {
      Py_DECREF(array3); 
    }
  }
  return resultobj;
fail:
  {
    if (is_new_object3 && array3)
    {
      Py_DECREF(array3); 
    }
  }
  return NULL;
}


SWIGINTERN PyObject *_wrap_inter_handler_3D_tsetInternal(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[6] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 5) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if ((argc >= 2) && (argc <= 5)) {
    int _v;
    {
      int res = SWIG_AsVal_int(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        if (argc <= 2) {
          return _wrap_inter_handler_3D_tsetInternal__SWIG_1(self, args);
        }
        {
          _v = is_array(argv[2]) || PySequence_Check(argv[2]);
        }
        if (_v) {
          if (argc <= 3) {
            return _wrap_inter_handler_3D_tsetInternal__SWIG_1(self, args);
          }
          {
            int res = SWIG_AsVal_int(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            if (argc <= 4) {
              return _wrap_inter_handler_3D_tsetInternal__SWIG_1(self, args);
            }
            {
              int res = SWIG_AsVal_double(argv[4], NULL);
              _v = SWIG_CheckState(res);
            }
            if (_v) {
              return _wrap_inter_handler_3D_tsetInternal__SWIG_1(self, args);
            }
          }
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    {
      int res = SWIG_AsVal_int(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_double(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            return _wrap_inter_handler_3D_tsetInternal__SWIG_0(self, args);
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'inter_handler_3D_tsetInternal'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    wrap_tsetInternal_3D(int,int,int,double)\n"
    "    inter_handler_3D_tsetInternal(int,int,double *,int,int,double)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_inter_handler_3D_tgetInternal(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  int arg1 ;
  int arg2 ;
  double **arg3 = (double **) 0 ;
  int *arg4 = (int *) 0 ;
  int val1 ;
  int ecode1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  double *data_temp3 ;
  int dim_temp3 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  {
    arg3 = &data_temp3;
    arg4 = &dim_temp3;
  }
  if (!PyArg_ParseTuple(args,(char *)"OO:inter_handler_3D_tgetInternal",&obj0,&obj1)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "inter_handler_3D_tgetInternal" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = static_cast< int >(val1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "inter_handler_3D_tgetInternal" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      inter_handler_3D_tgetInternal(arg1,arg2,arg3,arg4);
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_Py_Void();
  {
    npy_intp dims[1] = {
      *arg4 
    };
    PyObject * obj = PyArray_SimpleNewFromData(1, dims, NPY_DOUBLE, (void*)(*arg3));
    if (!obj) SWIG_fail;
    PyArrayObject * array = (PyArrayObject*) obj;
    attach_fortran_memory_to_numpy_array(array, (void*)(*arg3), NPY_DOUBLE, dims[0], 0);
    PyArray_ENABLEFLAGS(array,NPY_ARRAY_WRITEABLE);
    
    resultobj = SWIG_Python_AppendOutput(resultobj, obj);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_inter_handler_3D_getNbRecup(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  int arg1 ;
  int val1 ;
  int ecode1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:inter_handler_3D_getNbRecup",&obj0)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "inter_handler_3D_getNbRecup" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = static_cast< int >(val1);
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      result = (int)inter_handler_3D_getNbRecup(arg1);
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_inter_handler_3D_getNb(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  int arg1 ;
  int val1 ;
  int ecode1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:inter_handler_3D_getNb",&obj0)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "inter_handler_3D_getNb" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = static_cast< int >(val1);
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      result = (int)inter_handler_3D_getNb(arg1);
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_inter_handler_3D_getAllTactLawNb(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  int arg1 ;
  int **arg2 = (int **) 0 ;
  int *arg3 = (int *) 0 ;
  int val1 ;
  int ecode1 = 0 ;
  int *data_temp2 ;
  int dim_temp2 ;
  PyObject * obj0 = 0 ;
  
  {
    arg2 = &data_temp2;
    arg3 = &dim_temp2;
  }
  if (!PyArg_ParseTuple(args,(char *)"O:inter_handler_3D_getAllTactLawNb",&obj0)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "inter_handler_3D_getAllTactLawNb" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = static_cast< int >(val1);
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      inter_handler_3D_getAllTactLawNb(arg1,arg2,arg3);
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_Py_Void();
  {
    npy_intp dims[1] = {
      *arg3 
    };
    PyObject * obj = PyArray_SimpleNewFromData(1, dims, NPY_INT, (void*)(*arg2));
    if (!obj) SWIG_fail;
    PyArrayObject * array = (PyArrayObject*) obj;
    attach_fortran_memory_to_numpy_array(array, (void*)(*arg2), NPY_INT, dims[0], 0);
    PyArray_ENABLEFLAGS(array,NPY_ARRAY_WRITEABLE);
    
    resultobj = SWIG_Python_AppendOutput(resultobj, obj);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_inter_handler_3D_getAll(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  int arg1 ;
  double **arg2 = (double **) 0 ;
  int *arg3 = (int *) 0 ;
  int *arg4 = (int *) 0 ;
  int val1 ;
  int ecode1 = 0 ;
  double *data_temp2 ;
  int dim1_temp2 ;
  int dim2_temp2 ;
  PyObject * obj0 = 0 ;
  
  {
    arg2 = &data_temp2;
    arg3 = &dim1_temp2;
    arg4 = &dim2_temp2;
  }
  if (!PyArg_ParseTuple(args,(char *)"O:inter_handler_3D_getAll",&obj0)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "inter_handler_3D_getAll" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = static_cast< int >(val1);
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      inter_handler_3D_getAll(arg1,arg2,arg3,arg4);
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_Py_Void();
  {
    npy_intp dims[2] = {
      *arg4, *arg3 
    };
    PyObject * obj = PyArray_SimpleNewFromData(2, dims, NPY_DOUBLE, (void*)(*arg2));
    if (!obj) SWIG_fail;
    PyArrayObject * array = (PyArrayObject*) obj;
    attach_fortran_memory_to_numpy_array(array, (void*)(*arg2), NPY_DOUBLE, dims[1], dims[0]);
    PyArray_ENABLEFLAGS(array,NPY_ARRAY_WRITEABLE);
    resultobj = SWIG_Python_AppendOutput(resultobj, obj);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_inter_handler_3D_getAllInternal(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  int arg1 ;
  double **arg2 = (double **) 0 ;
  int *arg3 = (int *) 0 ;
  int *arg4 = (int *) 0 ;
  int val1 ;
  int ecode1 = 0 ;
  double *data_temp2 ;
  int dim1_temp2 ;
  int dim2_temp2 ;
  PyObject * obj0 = 0 ;
  
  {
    arg2 = &data_temp2;
    arg3 = &dim1_temp2;
    arg4 = &dim2_temp2;
  }
  if (!PyArg_ParseTuple(args,(char *)"O:inter_handler_3D_getAllInternal",&obj0)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "inter_handler_3D_getAllInternal" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = static_cast< int >(val1);
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      inter_handler_3D_getAllInternal(arg1,arg2,arg3,arg4);
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_Py_Void();
  {
    npy_intp dims[2] = {
      *arg4, *arg3 
    };
    PyObject * obj = PyArray_SimpleNewFromData(2, dims, NPY_DOUBLE, (void*)(*arg2));
    if (!obj) SWIG_fail;
    PyArrayObject * array = (PyArrayObject*) obj;
    attach_fortran_memory_to_numpy_array(array, (void*)(*arg2), NPY_DOUBLE, dims[1], dims[0]);
    PyArray_ENABLEFLAGS(array,NPY_ARRAY_WRITEABLE);
    resultobj = SWIG_Python_AppendOutput(resultobj, obj);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_inter_handler_3D_getAllIdata(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  int arg1 ;
  int **arg2 = (int **) 0 ;
  int *arg3 = (int *) 0 ;
  int *arg4 = (int *) 0 ;
  int val1 ;
  int ecode1 = 0 ;
  int *data_temp2 ;
  int dim1_temp2 ;
  int dim2_temp2 ;
  PyObject * obj0 = 0 ;
  
  {
    arg2 = &data_temp2;
    arg3 = &dim1_temp2;
    arg4 = &dim2_temp2;
  }
  if (!PyArg_ParseTuple(args,(char *)"O:inter_handler_3D_getAllIdata",&obj0)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "inter_handler_3D_getAllIdata" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = static_cast< int >(val1);
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      inter_handler_3D_getAllIdata(arg1,arg2,arg3,arg4);
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_Py_Void();
  {
    npy_intp dims[2] = {
      *arg4, *arg3 
    };
    PyObject * obj = PyArray_SimpleNewFromData(2, dims, NPY_INT, (void*)(*arg2));
    if (!obj) SWIG_fail;
    PyArrayObject * array = (PyArrayObject*) obj;
    attach_fortran_memory_to_numpy_array(array, (void*)(*arg2), NPY_INT, dims[1], dims[0]);
    PyArray_ENABLEFLAGS(array,NPY_ARRAY_WRITEABLE);
    resultobj = SWIG_Python_AppendOutput(resultobj, obj);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_inter_handler_3D_getVerletAdjsz(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  int arg1 ;
  int arg2 ;
  int val1 ;
  int ecode1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:inter_handler_3D_getVerletAdjsz",&obj0,&obj1)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "inter_handler_3D_getVerletAdjsz" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = static_cast< int >(val1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "inter_handler_3D_getVerletAdjsz" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      result = (int)inter_handler_3D_getVerletAdjsz(arg1,arg2);
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_inter_handler_3D_getVerletIantac(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  int arg1 ;
  int arg2 ;
  int arg3 ;
  int val1 ;
  int ecode1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:inter_handler_3D_getVerletIantac",&obj0,&obj1,&obj2)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "inter_handler_3D_getVerletIantac" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = static_cast< int >(val1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "inter_handler_3D_getVerletIantac" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "inter_handler_3D_getVerletIantac" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      result = (int)inter_handler_3D_getVerletIantac(arg1,arg2,arg3);
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_inter_handler_3D_computeRnod(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  
  if (!PyArg_ParseTuple(args,(char *)":inter_handler_3D_computeRnod")) SWIG_fail;
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      inter_handler_3D_computeRnod();
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_inter_handler_3D_stockRloc(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  int arg1 ;
  int val1 ;
  int ecode1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:inter_handler_3D_stockRloc",&obj0)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "inter_handler_3D_stockRloc" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = static_cast< int >(val1);
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      inter_handler_3D_stockRloc(arg1);
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_inter_handler_3D_recupRloc(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  int arg1 ;
  int val1 ;
  int ecode1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:inter_handler_3D_recupRloc",&obj0)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "inter_handler_3D_recupRloc" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = static_cast< int >(val1);
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      inter_handler_3D_recupRloc(arg1);
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_inter_handler_3D_recupRlocByPos(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  int arg1 ;
  double arg2 ;
  int val1 ;
  int ecode1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:inter_handler_3D_recupRlocByPos",&obj0,&obj1)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "inter_handler_3D_recupRlocByPos" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = static_cast< int >(val1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "inter_handler_3D_recupRlocByPos" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      inter_handler_3D_recupRlocByPos(arg1,arg2);
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_cpg_ExIter(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  
  if (!PyArg_ParseTuple(args,(char *)":cpg_ExIter")) SWIG_fail;
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      cpg_ExIter();
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_cpg_AfterIterCheck(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  
  if (!PyArg_ParseTuple(args,(char *)":cpg_AfterIterCheck")) SWIG_fail;
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      cpg_AfterIterCheck();
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_cpg_ExPost(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  
  if (!PyArg_ParseTuple(args,(char *)":cpg_ExPost")) SWIG_fail;
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      cpg_ExPost();
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_cpg_ExPrep(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  
  if (!PyArg_ParseTuple(args,(char *)":cpg_ExPrep")) SWIG_fail;
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      cpg_ExPrep();
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_cpg_ScaleRloc(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  
  if (!PyArg_ParseTuple(args,(char *)":cpg_ScaleRloc")) SWIG_fail;
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      cpg_ScaleRloc();
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_cpg_SetDiagonalPrecond(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  
  if (!PyArg_ParseTuple(args,(char *)":cpg_SetDiagonalPrecond")) SWIG_fail;
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      cpg_SetDiagonalPrecond();
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_cpg_SetFrictionless(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  
  if (!PyArg_ParseTuple(args,(char *)":cpg_SetFrictionless")) SWIG_fail;
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      cpg_SetFrictionless();
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_cpg_SetNoConjugaison(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  
  if (!PyArg_ParseTuple(args,(char *)":cpg_SetNoConjugaison")) SWIG_fail;
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      cpg_SetNoConjugaison();
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_cpg_SetCheckType(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  char *arg1 = (char *) 0 ;
  double arg2 ;
  int res1 ;
  char *buf1 = 0 ;
  int alloc1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:cpg_SetCheckType",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_AsCharPtrAndSize(obj0, &buf1, NULL, &alloc1);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cpg_SetCheckType" "', argument " "1"" of type '" "char *""'");
  }
  arg1 = reinterpret_cast< char * >(buf1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "cpg_SetCheckType" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      cpg_SetCheckType(arg1,arg2);
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_Py_Void();
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  return resultobj;
fail:
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  return NULL;
}


SWIGINTERN PyObject *_wrap_cpg_NormCheck(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  
  if (!PyArg_ParseTuple(args,(char *)":cpg_NormCheck")) SWIG_fail;
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      cpg_NormCheck();
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_cpg_ExSolver(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  char *arg1 = (char *) 0 ;
  double arg2 ;
  int arg3 ;
  int arg4 ;
  int res1 ;
  char *buf1 = 0 ;
  int alloc1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:cpg_ExSolver",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_AsCharPtrAndSize(obj0, &buf1, NULL, &alloc1);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cpg_ExSolver" "', argument " "1"" of type '" "char *""'");
  }
  arg1 = reinterpret_cast< char * >(buf1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "cpg_ExSolver" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "cpg_ExSolver" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  ecode4 = SWIG_AsVal_int(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "cpg_ExSolver" "', argument " "4"" of type '" "int""'");
  } 
  arg4 = static_cast< int >(val4);
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      cpg_ExSolver(arg1,arg2,arg3,arg4);
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_Py_Void();
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  return resultobj;
fail:
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  return NULL;
}


SWIGINTERN PyObject *_wrap_cpg_3D_ExIter(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  
  if (!PyArg_ParseTuple(args,(char *)":cpg_3D_ExIter")) SWIG_fail;
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      cpg_3D_ExIter();
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_cpg_3D_AfterIterCheck(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  
  if (!PyArg_ParseTuple(args,(char *)":cpg_3D_AfterIterCheck")) SWIG_fail;
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      cpg_3D_AfterIterCheck();
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_cpg_3D_ExPost(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  
  if (!PyArg_ParseTuple(args,(char *)":cpg_3D_ExPost")) SWIG_fail;
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      cpg_3D_ExPost();
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_cpg_3D_ExPrep(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  
  if (!PyArg_ParseTuple(args,(char *)":cpg_3D_ExPrep")) SWIG_fail;
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      cpg_3D_ExPrep();
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_cpg_3D_ScaleRloc(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  
  if (!PyArg_ParseTuple(args,(char *)":cpg_3D_ScaleRloc")) SWIG_fail;
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      cpg_3D_ScaleRloc();
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_cpg_3D_SetDiagonalPrecond(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  
  if (!PyArg_ParseTuple(args,(char *)":cpg_3D_SetDiagonalPrecond")) SWIG_fail;
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      cpg_3D_SetDiagonalPrecond();
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_cpg_3D_SetFrictionless(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  
  if (!PyArg_ParseTuple(args,(char *)":cpg_3D_SetFrictionless")) SWIG_fail;
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      cpg_3D_SetFrictionless();
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_cpg_3D_BimodalContactOrder(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  
  if (!PyArg_ParseTuple(args,(char *)":cpg_3D_BimodalContactOrder")) SWIG_fail;
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      cpg_3D_BimodalContactOrder();
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_cpg_3D_SetCheckType(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  char *arg1 = (char *) 0 ;
  double arg2 ;
  int arg3 ;
  int res1 ;
  char *buf1 = 0 ;
  int alloc1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:cpg_3D_SetCheckType",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_AsCharPtrAndSize(obj0, &buf1, NULL, &alloc1);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cpg_3D_SetCheckType" "', argument " "1"" of type '" "char *""'");
  }
  arg1 = reinterpret_cast< char * >(buf1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "cpg_3D_SetCheckType" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "cpg_3D_SetCheckType" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      cpg_3D_SetCheckType(arg1,arg2,arg3);
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_Py_Void();
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  return resultobj;
fail:
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  return NULL;
}


SWIGINTERN PyObject *_wrap_cpg_3D_NormCheck(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  
  if (!PyArg_ParseTuple(args,(char *)":cpg_3D_NormCheck")) SWIG_fail;
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      cpg_3D_NormCheck();
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_cpg_3D_ExSolver(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  char *arg1 = (char *) 0 ;
  double arg2 ;
  int arg3 ;
  int arg4 ;
  int arg5 ;
  int res1 ;
  char *buf1 = 0 ;
  int alloc1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  int val5 ;
  int ecode5 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOO:cpg_3D_ExSolver",&obj0,&obj1,&obj2,&obj3,&obj4)) SWIG_fail;
  res1 = SWIG_AsCharPtrAndSize(obj0, &buf1, NULL, &alloc1);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cpg_3D_ExSolver" "', argument " "1"" of type '" "char *""'");
  }
  arg1 = reinterpret_cast< char * >(buf1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "cpg_3D_ExSolver" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "cpg_3D_ExSolver" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  ecode4 = SWIG_AsVal_int(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "cpg_3D_ExSolver" "', argument " "4"" of type '" "int""'");
  } 
  arg4 = static_cast< int >(val4);
  ecode5 = SWIG_AsVal_int(obj4, &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "cpg_3D_ExSolver" "', argument " "5"" of type '" "int""'");
  } 
  arg5 = static_cast< int >(val5);
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      cpg_3D_ExSolver(arg1,arg2,arg3,arg4,arg5);
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_Py_Void();
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  return resultobj;
fail:
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  return NULL;
}


SWIGINTERN PyObject *_wrap_mp_solver_ReadMpBehaviour(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  
  if (!PyArg_ParseTuple(args,(char *)":mp_solver_ReadMpBehaviour")) SWIG_fail;
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      mp_solver_ReadMpBehaviour();
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_mp_solver_WriteMpBehaviour(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  
  if (!PyArg_ParseTuple(args,(char *)":mp_solver_WriteMpBehaviour")) SWIG_fail;
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      mp_solver_WriteMpBehaviour();
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_mp_solver_ReadIniMpValues(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  int arg1 = (int) 0 ;
  int val1 ;
  int ecode1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"|O:mp_solver_ReadIniMpValues",&obj0)) SWIG_fail;
  if (obj0) {
    ecode1 = SWIG_AsVal_int(obj0, &val1);
    if (!SWIG_IsOK(ecode1)) {
      SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "mp_solver_ReadIniMpValues" "', argument " "1"" of type '" "int""'");
    } 
    arg1 = static_cast< int >(val1);
  }
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      mp_solver_ReadIniMpValues(arg1);
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_mp_solver_WriteOutMpValues(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  
  if (!PyArg_ParseTuple(args,(char *)":mp_solver_WriteOutMpValues")) SWIG_fail;
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      mp_solver_WriteOutMpValues();
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_mp_solver_WriteLastMpValues(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  
  if (!PyArg_ParseTuple(args,(char *)":mp_solver_WriteLastMpValues")) SWIG_fail;
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      mp_solver_WriteLastMpValues();
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_mp_solver_SolveElectro1G(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  
  if (!PyArg_ParseTuple(args,(char *)":mp_solver_SolveElectro1G")) SWIG_fail;
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      mp_solver_SolveElectro1G();
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_mp_solver_SolveNlElectro1G(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  
  if (!PyArg_ParseTuple(args,(char *)":mp_solver_SolveNlElectro1G")) SWIG_fail;
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      mp_solver_SolveNlElectro1G();
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_mp_solver_SolveThermoProblem(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  
  if (!PyArg_ParseTuple(args,(char *)":mp_solver_SolveThermoProblem")) SWIG_fail;
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      mp_solver_SolveThermoProblem();
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_mp_solver_UpdateThermoProblem(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  
  if (!PyArg_ParseTuple(args,(char *)":mp_solver_UpdateThermoProblem")) SWIG_fail;
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      mp_solver_UpdateThermoProblem();
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_mp_solver_RecupTemperature(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  
  if (!PyArg_ParseTuple(args,(char *)":mp_solver_RecupTemperature")) SWIG_fail;
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      mp_solver_RecupTemperature();
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_mp_solver_RecupPotential(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  
  if (!PyArg_ParseTuple(args,(char *)":mp_solver_RecupPotential")) SWIG_fail;
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      mp_solver_RecupPotential();
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_mp_solver_UpdateConductivity(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  
  if (!PyArg_ParseTuple(args,(char *)":mp_solver_UpdateConductivity")) SWIG_fail;
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      mp_solver_UpdateConductivity();
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_mp_solver_InitThermalConductivity(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  
  if (!PyArg_ParseTuple(args,(char *)":mp_solver_InitThermalConductivity")) SWIG_fail;
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      mp_solver_InitThermalConductivity();
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_mp_solver_GetBrancheValues(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  char *arg1 = (char *) 0 ;
  int arg2 ;
  double **arg3 = (double **) 0 ;
  int *arg4 = (int *) 0 ;
  int res1 ;
  char *buf1 = 0 ;
  int alloc1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  double *data_temp3 ;
  int dim_temp3 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  {
    arg3 = &data_temp3;
    arg4 = &dim_temp3;
  }
  if (!PyArg_ParseTuple(args,(char *)"OO:mp_solver_GetBrancheValues",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_AsCharPtrAndSize(obj0, &buf1, NULL, &alloc1);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "mp_solver_GetBrancheValues" "', argument " "1"" of type '" "char *""'");
  }
  arg1 = reinterpret_cast< char * >(buf1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "mp_solver_GetBrancheValues" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      mp_solver_GetBrancheValues(arg1,arg2,arg3,arg4);
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_Py_Void();
  {
    npy_intp dims[1] = {
      *arg4 
    };
    PyObject * obj = PyArray_SimpleNewFromData(1, dims, NPY_DOUBLE, (void*)(*arg3));
    if (!obj) SWIG_fail;
    PyArrayObject * array = (PyArrayObject*) obj;
    attach_fortran_memory_to_numpy_array(array, (void*)(*arg3), NPY_DOUBLE, dims[0], 0);
    PyArray_ENABLEFLAGS(array,NPY_ARRAY_WRITEABLE);
    
    resultobj = SWIG_Python_AppendOutput(resultobj, obj);
  }
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  return resultobj;
fail:
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  return NULL;
}


SWIGINTERN PyObject *_wrap_mp_solver_PutHeatGenerationFactor(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  double arg1 ;
  double val1 ;
  int ecode1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:mp_solver_PutHeatGenerationFactor",&obj0)) SWIG_fail;
  ecode1 = SWIG_AsVal_double(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "mp_solver_PutHeatGenerationFactor" "', argument " "1"" of type '" "double""'");
  } 
  arg1 = static_cast< double >(val1);
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      mp_solver_PutHeatGenerationFactor(arg1);
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_mp_solver_PutHeatConductionContinueFactor(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  double arg1 ;
  double val1 ;
  int ecode1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:mp_solver_PutHeatConductionContinueFactor",&obj0)) SWIG_fail;
  ecode1 = SWIG_AsVal_double(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "mp_solver_PutHeatConductionContinueFactor" "', argument " "1"" of type '" "double""'");
  } 
  arg1 = static_cast< double >(val1);
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      mp_solver_PutHeatConductionContinueFactor(arg1);
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_mp_solver_3D_ReadMpBehaviour(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  
  if (!PyArg_ParseTuple(args,(char *)":mp_solver_3D_ReadMpBehaviour")) SWIG_fail;
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      mp_solver_3D_ReadMpBehaviour();
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_mp_solver_3D_WriteMpBehaviour(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  
  if (!PyArg_ParseTuple(args,(char *)":mp_solver_3D_WriteMpBehaviour")) SWIG_fail;
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      mp_solver_3D_WriteMpBehaviour();
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_mp_solver_3D_ReadIniMpValues(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  int arg1 = (int) 0 ;
  int val1 ;
  int ecode1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"|O:mp_solver_3D_ReadIniMpValues",&obj0)) SWIG_fail;
  if (obj0) {
    ecode1 = SWIG_AsVal_int(obj0, &val1);
    if (!SWIG_IsOK(ecode1)) {
      SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "mp_solver_3D_ReadIniMpValues" "', argument " "1"" of type '" "int""'");
    } 
    arg1 = static_cast< int >(val1);
  }
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      mp_solver_3D_ReadIniMpValues(arg1);
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_mp_solver_3D_WriteOutMpValues(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  
  if (!PyArg_ParseTuple(args,(char *)":mp_solver_3D_WriteOutMpValues")) SWIG_fail;
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      mp_solver_3D_WriteOutMpValues();
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_mp_solver_3D_WriteLastMpValues(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  
  if (!PyArg_ParseTuple(args,(char *)":mp_solver_3D_WriteLastMpValues")) SWIG_fail;
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      mp_solver_3D_WriteLastMpValues();
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_mp_solver_3D_SolveElectro1G(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  
  if (!PyArg_ParseTuple(args,(char *)":mp_solver_3D_SolveElectro1G")) SWIG_fail;
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      mp_solver_3D_SolveElectro1G();
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_mp_solver_3D_SolveNlElectro1G(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  
  if (!PyArg_ParseTuple(args,(char *)":mp_solver_3D_SolveNlElectro1G")) SWIG_fail;
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      mp_solver_3D_SolveNlElectro1G();
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_mp_solver_3D_SolveThermoProblem(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  
  if (!PyArg_ParseTuple(args,(char *)":mp_solver_3D_SolveThermoProblem")) SWIG_fail;
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      mp_solver_3D_SolveThermoProblem();
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_mp_solver_3D_UpdateThermoProblem(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  
  if (!PyArg_ParseTuple(args,(char *)":mp_solver_3D_UpdateThermoProblem")) SWIG_fail;
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      mp_solver_3D_UpdateThermoProblem();
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_mp_solver_3D_RecupTemperature(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  
  if (!PyArg_ParseTuple(args,(char *)":mp_solver_3D_RecupTemperature")) SWIG_fail;
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      mp_solver_3D_RecupTemperature();
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_mp_solver_3D_RecupPotential(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  
  if (!PyArg_ParseTuple(args,(char *)":mp_solver_3D_RecupPotential")) SWIG_fail;
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      mp_solver_3D_RecupPotential();
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_mp_solver_3D_UpdateConductivity(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  
  if (!PyArg_ParseTuple(args,(char *)":mp_solver_3D_UpdateConductivity")) SWIG_fail;
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      mp_solver_3D_UpdateConductivity();
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_nlgs_ExPrep(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  char *arg1 = (char *) 0 ;
  int res1 ;
  char *buf1 = 0 ;
  int alloc1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:nlgs_ExPrep",&obj0)) SWIG_fail;
  res1 = SWIG_AsCharPtrAndSize(obj0, &buf1, NULL, &alloc1);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "nlgs_ExPrep" "', argument " "1"" of type '" "char *""'");
  }
  arg1 = reinterpret_cast< char * >(buf1);
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      nlgs_ExPrep(arg1);
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_Py_Void();
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  return resultobj;
fail:
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  return NULL;
}


SWIGINTERN PyObject *_wrap_nlgs_ExIter(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  int arg1 ;
  int val1 ;
  int ecode1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:nlgs_ExIter",&obj0)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "nlgs_ExIter" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = static_cast< int >(val1);
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      nlgs_ExIter(arg1);
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_nlgs_ExPost(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  
  if (!PyArg_ParseTuple(args,(char *)":nlgs_ExPost")) SWIG_fail;
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      nlgs_ExPost();
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_nlgs_AfterIterCheck(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)":nlgs_AfterIterCheck")) SWIG_fail;
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      result = (int)nlgs_AfterIterCheck();
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_nlgs_DisplayAfterIterCheck(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  
  if (!PyArg_ParseTuple(args,(char *)":nlgs_DisplayAfterIterCheck")) SWIG_fail;
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      nlgs_DisplayAfterIterCheck();
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_nlgs_NormCheck(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  
  if (!PyArg_ParseTuple(args,(char *)":nlgs_NormCheck")) SWIG_fail;
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      nlgs_NormCheck();
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_nlgs_UpdateTactBehav(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  
  if (!PyArg_ParseTuple(args,(char *)":nlgs_UpdateTactBehav")) SWIG_fail;
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      nlgs_UpdateTactBehav();
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_nlgs_SetCheckType(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  char *arg1 = (char *) 0 ;
  double arg2 ;
  double arg3 ;
  int res1 ;
  char *buf1 = 0 ;
  int alloc1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:nlgs_SetCheckType",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_AsCharPtrAndSize(obj0, &buf1, NULL, &alloc1);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "nlgs_SetCheckType" "', argument " "1"" of type '" "char *""'");
  }
  arg1 = reinterpret_cast< char * >(buf1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "nlgs_SetCheckType" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  ecode3 = SWIG_AsVal_double(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "nlgs_SetCheckType" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast< double >(val3);
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      nlgs_SetCheckType(arg1,arg2,arg3);
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_Py_Void();
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  return resultobj;
fail:
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  return NULL;
}


SWIGINTERN PyObject *_wrap_nlgs_ScrambleContactOrder(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  
  if (!PyArg_ParseTuple(args,(char *)":nlgs_ScrambleContactOrder")) SWIG_fail;
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      nlgs_ScrambleContactOrder();
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_nlgs_QuickScrambleContactOrder(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  
  if (!PyArg_ParseTuple(args,(char *)":nlgs_QuickScrambleContactOrder")) SWIG_fail;
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      nlgs_QuickScrambleContactOrder();
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_nlgs_SetWithQuickScramble(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  
  if (!PyArg_ParseTuple(args,(char *)":nlgs_SetWithQuickScramble")) SWIG_fail;
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      nlgs_SetWithQuickScramble();
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_nlgs_ReverseContactOrder(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  
  if (!PyArg_ParseTuple(args,(char *)":nlgs_ReverseContactOrder")) SWIG_fail;
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      nlgs_ReverseContactOrder();
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_nlgs_BimodalContactOrder(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  
  if (!PyArg_ParseTuple(args,(char *)":nlgs_BimodalContactOrder")) SWIG_fail;
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      nlgs_BimodalContactOrder();
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_nlgs_ScaleRloc(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  
  if (!PyArg_ParseTuple(args,(char *)":nlgs_ScaleRloc")) SWIG_fail;
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      nlgs_ScaleRloc();
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_nlgs_ComputeRnod(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  
  if (!PyArg_ParseTuple(args,(char *)":nlgs_ComputeRnod")) SWIG_fail;
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      nlgs_ComputeRnod();
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_nlgs_DisplayRlocNSum(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  
  if (!PyArg_ParseTuple(args,(char *)":nlgs_DisplayRlocNSum")) SWIG_fail;
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      nlgs_DisplayRlocNSum();
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_nlgs_ExSolver(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  char *arg1 = (char *) 0 ;
  char *arg2 = (char *) 0 ;
  double arg3 ;
  double arg4 ;
  int arg5 ;
  int arg6 ;
  int res1 ;
  char *buf1 = 0 ;
  int alloc1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  double val4 ;
  int ecode4 = 0 ;
  int val5 ;
  int ecode5 = 0 ;
  int val6 ;
  int ecode6 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  PyObject * obj5 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOOO:nlgs_ExSolver",&obj0,&obj1,&obj2,&obj3,&obj4,&obj5)) SWIG_fail;
  res1 = SWIG_AsCharPtrAndSize(obj0, &buf1, NULL, &alloc1);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "nlgs_ExSolver" "', argument " "1"" of type '" "char *""'");
  }
  arg1 = reinterpret_cast< char * >(buf1);
  res2 = SWIG_AsCharPtrAndSize(obj1, &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "nlgs_ExSolver" "', argument " "2"" of type '" "char *""'");
  }
  arg2 = reinterpret_cast< char * >(buf2);
  ecode3 = SWIG_AsVal_double(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "nlgs_ExSolver" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast< double >(val3);
  ecode4 = SWIG_AsVal_double(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "nlgs_ExSolver" "', argument " "4"" of type '" "double""'");
  } 
  arg4 = static_cast< double >(val4);
  ecode5 = SWIG_AsVal_int(obj4, &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "nlgs_ExSolver" "', argument " "5"" of type '" "int""'");
  } 
  arg5 = static_cast< int >(val5);
  ecode6 = SWIG_AsVal_int(obj5, &val6);
  if (!SWIG_IsOK(ecode6)) {
    SWIG_exception_fail(SWIG_ArgError(ecode6), "in method '" "nlgs_ExSolver" "', argument " "6"" of type '" "int""'");
  } 
  arg6 = static_cast< int >(val6);
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      nlgs_ExSolver(arg1,arg2,arg3,arg4,arg5,arg6);
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_Py_Void();
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return resultobj;
fail:
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_nlgs_UpdateCohesiveBehav(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  
  if (!PyArg_ParseTuple(args,(char *)":nlgs_UpdateCohesiveBehav")) SWIG_fail;
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      nlgs_UpdateCohesiveBehav();
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_nlgs_UpdateFrictionalBehav(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  
  if (!PyArg_ParseTuple(args,(char *)":nlgs_UpdateFrictionalBehav")) SWIG_fail;
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      nlgs_UpdateFrictionalBehav();
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_nlgs_GetAllThis(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  double **arg1 = (double **) 0 ;
  int *arg2 = (int *) 0 ;
  int *arg3 = (int *) 0 ;
  double *data_temp1 ;
  int dim1_temp1 ;
  int dim2_temp1 ;
  
  {
    arg1 = &data_temp1;
    arg2 = &dim1_temp1;
    arg3 = &dim2_temp1;
  }
  if (!PyArg_ParseTuple(args,(char *)":nlgs_GetAllThis")) SWIG_fail;
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      nlgs_GetAllThis(arg1,arg2,arg3);
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_Py_Void();
  {
    npy_intp dims[2] = {
      *arg3, *arg2 
    };
    PyObject * obj = PyArray_SimpleNewFromData(2, dims, NPY_DOUBLE, (void*)(*arg1));
    if (!obj) SWIG_fail;
    PyArrayObject * array = (PyArrayObject*) obj;
    attach_fortran_memory_to_numpy_array(array, (void*)(*arg1), NPY_DOUBLE, dims[1], dims[0]);
    PyArray_ENABLEFLAGS(array,NPY_ARRAY_WRITEABLE);
    resultobj = SWIG_Python_AppendOutput(resultobj, obj);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_nlgs_UseJacobiSolver(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  bool arg1 ;
  bool val1 ;
  int ecode1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:nlgs_UseJacobiSolver",&obj0)) SWIG_fail;
  ecode1 = SWIG_AsVal_bool(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "nlgs_UseJacobiSolver" "', argument " "1"" of type '" "bool""'");
  } 
  arg1 = static_cast< bool >(val1);
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      nlgs_UseJacobiSolver(arg1);
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_nlgs_UseRegularization(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  double arg1 = (double) 1e14 ;
  double arg2 = (double) 1e14 ;
  double val1 ;
  int ecode1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"|OO:nlgs_UseRegularization",&obj0,&obj1)) SWIG_fail;
  if (obj0) {
    ecode1 = SWIG_AsVal_double(obj0, &val1);
    if (!SWIG_IsOK(ecode1)) {
      SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "nlgs_UseRegularization" "', argument " "1"" of type '" "double""'");
    } 
    arg1 = static_cast< double >(val1);
  }
  if (obj1) {
    ecode2 = SWIG_AsVal_double(obj1, &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "nlgs_UseRegularization" "', argument " "2"" of type '" "double""'");
    } 
    arg2 = static_cast< double >(val2);
  }
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      nlgs_UseRegularization(arg1,arg2);
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_nlgs_SetTemporaryVariable(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  int arg1 ;
  int arg2 ;
  double arg3 ;
  int val1 ;
  int ecode1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:nlgs_SetTemporaryVariable",&obj0,&obj1,&obj2)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "nlgs_SetTemporaryVariable" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = static_cast< int >(val1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "nlgs_SetTemporaryVariable" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_double(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "nlgs_SetTemporaryVariable" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast< double >(val3);
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      nlgs_SetTemporaryVariable(arg1,arg2,arg3);
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_nlgs_GetTemporaryVariable(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  int arg1 ;
  int arg2 ;
  int val1 ;
  int ecode1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:nlgs_GetTemporaryVariable",&obj0,&obj1)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "nlgs_GetTemporaryVariable" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = static_cast< int >(val1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "nlgs_GetTemporaryVariable" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      result = (double)nlgs_GetTemporaryVariable(arg1,arg2);
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_nlgs_IsInitialized(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  int arg1 = (int) 1 ;
  int val1 ;
  int ecode1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"|O:nlgs_IsInitialized",&obj0)) SWIG_fail;
  if (obj0) {
    ecode1 = SWIG_AsVal_int(obj0, &val1);
    if (!SWIG_IsOK(ecode1)) {
      SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "nlgs_IsInitialized" "', argument " "1"" of type '" "int""'");
    } 
    arg1 = static_cast< int >(val1);
  }
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      nlgs_IsInitialized(arg1);
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_nlgs_3D_ExIter(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  int arg1 ;
  int val1 ;
  int ecode1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:nlgs_3D_ExIter",&obj0)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "nlgs_3D_ExIter" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = static_cast< int >(val1);
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      nlgs_3D_ExIter(arg1);
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_nlgs_3D_ExIterJacobi(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  int arg1 ;
  int val1 ;
  int ecode1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:nlgs_3D_ExIterJacobi",&obj0)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "nlgs_3D_ExIterJacobi" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = static_cast< int >(val1);
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      nlgs_3D_ExIterJacobi(arg1);
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_nlgs_3D_AfterIterCheck(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)":nlgs_3D_AfterIterCheck")) SWIG_fail;
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      result = (int)nlgs_3D_AfterIterCheck();
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_nlgs_3D_AfterIterCheckJacobi(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)":nlgs_3D_AfterIterCheckJacobi")) SWIG_fail;
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      result = (int)nlgs_3D_AfterIterCheckJacobi();
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_nlgs_3D_ScrambleContactOrder(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  
  if (!PyArg_ParseTuple(args,(char *)":nlgs_3D_ScrambleContactOrder")) SWIG_fail;
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      nlgs_3D_ScrambleContactOrder();
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_nlgs_3D_QuickScrambleContactOrder(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  
  if (!PyArg_ParseTuple(args,(char *)":nlgs_3D_QuickScrambleContactOrder")) SWIG_fail;
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      nlgs_3D_QuickScrambleContactOrder();
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_nlgs_3D_ReverseContactOrder(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  
  if (!PyArg_ParseTuple(args,(char *)":nlgs_3D_ReverseContactOrder")) SWIG_fail;
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      nlgs_3D_ReverseContactOrder();
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_nlgs_3D_DisplayAfterIterCheck(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  
  if (!PyArg_ParseTuple(args,(char *)":nlgs_3D_DisplayAfterIterCheck")) SWIG_fail;
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      nlgs_3D_DisplayAfterIterCheck();
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_nlgs_3D_ScaleRloc(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  
  if (!PyArg_ParseTuple(args,(char *)":nlgs_3D_ScaleRloc")) SWIG_fail;
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      nlgs_3D_ScaleRloc();
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_nlgs_3D_ComputeRnod(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  
  if (!PyArg_ParseTuple(args,(char *)":nlgs_3D_ComputeRnod")) SWIG_fail;
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      nlgs_3D_ComputeRnod();
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_nlgs_3D_ExPost(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  
  if (!PyArg_ParseTuple(args,(char *)":nlgs_3D_ExPost")) SWIG_fail;
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      nlgs_3D_ExPost();
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_nlgs_3D_ExPostJacobi(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  
  if (!PyArg_ParseTuple(args,(char *)":nlgs_3D_ExPostJacobi")) SWIG_fail;
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      nlgs_3D_ExPostJacobi();
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_nlgs_3D_SetCheckType(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  char *arg1 = (char *) 0 ;
  double arg2 ;
  double arg3 ;
  int res1 ;
  char *buf1 = 0 ;
  int alloc1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:nlgs_3D_SetCheckType",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_AsCharPtrAndSize(obj0, &buf1, NULL, &alloc1);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "nlgs_3D_SetCheckType" "', argument " "1"" of type '" "char *""'");
  }
  arg1 = reinterpret_cast< char * >(buf1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "nlgs_3D_SetCheckType" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  ecode3 = SWIG_AsVal_double(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "nlgs_3D_SetCheckType" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast< double >(val3);
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      nlgs_3D_SetCheckType(arg1,arg2,arg3);
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_Py_Void();
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  return resultobj;
fail:
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  return NULL;
}


SWIGINTERN PyObject *_wrap_nlgs_3D_ExPrep(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  char *arg1 = (char *) 0 ;
  int res1 ;
  char *buf1 = 0 ;
  int alloc1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:nlgs_3D_ExPrep",&obj0)) SWIG_fail;
  res1 = SWIG_AsCharPtrAndSize(obj0, &buf1, NULL, &alloc1);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "nlgs_3D_ExPrep" "', argument " "1"" of type '" "char *""'");
  }
  arg1 = reinterpret_cast< char * >(buf1);
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      nlgs_3D_ExPrep(arg1);
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_Py_Void();
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  return resultobj;
fail:
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  return NULL;
}


SWIGINTERN PyObject *_wrap_nlgs_3D_WriteNormCheck(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  
  if (!PyArg_ParseTuple(args,(char *)":nlgs_3D_WriteNormCheck")) SWIG_fail;
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      nlgs_3D_WriteNormCheck();
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_nlgs_3D_DiagonalResolution(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  
  if (!PyArg_ParseTuple(args,(char *)":nlgs_3D_DiagonalResolution")) SWIG_fail;
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      nlgs_3D_DiagonalResolution();
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_nlgs_3D_SetWithQuickScramble(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  
  if (!PyArg_ParseTuple(args,(char *)":nlgs_3D_SetWithQuickScramble")) SWIG_fail;
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      nlgs_3D_SetWithQuickScramble();
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_nlgs_3D_SetWithReverseContactOrder(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  
  if (!PyArg_ParseTuple(args,(char *)":nlgs_3D_SetWithReverseContactOrder")) SWIG_fail;
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      nlgs_3D_SetWithReverseContactOrder();
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_nlgs_3D_UseJacobiSolver(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  bool arg1 ;
  bool val1 ;
  int ecode1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:nlgs_3D_UseJacobiSolver",&obj0)) SWIG_fail;
  ecode1 = SWIG_AsVal_bool(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "nlgs_3D_UseJacobiSolver" "', argument " "1"" of type '" "bool""'");
  } 
  arg1 = static_cast< bool >(val1);
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      nlgs_3D_UseJacobiSolver(arg1);
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_nlgs_3D_ExSolver(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  char *arg1 = (char *) 0 ;
  char *arg2 = (char *) 0 ;
  double arg3 ;
  double arg4 ;
  int arg5 ;
  int arg6 ;
  int res1 ;
  char *buf1 = 0 ;
  int alloc1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  double val4 ;
  int ecode4 = 0 ;
  int val5 ;
  int ecode5 = 0 ;
  int val6 ;
  int ecode6 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  PyObject * obj5 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOOO:nlgs_3D_ExSolver",&obj0,&obj1,&obj2,&obj3,&obj4,&obj5)) SWIG_fail;
  res1 = SWIG_AsCharPtrAndSize(obj0, &buf1, NULL, &alloc1);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "nlgs_3D_ExSolver" "', argument " "1"" of type '" "char *""'");
  }
  arg1 = reinterpret_cast< char * >(buf1);
  res2 = SWIG_AsCharPtrAndSize(obj1, &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "nlgs_3D_ExSolver" "', argument " "2"" of type '" "char *""'");
  }
  arg2 = reinterpret_cast< char * >(buf2);
  ecode3 = SWIG_AsVal_double(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "nlgs_3D_ExSolver" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast< double >(val3);
  ecode4 = SWIG_AsVal_double(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "nlgs_3D_ExSolver" "', argument " "4"" of type '" "double""'");
  } 
  arg4 = static_cast< double >(val4);
  ecode5 = SWIG_AsVal_int(obj4, &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "nlgs_3D_ExSolver" "', argument " "5"" of type '" "int""'");
  } 
  arg5 = static_cast< int >(val5);
  ecode6 = SWIG_AsVal_int(obj5, &val6);
  if (!SWIG_IsOK(ecode6)) {
    SWIG_exception_fail(SWIG_ArgError(ecode6), "in method '" "nlgs_3D_ExSolver" "', argument " "6"" of type '" "int""'");
  } 
  arg6 = static_cast< int >(val6);
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      nlgs_3D_ExSolver(arg1,arg2,arg3,arg4,arg5,arg6);
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_Py_Void();
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return resultobj;
fail:
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_nlgs_3D_UpdateTactBehav(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  
  if (!PyArg_ParseTuple(args,(char *)":nlgs_3D_UpdateTactBehav")) SWIG_fail;
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      nlgs_3D_UpdateTactBehav();
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_nlgs_3D_IsInitialized(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  int arg1 = (int) 1 ;
  int val1 ;
  int ecode1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"|O:nlgs_3D_IsInitialized",&obj0)) SWIG_fail;
  if (obj0) {
    ecode1 = SWIG_AsVal_int(obj0, &val1);
    if (!SWIG_IsOK(ecode1)) {
      SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "nlgs_3D_IsInitialized" "', argument " "1"" of type '" "int""'");
    } 
    arg1 = static_cast< int >(val1);
  }
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      nlgs_3D_IsInitialized(arg1);
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_nlgs_3D_DisplayTacInfo(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  int arg1 ;
  int val1 ;
  int ecode1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:nlgs_3D_DisplayTacInfo",&obj0)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "nlgs_3D_DisplayTacInfo" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = static_cast< int >(val1);
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      nlgs_3D_DisplayTacInfo(arg1);
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_nlgs_3D_UseRegularization(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  double arg1 = (double) 1e14 ;
  double arg2 = (double) 1e14 ;
  double val1 ;
  int ecode1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"|OO:nlgs_3D_UseRegularization",&obj0,&obj1)) SWIG_fail;
  if (obj0) {
    ecode1 = SWIG_AsVal_double(obj0, &val1);
    if (!SWIG_IsOK(ecode1)) {
      SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "nlgs_3D_UseRegularization" "', argument " "1"" of type '" "double""'");
    } 
    arg1 = static_cast< double >(val1);
  }
  if (obj1) {
    ecode2 = SWIG_AsVal_double(obj1, &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "nlgs_3D_UseRegularization" "', argument " "2"" of type '" "double""'");
    } 
    arg2 = static_cast< double >(val2);
  }
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      nlgs_3D_UseRegularization(arg1,arg2);
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_nlgs_3D_CutOpenCZM(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  double arg1 = (double) 1e-06 ;
  double val1 ;
  int ecode1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"|O:nlgs_3D_CutOpenCZM",&obj0)) SWIG_fail;
  if (obj0) {
    ecode1 = SWIG_AsVal_double(obj0, &val1);
    if (!SWIG_IsOK(ecode1)) {
      SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "nlgs_3D_CutOpenCZM" "', argument " "1"" of type '" "double""'");
    } 
    arg1 = static_cast< double >(val1);
  }
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      nlgs_3D_CutOpenCZM(arg1);
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_nlgs_3D_ManageInterpenetratedCZM(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  
  if (!PyArg_ParseTuple(args,(char *)":nlgs_3D_ManageInterpenetratedCZM")) SWIG_fail;
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      nlgs_3D_ManageInterpenetratedCZM();
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_gts_Initialize(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  
  if (!PyArg_ParseTuple(args,(char *)":gts_Initialize")) SWIG_fail;
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      gts_Initialize();
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_gts_AssembleSystem(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  
  if (!PyArg_ParseTuple(args,(char *)":gts_AssembleSystem")) SWIG_fail;
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      gts_AssembleSystem();
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_gts_PrepSystem(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  
  if (!PyArg_ParseTuple(args,(char *)":gts_PrepSystem")) SWIG_fail;
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      gts_PrepSystem();
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_gts_AssembleLHS(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  
  if (!PyArg_ParseTuple(args,(char *)":gts_AssembleLHS")) SWIG_fail;
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      gts_AssembleLHS();
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_gts_AssembleRHS(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  
  if (!PyArg_ParseTuple(args,(char *)":gts_AssembleRHS")) SWIG_fail;
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      gts_AssembleRHS();
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_gts_Solve(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  
  if (!PyArg_ParseTuple(args,(char *)":gts_Solve")) SWIG_fail;
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      gts_Solve();
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_gts_Finalize(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  
  if (!PyArg_ParseTuple(args,(char *)":gts_Finalize")) SWIG_fail;
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      gts_Finalize();
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_postpro_PostproDuringComputation(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  
  if (!PyArg_ParseTuple(args,(char *)":postpro_PostproDuringComputation")) SWIG_fail;
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      postpro_PostproDuringComputation();
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_postpro_ReadCommands(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  
  if (!PyArg_ParseTuple(args,(char *)":postpro_ReadCommands")) SWIG_fail;
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      postpro_ReadCommands();
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_postpro_PostproBeforeComputation(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  int arg1 = (int) 0 ;
  int val1 ;
  int ecode1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"|O:postpro_PostproBeforeComputation",&obj0)) SWIG_fail;
  if (obj0) {
    ecode1 = SWIG_AsVal_int(obj0, &val1);
    if (!SWIG_IsOK(ecode1)) {
      SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "postpro_PostproBeforeComputation" "', argument " "1"" of type '" "int""'");
    } 
    arg1 = static_cast< int >(val1);
  }
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      postpro_PostproBeforeComputation(arg1);
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_postpro_FlushDuringComputation(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  
  if (!PyArg_ParseTuple(args,(char *)":postpro_FlushDuringComputation")) SWIG_fail;
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      postpro_FlushDuringComputation();
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_postpro_ClosePostproFiles(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  
  if (!PyArg_ParseTuple(args,(char *)":postpro_ClosePostproFiles")) SWIG_fail;
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      postpro_ClosePostproFiles();
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_postpro_SetCircularSelectionZone(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  double arg1 ;
  double arg2 ;
  double arg3 ;
  double val1 ;
  int ecode1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:postpro_SetCircularSelectionZone",&obj0,&obj1,&obj2)) SWIG_fail;
  ecode1 = SWIG_AsVal_double(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "postpro_SetCircularSelectionZone" "', argument " "1"" of type '" "double""'");
  } 
  arg1 = static_cast< double >(val1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "postpro_SetCircularSelectionZone" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  ecode3 = SWIG_AsVal_double(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "postpro_SetCircularSelectionZone" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast< double >(val3);
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      postpro_SetCircularSelectionZone(arg1,arg2,arg3);
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_postpro_MoveCircularSelectionZone(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  double arg1 ;
  double arg2 ;
  double val1 ;
  int ecode1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:postpro_MoveCircularSelectionZone",&obj0,&obj1)) SWIG_fail;
  ecode1 = SWIG_AsVal_double(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "postpro_MoveCircularSelectionZone" "', argument " "1"" of type '" "double""'");
  } 
  arg1 = static_cast< double >(val1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "postpro_MoveCircularSelectionZone" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      postpro_MoveCircularSelectionZone(arg1,arg2);
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_postpro_CleanMemory(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  
  if (!PyArg_ParseTuple(args,(char *)":postpro_CleanMemory")) SWIG_fail;
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      postpro_CleanMemory();
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_postpro_2D_GetKineticEnergy(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)":postpro_2D_GetKineticEnergy")) SWIG_fail;
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      result = (double)postpro_2D_GetKineticEnergy();
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_postpro_3D_PostproDuringComputation(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  
  if (!PyArg_ParseTuple(args,(char *)":postpro_3D_PostproDuringComputation")) SWIG_fail;
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      postpro_3D_PostproDuringComputation();
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_postpro_3D_FlushDuringComputation(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  
  if (!PyArg_ParseTuple(args,(char *)":postpro_3D_FlushDuringComputation")) SWIG_fail;
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      postpro_3D_FlushDuringComputation();
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_postpro_3D_ReadCommands(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  
  if (!PyArg_ParseTuple(args,(char *)":postpro_3D_ReadCommands")) SWIG_fail;
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      postpro_3D_ReadCommands();
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_postpro_3D_PostproBeforeComputation(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  int arg1 = (int) 0 ;
  int val1 ;
  int ecode1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"|O:postpro_3D_PostproBeforeComputation",&obj0)) SWIG_fail;
  if (obj0) {
    ecode1 = SWIG_AsVal_int(obj0, &val1);
    if (!SWIG_IsOK(ecode1)) {
      SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "postpro_3D_PostproBeforeComputation" "', argument " "1"" of type '" "int""'");
    } 
    arg1 = static_cast< int >(val1);
  }
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      postpro_3D_PostproBeforeComputation(arg1);
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_postpro_3D_ClosePostproFiles(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  
  if (!PyArg_ParseTuple(args,(char *)":postpro_3D_ClosePostproFiles")) SWIG_fail;
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      postpro_3D_ClosePostproFiles();
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_postpro_3D_GetKineticEnergy(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)":postpro_3D_GetKineticEnergy")) SWIG_fail;
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      result = (double)postpro_3D_GetKineticEnergy();
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_postpro_3D_GetRBDY3PrincStress(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  double **arg1 = (double **) 0 ;
  int *arg2 = (int *) 0 ;
  int *arg3 = (int *) 0 ;
  double *data_temp1 ;
  int dim1_temp1 ;
  int dim2_temp1 ;
  
  {
    arg1 = &data_temp1;
    arg2 = &dim1_temp1;
    arg3 = &dim2_temp1;
  }
  if (!PyArg_ParseTuple(args,(char *)":postpro_3D_GetRBDY3PrincStress")) SWIG_fail;
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      postpro_3D_GetRBDY3PrincStress(arg1,arg2,arg3);
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_Py_Void();
  {
    npy_intp dims[2] = {
      *arg3, *arg2 
    };
    PyObject * obj = PyArray_SimpleNewFromData(2, dims, NPY_DOUBLE, (void*)(*arg1));
    if (!obj) SWIG_fail;
    PyArrayObject * array = (PyArrayObject*) obj;
    attach_fortran_memory_to_numpy_array(array, (void*)(*arg1), NPY_DOUBLE, dims[1], dims[0]);
    PyArray_ENABLEFLAGS(array,NPY_ARRAY_WRITEABLE);
    resultobj = SWIG_Python_AppendOutput(resultobj, obj);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_postpro_3D_CleanMemory(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  
  if (!PyArg_ParseTuple(args,(char *)":postpro_3D_CleanMemory")) SWIG_fail;
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      postpro_3D_CleanMemory();
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_user_getWoodFrame(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  double *arg1 = (double *) 0 ;
  int arg2 ;
  int arg3 ;
  double **arg4 = (double **) 0 ;
  int *arg5 = (int *) 0 ;
  int *arg6 = (int *) 0 ;
  double *arg7 = (double *) 0 ;
  int arg8 ;
  double *arg9 = (double *) 0 ;
  int arg10 ;
  PyArrayObject *array1 = NULL ;
  int is_new_object1 = 0 ;
  double *data_temp4 ;
  int dim1_temp4 ;
  int dim2_temp4 ;
  PyArrayObject *array7 = NULL ;
  int is_new_object7 = 0 ;
  PyArrayObject *array9 = NULL ;
  int is_new_object9 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  {
    arg4 = &data_temp4;
    arg5 = &dim1_temp4;
    arg6 = &dim2_temp4;
  }
  if (!PyArg_ParseTuple(args,(char *)"OOO:user_getWoodFrame",&obj0,&obj1,&obj2)) SWIG_fail;
  {
    npy_intp size[2] = {
      -1, -1 
    };
    array1 = obj_to_array_contiguous_allow_conversion(obj0, NPY_DOUBLE,
      &is_new_object1);
    if (!array1 || !require_dimensions(array1, 2) ||
      !require_size(array1, size, 2)) SWIG_fail;
    arg1 = (double*) array_data(array1);
    arg2 = (int) array_size(array1,0);
    arg3 = (int) array_size(array1,1);
  }
  {
    npy_intp size[1] = {
      -1 
    };
    array7 = obj_to_array_contiguous_allow_conversion(obj1,
      NPY_DOUBLE,
      &is_new_object7);
    if (!array7 || !require_dimensions(array7, 1) ||
      !require_size(array7, size, 1)) SWIG_fail;
    arg7 = (double*) array_data(array7);
    arg8 = (int) array_size(array7,0);
  }
  {
    npy_intp size[1] = {
      -1 
    };
    array9 = obj_to_array_contiguous_allow_conversion(obj2,
      NPY_DOUBLE,
      &is_new_object9);
    if (!array9 || !require_dimensions(array9, 1) ||
      !require_size(array9, size, 1)) SWIG_fail;
    arg9 = (double*) array_data(array9);
    arg10 = (int) array_size(array9,0);
  }
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      user_getWoodFrame(arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9,arg10);
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_Py_Void();
  {
    npy_intp dims[2] = {
      *arg6, *arg5 
    };
    PyObject * obj = PyArray_SimpleNewFromData(2, dims, NPY_DOUBLE, (void*)(*arg4));
    if (!obj) SWIG_fail;
    PyArrayObject * array = (PyArrayObject*) obj;
    attach_fortran_memory_to_numpy_array(array, (void*)(*arg4), NPY_DOUBLE, dims[1], dims[0]);
    PyArray_ENABLEFLAGS(array,NPY_ARRAY_WRITEABLE);
    resultobj = SWIG_Python_AppendOutput(resultobj, obj);
  }
  {
    if (is_new_object1 && array1)
    {
      Py_DECREF(array1); 
    }
  }
  {
    if (is_new_object7 && array7)
    {
      Py_DECREF(array7); 
    }
  }
  {
    if (is_new_object9 && array9)
    {
      Py_DECREF(array9); 
    }
  }
  return resultobj;
fail:
  {
    if (is_new_object1 && array1)
    {
      Py_DECREF(array1); 
    }
  }
  {
    if (is_new_object7 && array7)
    {
      Py_DECREF(array7); 
    }
  }
  {
    if (is_new_object9 && array9)
    {
      Py_DECREF(array9); 
    }
  }
  return NULL;
}


SWIGINTERN PyObject *_wrap_cut2D_Cut(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  double *arg1 = (double *) 0 ;
  int arg2 ;
  double *arg3 = (double *) 0 ;
  int arg4 ;
  int arg5 ;
  double *arg6 = (double *) 0 ;
  int arg7 ;
  int arg8 ;
  double **arg9 = (double **) 0 ;
  int *arg10 = (int *) 0 ;
  double **arg11 = (double **) 0 ;
  int *arg12 = (int *) 0 ;
  int *arg13 = (int *) 0 ;
  PyArrayObject *array1 = NULL ;
  int is_new_object1 = 0 ;
  PyArrayObject *array3 = NULL ;
  int is_new_object3 = 0 ;
  PyArrayObject *array6 = NULL ;
  int is_new_object6 = 0 ;
  double *data_temp9 ;
  int dim_temp9 ;
  double *data_temp11 ;
  int dim1_temp11 ;
  int dim2_temp11 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  {
    arg9 = &data_temp9;
    arg10 = &dim_temp9;
  }
  {
    arg11 = &data_temp11;
    arg12 = &dim1_temp11;
    arg13 = &dim2_temp11;
  }
  if (!PyArg_ParseTuple(args,(char *)"OOO:cut2D_Cut",&obj0,&obj1,&obj2)) SWIG_fail;
  {
    npy_intp size[1] = {
      -1 
    };
    array1 = obj_to_array_contiguous_allow_conversion(obj0,
      NPY_DOUBLE,
      &is_new_object1);
    if (!array1 || !require_dimensions(array1, 1) ||
      !require_size(array1, size, 1)) SWIG_fail;
    arg1 = (double*) array_data(array1);
    arg2 = (int) array_size(array1,0);
  }
  {
    npy_intp size[2] = {
      -1, -1 
    };
    array3 = obj_to_array_contiguous_allow_conversion(obj1, NPY_DOUBLE,
      &is_new_object3);
    if (!array3 || !require_dimensions(array3, 2) ||
      !require_size(array3, size, 2)) SWIG_fail;
    arg3 = (double*) array_data(array3);
    arg4 = (int) array_size(array3,0);
    arg5 = (int) array_size(array3,1);
  }
  {
    npy_intp size[2] = {
      -1, -1 
    };
    array6 = obj_to_array_contiguous_allow_conversion(obj2, NPY_DOUBLE,
      &is_new_object6);
    if (!array6 || !require_dimensions(array6, 2) ||
      !require_size(array6, size, 2)) SWIG_fail;
    arg6 = (double*) array_data(array6);
    arg7 = (int) array_size(array6,0);
    arg8 = (int) array_size(array6,1);
  }
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      cut2D_Cut(arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9,arg10,arg11,arg12,arg13);
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_Py_Void();
  {
    npy_intp dims[1] = {
      *arg10 
    };
    PyObject * obj = PyArray_SimpleNewFromData(1, dims, NPY_DOUBLE, (void*)(*arg9));
    if (!obj) SWIG_fail;
    PyArrayObject * array = (PyArrayObject*) obj;
    attach_fortran_memory_to_numpy_array(array, (void*)(*arg9), NPY_DOUBLE, dims[0], 0);
    PyArray_ENABLEFLAGS(array,NPY_ARRAY_WRITEABLE);
    
    resultobj = SWIG_Python_AppendOutput(resultobj, obj);
  }
  {
    npy_intp dims[2] = {
      *arg13, *arg12 
    };
    PyObject * obj = PyArray_SimpleNewFromData(2, dims, NPY_DOUBLE, (void*)(*arg11));
    if (!obj) SWIG_fail;
    PyArrayObject * array = (PyArrayObject*) obj;
    attach_fortran_memory_to_numpy_array(array, (void*)(*arg11), NPY_DOUBLE, dims[1], dims[0]);
    PyArray_ENABLEFLAGS(array,NPY_ARRAY_WRITEABLE);
    resultobj = SWIG_Python_AppendOutput(resultobj, obj);
  }
  {
    if (is_new_object1 && array1)
    {
      Py_DECREF(array1); 
    }
  }
  {
    if (is_new_object3 && array3)
    {
      Py_DECREF(array3); 
    }
  }
  {
    if (is_new_object6 && array6)
    {
      Py_DECREF(array6); 
    }
  }
  return resultobj;
fail:
  {
    if (is_new_object1 && array1)
    {
      Py_DECREF(array1); 
    }
  }
  {
    if (is_new_object3 && array3)
    {
      Py_DECREF(array3); 
    }
  }
  {
    if (is_new_object6 && array6)
    {
      Py_DECREF(array6); 
    }
  }
  return NULL;
}


SWIGINTERN PyObject *_wrap_deposit2D_Potential(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  double *arg1 = (double *) 0 ;
  int arg2 ;
  double arg3 ;
  int arg4 ;
  double **arg5 = (double **) 0 ;
  int *arg6 = (int *) 0 ;
  int *arg7 = (int *) 0 ;
  double *arg8 = (double *) NULL ;
  int arg9 = (int) 0 ;
  double *arg10 = (double *) NULL ;
  int arg11 = (int) 0 ;
  int arg12 = (int) 0 ;
  PyArrayObject *array1 = NULL ;
  int is_new_object1 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  double *data_temp5 ;
  int dim1_temp5 ;
  int dim2_temp5 ;
  PyArrayObject *array8 = NULL ;
  int is_new_object8 = 0 ;
  PyArrayObject *array10 = NULL ;
  int is_new_object10 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  
  {
    arg5 = &data_temp5;
    arg6 = &dim1_temp5;
    arg7 = &dim2_temp5;
  }
  if (!PyArg_ParseTuple(args,(char *)"OOO|OO:deposit2D_Potential",&obj0,&obj1,&obj2,&obj3,&obj4)) SWIG_fail;
  {
    npy_intp size[1] = {
      -1 
    };
    array1 = obj_to_array_contiguous_allow_conversion(obj0,
      NPY_DOUBLE,
      &is_new_object1);
    if (!array1 || !require_dimensions(array1, 1) ||
      !require_size(array1, size, 1)) SWIG_fail;
    arg1 = (double*) array_data(array1);
    arg2 = (int) array_size(array1,0);
  }
  ecode3 = SWIG_AsVal_double(obj1, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "deposit2D_Potential" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast< double >(val3);
  ecode4 = SWIG_AsVal_int(obj2, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "deposit2D_Potential" "', argument " "4"" of type '" "int""'");
  } 
  arg4 = static_cast< int >(val4);
  if (obj3) {
    {
      npy_intp size[1] = {
        -1 
      };
      array8 = obj_to_array_contiguous_allow_conversion(obj3,
        NPY_DOUBLE,
        &is_new_object8);
      if (!array8 || !require_dimensions(array8, 1) ||
        !require_size(array8, size, 1)) SWIG_fail;
      arg8 = (double*) array_data(array8);
      arg9 = (int) array_size(array8,0);
    }
  }
  if (obj4) {
    {
      npy_intp size[2] = {
        -1, -1 
      };
      array10 = obj_to_array_contiguous_allow_conversion(obj4, NPY_DOUBLE,
        &is_new_object10);
      if (!array10 || !require_dimensions(array10, 2) ||
        !require_size(array10, size, 2)) SWIG_fail;
      arg10 = (double*) array_data(array10);
      arg11 = (int) array_size(array10,0);
      arg12 = (int) array_size(array10,1);
    }
  }
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      deposit2D_Potential(arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9,arg10,arg11,arg12);
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_Py_Void();
  {
    npy_intp dims[2] = {
      *arg7, *arg6 
    };
    PyObject * obj = PyArray_SimpleNewFromData(2, dims, NPY_DOUBLE, (void*)(*arg5));
    if (!obj) SWIG_fail;
    PyArrayObject * array = (PyArrayObject*) obj;
    attach_fortran_memory_to_numpy_array(array, (void*)(*arg5), NPY_DOUBLE, dims[1], dims[0]);
    PyArray_ENABLEFLAGS(array,NPY_ARRAY_WRITEABLE);
    resultobj = SWIG_Python_AppendOutput(resultobj, obj);
  }
  {
    if (is_new_object1 && array1)
    {
      Py_DECREF(array1); 
    }
  }
  {
    if (is_new_object8 && array8)
    {
      Py_DECREF(array8); 
    }
  }
  {
    if (is_new_object10 && array10)
    {
      Py_DECREF(array10); 
    }
  }
  return resultobj;
fail:
  {
    if (is_new_object1 && array1)
    {
      Py_DECREF(array1); 
    }
  }
  {
    if (is_new_object8 && array8)
    {
      Py_DECREF(array8); 
    }
  }
  {
    if (is_new_object10 && array10)
    {
      Py_DECREF(array10); 
    }
  }
  return NULL;
}


SWIGINTERN PyObject *_wrap_deposit3D_InContainer(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  double *arg1 = (double *) 0 ;
  int arg2 ;
  int arg3 ;
  double arg4 ;
  double arg5 ;
  double arg6 ;
  double **arg7 = (double **) 0 ;
  int *arg8 = (int *) 0 ;
  double **arg9 = (double **) 0 ;
  int *arg10 = (int *) 0 ;
  int *arg11 = (int *) 0 ;
  double *arg12 = (double *) NULL ;
  int arg13 = (int) 0 ;
  double *arg14 = (double *) NULL ;
  int arg15 = (int) 0 ;
  int arg16 = (int) 0 ;
  int *arg17 = (int *) NULL ;
  int arg18 = (int) 0 ;
  int arg19 = (int) 0 ;
  PyArrayObject *array1 = NULL ;
  int is_new_object1 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  double val4 ;
  int ecode4 = 0 ;
  double val5 ;
  int ecode5 = 0 ;
  double val6 ;
  int ecode6 = 0 ;
  double *data_temp7 ;
  int dim_temp7 ;
  double *data_temp9 ;
  int dim1_temp9 ;
  int dim2_temp9 ;
  PyArrayObject *array12 = NULL ;
  int is_new_object12 = 0 ;
  PyArrayObject *array14 = NULL ;
  int is_new_object14 = 0 ;
  PyArrayObject *array17 = NULL ;
  int is_new_object17 = 0 ;
  int val19 ;
  int ecode19 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  PyObject * obj5 = 0 ;
  PyObject * obj6 = 0 ;
  PyObject * obj7 = 0 ;
  PyObject * obj8 = 0 ;
  
  {
    arg7 = &data_temp7;
    arg8 = &dim_temp7;
  }
  {
    arg9 = &data_temp9;
    arg10 = &dim1_temp9;
    arg11 = &dim2_temp9;
  }
  if (!PyArg_ParseTuple(args,(char *)"OOOOO|OOOO:deposit3D_InContainer",&obj0,&obj1,&obj2,&obj3,&obj4,&obj5,&obj6,&obj7,&obj8)) SWIG_fail;
  {
    npy_intp size[1] = {
      -1 
    };
    array1 = obj_to_array_contiguous_allow_conversion(obj0,
      NPY_DOUBLE,
      &is_new_object1);
    if (!array1 || !require_dimensions(array1, 1) ||
      !require_size(array1, size, 1)) SWIG_fail;
    arg1 = (double*) array_data(array1);
    arg2 = (int) array_size(array1,0);
  }
  ecode3 = SWIG_AsVal_int(obj1, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "deposit3D_InContainer" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  ecode4 = SWIG_AsVal_double(obj2, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "deposit3D_InContainer" "', argument " "4"" of type '" "double""'");
  } 
  arg4 = static_cast< double >(val4);
  ecode5 = SWIG_AsVal_double(obj3, &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "deposit3D_InContainer" "', argument " "5"" of type '" "double""'");
  } 
  arg5 = static_cast< double >(val5);
  ecode6 = SWIG_AsVal_double(obj4, &val6);
  if (!SWIG_IsOK(ecode6)) {
    SWIG_exception_fail(SWIG_ArgError(ecode6), "in method '" "deposit3D_InContainer" "', argument " "6"" of type '" "double""'");
  } 
  arg6 = static_cast< double >(val6);
  if (obj5) {
    {
      npy_intp size[1] = {
        -1 
      };
      array12 = obj_to_array_contiguous_allow_conversion(obj5,
        NPY_DOUBLE,
        &is_new_object12);
      if (!array12 || !require_dimensions(array12, 1) ||
        !require_size(array12, size, 1)) SWIG_fail;
      arg12 = (double*) array_data(array12);
      arg13 = (int) array_size(array12,0);
    }
  }
  if (obj6) {
    {
      npy_intp size[2] = {
        -1, -1 
      };
      array14 = obj_to_array_contiguous_allow_conversion(obj6, NPY_DOUBLE,
        &is_new_object14);
      if (!array14 || !require_dimensions(array14, 2) ||
        !require_size(array14, size, 2)) SWIG_fail;
      arg14 = (double*) array_data(array14);
      arg15 = (int) array_size(array14,0);
      arg16 = (int) array_size(array14,1);
    }
  }
  if (obj7) {
    {
      npy_intp size[1] = {
        -1 
      };
      array17 = obj_to_array_contiguous_allow_conversion(obj7,
        NPY_INT,
        &is_new_object17);
      if (!array17 || !require_dimensions(array17, 1) ||
        !require_size(array17, size, 1)) SWIG_fail;
      arg17 = (int*) array_data(array17);
      arg18 = (int) array_size(array17,0);
    }
  }
  if (obj8) {
    ecode19 = SWIG_AsVal_int(obj8, &val19);
    if (!SWIG_IsOK(ecode19)) {
      SWIG_exception_fail(SWIG_ArgError(ecode19), "in method '" "deposit3D_InContainer" "', argument " "19"" of type '" "int""'");
    } 
    arg19 = static_cast< int >(val19);
  }
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      deposit3D_InContainer(arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9,arg10,arg11,arg12,arg13,arg14,arg15,arg16,arg17,arg18,arg19);
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_Py_Void();
  {
    npy_intp dims[1] = {
      *arg8 
    };
    PyObject * obj = PyArray_SimpleNewFromData(1, dims, NPY_DOUBLE, (void*)(*arg7));
    if (!obj) SWIG_fail;
    PyArrayObject * array = (PyArrayObject*) obj;
    attach_fortran_memory_to_numpy_array(array, (void*)(*arg7), NPY_DOUBLE, dims[0], 0);
    PyArray_ENABLEFLAGS(array,NPY_ARRAY_WRITEABLE);
    
    resultobj = SWIG_Python_AppendOutput(resultobj, obj);
  }
  {
    npy_intp dims[2] = {
      *arg11, *arg10 
    };
    PyObject * obj = PyArray_SimpleNewFromData(2, dims, NPY_DOUBLE, (void*)(*arg9));
    if (!obj) SWIG_fail;
    PyArrayObject * array = (PyArrayObject*) obj;
    attach_fortran_memory_to_numpy_array(array, (void*)(*arg9), NPY_DOUBLE, dims[1], dims[0]);
    PyArray_ENABLEFLAGS(array,NPY_ARRAY_WRITEABLE);
    resultobj = SWIG_Python_AppendOutput(resultobj, obj);
  }
  {
    if (is_new_object1 && array1)
    {
      Py_DECREF(array1); 
    }
  }
  {
    if (is_new_object12 && array12)
    {
      Py_DECREF(array12); 
    }
  }
  {
    if (is_new_object14 && array14)
    {
      Py_DECREF(array14); 
    }
  }
  {
    if (is_new_object17 && array17)
    {
      Py_DECREF(array17); 
    }
  }
  return resultobj;
fail:
  {
    if (is_new_object1 && array1)
    {
      Py_DECREF(array1); 
    }
  }
  {
    if (is_new_object12 && array12)
    {
      Py_DECREF(array12); 
    }
  }
  {
    if (is_new_object14 && array14)
    {
      Py_DECREF(array14); 
    }
  }
  {
    if (is_new_object17 && array17)
    {
      Py_DECREF(array17); 
    }
  }
  return NULL;
}


SWIGINTERN PyObject *_wrap_mesh2D_GetIndicesMeshQ4(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  int arg1 ;
  int *arg2 = (int *) 0 ;
  int *arg3 = (int *) 0 ;
  int val1 ;
  int ecode1 = 0 ;
  int temp2 ;
  int res2 = SWIG_TMPOBJ ;
  int temp3 ;
  int res3 = SWIG_TMPOBJ ;
  PyObject * obj0 = 0 ;
  
  arg2 = &temp2;
  arg3 = &temp3;
  if (!PyArg_ParseTuple(args,(char *)"O:mesh2D_GetIndicesMeshQ4",&obj0)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "mesh2D_GetIndicesMeshQ4" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = static_cast< int >(val1);
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      mesh2D_GetIndicesMeshQ4(arg1,arg2,arg3);
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsTmpObj(res2)) {
    resultobj = SWIG_Python_AppendOutput(resultobj, SWIG_From_int((*arg2)));
  } else {
    int new_flags = SWIG_IsNewObj(res2) ? (SWIG_POINTER_OWN |  0 ) :  0 ;
    resultobj = SWIG_Python_AppendOutput(resultobj, SWIG_NewPointerObj((void*)(arg2), SWIGTYPE_p_int, new_flags));
  }
  if (SWIG_IsTmpObj(res3)) {
    resultobj = SWIG_Python_AppendOutput(resultobj, SWIG_From_int((*arg3)));
  } else {
    int new_flags = SWIG_IsNewObj(res3) ? (SWIG_POINTER_OWN |  0 ) :  0 ;
    resultobj = SWIG_Python_AppendOutput(resultobj, SWIG_NewPointerObj((void*)(arg3), SWIGTYPE_p_int, new_flags));
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_mesh2D_SizeMeshQ4(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  int arg1 ;
  int arg2 ;
  int *arg3 = (int *) 0 ;
  int *arg4 = (int *) 0 ;
  int *arg5 = (int *) 0 ;
  int val1 ;
  int ecode1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int temp3 ;
  int res3 = SWIG_TMPOBJ ;
  int temp4 ;
  int res4 = SWIG_TMPOBJ ;
  int temp5 ;
  int res5 = SWIG_TMPOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  arg3 = &temp3;
  arg4 = &temp4;
  arg5 = &temp5;
  if (!PyArg_ParseTuple(args,(char *)"OO:mesh2D_SizeMeshQ4",&obj0,&obj1)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "mesh2D_SizeMeshQ4" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = static_cast< int >(val1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "mesh2D_SizeMeshQ4" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      mesh2D_SizeMeshQ4(arg1,arg2,arg3,arg4,arg5);
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsTmpObj(res3)) {
    resultobj = SWIG_Python_AppendOutput(resultobj, SWIG_From_int((*arg3)));
  } else {
    int new_flags = SWIG_IsNewObj(res3) ? (SWIG_POINTER_OWN |  0 ) :  0 ;
    resultobj = SWIG_Python_AppendOutput(resultobj, SWIG_NewPointerObj((void*)(arg3), SWIGTYPE_p_int, new_flags));
  }
  if (SWIG_IsTmpObj(res4)) {
    resultobj = SWIG_Python_AppendOutput(resultobj, SWIG_From_int((*arg4)));
  } else {
    int new_flags = SWIG_IsNewObj(res4) ? (SWIG_POINTER_OWN |  0 ) :  0 ;
    resultobj = SWIG_Python_AppendOutput(resultobj, SWIG_NewPointerObj((void*)(arg4), SWIGTYPE_p_int, new_flags));
  }
  if (SWIG_IsTmpObj(res5)) {
    resultobj = SWIG_Python_AppendOutput(resultobj, SWIG_From_int((*arg5)));
  } else {
    int new_flags = SWIG_IsNewObj(res5) ? (SWIG_POINTER_OWN |  0 ) :  0 ;
    resultobj = SWIG_Python_AppendOutput(resultobj, SWIG_NewPointerObj((void*)(arg5), SWIGTYPE_p_int, new_flags));
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_mesh2D_SizeMesh2T3(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  int arg1 ;
  int arg2 ;
  int *arg3 = (int *) 0 ;
  int *arg4 = (int *) 0 ;
  int *arg5 = (int *) 0 ;
  int val1 ;
  int ecode1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int temp3 ;
  int res3 = SWIG_TMPOBJ ;
  int temp4 ;
  int res4 = SWIG_TMPOBJ ;
  int temp5 ;
  int res5 = SWIG_TMPOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  arg3 = &temp3;
  arg4 = &temp4;
  arg5 = &temp5;
  if (!PyArg_ParseTuple(args,(char *)"OO:mesh2D_SizeMesh2T3",&obj0,&obj1)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "mesh2D_SizeMesh2T3" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = static_cast< int >(val1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "mesh2D_SizeMesh2T3" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      mesh2D_SizeMesh2T3(arg1,arg2,arg3,arg4,arg5);
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsTmpObj(res3)) {
    resultobj = SWIG_Python_AppendOutput(resultobj, SWIG_From_int((*arg3)));
  } else {
    int new_flags = SWIG_IsNewObj(res3) ? (SWIG_POINTER_OWN |  0 ) :  0 ;
    resultobj = SWIG_Python_AppendOutput(resultobj, SWIG_NewPointerObj((void*)(arg3), SWIGTYPE_p_int, new_flags));
  }
  if (SWIG_IsTmpObj(res4)) {
    resultobj = SWIG_Python_AppendOutput(resultobj, SWIG_From_int((*arg4)));
  } else {
    int new_flags = SWIG_IsNewObj(res4) ? (SWIG_POINTER_OWN |  0 ) :  0 ;
    resultobj = SWIG_Python_AppendOutput(resultobj, SWIG_NewPointerObj((void*)(arg4), SWIGTYPE_p_int, new_flags));
  }
  if (SWIG_IsTmpObj(res5)) {
    resultobj = SWIG_Python_AppendOutput(resultobj, SWIG_From_int((*arg5)));
  } else {
    int new_flags = SWIG_IsNewObj(res5) ? (SWIG_POINTER_OWN |  0 ) :  0 ;
    resultobj = SWIG_Python_AppendOutput(resultobj, SWIG_NewPointerObj((void*)(arg5), SWIGTYPE_p_int, new_flags));
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_mesh2D_SizeMesh4T3(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  int arg1 ;
  int arg2 ;
  int *arg3 = (int *) 0 ;
  int *arg4 = (int *) 0 ;
  int *arg5 = (int *) 0 ;
  int val1 ;
  int ecode1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int temp3 ;
  int res3 = SWIG_TMPOBJ ;
  int temp4 ;
  int res4 = SWIG_TMPOBJ ;
  int temp5 ;
  int res5 = SWIG_TMPOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  arg3 = &temp3;
  arg4 = &temp4;
  arg5 = &temp5;
  if (!PyArg_ParseTuple(args,(char *)"OO:mesh2D_SizeMesh4T3",&obj0,&obj1)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "mesh2D_SizeMesh4T3" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = static_cast< int >(val1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "mesh2D_SizeMesh4T3" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      mesh2D_SizeMesh4T3(arg1,arg2,arg3,arg4,arg5);
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsTmpObj(res3)) {
    resultobj = SWIG_Python_AppendOutput(resultobj, SWIG_From_int((*arg3)));
  } else {
    int new_flags = SWIG_IsNewObj(res3) ? (SWIG_POINTER_OWN |  0 ) :  0 ;
    resultobj = SWIG_Python_AppendOutput(resultobj, SWIG_NewPointerObj((void*)(arg3), SWIGTYPE_p_int, new_flags));
  }
  if (SWIG_IsTmpObj(res4)) {
    resultobj = SWIG_Python_AppendOutput(resultobj, SWIG_From_int((*arg4)));
  } else {
    int new_flags = SWIG_IsNewObj(res4) ? (SWIG_POINTER_OWN |  0 ) :  0 ;
    resultobj = SWIG_Python_AppendOutput(resultobj, SWIG_NewPointerObj((void*)(arg4), SWIGTYPE_p_int, new_flags));
  }
  if (SWIG_IsTmpObj(res5)) {
    resultobj = SWIG_Python_AppendOutput(resultobj, SWIG_From_int((*arg5)));
  } else {
    int new_flags = SWIG_IsNewObj(res5) ? (SWIG_POINTER_OWN |  0 ) :  0 ;
    resultobj = SWIG_Python_AppendOutput(resultobj, SWIG_NewPointerObj((void*)(arg5), SWIGTYPE_p_int, new_flags));
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_mesh2D_SizeMeshQ8(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  int arg1 ;
  int arg2 ;
  int *arg3 = (int *) 0 ;
  int *arg4 = (int *) 0 ;
  int *arg5 = (int *) 0 ;
  int val1 ;
  int ecode1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int temp3 ;
  int res3 = SWIG_TMPOBJ ;
  int temp4 ;
  int res4 = SWIG_TMPOBJ ;
  int temp5 ;
  int res5 = SWIG_TMPOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  arg3 = &temp3;
  arg4 = &temp4;
  arg5 = &temp5;
  if (!PyArg_ParseTuple(args,(char *)"OO:mesh2D_SizeMeshQ8",&obj0,&obj1)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "mesh2D_SizeMeshQ8" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = static_cast< int >(val1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "mesh2D_SizeMeshQ8" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      mesh2D_SizeMeshQ8(arg1,arg2,arg3,arg4,arg5);
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsTmpObj(res3)) {
    resultobj = SWIG_Python_AppendOutput(resultobj, SWIG_From_int((*arg3)));
  } else {
    int new_flags = SWIG_IsNewObj(res3) ? (SWIG_POINTER_OWN |  0 ) :  0 ;
    resultobj = SWIG_Python_AppendOutput(resultobj, SWIG_NewPointerObj((void*)(arg3), SWIGTYPE_p_int, new_flags));
  }
  if (SWIG_IsTmpObj(res4)) {
    resultobj = SWIG_Python_AppendOutput(resultobj, SWIG_From_int((*arg4)));
  } else {
    int new_flags = SWIG_IsNewObj(res4) ? (SWIG_POINTER_OWN |  0 ) :  0 ;
    resultobj = SWIG_Python_AppendOutput(resultobj, SWIG_NewPointerObj((void*)(arg4), SWIGTYPE_p_int, new_flags));
  }
  if (SWIG_IsTmpObj(res5)) {
    resultobj = SWIG_Python_AppendOutput(resultobj, SWIG_From_int((*arg5)));
  } else {
    int new_flags = SWIG_IsNewObj(res5) ? (SWIG_POINTER_OWN |  0 ) :  0 ;
    resultobj = SWIG_Python_AppendOutput(resultobj, SWIG_NewPointerObj((void*)(arg5), SWIGTYPE_p_int, new_flags));
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_mesh2D_MeshQ4(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  double arg1 ;
  double arg2 ;
  double arg3 ;
  double arg4 ;
  int arg5 ;
  int arg6 ;
  double *arg7 = (double *) 0 ;
  int arg8 ;
  int *arg9 = (int *) 0 ;
  int arg10 ;
  int *arg11 = (int *) 0 ;
  int arg12 ;
  double val1 ;
  int ecode1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  double val4 ;
  int ecode4 = 0 ;
  int val5 ;
  int ecode5 = 0 ;
  int val6 ;
  int ecode6 = 0 ;
  PyObject *array7 = NULL ;
  PyObject *array9 = NULL ;
  PyObject *array11 = NULL ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  PyObject * obj5 = 0 ;
  PyObject * obj6 = 0 ;
  PyObject * obj7 = 0 ;
  PyObject * obj8 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOOOOOO:mesh2D_MeshQ4",&obj0,&obj1,&obj2,&obj3,&obj4,&obj5,&obj6,&obj7,&obj8)) SWIG_fail;
  ecode1 = SWIG_AsVal_double(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "mesh2D_MeshQ4" "', argument " "1"" of type '" "double""'");
  } 
  arg1 = static_cast< double >(val1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "mesh2D_MeshQ4" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  ecode3 = SWIG_AsVal_double(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "mesh2D_MeshQ4" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast< double >(val3);
  ecode4 = SWIG_AsVal_double(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "mesh2D_MeshQ4" "', argument " "4"" of type '" "double""'");
  } 
  arg4 = static_cast< double >(val4);
  ecode5 = SWIG_AsVal_int(obj4, &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "mesh2D_MeshQ4" "', argument " "5"" of type '" "int""'");
  } 
  arg5 = static_cast< int >(val5);
  ecode6 = SWIG_AsVal_int(obj5, &val6);
  if (!SWIG_IsOK(ecode6)) {
    SWIG_exception_fail(SWIG_ArgError(ecode6), "in method '" "mesh2D_MeshQ4" "', argument " "6"" of type '" "int""'");
  } 
  arg6 = static_cast< int >(val6);
  {
    npy_intp dims[1];
    if (!PyLong_Check(obj6))
    {
      const char* typestring = pytype_string(obj6);
      PyErr_Format(PyExc_TypeError,
        "Int dimension expected.  '%s' given.",
        typestring);
      SWIG_fail;
    }
    arg8 = (int) PyLong_AsSsize_t(obj6);
    if (arg8 == -1 && PyErr_Occurred()) SWIG_fail;
    dims[0] = (npy_intp) arg8;
    array7 = PyArray_SimpleNew(1, dims, NPY_DOUBLE);
    if (!array7) SWIG_fail;
    arg7 = (double*) array_data(array7);
  }
  {
    npy_intp dims[1];
    if (!PyLong_Check(obj7))
    {
      const char* typestring = pytype_string(obj7);
      PyErr_Format(PyExc_TypeError,
        "Int dimension expected.  '%s' given.",
        typestring);
      SWIG_fail;
    }
    arg10 = (int) PyLong_AsSsize_t(obj7);
    if (arg10 == -1 && PyErr_Occurred()) SWIG_fail;
    dims[0] = (npy_intp) arg10;
    array9 = PyArray_SimpleNew(1, dims, NPY_INT);
    if (!array9) SWIG_fail;
    arg9 = (int*) array_data(array9);
  }
  {
    npy_intp dims[1];
    if (!PyLong_Check(obj8))
    {
      const char* typestring = pytype_string(obj8);
      PyErr_Format(PyExc_TypeError,
        "Int dimension expected.  '%s' given.",
        typestring);
      SWIG_fail;
    }
    arg12 = (int) PyLong_AsSsize_t(obj8);
    if (arg12 == -1 && PyErr_Occurred()) SWIG_fail;
    dims[0] = (npy_intp) arg12;
    array11 = PyArray_SimpleNew(1, dims, NPY_INT);
    if (!array11) SWIG_fail;
    arg11 = (int*) array_data(array11);
  }
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      mesh2D_MeshQ4(arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9,arg10,arg11,arg12);
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_Py_Void();
  {
    resultobj = SWIG_Python_AppendOutput(resultobj, (PyObject*)array7);
  }
  {
    resultobj = SWIG_Python_AppendOutput(resultobj, (PyObject*)array9);
  }
  {
    resultobj = SWIG_Python_AppendOutput(resultobj, (PyObject*)array11);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_mesh2D_Mesh2T3(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  double arg1 ;
  double arg2 ;
  double arg3 ;
  double arg4 ;
  int arg5 ;
  int arg6 ;
  double *arg7 = (double *) 0 ;
  int arg8 ;
  int *arg9 = (int *) 0 ;
  int arg10 ;
  int *arg11 = (int *) 0 ;
  int arg12 ;
  double val1 ;
  int ecode1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  double val4 ;
  int ecode4 = 0 ;
  int val5 ;
  int ecode5 = 0 ;
  int val6 ;
  int ecode6 = 0 ;
  PyObject *array7 = NULL ;
  PyObject *array9 = NULL ;
  PyObject *array11 = NULL ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  PyObject * obj5 = 0 ;
  PyObject * obj6 = 0 ;
  PyObject * obj7 = 0 ;
  PyObject * obj8 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOOOOOO:mesh2D_Mesh2T3",&obj0,&obj1,&obj2,&obj3,&obj4,&obj5,&obj6,&obj7,&obj8)) SWIG_fail;
  ecode1 = SWIG_AsVal_double(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "mesh2D_Mesh2T3" "', argument " "1"" of type '" "double""'");
  } 
  arg1 = static_cast< double >(val1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "mesh2D_Mesh2T3" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  ecode3 = SWIG_AsVal_double(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "mesh2D_Mesh2T3" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast< double >(val3);
  ecode4 = SWIG_AsVal_double(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "mesh2D_Mesh2T3" "', argument " "4"" of type '" "double""'");
  } 
  arg4 = static_cast< double >(val4);
  ecode5 = SWIG_AsVal_int(obj4, &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "mesh2D_Mesh2T3" "', argument " "5"" of type '" "int""'");
  } 
  arg5 = static_cast< int >(val5);
  ecode6 = SWIG_AsVal_int(obj5, &val6);
  if (!SWIG_IsOK(ecode6)) {
    SWIG_exception_fail(SWIG_ArgError(ecode6), "in method '" "mesh2D_Mesh2T3" "', argument " "6"" of type '" "int""'");
  } 
  arg6 = static_cast< int >(val6);
  {
    npy_intp dims[1];
    if (!PyLong_Check(obj6))
    {
      const char* typestring = pytype_string(obj6);
      PyErr_Format(PyExc_TypeError,
        "Int dimension expected.  '%s' given.",
        typestring);
      SWIG_fail;
    }
    arg8 = (int) PyLong_AsSsize_t(obj6);
    if (arg8 == -1 && PyErr_Occurred()) SWIG_fail;
    dims[0] = (npy_intp) arg8;
    array7 = PyArray_SimpleNew(1, dims, NPY_DOUBLE);
    if (!array7) SWIG_fail;
    arg7 = (double*) array_data(array7);
  }
  {
    npy_intp dims[1];
    if (!PyLong_Check(obj7))
    {
      const char* typestring = pytype_string(obj7);
      PyErr_Format(PyExc_TypeError,
        "Int dimension expected.  '%s' given.",
        typestring);
      SWIG_fail;
    }
    arg10 = (int) PyLong_AsSsize_t(obj7);
    if (arg10 == -1 && PyErr_Occurred()) SWIG_fail;
    dims[0] = (npy_intp) arg10;
    array9 = PyArray_SimpleNew(1, dims, NPY_INT);
    if (!array9) SWIG_fail;
    arg9 = (int*) array_data(array9);
  }
  {
    npy_intp dims[1];
    if (!PyLong_Check(obj8))
    {
      const char* typestring = pytype_string(obj8);
      PyErr_Format(PyExc_TypeError,
        "Int dimension expected.  '%s' given.",
        typestring);
      SWIG_fail;
    }
    arg12 = (int) PyLong_AsSsize_t(obj8);
    if (arg12 == -1 && PyErr_Occurred()) SWIG_fail;
    dims[0] = (npy_intp) arg12;
    array11 = PyArray_SimpleNew(1, dims, NPY_INT);
    if (!array11) SWIG_fail;
    arg11 = (int*) array_data(array11);
  }
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      mesh2D_Mesh2T3(arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9,arg10,arg11,arg12);
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_Py_Void();
  {
    resultobj = SWIG_Python_AppendOutput(resultobj, (PyObject*)array7);
  }
  {
    resultobj = SWIG_Python_AppendOutput(resultobj, (PyObject*)array9);
  }
  {
    resultobj = SWIG_Python_AppendOutput(resultobj, (PyObject*)array11);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_mesh2D_Mesh4T3(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  double arg1 ;
  double arg2 ;
  double arg3 ;
  double arg4 ;
  int arg5 ;
  int arg6 ;
  double *arg7 = (double *) 0 ;
  int arg8 ;
  int *arg9 = (int *) 0 ;
  int arg10 ;
  int *arg11 = (int *) 0 ;
  int arg12 ;
  double val1 ;
  int ecode1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  double val4 ;
  int ecode4 = 0 ;
  int val5 ;
  int ecode5 = 0 ;
  int val6 ;
  int ecode6 = 0 ;
  PyObject *array7 = NULL ;
  PyObject *array9 = NULL ;
  PyObject *array11 = NULL ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  PyObject * obj5 = 0 ;
  PyObject * obj6 = 0 ;
  PyObject * obj7 = 0 ;
  PyObject * obj8 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOOOOOO:mesh2D_Mesh4T3",&obj0,&obj1,&obj2,&obj3,&obj4,&obj5,&obj6,&obj7,&obj8)) SWIG_fail;
  ecode1 = SWIG_AsVal_double(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "mesh2D_Mesh4T3" "', argument " "1"" of type '" "double""'");
  } 
  arg1 = static_cast< double >(val1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "mesh2D_Mesh4T3" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  ecode3 = SWIG_AsVal_double(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "mesh2D_Mesh4T3" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast< double >(val3);
  ecode4 = SWIG_AsVal_double(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "mesh2D_Mesh4T3" "', argument " "4"" of type '" "double""'");
  } 
  arg4 = static_cast< double >(val4);
  ecode5 = SWIG_AsVal_int(obj4, &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "mesh2D_Mesh4T3" "', argument " "5"" of type '" "int""'");
  } 
  arg5 = static_cast< int >(val5);
  ecode6 = SWIG_AsVal_int(obj5, &val6);
  if (!SWIG_IsOK(ecode6)) {
    SWIG_exception_fail(SWIG_ArgError(ecode6), "in method '" "mesh2D_Mesh4T3" "', argument " "6"" of type '" "int""'");
  } 
  arg6 = static_cast< int >(val6);
  {
    npy_intp dims[1];
    if (!PyLong_Check(obj6))
    {
      const char* typestring = pytype_string(obj6);
      PyErr_Format(PyExc_TypeError,
        "Int dimension expected.  '%s' given.",
        typestring);
      SWIG_fail;
    }
    arg8 = (int) PyLong_AsSsize_t(obj6);
    if (arg8 == -1 && PyErr_Occurred()) SWIG_fail;
    dims[0] = (npy_intp) arg8;
    array7 = PyArray_SimpleNew(1, dims, NPY_DOUBLE);
    if (!array7) SWIG_fail;
    arg7 = (double*) array_data(array7);
  }
  {
    npy_intp dims[1];
    if (!PyLong_Check(obj7))
    {
      const char* typestring = pytype_string(obj7);
      PyErr_Format(PyExc_TypeError,
        "Int dimension expected.  '%s' given.",
        typestring);
      SWIG_fail;
    }
    arg10 = (int) PyLong_AsSsize_t(obj7);
    if (arg10 == -1 && PyErr_Occurred()) SWIG_fail;
    dims[0] = (npy_intp) arg10;
    array9 = PyArray_SimpleNew(1, dims, NPY_INT);
    if (!array9) SWIG_fail;
    arg9 = (int*) array_data(array9);
  }
  {
    npy_intp dims[1];
    if (!PyLong_Check(obj8))
    {
      const char* typestring = pytype_string(obj8);
      PyErr_Format(PyExc_TypeError,
        "Int dimension expected.  '%s' given.",
        typestring);
      SWIG_fail;
    }
    arg12 = (int) PyLong_AsSsize_t(obj8);
    if (arg12 == -1 && PyErr_Occurred()) SWIG_fail;
    dims[0] = (npy_intp) arg12;
    array11 = PyArray_SimpleNew(1, dims, NPY_INT);
    if (!array11) SWIG_fail;
    arg11 = (int*) array_data(array11);
  }
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      mesh2D_Mesh4T3(arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9,arg10,arg11,arg12);
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_Py_Void();
  {
    resultobj = SWIG_Python_AppendOutput(resultobj, (PyObject*)array7);
  }
  {
    resultobj = SWIG_Python_AppendOutput(resultobj, (PyObject*)array9);
  }
  {
    resultobj = SWIG_Python_AppendOutput(resultobj, (PyObject*)array11);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_mesh2D_MeshQ8(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  double arg1 ;
  double arg2 ;
  double arg3 ;
  double arg4 ;
  int arg5 ;
  int arg6 ;
  double *arg7 = (double *) 0 ;
  int arg8 ;
  int *arg9 = (int *) 0 ;
  int arg10 ;
  int *arg11 = (int *) 0 ;
  int arg12 ;
  double val1 ;
  int ecode1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  double val4 ;
  int ecode4 = 0 ;
  int val5 ;
  int ecode5 = 0 ;
  int val6 ;
  int ecode6 = 0 ;
  PyObject *array7 = NULL ;
  PyObject *array9 = NULL ;
  PyObject *array11 = NULL ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  PyObject * obj5 = 0 ;
  PyObject * obj6 = 0 ;
  PyObject * obj7 = 0 ;
  PyObject * obj8 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOOOOOO:mesh2D_MeshQ8",&obj0,&obj1,&obj2,&obj3,&obj4,&obj5,&obj6,&obj7,&obj8)) SWIG_fail;
  ecode1 = SWIG_AsVal_double(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "mesh2D_MeshQ8" "', argument " "1"" of type '" "double""'");
  } 
  arg1 = static_cast< double >(val1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "mesh2D_MeshQ8" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  ecode3 = SWIG_AsVal_double(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "mesh2D_MeshQ8" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast< double >(val3);
  ecode4 = SWIG_AsVal_double(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "mesh2D_MeshQ8" "', argument " "4"" of type '" "double""'");
  } 
  arg4 = static_cast< double >(val4);
  ecode5 = SWIG_AsVal_int(obj4, &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "mesh2D_MeshQ8" "', argument " "5"" of type '" "int""'");
  } 
  arg5 = static_cast< int >(val5);
  ecode6 = SWIG_AsVal_int(obj5, &val6);
  if (!SWIG_IsOK(ecode6)) {
    SWIG_exception_fail(SWIG_ArgError(ecode6), "in method '" "mesh2D_MeshQ8" "', argument " "6"" of type '" "int""'");
  } 
  arg6 = static_cast< int >(val6);
  {
    npy_intp dims[1];
    if (!PyLong_Check(obj6))
    {
      const char* typestring = pytype_string(obj6);
      PyErr_Format(PyExc_TypeError,
        "Int dimension expected.  '%s' given.",
        typestring);
      SWIG_fail;
    }
    arg8 = (int) PyLong_AsSsize_t(obj6);
    if (arg8 == -1 && PyErr_Occurred()) SWIG_fail;
    dims[0] = (npy_intp) arg8;
    array7 = PyArray_SimpleNew(1, dims, NPY_DOUBLE);
    if (!array7) SWIG_fail;
    arg7 = (double*) array_data(array7);
  }
  {
    npy_intp dims[1];
    if (!PyLong_Check(obj7))
    {
      const char* typestring = pytype_string(obj7);
      PyErr_Format(PyExc_TypeError,
        "Int dimension expected.  '%s' given.",
        typestring);
      SWIG_fail;
    }
    arg10 = (int) PyLong_AsSsize_t(obj7);
    if (arg10 == -1 && PyErr_Occurred()) SWIG_fail;
    dims[0] = (npy_intp) arg10;
    array9 = PyArray_SimpleNew(1, dims, NPY_INT);
    if (!array9) SWIG_fail;
    arg9 = (int*) array_data(array9);
  }
  {
    npy_intp dims[1];
    if (!PyLong_Check(obj8))
    {
      const char* typestring = pytype_string(obj8);
      PyErr_Format(PyExc_TypeError,
        "Int dimension expected.  '%s' given.",
        typestring);
      SWIG_fail;
    }
    arg12 = (int) PyLong_AsSsize_t(obj8);
    if (arg12 == -1 && PyErr_Occurred()) SWIG_fail;
    dims[0] = (npy_intp) arg12;
    array11 = PyArray_SimpleNew(1, dims, NPY_INT);
    if (!array11) SWIG_fail;
    arg11 = (int*) array_data(array11);
  }
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      mesh2D_MeshQ8(arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9,arg10,arg11,arg12);
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_Py_Void();
  {
    resultobj = SWIG_Python_AppendOutput(resultobj, (PyObject*)array7);
  }
  {
    resultobj = SWIG_Python_AppendOutput(resultobj, (PyObject*)array9);
  }
  {
    resultobj = SWIG_Python_AppendOutput(resultobj, (PyObject*)array11);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_surface_T3_compute_volume_inertia(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  double *arg1 = (double *) 0 ;
  int arg2 ;
  int *arg3 = (int *) 0 ;
  int arg4 ;
  double *arg5 = (double *) 0 ;
  int arg6 ;
  double *arg7 = (double *) 0 ;
  int arg8 ;
  double *arg9 = (double *) 0 ;
  PyArrayObject *array1 = NULL ;
  int is_new_object1 = 0 ;
  PyArrayObject *array3 = NULL ;
  int i3 = 1 ;
  PyObject *array5 = NULL ;
  PyObject *array7 = NULL ;
  double temp9 ;
  int res9 = SWIG_TMPOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  
  arg9 = &temp9;
  if (!PyArg_ParseTuple(args,(char *)"OOOO:surface_T3_compute_volume_inertia",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  {
    npy_intp size[1] = {
      -1 
    };
    array1 = obj_to_array_contiguous_allow_conversion(obj0,
      NPY_DOUBLE,
      &is_new_object1);
    if (!array1 || !require_dimensions(array1, 1) ||
      !require_size(array1, size, 1)) SWIG_fail;
    arg1 = (double*) array_data(array1);
    arg2 = (int) array_size(array1,0);
  }
  {
    array3 = obj_to_array_no_conversion(obj1, NPY_INT);
    if (!array3 || !require_dimensions(array3,1) || !require_contiguous(array3)
      || !require_native(array3)) SWIG_fail;
    arg3 = (int*) array_data(array3);
    arg4 = 1;
    for (i3=0; i3 < array_numdims(array3); ++i3) arg4 *= array_size(array3,i3);
  }
  {
    npy_intp dims[1];
    if (!PyLong_Check(obj2))
    {
      const char* typestring = pytype_string(obj2);
      PyErr_Format(PyExc_TypeError,
        "Int dimension expected.  '%s' given.",
        typestring);
      SWIG_fail;
    }
    arg6 = (int) PyLong_AsSsize_t(obj2);
    if (arg6 == -1 && PyErr_Occurred()) SWIG_fail;
    dims[0] = (npy_intp) arg6;
    array5 = PyArray_SimpleNew(1, dims, NPY_DOUBLE);
    if (!array5) SWIG_fail;
    arg5 = (double*) array_data(array5);
  }
  {
    npy_intp dims[1];
    if (!PyLong_Check(obj3))
    {
      const char* typestring = pytype_string(obj3);
      PyErr_Format(PyExc_TypeError,
        "Int dimension expected.  '%s' given.",
        typestring);
      SWIG_fail;
    }
    arg8 = (int) PyLong_AsSsize_t(obj3);
    if (arg8 == -1 && PyErr_Occurred()) SWIG_fail;
    dims[0] = (npy_intp) arg8;
    array7 = PyArray_SimpleNew(1, dims, NPY_DOUBLE);
    if (!array7) SWIG_fail;
    arg7 = (double*) array_data(array7);
  }
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      surface_T3_compute_volume_inertia(arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9);
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_Py_Void();
  {
    resultobj = SWIG_Python_AppendOutput(resultobj, (PyObject*)array5);
  }
  {
    resultobj = SWIG_Python_AppendOutput(resultobj, (PyObject*)array7);
  }
  if (SWIG_IsTmpObj(res9)) {
    resultobj = SWIG_Python_AppendOutput(resultobj, SWIG_From_double((*arg9)));
  } else {
    int new_flags = SWIG_IsNewObj(res9) ? (SWIG_POINTER_OWN |  0 ) :  0 ;
    resultobj = SWIG_Python_AppendOutput(resultobj, SWIG_NewPointerObj((void*)(arg9), SWIGTYPE_p_double, new_flags));
  }
  {
    if (is_new_object1 && array1)
    {
      Py_DECREF(array1); 
    }
  }
  return resultobj;
fail:
  {
    if (is_new_object1 && array1)
    {
      Py_DECREF(array1); 
    }
  }
  return NULL;
}


SWIGINTERN PyObject *_wrap_surface_T3_identify_entities(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  int arg1 ;
  int arg2 ;
  int *arg3 = (int *) 0 ;
  int arg4 ;
  int *arg5 = (int *) 0 ;
  int arg6 ;
  int val1 ;
  int ecode1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyArrayObject *array3 = NULL ;
  int is_new_object3 = 0 ;
  PyObject *array5 = NULL ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:surface_T3_identify_entities",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "surface_T3_identify_entities" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = static_cast< int >(val1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "surface_T3_identify_entities" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    npy_intp size[1] = {
      -1 
    };
    array3 = obj_to_array_contiguous_allow_conversion(obj2,
      NPY_INT,
      &is_new_object3);
    if (!array3 || !require_dimensions(array3, 1) ||
      !require_size(array3, size, 1)) SWIG_fail;
    arg3 = (int*) array_data(array3);
    arg4 = (int) array_size(array3,0);
  }
  {
    npy_intp dims[1];
    if (!PyLong_Check(obj3))
    {
      const char* typestring = pytype_string(obj3);
      PyErr_Format(PyExc_TypeError,
        "Int dimension expected.  '%s' given.",
        typestring);
      SWIG_fail;
    }
    arg6 = (int) PyLong_AsSsize_t(obj3);
    if (arg6 == -1 && PyErr_Occurred()) SWIG_fail;
    dims[0] = (npy_intp) arg6;
    array5 = PyArray_SimpleNew(1, dims, NPY_INT);
    if (!array5) SWIG_fail;
    arg5 = (int*) array_data(array5);
  }
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      surface_T3_identify_entities(arg1,arg2,arg3,arg4,arg5,arg6);
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_Py_Void();
  {
    resultobj = SWIG_Python_AppendOutput(resultobj, (PyObject*)array5);
  }
  {
    if (is_new_object3 && array3)
    {
      Py_DECREF(array3); 
    }
  }
  return resultobj;
fail:
  {
    if (is_new_object3 && array3)
    {
      Py_DECREF(array3); 
    }
  }
  return NULL;
}


SWIGINTERN PyObject *_wrap_io_hdf5_initOutFile(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  char *arg1 = (char *) 0 ;
  int res1 ;
  char *buf1 = 0 ;
  int alloc1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:io_hdf5_initOutFile",&obj0)) SWIG_fail;
  res1 = SWIG_AsCharPtrAndSize(obj0, &buf1, NULL, &alloc1);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "io_hdf5_initOutFile" "', argument " "1"" of type '" "char *""'");
  }
  arg1 = reinterpret_cast< char * >(buf1);
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      io_hdf5_initOutFile(arg1);
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_Py_Void();
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  return resultobj;
fail:
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  return NULL;
}


SWIGINTERN PyObject *_wrap_io_hdf5_write(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  
  if (!PyArg_ParseTuple(args,(char *)":io_hdf5_write")) SWIG_fail;
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      io_hdf5_write();
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_io_hdf5_write_last(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  char *arg1 = (char *) 0 ;
  int res1 ;
  char *buf1 = 0 ;
  int alloc1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:io_hdf5_write_last",&obj0)) SWIG_fail;
  res1 = SWIG_AsCharPtrAndSize(obj0, &buf1, NULL, &alloc1);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "io_hdf5_write_last" "', argument " "1"" of type '" "char *""'");
  }
  arg1 = reinterpret_cast< char * >(buf1);
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      io_hdf5_write_last(arg1);
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_Py_Void();
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  return resultobj;
fail:
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  return NULL;
}


SWIGINTERN PyObject *_wrap_io_hdf5_read(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  char *arg1 = (char *) 0 ;
  int arg2 ;
  int res1 ;
  char *buf1 = 0 ;
  int alloc1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:io_hdf5_read",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_AsCharPtrAndSize(obj0, &buf1, NULL, &alloc1);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "io_hdf5_read" "', argument " "1"" of type '" "char *""'");
  }
  arg1 = reinterpret_cast< char * >(buf1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "io_hdf5_read" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      io_hdf5_read(arg1,arg2);
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_Py_Void();
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  return resultobj;
fail:
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  return NULL;
}


SWIGINTERN PyObject *_wrap_io_hdf5_cleanMemory(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  
  if (!PyArg_ParseTuple(args,(char *)":io_hdf5_cleanMemory")) SWIG_fail;
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      io_hdf5_cleanMemory();
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_io_hdf5_fixVersion(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  int arg1 ;
  int val1 ;
  int ecode1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:io_hdf5_fixVersion",&obj0)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "io_hdf5_fixVersion" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = static_cast< int >(val1);
  {
    char * mess;
    int err;
    
    utilities_resetFatal();
    if( (err = setjmp(except_buf)) == 0 )
    {
      io_hdf5_fixVersion(arg1);
    }
    else
    {
      err = utilities_checkFatal(&mess);
      SWIG_exception(SWIG_RuntimeError,mess);
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


static PyMethodDef SwigMethods[] = {
	 { (char *)"SWIG_PyInstanceMethod_New", (PyCFunction)SWIG_PyInstanceMethod_New, METH_O, NULL},
	 { (char *)"DISKx_LoadTactors", _wrap_DISKx_LoadTactors, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"load DISKx from RBDY2 file and initialize existing_entites  \n"
		"\n"
		"python usage : DISKx_LoadTactors()  \n"
		"\n"
		""},
	 { (char *)"DISKx_GetNbDISKx", _wrap_DISKx_GetNbDISKx, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"Get the number of DISKx in the container.  \n"
		"\n"
		"python usage : nb_diskx = DISKx_GetNbDISKx()  \n"
		"\n"
		"Returns\n"
		"-------\n"
		"nb_DISKx (integer) : the number of DISKx in container  \n"
		"\n"
		""},
	 { (char *)"DISKx_GetDISKx2BDYTY", _wrap_DISKx_GetDISKx2BDYTY, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"Get a copy of map DISKx2bdyty.  \n"
		"\n"
		"usage : polyr2bdyty = DISKx_GetDISKx2BDYTY()  \n"
		"\n"
		"Returns\n"
		"-------\n"
		"polyr2bdyty (integer 2D-array) : the polyr2bdyty map  \n"
		"\n"
		""},
	 { (char *)"DISKx_GetPtrDISKx2BDYTY", _wrap_DISKx_GetPtrDISKx2BDYTY, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"return a pointer onto the map diskx2rbdy2  \n"
		"\n"
		"python usage : diskx2bdyty = DISKx_GetPtrDISKx2BDYTY()  \n"
		"\n"
		"Returns\n"
		"-------\n"
		"diskx2bdyty (integer array) : reference on map between diskx rank and body rank  \n"
		"\n"
		""},
	 { (char *)"DISKx_IsVisible", _wrap_DISKx_IsVisible, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"return if a body visible  \n"
		"\n"
		"python usage : visible = DISKx_IsVisible(itact)  \n"
		"\n"
		"Parameters\n"
		"----------\n"
		"itact(integer) : rank of DISKx  \n"
		"visible(integer) : 1 if body is visible, 0 else  \n"
		"\n"
		""},
	 { (char *)"DISKx_GetContactorRadius", _wrap_DISKx_GetContactorRadius, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"Get the radius of a given DISKx.  \n"
		"\n"
		"python usage : radius = DISKx_GetContactorRadius(itact)  \n"
		"\n"
		"Parameters\n"
		"----------\n"
		"itact(integer) : rank of a DISKx (in the list of all the DISKx)  \n"
		"\n"
		"Returns\n"
		"-------\n"
		"radius (double) : the radius of the DISKx of rank itact  \n"
		"\n"
		""},
	 { (char *)"DISKx_GetMeanRadius", _wrap_DISKx_GetMeanRadius, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"Get the mean radius of DISKx in the container.  \n"
		"\n"
		"python usage : radius = DISKx_GetMeanRadius()  \n"
		"\n"
		"Returns\n"
		"-------\n"
		"radius (double) : the mean radius of DISKx in the container  \n"
		"\n"
		""},
	 { (char *)"DISKx_GetMaxRadius", _wrap_DISKx_GetMaxRadius, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"Get the max radius of DISKx in the container.  \n"
		"\n"
		"python usage : radius = DISKx_GetMaxRadius()  \n"
		"\n"
		"Returns\n"
		"-------\n"
		"radius (double) : the max radius of DISKx in the contactor  \n"
		"\n"
		""},
	 { (char *)"DISKx_GetMinRadius", _wrap_DISKx_GetMinRadius, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"Get the min radius of DISKx in the container.  \n"
		"\n"
		"python usage : radius = DISKx_GetMinRadius()  \n"
		"\n"
		"Returns\n"
		"-------\n"
		"radius (double) : the min radius of DISKx in the container  \n"
		"\n"
		""},
	 { (char *)"DISKx_GetContactorColor", _wrap_DISKx_GetContactorColor, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"Get the color of a given DISKx.  \n"
		"\n"
		"python usage : color = DISKx_GetContactorColor(itact)  \n"
		"\n"
		"Parameters\n"
		"----------\n"
		"itact(integer) : rank of a DISKx  \n"
		"\n"
		"Returns\n"
		"-------\n"
		"color (string) : the color of the DISKx itact  \n"
		"\n"
		""},
	 { (char *)"DISKx_GetRadius", _wrap_DISKx_GetRadius, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"get radius of a DISKx  \n"
		"\n"
		"python usage : radius = DISKx_GetRadius(itacty)  \n"
		"\n"
		"Parameters\n"
		"----------\n"
		"itacty(integer) : rank of DISKx  \n"
		"\n"
		"Returns\n"
		"-------\n"
		"radius (double) : the radius of DISKx of body ibdyty  \n"
		"\n"
		""},
	 { (char *)"DISKx_GetContactorCoor", _wrap_DISKx_GetContactorCoor, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"get coordinates of the center of a given DISKx  \n"
		"\n"
		"python usage : vector = DISKx_GetContactorCoor(itacty)  \n"
		"\n"
		"Parameters\n"
		"----------\n"
		"itacty(integer) : rank of considered contactor  \n"
		"\n"
		"Returns\n"
		"-------\n"
		"vector (double array) : the desired vector  \n"
		"\n"
		""},
	 { (char *)"DISKx_InitOutlines", _wrap_DISKx_InitOutlines, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"Get a reference on the outlines of all DISKx.  \n"
		"\n"
		"python usage : outlines = DISKx_InitOutlines()  \n"
		"\n"
		"Returns\n"
		"-------\n"
		"outlines (double array) : a reference on outlines_DISKx  \n"
		"\n"
		""},
	 { (char *)"DISKx_InitScalarFields", _wrap_DISKx_InitScalarFields, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"Get a reference on the scalar fields of all DISKx.  \n"
		"\n"
		"python usage : scalarfields = DISKx_InitScalarfields()  \n"
		"\n"
		"Returns\n"
		"-------\n"
		"scalarfields (double array) : reference on scalarfields_DISKx array  \n"
		"\n"
		""},
	 { (char *)"DISKx_UpdatePostdata", _wrap_DISKx_UpdatePostdata, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"Update values of outlines_DISKx and scalarfields_DISKx pointers.  \n"
		"\n"
		"python usage : DISKx_UpdatePostdata()  \n"
		"\n"
		""},
	 { (char *)"DISKx_GetNbPointOutlines", _wrap_DISKx_GetNbPointOutlines, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"Get the list of cumulated outline points number.  \n"
		"\n"
		"python usage : nb_pointOutlines = DISKx_GetNbPointOutlines()  \n"
		"\n"
		"Returns\n"
		"-------\n"
		"nb_pointOutlines (integer array) : the cumulated number of outline points of the\n"
		"DISKx  \n"
		"\n"
		""},
	 { (char *)"DISKx_GetNbScalarFields", _wrap_DISKx_GetNbScalarFields, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"Get the number of scalar fields of a DISKx.  \n"
		"\n"
		"python usage : nb_scalarfields = DISKx_GetNbScalarFields()  \n"
		"\n"
		"Returns\n"
		"-------\n"
		"nb_scalarfields (integer) : the number of scalar fields of a DISKx  \n"
		"\n"
		""},
	 { (char *)"DISKx_CleanMemory", _wrap_DISKx_CleanMemory, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"Free all memory allocated within DISKx module.  \n"
		"\n"
		"python usage : DISKx_CleanMemory()  \n"
		"\n"
		""},
	 { (char *)"DISKx_SetXdilation", _wrap_DISKx_SetXdilation, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"set increase of radius of a DISKx due to expansion  \n"
		"\n"
		"python usage : DISKx_SetXdilation(itacty,x)  \n"
		"\n"
		"Parameters\n"
		"----------\n"
		"itacty(integer) : rank of considered contactor  \n"
		"x(float) : increase of radius  \n"
		"\n"
		""},
	 { (char *)"DISKx_SetVdilation", _wrap_DISKx_SetVdilation, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"set increase rate of radius of a DISKx due to expansion  \n"
		"\n"
		"python usage : DISKx_SetVdilation(itacty, v)  \n"
		"\n"
		"Parameters\n"
		"----------\n"
		"itacty(integer) : rank of contactor  \n"
		"v(float) : radius increase rate  \n"
		"\n"
		""},
	 { (char *)"JONCx_LoadTactors", _wrap_JONCx_LoadTactors, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"load JONCx from RBDY2 and initialize existing_entites  \n"
		"\n"
		"python usage : JONCx_LoadTactors()  \n"
		"\n"
		""},
	 { (char *)"JONCx_GetNbJONCx", _wrap_JONCx_GetNbJONCx, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"Get the number of JONCx in container.  \n"
		"\n"
		"python usage : nb_joncx = JONCx_GetNbJONCx()  \n"
		"\n"
		"Returns\n"
		"-------\n"
		"nb_joncx (integer) : the number of JONCx in container  \n"
		"\n"
		""},
	 { (char *)"JONCx_GetBodyId", _wrap_JONCx_GetBodyId, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"Get the body rank of a given JONCx.  \n"
		"\n"
		"python usage : ibdyty = JONCx_GetBodyId(itacty)  \n"
		"\n"
		"Parameters\n"
		"----------\n"
		"itacty(integer) : JONCx rank  \n"
		"\n"
		"Returns\n"
		"-------\n"
		"ibdyty (integer) : body rank  \n"
		"\n"
		""},
	 { (char *)"JONCx_GetShape", _wrap_JONCx_GetShape, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"Get the shape of a JONCx.  \n"
		"\n"
		"usage : shape = JONCx_GetShape(itacty)  \n"
		"\n"
		"Parameters\n"
		"----------\n"
		"itacty(integer) : rank of JONCx  \n"
		"\n"
		"Returns\n"
		"-------\n"
		"shape (double array) : axis length of the JONCx  \n"
		"\n"
		""},
	 { (char *)"JONCx_GetCoor", _wrap_JONCx_GetCoor, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"Get the coor of a JONCx.  \n"
		"\n"
		"usage : coor = JONCx_GetCoor(itacty)  \n"
		"\n"
		"Parameters\n"
		"----------\n"
		"itacty(integer) : rank of JONCx  \n"
		"\n"
		"Returns\n"
		"-------\n"
		"coor (double array) : coordinates of the JONCx  \n"
		"\n"
		""},
	 { (char *)"JONCx_GetPtrJONCx2BDYTY", _wrap_JONCx_GetPtrJONCx2BDYTY, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"return a pointer onto the map joncx2rbdy2  \n"
		"\n"
		"python usage : joncx2rbdy2 = JONCx_GetPtrJONCx2BDYTY()  \n"
		"\n"
		"Returns\n"
		"-------\n"
		"joncx2rbdy2 (integer array) : reference on map between joncx rank and body/tact\n"
		"rank  \n"
		"\n"
		""},
	 { (char *)"JONCx_IsVisible", _wrap_JONCx_IsVisible, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"return if a body visible  \n"
		"\n"
		"usage : visible = JONCx_IsVisible(itact)  \n"
		"\n"
		"Parameters\n"
		"----------\n"
		"itact(integer) : rank of JONCx  \n"
		"visible(integer) : 1 if body is visible, 0 else  \n"
		"\n"
		""},
	 { (char *)"JONCx_InitOutlines", _wrap_JONCx_InitOutlines, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"Get a reference on the outlines of all JONCx.  \n"
		"\n"
		"usage : outlines = JONCx_InitOutlines()  \n"
		"\n"
		"Returns\n"
		"-------\n"
		"outlines (double array) : a reference on outlines_JONCx  \n"
		"\n"
		""},
	 { (char *)"JONCx_InitScalarFields", _wrap_JONCx_InitScalarFields, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"Get a reference on the scalar fields of all JONCx.  \n"
		"\n"
		"usage : scalarfields = JONCx_InitScalarfields()  \n"
		"\n"
		"Returns\n"
		"-------\n"
		"scalarfields (double array) : reference on scalarfields_JONCx array  \n"
		"\n"
		""},
	 { (char *)"JONCx_UpdatePostdata", _wrap_JONCx_UpdatePostdata, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"Update values of outlines_JONCx and scalarfields_JONCx pointers.  \n"
		"\n"
		"usage : JONCx_UpdatePostdata()  \n"
		"\n"
		""},
	 { (char *)"JONCx_GetNbPointOutlines", _wrap_JONCx_GetNbPointOutlines, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"Get the list of cumulated outline points number.  \n"
		"\n"
		"python usage : nb_pointOutlines = JONCx_GetNbPointOutlines()  \n"
		"\n"
		"Returns\n"
		"-------\n"
		"nb_pointOutlines (integer array) : the cumulated number of outline points of the\n"
		"JONCx  \n"
		"\n"
		""},
	 { (char *)"JONCx_GetNbScalarFields", _wrap_JONCx_GetNbScalarFields, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"Get the number of scalar fields of a JONCx.  \n"
		"\n"
		"python usage : nb_scalarfields = JONCx_GetNbScalarFields()  \n"
		"\n"
		"Returns\n"
		"-------\n"
		"nb_scalarfields (integer) : the number of scalar fields of a JONCx  \n"
		"\n"
		""},
	 { (char *)"JONCx_CleanMemory", _wrap_JONCx_CleanMemory, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"Free all memory allocated within JONCx module.  \n"
		"\n"
		"python usage : JONCx_CleanMemory()  \n"
		"\n"
		""},
	 { (char *)"POLYG_LoadTactors", _wrap_POLYG_LoadTactors, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"load POLYG from RBDY2 and initialize existing_entites  \n"
		"\n"
		"python usage : POLYG_LoadTactors()  \n"
		"\n"
		""},
	 { (char *)"POLYG_GetMinRadius", _wrap_POLYG_GetMinRadius, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"give min radius used during detection  \n"
		"\n"
		"python usage : POLYG_GetMinRadius()  \n"
		"\n"
		""},
	 { (char *)"POLYG_GetMaxRadius", _wrap_POLYG_GetMaxRadius, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"give max radius used during detection  \n"
		"\n"
		"python usage : POLYG_GetMaxRadius()  \n"
		"\n"
		""},
	 { (char *)"POLYG_GetNbPOLYG", _wrap_POLYG_GetNbPOLYG, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"Get the number of POLYG in container.  \n"
		"\n"
		"python usage : nb_polyg = POLYG_GetNbPOLYG()  \n"
		"\n"
		"Returns\n"
		"-------\n"
		"nb_polyg (integer) : the number of POLYG in container  \n"
		"\n"
		""},
	 { (char *)"POLYG_GetPOLYG2BDYTY", _wrap_POLYG_GetPOLYG2BDYTY, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"Get a copy of map POLYG2bdyty.  \n"
		"\n"
		"usage : polyr2bdyty = POLYG_GetPOLYG2BDYTY()  \n"
		"\n"
		"Returns\n"
		"-------\n"
		"polyr2bdyty (integer 2D-array) : the polyr2bdyty map  \n"
		"\n"
		""},
	 { (char *)"POLYG_GetPtrPOLYG2BDYTY", _wrap_POLYG_GetPtrPOLYG2BDYTY, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"return a pointer onto the map polyg2rbdy2  \n"
		"\n"
		"python usage : polyg2rbdy2 = POLYG_GetPtrPOLYG2BDYTY()  \n"
		"\n"
		"Returns\n"
		"-------\n"
		"polyg2rbdy2 (integer array) : reference on map between polyg rank and\n"
		"body/tactor rank  \n"
		"\n"
		""},
	 { (char *)"POLYG_IsVisible", _wrap_POLYG_IsVisible, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"return if a body visible  \n"
		"\n"
		"usage : visible = POLYG_IsVisible(itact)  \n"
		"\n"
		"Parameters\n"
		"----------\n"
		"itact(integer) : rank of POLYG  \n"
		"visible(integer) : 1 if body is visible, 0 else  \n"
		"\n"
		""},
	 { (char *)"POLYG_GetContactorRadius", _wrap_POLYG_GetContactorRadius, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"Get the radius of a given POLYG.  \n"
		"\n"
		"python usage : radius = POLYG_GetContactorRadius(itact)  \n"
		"\n"
		"Parameters\n"
		"----------\n"
		"itact(integer) : rank of a POLYG  \n"
		"\n"
		"Returns\n"
		"-------\n"
		"radius (double) : the radius of the POLYG of rank itact  \n"
		"\n"
		""},
	 { (char *)"POLYG_GetNbVertices", _wrap_POLYG_GetNbVertices, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"Get the number of vertices of the first POLYG of a body.  \n"
		"\n"
		"python usage : nb_vertices = POLYG_GetNbVertices(ibdyty)  \n"
		"\n"
		"Parameters\n"
		"----------\n"
		"ibdyty(integer) : rank of a body  \n"
		"\n"
		"Returns\n"
		"-------\n"
		"nb_vertices (integer) : the number of vertices of the first POLYG of the body  \n"
		"\n"
		""},
	 { (char *)"POLYG_GetVertices", _wrap_POLYG_GetVertices, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"Get the coordinates of the vertices of the first POLYG of a body.  \n"
		"\n"
		"usage : vertices = POLYG_GetVertices(ibdyty)  \n"
		"\n"
		"Parameters\n"
		"----------\n"
		"ibdyty(integer) : rank of considered body  \n"
		"vertices(double 2D-array) : the coordinates of the vertices  \n"
		"\n"
		""},
	 { (char *)"POLYG_GetNbVertex", _wrap_POLYG_GetNbVertex, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"Get the number of vertices of a POLYG.  \n"
		"\n"
		"usage : nb_vertex = POLYG_GetNpVertex(itacty)  \n"
		"\n"
		"Parameters\n"
		"----------\n"
		"itacty(integer) : id of the POLYG contactor  \n"
		"\n"
		"Returns\n"
		"-------\n"
		"nb_vertex (int) : the number of vertices of the POLYG  \n"
		"\n"
		""},
	 { (char *)"POLYG_GetVertex", _wrap_POLYG_GetVertex, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"Get the outline of a POLYG.  \n"
		"\n"
		"usage : vertex = POLYG_GetVertex(itacty, length)  \n"
		"\n"
		"Parameters\n"
		"----------\n"
		"ibdyty(integer) : rank of considered body  \n"
		"length(integer) : 2 * number of vertices  \n"
		"vertex(double array) : the coordinates of the vertices  \n"
		"\n"
		""},
	 { (char *)"POLYG_GetBodyId", _wrap_POLYG_GetBodyId, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"Get the id of the body which the tactor belongs.  \n"
		"\n"
		"python usage : id = POLYG_GetBodyId(itacty)  \n"
		"\n"
		"Parameters\n"
		"----------\n"
		"itacty(integer) : rank of a POLYG contactor  \n"
		"\n"
		"Returns\n"
		"-------\n"
		"id (integer) : the id of the body  \n"
		"\n"
		""},
	 { (char *)"POLYG_InitOutlines", _wrap_POLYG_InitOutlines, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"Get a reference on the outlines of all POLYG.  \n"
		"\n"
		"usage : outlines = POLYG_InitOutlines()  \n"
		"\n"
		"Returns\n"
		"-------\n"
		"outlines (double array) : a reference on outlines_POLYG  \n"
		"\n"
		""},
	 { (char *)"POLYG_InitScalarFields", _wrap_POLYG_InitScalarFields, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"Get a reference on the scalar fields of all POLYG.  \n"
		"\n"
		"usage : scalarfields = POLYG_InitScalarfields()  \n"
		"\n"
		"Returns\n"
		"-------\n"
		"scalarfields (double array) : reference on scalarfields_POLYG array  \n"
		"\n"
		""},
	 { (char *)"POLYG_UpdatePostdata", _wrap_POLYG_UpdatePostdata, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"Update values of outlines_POLYG and scalarfields_POLYG pointers.  \n"
		"\n"
		"usage : POLYG_UpdatePostdata  \n"
		"\n"
		""},
	 { (char *)"POLYG_GetNbPointOutlines", _wrap_POLYG_GetNbPointOutlines, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"Get the list of cumulated outline points number.  \n"
		"\n"
		"python usage : nb_pointOutlines = POLYG_GetNbPointOutlines()  \n"
		"\n"
		"Returns\n"
		"-------\n"
		"nb_pointOutlines (integer array) : the cumulated number of outline points of the\n"
		"POLYG  \n"
		"\n"
		""},
	 { (char *)"POLYG_GetNbScalarFields", _wrap_POLYG_GetNbScalarFields, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"Get the number of scalar fields of a POLYG.  \n"
		"\n"
		"python usage : nb_scalarfields = POLYG_GetNbScalarFields()  \n"
		"\n"
		"Returns\n"
		"-------\n"
		"nb_scalarfields (integer) : the number of scalar fields of a POLYG  \n"
		"\n"
		""},
	 { (char *)"POLYG_SetXdilation", _wrap_POLYG_SetXdilation, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		""},
	 { (char *)"POLYG_SetVdilation", _wrap_POLYG_SetVdilation, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		""},
	 { (char *)"POLYG_CleanMemory", _wrap_POLYG_CleanMemory, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"Free all memory allocated within POLYG module.  \n"
		"\n"
		"python usage : POLYG_CleanMemory()  \n"
		"\n"
		""},
	 { (char *)"PT2Dx_LoadTactors", _wrap_PT2Dx_LoadTactors, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"load PT2Dx from RBDY2 and initialize existing_entites  \n"
		"\n"
		"python usage : PT2Dx_LoadTactors()  \n"
		"\n"
		""},
	 { (char *)"PT2Dx_GetNbPT2Dx", _wrap_PT2Dx_GetNbPT2Dx, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"Get the number of PT2Dx in the container.  \n"
		"\n"
		"python usage : nb_pt2d = PT2Dx_GetNbPT2Dx()  \n"
		"\n"
		"Returns\n"
		"-------\n"
		"nb_pt2d (integer) : the number of PT2Dx in container  \n"
		"\n"
		""},
	 { (char *)"PT2Dx_SetDisplayRadius", _wrap_PT2Dx_SetDisplayRadius, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"Set a radius to display a pt2dx.  \n"
		"\n"
		"python usage : PT2Dx_SetDisplayRadius(radius)  \n"
		"\n"
		"Parameters\n"
		"----------\n"
		"radius(double) : value of the radius which should be used for display  \n"
		"\n"
		""},
	 { (char *)"PT2Dx_GetPtrPT2Dx2BDYTY", _wrap_PT2Dx_GetPtrPT2Dx2BDYTY, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"return a pointer onto the map pt2dx2rbdy2  \n"
		"\n"
		"python usage : ptd2x2rbdy2 = PT2Dx_GetPtrPT2Dx2BDYTY()  \n"
		"\n"
		"Returns\n"
		"-------\n"
		"pt2dx2rbdy2 (integer array) : reference on map between pt2dx rank and body/tact\n"
		"rank  \n"
		"\n"
		""},
	 { (char *)"PT2Dx_IsVisible", _wrap_PT2Dx_IsVisible, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"return if a body visible  \n"
		"\n"
		"usage : visible = PT2Dx_IsVisible(itact)  \n"
		"\n"
		"Parameters\n"
		"----------\n"
		"itact(integer) : rank of PT2Dx  \n"
		"visible(integer) : 1 if body is visible, 0 else  \n"
		"\n"
		""},
	 { (char *)"PT2Dx_InitOutlines", _wrap_PT2Dx_InitOutlines, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"Get a reference on the outlines of all PT2Dx.  \n"
		"\n"
		"usage : outlines = PT2Dx_InitOutlines()  \n"
		"\n"
		"Returns\n"
		"-------\n"
		"outlines (double array) : a reference on outlines_PT2Dx  \n"
		"\n"
		""},
	 { (char *)"PT2Dx_InitScalarFields", _wrap_PT2Dx_InitScalarFields, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"Get a reference on the scalar fields of all PT2Dx.  \n"
		"\n"
		"usage : scalarfields = PT2Dx_InitScalarfields()  \n"
		"\n"
		"Returns\n"
		"-------\n"
		"scalarfields (double array) : reference on scalarfields_PT2Dx array  \n"
		"\n"
		""},
	 { (char *)"PT2Dx_UpdatePostdata", _wrap_PT2Dx_UpdatePostdata, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"Update values of outlines_PT2Dx and scalarfields_PT2Dx pointers.  \n"
		"\n"
		"usage : PT2Dx_UpdatePostdata  \n"
		"\n"
		""},
	 { (char *)"PT2Dx_GetNbPointOutlines", _wrap_PT2Dx_GetNbPointOutlines, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"Get the list of cumulated outline points number.  \n"
		"\n"
		"python usage : nb_pointOutlines = PT2Dx_GetNbPointOutlines()  \n"
		"\n"
		"Returns\n"
		"-------\n"
		"nb_pointOutlines (integer array) : the cumulated number of outline points of the\n"
		"PT2Dx  \n"
		"\n"
		""},
	 { (char *)"PT2Dx_GetNbScalarFields", _wrap_PT2Dx_GetNbScalarFields, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"Get the number of scalar fields of a PT2Dx.  \n"
		"\n"
		"python usage : nb_scalarfields = PT2Dx_GetNbScalarFields()  \n"
		"\n"
		"Returns\n"
		"-------\n"
		"nb_scalarfields (integer) : the number of scalar fields of a PT2Dx  \n"
		"\n"
		""},
	 { (char *)"PT2Dx_CleanMemory", _wrap_PT2Dx_CleanMemory, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"Free all memory allocated within PT2Dx module.  \n"
		"\n"
		"python usage : PT2Dx_CleanMemory()  \n"
		"\n"
		""},
	 { (char *)"RBDY2_PutBodyInvMass", _wrap_RBDY2_PutBodyInvMass, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"Set inv mass diagonal matrix of a given body. Overwrites the computed values.  \n"
		"\n"
		"usage : RBDY2_PutBodyInvMass(ibdyty, inv_mass)  \n"
		"\n"
		"Parameters\n"
		"----------\n"
		"ibdyty(integer) : rank of RBDY2  \n"
		"inv_mass(double array) : inv_mass of RBDY2 (size 3)  \n"
		"\n"
		""},
	 { (char *)"RBDY2_PutBodyPreconW", _wrap_RBDY2_PutBodyPreconW, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"Put preconW of a given body.  \n"
		"\n"
		"usage : RBDY2_PutBodyPreconW(ibdyty, idof, W)  \n"
		"\n"
		"Parameters\n"
		"----------\n"
		"ibdyty(integer) : rank of RBDY2  \n"
		"idof(integer) : corresponding dof to set  \n"
		"W(double array) :  \n"
		"\n"
		""},
	 { (char *)"RBDY2_PutBodyVector", _wrap_RBDY2_PutBodyVector, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"Set a vector of a given body.  \n"
		"\n"
		"Possible values for datatype field are:  \n"
		"\n"
		"*   \"Coor0\": reference coordinates  \n"
		"*   \"Coorb\": coordinates at beginning of time step  \n"
		"*   \"Coor_\": coordinates in computed configuration  \n"
		"*   \"X____\": cumulated displacements over time in computed configuration  \n"
		"*   \"Xbeg_\": cumulated displacements over time at beginning of time step  \n"
		"*   \"V____\": velocity in computed configuration  \n"
		"*   \"Vbeg_\": velocity at beginning of time step  \n"
		"*   \"Vaux_\": working array for velocity  \n"
		"*   \"Vfree\": velocity free of contacts  \n"
		"*   \"Reac_\": contact reaction force  \n"
		"*   \"Raux_\": working array for reaction force  \n"
		"*   \"Ireac\": contact impulse  \n"
		"*   \"Iaux_\": working array for impulste  \n"
		"*   \"Fext_\": external forces  \n"
		"\n"
		"Uses copy, and in case fo Fext, the operation is not just setting but adding  \n"
		"\n"
		"usage : RBDY2_PutBodyVector(datatype, ibdyty, vector)  \n"
		"\n"
		"Parameters\n"
		"----------\n"
		"datatype(string of size 5) : the vector to set  \n"
		"ibdyty(integer) : rank of body  \n"
		"vector(double array) : the new value  \n"
		"\n"
		""},
	 { (char *)"RBDY2_PutAllBodyVector", _wrap_RBDY2_PutAllBodyVector, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"Put an array of a vector of all RBDY2 bodies (visible and invisible)  \n"
		"\n"
		"Possible values for datatype field are: ... see RBDY2_PutBodyVector  \n"
		"\n"
		"python usage : RBDY2_PutAllBodyVector(datatype, matrix)  \n"
		"\n"
		"Parameters\n"
		"----------\n"
		"datatype(string [5]) : the vector to set  \n"
		"matrix(double array) : input matrix  \n"
		"\n"
		""},
	 { (char *)"RBDY2_GetBodyVector", _wrap_RBDY2_GetBodyVector, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"Get a copy of a vector of a given RBDY2 body.  \n"
		"\n"
		"Possible values for datatype field are:  \n"
		"\n"
		"*   \"Coor0\": reference coordinates  \n"
		"*   \"Coorb\": coordinates at beginning of time step  \n"
		"*   \"Coorm\": coordinates in detection configuration  \n"
		"*   \"Coor_\": coordinates in computed configuration  \n"
		"*   \"X____\": cumulated displacements over time in computed configuration  \n"
		"*   \"Xbeg_\": cumulated displacements over time at beginning of time step  \n"
		"*   \"V____\": velocity in computed configuration  \n"
		"*   \"Vbeg_\": velocity at beginning of time step  \n"
		"*   \"Vaux_\": working array for velocity  \n"
		"*   \"Vfree\": velocity free of contacts  \n"
		"*   \"Reac_\": contact reaction force  \n"
		"*   \"Raux_\": working array for reaction force  \n"
		"*   \"Ireac\": contact impulse  \n"
		"*   \"Iaux_\": working array for impulste  \n"
		"*   \"Fext_\": external forces  \n"
		"*   \"Fint_\": internal forces  \n"
		"\n"
		"usage : vector = RBDY2_GetBodyVector(datatype, ibdyty)  \n"
		"\n"
		"Parameters\n"
		"----------\n"
		"datatype(string of size 5) : the vector to get  \n"
		"ibdyty(integer) : rank of considered body  \n"
		"vector(double array) : the desired vector  \n"
		"\n"
		""},
	 { (char *)"RBDY2_GetAllBodyVector", _wrap_RBDY2_GetAllBodyVector, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"Get an array of a vector of all RBDY2 bodies (visible and invisible)  \n"
		"\n"
		"Possible values for datatype field are: ... see RBDY2_GetBodyVector  \n"
		"\n"
		"python usage : matrix = RBDY2_GetBodyVector(datatype, ibdyty)  \n"
		"\n"
		"Parameters\n"
		"----------\n"
		"datatype(string [5]) : the vector to get  \n"
		"\n"
		"Returns\n"
		"-------\n"
		"matrix (double array) : output matrix  \n"
		"\n"
		""},
	 { (char *)"RBDY2_GetPtrBodyVector", _wrap_RBDY2_GetPtrBodyVector, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"Get a pointer on a vector of a given RBDY2 body.  \n"
		"\n"
		"Possible values for datatype field are:  \n"
		"\n"
		"*   \"Coor0\": reference coordinates  \n"
		"*   \"Xbeg_\": cumulated displacements over time at beginning of time step  \n"
		"*   \"X____\": cumulated displacements over time in computed configuration  \n"
		"*   \"Vbeg_\": velocity at beginning of time step  \n"
		"*   \"V____\": velocity in computed configuration  \n"
		"*   \"Vaux_\": working array for velocity  \n"
		"*   \"Ireac\": contact impulse  \n"
		"*   \"Iaux_\": working array for impulste  \n"
		"*   \"Fext_\": external forces  \n"
		"\n"
		"usage : vector_ptr = RBDY2_GetPtrVector(datatype, ibdyty)  \n"
		"\n"
		"Parameters\n"
		"----------\n"
		"datatype(string of size 5) : the vector to get  \n"
		"ibdyty(integer) : rank of considered body  \n"
		"vector_ptr(double array) : reference on the desired vector viewed as a numpy array  \n"
		"\n"
		""},
	 { (char *)"RBDY2_GetBodyInertia", _wrap_RBDY2_GetBodyInertia, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"Get the inertia of a given RBDY2 body.  \n"
		"\n"
		"usage : inertia = RBDY2_GetBodyInertia(ibdyty)  \n"
		"\n"
		"Parameters\n"
		"----------\n"
		"ibdyty(integer) : rank of considered body  \n"
		"inertia(double) : the inertia of desired body  \n"
		"\n"
		""},
	 { (char *)"RBDY2_GetAllInertia", _wrap_RBDY2_GetAllInertia, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"Get the inertia of a all RBDY2 body.  \n"
		"\n"
		"usage : inertia = RBDY2_GetAllInertia()  \n"
		"\n"
		"Parameters\n"
		"----------\n"
		"inertia(double array): the inertia of all bodies  \n"
		"\n"
		""},
	 { (char *)"RBDY2_IncrementStep", _wrap_RBDY2_IncrementStep, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"increment values at the current time step (prediction)  \n"
		"\n"
		"usage : RBDY2_IncrementStep()  \n"
		"\n"
		""},
	 { (char *)"RBDY2_SetVlocyDrivenDof", _wrap_RBDY2_SetVlocyDrivenDof, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"Override the value of an existing velocity driven dof ; use after IncrementStep.  \n"
		"\n"
		"usage : RBDY2_SetVlocyDrivenDof(ibdyty, idrvdof, value)  \n"
		"\n"
		"Parameters\n"
		"----------\n"
		"ibdyty(integer) : rank of considered  \n"
		"idrvdof(integer) : index of velocity driven dof to set  \n"
		"value(real) : new value of the velocity driven dof  \n"
		"\n"
		""},
	 { (char *)"RBDY2_ComputeDof", _wrap_RBDY2_ComputeDof, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"Compute current DOF of bodies in container.  \n"
		"\n"
		"usage : RBDY2_ComputeDof()  \n"
		"\n"
		""},
	 { (char *)"RBDY2_UpdateDof", _wrap_RBDY2_UpdateDof, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"set current DOF as initial DOF of bodies in container  \n"
		"\n"
		"usage : RBDY2_UpdateDof()  \n"
		"\n"
		""},
	 { (char *)"RBDY2_ComputeFreeVelocity", _wrap_RBDY2_ComputeFreeVelocity, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"Compute free velocity of bodies in container.  \n"
		"\n"
		"usage : RBDY2_ComputeFreeVelocity()  \n"
		"\n"
		""},
	 { (char *)"RBDY2_ComputeFext", _wrap_RBDY2_ComputeFext, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"Compute impulse of external forces of bodies in container.  \n"
		"\n"
		"usage : RBDY2_ComputeFext()  \n"
		"\n"
		""},
	 { (char *)"RBDY2_ComputeBulk", _wrap_RBDY2_ComputeBulk, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"Compute impulse of internal forces of bodies in container.  \n"
		"\n"
		"usage : RBDY2_ComputeBulk()  \n"
		"\n"
		""},
	 { (char *)"RBDY2_CheckEquilibriumState", _wrap_RBDY2_CheckEquilibriumState, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"check if all the RBDY2 rich an equilibrium state (velocity is almost equal to\n"
		"zero)  \n"
		"\n"
		"usage : isBalanced = RBDY2_CheckEquilibriumState()  \n"
		"\n"
		"Returns\n"
		"-------\n"
		"isBalanced (boolean) : True if in equilibrium state  \n"
		"\n"
		""},
	 { (char *)"RBDY2_GhostToInvisible", _wrap_RBDY2_GhostToInvisible, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"set bodies with ghost behaviour nickname as invisible  \n"
		"\n"
		"usage : RBDY2_GhostToInvisible()  \n"
		"\n"
		""},
	 { (char *)"RBDY2_FatalDamping", _wrap_RBDY2_FatalDamping, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"Nullify body current and initial velocities of a list of bodies.  \n"
		"\n"
		"This keyword must be between the ComputeDof and UpdateDof ones.  \n"
		"\n"
		"usage : RBDY2_FatalDamping(i_list)  \n"
		"\n"
		"Parameters\n"
		"----------\n"
		"i_list(list of integer) : list of bodies to reset current velocity if omitted\n"
		"    works on all objetcs  \n"
		"\n"
		""},
	 { (char *)"RBDY2_PartialDamping", _wrap_RBDY2_PartialDamping, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"Limit body velocity to Vmax value.  \n"
		"\n"
		"usage : RBDY2_PartialDamping(nb_steps, Vmax)  \n"
		"\n"
		"Parameters\n"
		"----------\n"
		"nb_steps(integer) : periodicity @parma[in] Vmax (double) : Vmax  \n"
		"\n"
		""},
	 { (char *)"RBDY2_WriteLastDof", _wrap_RBDY2_WriteLastDof, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"Write ascii DOF.LAST file.  \n"
		"\n"
		"usage : RBDY2_WriteLastDof()  \n"
		"\n"
		""},
	 { (char *)"RBDY2_WriteOutDof", _wrap_RBDY2_WriteOutDof, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"Write ascii DOF.OUT file. Can be activated only each N steps.  \n"
		"\n"
		"If 0 for ivalue1 and ivalue2, dofs of all bodies are written.  \n"
		"\n"
		"usage : RBDY2_WriteOutDof(ivalue1=0, ivalue2=0)  \n"
		"\n"
		"Parameters\n"
		"----------\n"
		"ivalue1(integer) : first body  \n"
		"ivalue2(integer) : last body  \n"
		"\n"
		""},
	 { (char *)"RBDY2_DisplayOutDof", _wrap_RBDY2_DisplayOutDof, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"Display bodies degrees of freedom.  \n"
		"\n"
		"usage : RBDY2_DisplayOutDof()  \n"
		"\n"
		""},
	 { (char *)"RBDY2_WriteLastRnod", _wrap_RBDY2_WriteLastRnod, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"Write ascii Rnod.LAST file.  \n"
		"\n"
		"usage : RBDY2_WriteLastRnod()  \n"
		"\n"
		""},
	 { (char *)"RBDY2_WriteOutRnod", _wrap_RBDY2_WriteOutRnod, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"Write ascii Rnod.OUT file. Can be activated only each N steps.  \n"
		"\n"
		"usage : RBDY2_WriteOutRnod()  \n"
		"\n"
		""},
	 { (char *)"RBDY2_DisplayOutRnod", _wrap_RBDY2_DisplayOutRnod, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"display body forces  \n"
		"\n"
		"usage : RBDY2_DisplayOutRnod()  \n"
		"\n"
		""},
	 { (char *)"RBDY2_WriteBodies", _wrap_RBDY2_WriteBodies, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"Write BODIES.OUT file.  \n"
		"\n"
		"Write DRV_DOF.OUT file.  \n"
		"\n"
		"usage : RBDY2_WriteBodies()  \n"
		"\n"
		""},
	 { (char *)"RBDY2_ClearedWriteBodies", _wrap_RBDY2_ClearedWriteBodies, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"...  \n"
		"\n"
		"usage : RBDY2_ClearedWriteBodies()  \n"
		"\n"
		""},
	 { (char *)"RBDY2_WriteDrivenDof", _wrap_RBDY2_WriteDrivenDof, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		""},
	 { (char *)"RBDY2_ReadBodies", _wrap_RBDY2_ReadBodies, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"Read BODIES.DAT file.  \n"
		"\n"
		"usage : RBDY2_ReadBodies()  \n"
		"\n"
		"\n"
		" Initialize existing_entities variable in RBDY2  \n"
		" Adds the number of found bodies to entity  \n"
		"\n"
		""},
	 { (char *)"RBDY2_ReadIniDof", _wrap_RBDY2_ReadIniDof, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"Read DOF file.  \n"
		"\n"
		"If num <= 0 : DATBOX/DOF.INI file is read Else : OUTBOX/DOF.OUT.num is read, num\n"
		"being the parameter used in TimeEvolution_ReadIniDof last call  \n"
		"\n"
		"usage : RBDY2_ReadIniDof(num=0)  \n"
		"\n"
		"Parameters\n"
		"----------\n"
		"num(integer) : which DOF file to read  \n"
		"\n"
		""},
	 { (char *)"RBDY2_ReadDrivenDof", _wrap_RBDY2_ReadDrivenDof, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"Read DRV_DOF.DAT file.  \n"
		"\n"
		"usage : RBDY2_ReadDrivenDof()  \n"
		"\n"
		""},
	 { (char *)"RBDY2_LoadBehaviours", _wrap_RBDY2_LoadBehaviours, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"Load bulk behaviour id from bulk_behav module.  \n"
		"\n"
		"usage : RBDY2_LoadBehaviours()  \n"
		"\n"
		""},
	 { (char *)"RBDY2_MP_LoadBehaviours", _wrap_RBDY2_MP_LoadBehaviours, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"Load extra physical behaviour read in BULK_BEHAV.DAT file.  \n"
		"\n"
		"Must be used with THERMO_RIGID ELECTRO_RIGID THERMO_ELECTRO_RIGID behaviours  \n"
		"\n"
		"usage : RBDY2_MP_LoadBehaviours(disper)  \n"
		"\n"
		"Parameters\n"
		"----------\n"
		"disper(double) : dispersion variable  \n"
		"\n"
		""},
	 { (char *)"RBDY2_UpdateWSvsT", _wrap_RBDY2_UpdateWSvsT, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"update surface energy with temperature  \n"
		"\n"
		"Must be used with THERMO_RIGID ELECTRO_RIGID THERMO_ELECTRO_RIGID behaviours  \n"
		"\n"
		"usage : RBDY2_UpdateWSvsT()  \n"
		"\n"
		""},
	 { (char *)"RBDY2_UpdateWSvsTime", _wrap_RBDY2_UpdateWSvsTime, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"update surface energy with time  \n"
		"\n"
		"Must be used with THERMO_RIGID ELECTRO_RIGID THERMO_ELECTRO_RIGID behaviours  \n"
		"\n"
		"usage : RBDY2_UpdateWSvsTime()  \n"
		"\n"
		""},
	 { (char *)"RBDY2_ComputeMass", _wrap_RBDY2_ComputeMass, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"Compute mass and inertia of bodies.  \n"
		"\n"
		"usage : RBDY2_ComputeMass()  \n"
		"\n"
		""},
	 { (char *)"RBDY2_SetPeriodicCondition", _wrap_RBDY2_SetPeriodicCondition, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"define the space is X periodic [0,periode]  \n"
		"\n"
		"The X variable reaches a value between 0 and periode  \n"
		"\n"
		"usage : RBDY2_SetPeriodicCondition(periode)  \n"
		"\n"
		"Parameters\n"
		"----------\n"
		"period(double) : periode  \n"
		"\n"
		""},
	 { (char *)"RBDY2_ResizeBodies", _wrap_RBDY2_ResizeBodies, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"resize body radius by a factor  \n"
		"\n"
		"usage : RBDY2_ResizeBodies(homo)  \n"
		"\n"
		"Parameters\n"
		"----------\n"
		"homo(double) : resize factor  \n"
		"\n"
		""},
	 { (char *)"RBDY2_NullifyDisplacements", _wrap_RBDY2_NullifyDisplacements, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"Set displacements equal to 0.  \n"
		"\n"
		"usage : RBDY2_NullifyDisplacements()  \n"
		"\n"
		""},
	 { (char *)"RBDY2_NullifyVelocities", _wrap_RBDY2_NullifyVelocities, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"Set velocity to 0.  \n"
		"\n"
		"usage : RBDY2_NullifyVelocities()  \n"
		"\n"
		""},
	 { (char *)"RBDY2_SetSourcePoint", _wrap_RBDY2_SetSourcePoint, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"Create an assembly by source point deposit.  \n"
		"\n"
		"usage : RBDY2_SetSourcePoint(ibdyty, radius, x_coor, y_coor)  \n"
		"\n"
		"Parameters\n"
		"----------\n"
		"ibdyty(integer): rank of first invisible body  \n"
		"radius(double) : radius of source point area  \n"
		"x_coor(double) : X translation from the set of grains  \n"
		"y_coor(double) : Y translation from the set of grains  \n"
		"\n"
		""},
	 { (char *)"RBDY2_CheckSourcePoint", _wrap_RBDY2_CheckSourcePoint, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"check if it possible to deposit a new particle  \n"
		"\n"
		"usage : RBDY2_CheckSourcePoint()  \n"
		"\n"
		""},
	 { (char *)"RBDY2_MembraneBiaxialLoading", _wrap_RBDY2_MembraneBiaxialLoading, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"Biaxial load of a sample using pseudo membrane.  \n"
		"\n"
		"usage : RBDY2_MembraneBiaxialLoading(down, up, thickness, stress)  \n"
		"\n"
		"Parameters\n"
		"----------\n"
		"down(integer) : rank of the lower body  \n"
		"up(integer) : rank of the upper body  \n"
		"thickness(double) : thickness of the membrane  \n"
		"stress(double) : pressure on the membrane  \n"
		"\n"
		""},
	 { (char *)"RBDY2_BiaxialLoading", _wrap_RBDY2_BiaxialLoading, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"Biaxial load of a sample using a rigid box.  \n"
		"\n"
		"usage : RBDY2_BiaxialLoading(down,f_down,right,f_right,up,f_up,left,f_left)  \n"
		"\n"
		"Parameters\n"
		"----------\n"
		"down(integer) : rank of the lower body  \n"
		"f_down(double) : pressure on the lower body  \n"
		"right(integer) : rank of the right body  \n"
		"f_right(double) : pressure on the right body  \n"
		"up(integer) : rank of the upper body  \n"
		"f_up(double) : pressure on the upper body  \n"
		"left(integer) : rank of the left body  \n"
		"f_left(double) : pressure on the left body  \n"
		"\n"
		""},
	 { (char *)"RBDY2_SetYminBoundary", _wrap_RBDY2_SetYminBoundary, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"define the boundary of command CHECK_OUT_OF_BOUNDS  \n"
		"\n"
		"usage : RBDY2_SetYminBoundary(inf_boundary)  \n"
		"\n"
		"Parameters\n"
		"----------\n"
		"inf_boundary(double) : inferior boundary value  \n"
		"\n"
		""},
	 { (char *)"RBDY2_SetYmaxBoundary", _wrap_RBDY2_SetYmaxBoundary, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"define the boundary of command CHECK_OUT_OF_BOUNDS  \n"
		"\n"
		"usage : RBDY2_SetYmaxBoundary(up_boundary)  \n"
		"\n"
		"Parameters\n"
		"----------\n"
		"up_boundary(double) : superior boundary value  \n"
		"\n"
		""},
	 { (char *)"RBDY2_SetXminBoundary", _wrap_RBDY2_SetXminBoundary, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"define the boundary of command CHECK_OUT_OF_BOUNDS  \n"
		"\n"
		"usage : RBDY2_SetXminBoundary(left_boundary)  \n"
		"\n"
		"Parameters\n"
		"----------\n"
		"left_boundary(double) : left boundary value  \n"
		"\n"
		""},
	 { (char *)"RBDY2_SetXmaxBoundary", _wrap_RBDY2_SetXmaxBoundary, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"define the boundary of command CHECK_OUT_OF_BOUNDS  \n"
		"\n"
		"usage : RBDY2_SetXmaxBoundary(right_boundary)  \n"
		"\n"
		"Parameters\n"
		"----------\n"
		"right_boundary(double) : right boundary value  \n"
		"\n"
		""},
	 { (char *)"RBDY2_SetEquilibriumNorm", _wrap_RBDY2_SetEquilibriumNorm, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"Initialization of data for the equilibrium state check.  \n"
		"\n"
		"You must precise the type of check test :  \n"
		"\n"
		"*   Qvlcy : quadratic norm velocy  \n"
		"*   Mvlcy : maximum norm velocy  \n"
		"\n"
		"usage : RBDY2_CheckEquilibrium(norm_type , tolerance)  \n"
		"\n"
		"Parameters\n"
		"----------\n"
		"norm_type(string of size 5) : norm type use for the equilibrium check  \n"
		"tolerance(double) : norm tolerance  \n"
		"\n"
		""},
	 { (char *)"RBDY2_AddDof2InBodies", _wrap_RBDY2_AddDof2InBodies, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"Create a new BODIES.OUT file as combination of the last one and of the last\n"
		"DOF.OUT file.  \n"
		"\n"
		"usage : RBDY2_AddDof2InBodies()  \n"
		"\n"
		""},
	 { (char *)"RBDY2_InitFreeBoundary", _wrap_RBDY2_InitFreeBoundary, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"usage : RBDY2_InitFreeBoundary(xmin, xmax, radius)  \n"
		"\n"
		"Parameters\n"
		"----------\n"
		"xmin(double) :  \n"
		"xmax(double) :  \n"
		"radius(double) :  \n"
		"\n"
		""},
	 { (char *)"RBDY2_UpdateThermalStrain", _wrap_RBDY2_UpdateThermalStrain, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"usage : RBDY2_UpdateThermalStrain()  \n"
		"\n"
		""},
	 { (char *)"RBDY2_GetNbRBDY2", _wrap_RBDY2_GetNbRBDY2, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"Get the number of RBDY2.  \n"
		"\n"
		"usage : nb_rbdy2 = RBDY2_GetNbRBDY2()  \n"
		"\n"
		"Parameters\n"
		"----------\n"
		"nb_rbdy2(integer) : number of RBDY2 in container  \n"
		"\n"
		""},
	 { (char *)"RBDY2_GetBodyArea", _wrap_RBDY2_GetBodyArea, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"Get the area (2D volume equivalent) of a given body.  \n"
		"\n"
		"usage : area = GetBodyArea(ibdyty)  \n"
		"\n"
		"Parameters\n"
		"----------\n"
		"ibdyty(integer) : rank of the body  \n"
		"area(double) : area  \n"
		"\n"
		""},
	 { (char *)"RBDY2_GetAllArea", _wrap_RBDY2_GetAllArea, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"Get the area of a all body (visible and invisible)  \n"
		"\n"
		"python usage : area = RBDY2_GetAllArea()  \n"
		"\n"
		"Returns\n"
		"-------\n"
		"area (double array) : masses of all RBDY2  \n"
		"\n"
		""},
	 { (char *)"RBDY2_ComputePartialEquilibriumState", _wrap_RBDY2_ComputePartialEquilibriumState, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"Compute norms used to check if a part of the sample is in a equilibrium state.  \n"
		"\n"
		"Compute norms used to test if there is an equilibrium state between abs_min and\n"
		"abs_max  \n"
		"\n"
		"Usefull in case of silos to access norms used to decide if the arch research\n"
		"must be activated  \n"
		"\n"
		"usage : Qnorm, Mnorm = RBDY2_CheckPartialEquilibriumState(abs_min, abs_max)  \n"
		"\n"
		"Parameters\n"
		"----------\n"
		"abs_min(double) : min abscisse of sub domaine tested  \n"
		"abs_max(double) : max abscisse of sub domaine tested  \n"
		"Qnorm(double) : quadratric norm of the velocities of the grains  \n"
		"Mnorm(double) : quadratric norm of the velocities of the grains  \n"
		"\n"
		""},
	 { (char *)"RBDY2_CheckPartialEquilibriumState", _wrap_RBDY2_CheckPartialEquilibriumState, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"Check if a part of the sample is in a equilibrium state.  \n"
		"\n"
		"Test if there is an equilibrium state between abs_min and abs_max  \n"
		"\n"
		"Usefull in case of silos to decide if the arch research must be activated  \n"
		"\n"
		"usage : isPartiallyEquilibriumed = RBDY2_CheckPartialEquilibriumState(abs_min,\n"
		"abs_max)  \n"
		"\n"
		"Parameters\n"
		"----------\n"
		"abs_min(double) : min abscisse of sub domaine tested  \n"
		"abs_max(double) : max abscisse of sub domaine tested  \n"
		"isPartiallyEquilibriumed(boolean) : true if at partial equlibrium state, else false  \n"
		"\n"
		""},
	 { (char *)"RBDY2_SetBodiesInvisible", _wrap_RBDY2_SetBodiesInvisible, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"Set a list of body to invisible state.  \n"
		"\n"
		"usage : RBDY2_SetBodiesInvisible(list_bdy)  \n"
		"\n"
		"Parameters\n"
		"----------\n"
		"list_bdy(integer array) : list of rank of bodies of the container  \n"
		"\n"
		""},
	 { (char *)"RBDY2_IsVisible", _wrap_RBDY2_IsVisible, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"return if a body visible  \n"
		"\n"
		"usage : visible = RBDY2_IsVisible(ibdyty)  \n"
		"\n"
		"Parameters\n"
		"----------\n"
		"ibdyty(integer) : rank of body  \n"
		"visible(integer) : 1 if body is visible, 0 else  \n"
		"\n"
		""},
	 { (char *)"RBDY2_GetBodyMass", _wrap_RBDY2_GetBodyMass, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"Get the mass of a body.  \n"
		"\n"
		"usage : mass = RBDY2_GetBodyMass(ibdyty)  \n"
		"\n"
		"Parameters\n"
		"----------\n"
		"ibdyty(integer) : rank of desired body  \n"
		"mass(double) : mass of body  \n"
		"\n"
		""},
	 { (char *)"RBDY2_GetAllMass", _wrap_RBDY2_GetAllMass, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"Get the mass of a all body (visible and invisible)  \n"
		"\n"
		"python usage : masses = RBDY2_GetAllMass()  \n"
		"\n"
		"Returns\n"
		"-------\n"
		"masses (double array) : masses of all RBDY2  \n"
		"\n"
		""},
	 { (char *)"RBDY2_CompCoor", _wrap_RBDY2_CompCoor, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"Compute the position of bodies.  \n"
		"\n"
		"usage : RBDY2_CompCoor()  \n"
		"\n"
		""},
	 { (char *)"RBDY2_GetBodyDensity", _wrap_RBDY2_GetBodyDensity, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"Get the density of a body.  \n"
		"\n"
		"usage density = RBDY2_GetBodyDensity(ibdyty)  \n"
		"\n"
		"Parameters\n"
		"----------\n"
		"ibdyty(integer) : rank of the RBDY2 in container  \n"
		"density(double) : density of the RBDY2  \n"
		"\n"
		""},
	 { (char *)"RBDY2_GetNbContactor", _wrap_RBDY2_GetNbContactor, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"get the number of contactor of RBDY2  \n"
		"\n"
		"python usage : nb = RBDY2_GetNbContactor(ibdyty)  \n"
		"\n"
		"Parameters\n"
		"----------\n"
		"ibdyty(integer) : rank of the RBDY2 in container  \n"
		"\n"
		"Returns\n"
		"-------\n"
		"nb (integer) : number of contactor attached to a RBDY2  \n"
		"\n"
		""},
	 { (char *)"RBDY2_GetContactorType", _wrap_RBDY2_GetContactorType, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"Get the type of the first contactor of a body.  \n"
		"\n"
		"usage type = RBDY2_GetContactorType(ibdyty)  \n"
		"\n"
		"Parameters\n"
		"----------\n"
		"ibdyty(integer) : rank of the RBDY2 in container  \n"
		"\n"
		"Returns\n"
		"-------\n"
		"type (string) : type of the first contactor of the body  \n"
		"\n"
		""},
	 { (char *)"RBDY2_GetContactorColor", _wrap_RBDY2_GetContactorColor, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"Get the color of the itacty contactor of a body ibdyty.  \n"
		"\n"
		"usage color = RBDY2_GetContactorColor(ibdyty,itacty)  \n"
		"\n"
		"Parameters\n"
		"----------\n"
		"ibdyty(integer) : rank of the RBDY2 in container  \n"
		"itacty(integer) : rank of the contactor in the RBDY2  \n"
		"\n"
		"Returns\n"
		"-------\n"
		"color (string) : color of the contactor of the body  \n"
		"\n"
		""},
	 { (char *)"RBDY2_SetContactorColor", _wrap_RBDY2_SetContactorColor, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"Set the color of a given contactor of a body.  \n"
		"\n"
		"usage : RBDY2_SetContactorColor(ibdyty, itacty, color)  \n"
		"\n"
		"Parameters\n"
		"----------\n"
		"ibdyty(integer) : rank of the RBDY2  \n"
		"itacty(integer) : rank of the contactor in the RBDY2  \n"
		"color(string of size 5) : the color  \n"
		"\n"
		""},
	 { (char *)"RBDY2_GetPtrMass", _wrap_RBDY2_GetPtrMass, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"Get a pointer onto the mass matrix of a body.  \n"
		"\n"
		"Parameters\n"
		"----------\n"
		"ibdyty(int): index of the RBDY2  \n"
		"mass(double**): mass matrix of the RBDY2  \n"
		"\n"
		""},
	 { (char *)"RBDY2_GetVelocity", _wrap_RBDY2_GetVelocity, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"Get the velocity of a body.  \n"
		"\n"
		"Parameters\n"
		"----------\n"
		"ibdyty(int): index of the RBDY2  \n"
		"velocity(double[6]): velocity of the RBDY2  \n"
		"\n"
		""},
	 { (char *)"RBDY2_getDrvVlocy", _wrap_RBDY2_getDrvVlocy, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"Get the driven dof of a body.  \n"
		"\n"
		"python usage : [drvdof_indices, drvdof_values] = RBDY2_getDrvVlocy(ibdyty)  \n"
		"\n"
		"Parameters\n"
		"----------\n"
		"ibdyty(integer) : index of the RBDY2  \n"
		"drvdof_indices(integer array) : indices list of driven dof  \n"
		"drvdof_values(real array) : values of the driven dof  \n"
		"\n"
		""},
	 { (char *)"RBDY2_computeDrvVlocy", _wrap_RBDY2_computeDrvVlocy, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"Compute the value of the driven velocity of a body a current time.  \n"
		"\n"
		"In place replacement in the input array of the new value(s) of the driven\n"
		"velocity  \n"
		"\n"
		"python usage : RBDY2_computeDrvVlocy(ibdyty, values)  \n"
		"\n"
		"Parameters\n"
		"----------\n"
		"ibdyty(integer) : index of the RBDY2  \n"
		"values(double array) : numpy array, input old values of imposed velocity, output\n"
		"    new ones  \n"
		"\n"
		""},
	 { (char *)"RBDY2_SetVisible", _wrap_RBDY2_SetVisible, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"Set a given body as visible.  \n"
		"\n"
		"python usage : RBDY2_SetVisible(ibdyt)  \n"
		"\n"
		"Parameters\n"
		"----------\n"
		"ibdyty(integer) : index of the RBDY2  \n"
		"\n"
		""},
	 { (char *)"RBDY2_SetInvisible", _wrap_RBDY2_SetInvisible, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"Set a given body as invisible.  \n"
		"\n"
		"python usage : RBDY2_SetInvisible(ibdyty)  \n"
		"\n"
		"Parameters\n"
		"----------\n"
		"ibdyty(integer) : index of the RBDY2  \n"
		"\n"
		""},
	 { (char *)"RBDY2_SetVisibleVlocyDrivenDof", _wrap_RBDY2_SetVisibleVlocyDrivenDof, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"allows to (re)activate a given vlocydrivendof (i.e. which has been declared in\n"
		"preprocessing)  \n"
		"\n"
		"python usage : RBDY2_SetVisibleVlocyDrivenDof(ibdyty, iccdof)  \n"
		"\n"
		"Parameters\n"
		"----------\n"
		"ibdyty(integer): index of the RBDY2  \n"
		"iccdof(integer): index of the DOF to set visible  \n"
		"\n"
		""},
	 { (char *)"RBDY2_SetInvisibleVlocyDrivenDof", _wrap_RBDY2_SetInvisibleVlocyDrivenDof, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"allows to deactivate a given vlocydrivendof (i.e. which has been declared in\n"
		"preprocessing)  \n"
		"\n"
		"python usage : RBDY2_SetInvisibleVlocyDrivenDof(ibdyty, iccdof)  \n"
		"\n"
		"Parameters\n"
		"----------\n"
		"ibdyty(integer): index of the RBDY2  \n"
		"iccdof(integer): index of the DOF to set invisible  \n"
		"\n"
		""},
	 { (char *)"RBDY2_GetBulkBehavID", _wrap_RBDY2_GetBulkBehavID, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"return the ID of a given bulk of a given body  \n"
		"\n"
		"python usage : blmID = DISKx_GetBulkBehavID(ibdyty, iblmty)  \n"
		"\n"
		"Parameters\n"
		"----------\n"
		"ibdyty(integer) : rank of a RBDY2  \n"
		"iblmty(integer) : rank of a bulk of the giben RBDY2 (typically 1!)  \n"
		"\n"
		"Returns\n"
		"-------\n"
		"blmID (string) : the bulk behav ID  \n"
		"\n"
		""},
	 { (char *)"RBDY2_GetBulkBehavNumber", _wrap_RBDY2_GetBulkBehavNumber, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"return the bulk ID of a given RBDY2  \n"
		"\n"
		"python usage : ibehav = RBDY2_GetBulkBehavNumber(ibdyty)  \n"
		"\n"
		"Parameters\n"
		"----------\n"
		"ibdyty(integer) : rank of a RBDY2  \n"
		"\n"
		"Returns\n"
		"-------\n"
		"ibehav (integer) : the bulk behav number  \n"
		"\n"
		""},
	 { (char *)"RBDY2_SetSurfaceSectors", _wrap_RBDY2_SetSurfaceSectors, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"Set the number of angular sectors of the surface of contactors.  \n"
		"\n"
		"python usage : RBDY2_SetSurfaceSectors(nbsect)  \n"
		"\n"
		"Parameters\n"
		"----------\n"
		"nbsect(integer) : number of sectors  \n"
		"\n"
		""},
	 { (char *)"RBDY2_GetStress", _wrap_RBDY2_GetStress, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"Get the mean stress field of a rigid object.  \n"
		"\n"
		"python usage : matrix = RBDY2_GetStress(ibdyty)  \n"
		"\n"
		"Parameters\n"
		"----------\n"
		"ibdyty(integer) : body to get stress of  \n"
		"matrix(double array) : stress matrix  \n"
		"\n"
		""},
	 { (char *)"RBDY2_ModifyBody", _wrap_RBDY2_ModifyBody, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"Modify a body tactor.  \n"
		"\n"
		"usage : RBDY2_ModifyBody(ibdyty, itacty, vector)  \n"
		"\n"
		"Parameters\n"
		"----------\n"
		"ibdyty(integer) : rank of body  \n"
		"itacty(integer) : rank of tacty  \n"
		"vector(double array) : the new value  \n"
		"\n"
		""},
	 { (char *)"RBDY2_SkipInvisible", _wrap_RBDY2_SkipInvisible, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"skip invisible objects when writing BODIES.OUT  \n"
		"\n"
		"usage : RBDY2_SkipInvisible()  \n"
		"\n"
		""},
	 { (char *)"RBDY2_InitializeStresses", _wrap_RBDY2_InitializeStresses, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"initialize stress for rigid bodies  \n"
		"\n"
		"usage : RBDY2_InitializeStresses()  \n"
		"\n"
		""},
	 { (char *)"RBDY2_InitializeWS", _wrap_RBDY2_InitializeWS, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"initialize WS for rigid bodies with a value between wsmin and wsmax ponderate by\n"
		"rvalue1  \n"
		"\n"
		"python usage : RBDY2_InitializeWS(double rvalue1)  \n"
		"\n"
		""},
	 { (char *)"RBDY2_CleanMemory", _wrap_RBDY2_CleanMemory, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"Free all memory allocated within RBDY2 module.  \n"
		"\n"
		"python usage : RBDY2_CleanMemory()  \n"
		"\n"
		""},
	 { (char *)"RBDY2_GetThermalValue", _wrap_RBDY2_GetThermalValue, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"Get temperature of rigid particle.  \n"
		"\n"
		"usage : T = RBDY2_GetThermalValu(ibdyty, itacty)  \n"
		"\n"
		"Parameters\n"
		"----------\n"
		"ibdyty(integer) : rank of body  \n"
		"itacty(integer) : rank of tacty  \n"
		"\n"
		""},
	 { (char *)"RBDY2_GetElectricalPotential", _wrap_RBDY2_GetElectricalPotential, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"Get electrical potential of rigid particle.  \n"
		"\n"
		"usage : ep = RBDY2_GetElectricalPotential(ibdyty, itacty)  \n"
		"\n"
		"Parameters\n"
		"----------\n"
		"ibdyty(integer) : rank of body  \n"
		"\n"
		"Returns\n"
		"-------\n"
		"ep (double) : electrical potential  \n"
		"\n"
		""},
	 { (char *)"RBDY2_GetElectricalCurrent", _wrap_RBDY2_GetElectricalCurrent, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"Get electrical potential of rigid particle.  \n"
		"\n"
		"usage : ep = RBDY2_GetElectricalCurrent(ibdyty, itacty)  \n"
		"\n"
		"Parameters\n"
		"----------\n"
		"ibdyty(integer) : rank of body  \n"
		"\n"
		"Returns\n"
		"-------\n"
		"ep (double) : electrical current  \n"
		"\n"
		""},
	 { (char *)"RBDY2_GetBetai", _wrap_RBDY2_GetBetai, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"Get equivalent damage related to CZM interaction for rigid particle.  \n"
		"\n"
		"usage : betai = RBDY2_GetBetai(ibdyty, itacty)  \n"
		"\n"
		"Parameters\n"
		"----------\n"
		"ibdyty(integer) : rank of body  \n"
		"itacty(integer) : rank of tacty  \n"
		"\n"
		"Returns\n"
		"-------\n"
		"betai (double) : equivalent damage  \n"
		"\n"
		""},
	 { (char *)"RBDY2_GetPeriode", _wrap_RBDY2_GetPeriode, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"Get the periode id (0, 1 or -1) for rigid particles.  \n"
		"\n"
		"usage : iper = RBDY2_GetPeriode(ibdyty)  \n"
		"\n"
		"Parameters\n"
		"----------\n"
		"ibdyty(integer) : rank of body  \n"
		"\n"
		"Returns\n"
		"-------\n"
		"iper (integer) : periode id  \n"
		"\n"
		""},
	 { (char *)"RBDY2_GetAverageSurfaceEnergy", _wrap_RBDY2_GetAverageSurfaceEnergy, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		""},
	 { (char *)"xKSID_LoadTactors", _wrap_xKSID_LoadTactors, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"load xKSID from RBDY2 and initialize existing_entites  \n"
		"\n"
		"python usage : xKSID_LoadTactors()  \n"
		"\n"
		""},
	 { (char *)"xKSID_GetNbxKSID", _wrap_xKSID_GetNbxKSID, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"Get the number of xKSID in the container.  \n"
		"\n"
		"python usage : nb_diskx = xKSID_GetNbxKSID()  \n"
		"\n"
		"Returns\n"
		"-------\n"
		"nb_xKSID (integer) : the number of xKSID in container  \n"
		"\n"
		""},
	 { (char *)"xKSID_GetPtrxKSID2BDYTY", _wrap_xKSID_GetPtrxKSID2BDYTY, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"return a pointer onto the map xksid2rbdy2  \n"
		"\n"
		"python usage : xksid2rbdy2 = xKSID_GetPtrxKSID2BDYTY()  \n"
		"\n"
		"Returns\n"
		"-------\n"
		"xksid2rbdy2 (integer array) : reference on map between xksid rank and body/tact\n"
		"rank  \n"
		"\n"
		""},
	 { (char *)"xKSID_IsVisible", _wrap_xKSID_IsVisible, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"return if a body visible  \n"
		"\n"
		"usage : visible = xKSID_IsVisible(itact)  \n"
		"\n"
		"Parameters\n"
		"----------\n"
		"itact(integer) : rank of xKSID  \n"
		"visible(integer) : 1 if body is visible, 0 else  \n"
		"\n"
		""},
	 { (char *)"xKSID_GetContactorRadius", _wrap_xKSID_GetContactorRadius, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"Get the radius of a given xKSID.  \n"
		"\n"
		"python usage : radius = xKSID_GetContactorRadius(itact)  \n"
		"\n"
		"Parameters\n"
		"----------\n"
		"itact(integer) : rank of a xKSID (in the list of all the xKSID)  \n"
		"\n"
		"Returns\n"
		"-------\n"
		"radius (double) : the radius of the xKSID of rank itact  \n"
		"\n"
		""},
	 { (char *)"xKSID_GetContactorCoor", _wrap_xKSID_GetContactorCoor, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"get coordinates of the center of a given xKSID  \n"
		"\n"
		"usage : vector = xKSID_GetContactorCoor(itacty)  \n"
		"\n"
		"Parameters\n"
		"----------\n"
		"itacty(integer) : rank of considered contactor  \n"
		"\n"
		"Returns\n"
		"-------\n"
		"vector (double array) : the desired vector  \n"
		"\n"
		""},
	 { (char *)"xKSID_InitOutlines", _wrap_xKSID_InitOutlines, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"Get a reference on the outlines of all xKSID.  \n"
		"\n"
		"usage : outlines = xKSID_InitOutlines()  \n"
		"\n"
		"Returns\n"
		"-------\n"
		"outlines (double array) : a reference on outlines_xKSID  \n"
		"\n"
		""},
	 { (char *)"xKSID_InitScalarFields", _wrap_xKSID_InitScalarFields, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"Get a reference on the scalar fields of all xKSID.  \n"
		"\n"
		"usage : scalarfields = xKSID_InitScalarfields()  \n"
		"\n"
		"Returns\n"
		"-------\n"
		"scalarfields (double array) : reference on scalarfields_xKSID array  \n"
		"\n"
		""},
	 { (char *)"xKSID_UpdatePostdata", _wrap_xKSID_UpdatePostdata, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"Update values of outlines_xKSID and scalarfields_xKSID pointers.  \n"
		"\n"
		"usage : xKSID_UpdatePostdata  \n"
		"\n"
		""},
	 { (char *)"xKSID_GetNbPointOutlines", _wrap_xKSID_GetNbPointOutlines, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"Get the list of cumulated outline points number.  \n"
		"\n"
		"python usage : nb_pointOutlines = xKSID_GetNbPointOutlines()  \n"
		"\n"
		"Returns\n"
		"-------\n"
		"nb_pointOutlines (integer array) : the cumulated number of outline points of the\n"
		"xKSID  \n"
		"\n"
		""},
	 { (char *)"xKSID_GetNbScalarFields", _wrap_xKSID_GetNbScalarFields, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"Get the number of scalar fields of a xKSID.  \n"
		"\n"
		"python usage : nb_scalarfields = xKSID_GetNbScalarFields()  \n"
		"\n"
		"Returns\n"
		"-------\n"
		"nb_scalarfields (integer) : the number of scalar fields of a xKSID  \n"
		"\n"
		""},
	 { (char *)"xKSID_CleanMemory", _wrap_xKSID_CleanMemory, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"Free all memory allocated within xKSID module.  \n"
		"\n"
		"python usage : xKSID_CleanMemory()  \n"
		"\n"
		""},
	 { (char *)"xKSID_SetXdilation", _wrap_xKSID_SetXdilation, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"set increase of radius of a xKSID due to expansion  \n"
		"\n"
		"python usage : xKSID_SetXdilation(itacty,x)  \n"
		"\n"
		"Parameters\n"
		"----------\n"
		"itacty(integer) : rank of considered contactor  \n"
		"x(float) : increase of radius  \n"
		"\n"
		""},
	 { (char *)"xKSID_SetVdilation", _wrap_xKSID_SetVdilation, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"set increase rate of radius of a xKSID due to expansion  \n"
		"\n"
		"python usage : xKSID_SetVdilation(itacty, v)  \n"
		"\n"
		"Parameters\n"
		"----------\n"
		"itacty(integer) : rank of contactor  \n"
		"v(float) : radius increase rate  \n"
		"\n"
		""},
	 { (char *)"CYLND_LoadTactors", _wrap_CYLND_LoadTactors, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"load CYLND from RBDY3 and initialize existing_entites  \n"
		"\n"
		"python usage : CYLND_LoadTactors()  \n"
		"\n"
		""},
	 { (char *)"CYLND_IsVisible", _wrap_CYLND_IsVisible, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"return if a given contactor is attached to a visible body  \n"
		"\n"
		"python usage : visible = CYLND_IsVisible(itacty)  \n"
		"\n"
		"Parameters\n"
		"----------\n"
		"itacty(integer) : id of the contactor we want visibility  \n"
		"\n"
		"Returns\n"
		"-------\n"
		"visible (integer) : 1 if body is visible, 0 else  \n"
		"\n"
		""},
	 { (char *)"CYLND_GetNbCYLND", _wrap_CYLND_GetNbCYLND, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"Get the number of CYLND.  \n"
		"\n"
		"python usage : nb_CYLND = CYLND_GetNbCYLND()  \n"
		"\n"
		"Returns\n"
		"-------\n"
		"nb_CYLND (integer) : the number of CYLND  \n"
		"\n"
		""},
	 { (char *)"CYLND_GetShape", _wrap_CYLND_GetShape, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"Get the shape of a CYLND.  \n"
		"\n"
		"usage : shape = CYLND_GetShape(itacty)  \n"
		"\n"
		"Parameters\n"
		"----------\n"
		"itacty(integer) : rank of CYLND  \n"
		"\n"
		"Returns\n"
		"-------\n"
		"shape (double array) : axis length of the CYLND  \n"
		"\n"
		""},
	 { (char *)"CYLND_GetPtrCYLND2BDYTY", _wrap_CYLND_GetPtrCYLND2BDYTY, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"return a pointer onto the map cylnd2bdyty  \n"
		"\n"
		"python usage : cylnd2bdyty = CYLND_GetPtrCYLND2BDYTY()  \n"
		"\n"
		"Returns\n"
		"-------\n"
		"cylnd2bdyty (integer array) : reference on map between cylnd rank and body rank  \n"
		"\n"
		""},
	 { (char *)"CYLND_InitOutlines", _wrap_CYLND_InitOutlines, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"Get a reference on the outlines of all CYLND.  \n"
		"\n"
		"python usage : outlines = CYLND_InitOutlines()  \n"
		"\n"
		"Returns\n"
		"-------\n"
		"outlines (double array) : a reference on outlines_CYLND  \n"
		"\n"
		""},
	 { (char *)"CYLND_InitScalarFields", _wrap_CYLND_InitScalarFields, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"Get a reference on the scalar fields of all CYLND.  \n"
		"\n"
		"python usage : scalarfields = CYLND_InitScalarfields()  \n"
		"\n"
		"Returns\n"
		"-------\n"
		"scalarfields (double array) : reference on scalarfields_CYLND array  \n"
		"\n"
		""},
	 { (char *)"CYLND_UpdatePostdata", _wrap_CYLND_UpdatePostdata, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"Update values of outlines_CYLND and scalarfields_CYLND pointers.  \n"
		"\n"
		"python usage : CYLND_UpdatePostdata  \n"
		"\n"
		""},
	 { (char *)"CYLND_GetNbPointOutlines", _wrap_CYLND_GetNbPointOutlines, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"Get the list of cumulated outline points number.  \n"
		"\n"
		"python usage : nb_pointOutlines = CYLND_GetNbPointOutlines()  \n"
		"\n"
		"Returns\n"
		"-------\n"
		"nb_pointOutlines (integer array) : the cumulated number of outline points of the\n"
		"CYLND  \n"
		"\n"
		""},
	 { (char *)"CYLND_GetNbScalarFields", _wrap_CYLND_GetNbScalarFields, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"Get the number of scalar fields of a CYLND.  \n"
		"\n"
		"python usage : nb_scalarfields = CYLND_GetNbScalarFields()  \n"
		"\n"
		"Returns\n"
		"-------\n"
		"nb_scalarfields (integer) : the number of scalar fields of a CYLND  \n"
		"\n"
		""},
	 { (char *)"CYLND_GetPtrAllConnectivities", _wrap_CYLND_GetPtrAllConnectivities, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"Get a reference on the connectivities of all CYLND.  \n"
		"\n"
		"python usage : connec = CYLND_GetPtrAllConnectivities()  \n"
		"\n"
		"Returns\n"
		"-------\n"
		"connec (integer array) : a reference on all_connectivities  \n"
		"\n"
		""},
	 { (char *)"CYLND_CleanMemory", _wrap_CYLND_CleanMemory, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"Free all memory allocated within CYLND module.  \n"
		"\n"
		"python usage : CYLND_CleanMemory()  \n"
		"\n"
		""},
	 { (char *)"DNLYC_LoadTactors", _wrap_DNLYC_LoadTactors, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"load DNLYC from RBDY3 and initialize existing_entites  \n"
		"\n"
		"python usage : DNLYC_LoadTactors()  \n"
		"\n"
		""},
	 { (char *)"DNLYC_IsVisible", _wrap_DNLYC_IsVisible, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"return if a given contactor is attached to a visible body  \n"
		"\n"
		"python usage : visible = DNLYC_IsVisible(itacty)  \n"
		"\n"
		"Parameters\n"
		"----------\n"
		"itacty(integer) : id of the contactor we want visibility  \n"
		"\n"
		"Returns\n"
		"-------\n"
		"visible (integer) : 1 if body is visible, 0 else  \n"
		"\n"
		""},
	 { (char *)"DNLYC_GetNbDNLYC", _wrap_DNLYC_GetNbDNLYC, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"Get the number of DNLYC.  \n"
		"\n"
		"python usage : nb_DNLYC = DNLYC_GetNbDNLYC()  \n"
		"\n"
		"Returns\n"
		"-------\n"
		"nb_DNLYC (integer) : the number of DNLYC  \n"
		"\n"
		""},
	 { (char *)"DNLYC_GetPtrDNLYC2BDYTY", _wrap_DNLYC_GetPtrDNLYC2BDYTY, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"return a pointer onto the map dnlyc2bdyty  \n"
		"\n"
		"python usage : dnlyc2bdyty = DNLYC_GetPtrDNLYC2BDYTY()  \n"
		"\n"
		"Returns\n"
		"-------\n"
		"dnlyc2bdyty (integer array) : reference on map between dnlyc rank and body rank  \n"
		"\n"
		""},
	 { (char *)"DNLYC_InitOutlines", _wrap_DNLYC_InitOutlines, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"Get a reference on the outlines of all DNLYC.  \n"
		"\n"
		"usage : outlines = DNLYC_InitOutlines()  \n"
		"\n"
		"Returns\n"
		"-------\n"
		"outlines (double array) : a reference on outlines_DNLYC  \n"
		"\n"
		""},
	 { (char *)"DNLYC_InitScalarFields", _wrap_DNLYC_InitScalarFields, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"Get a reference on the scalar fields of all DNLYC.  \n"
		"\n"
		"usage : scalarfields = DNLYC_InitScalarfields()  \n"
		"\n"
		"Returns\n"
		"-------\n"
		"scalarfields (double array) : reference on scalarfields_DNLYC array  \n"
		"\n"
		""},
	 { (char *)"DNLYC_UpdatePostdata", _wrap_DNLYC_UpdatePostdata, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"Update values of outlines_DNLYC and scalarfields_DNLYC pointers.  \n"
		"\n"
		"usage : DNLYC_UpdatePostdata  \n"
		"\n"
		""},
	 { (char *)"DNLYC_GetNbPointOutlines", _wrap_DNLYC_GetNbPointOutlines, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"Get the list of cumulated outline points number.  \n"
		"\n"
		"python usage : nb_pointOutlines = DNLYC_GetNbPointOutlines()  \n"
		"\n"
		"Returns\n"
		"-------\n"
		"nb_pointOutlines (integer array) : the cumulated number of outline points of the\n"
		"DNLYC  \n"
		"\n"
		""},
	 { (char *)"DNLYC_GetNbScalarFields", _wrap_DNLYC_GetNbScalarFields, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"Get the number of scalar fields of a DNLYC.  \n"
		"\n"
		"python usage : nb_scalarfields = DNLYC_GetNbScalarFields()  \n"
		"\n"
		"Returns\n"
		"-------\n"
		"nb_scalarfields (integer) : the number of scalar fields of a DNLYC  \n"
		"\n"
		""},
	 { (char *)"DNLYC_GetPtrAllConnectivities", _wrap_DNLYC_GetPtrAllConnectivities, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"Get a reference on the connectivities of all DNLYC.  \n"
		"\n"
		"usage : connec = DNLYC_GetPtrAllConnectivities()  \n"
		"\n"
		"Returns\n"
		"-------\n"
		"connec (integer array) : a reference on all_connectivities  \n"
		"\n"
		""},
	 { (char *)"DNLYC_CleanMemory", _wrap_DNLYC_CleanMemory, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"Free all memory allocated within DNLYC module.  \n"
		"\n"
		"python usage : DNLYC_CleanMemory()  \n"
		"\n"
		""},
	 { (char *)"PLANx_LoadTactors", _wrap_PLANx_LoadTactors, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"load PLANx from RBDY3 and initialize existing_entites  \n"
		"\n"
		"python usage : PLANx_LoadTactors()  \n"
		"\n"
		""},
	 { (char *)"PLANx_GetNbPLANx", _wrap_PLANx_GetNbPLANx, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"Get the number of PLANx.  \n"
		"\n"
		"python usage : nb_PLANx = PLANx_GetNbPLANx()  \n"
		"\n"
		"Returns\n"
		"-------\n"
		"nb_PLANx (integer) : the number of PLANx  \n"
		"\n"
		""},
	 { (char *)"PLANx_IsVisible", _wrap_PLANx_IsVisible, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"return if a given contactor is attached to a visible body  \n"
		"\n"
		"python usage : visible = PLANx_IsVisible(itacty)  \n"
		"\n"
		"Parameters\n"
		"----------\n"
		"itacty(integer) : id of the contactor we want visibility  \n"
		"\n"
		"Returns\n"
		"-------\n"
		"visible (integer) : 1 if body is visible, 0 else  \n"
		"\n"
		""},
	 { (char *)"PLANx_GetPtrPLANx2BDYTY", _wrap_PLANx_GetPtrPLANx2BDYTY, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"return a pointer onto the map planx2bdyty  \n"
		"\n"
		"python usage : planx2bdyty = PLANx_GetPtrPLANx2BDYTY()  \n"
		"\n"
		"Returns\n"
		"-------\n"
		"planx2bdyty (integer array) : reference on map between planx rank and body rank  \n"
		"\n"
		""},
	 { (char *)"PLANx_InitOutlines", _wrap_PLANx_InitOutlines, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"Get a reference on the outlines of all PLANx.  \n"
		"\n"
		"usage : outlines = PLANx_InitOutlines()  \n"
		"\n"
		"Returns\n"
		"-------\n"
		"outlines (double array) : a reference on outlines_PLANx  \n"
		"\n"
		""},
	 { (char *)"PLANx_InitScalarFields", _wrap_PLANx_InitScalarFields, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"Get a reference on the scalar fields of all PLANx.  \n"
		"\n"
		"usage : scalarfields = PLANx_InitScalarfields()  \n"
		"\n"
		"Returns\n"
		"-------\n"
		"scalarfields (double array) : reference on scalarfields_PLANx array  \n"
		"\n"
		""},
	 { (char *)"PLANx_UpdatePostdata", _wrap_PLANx_UpdatePostdata, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"Update values of outlines_PLANx and scalarfields_PLANx pointers.  \n"
		"\n"
		"usage : PLANx_UpdatePostdata  \n"
		"\n"
		""},
	 { (char *)"PLANx_GetNbPointOutlines", _wrap_PLANx_GetNbPointOutlines, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"Get the list of cumulated outline points number.  \n"
		"\n"
		"python usage : nb_pointOutlines = PLANx_GetNbPointOutlines()  \n"
		"\n"
		"Returns\n"
		"-------\n"
		"nb_pointOutlines (integer array) : the cumulated number of outline points of the\n"
		"PLANx  \n"
		"\n"
		""},
	 { (char *)"PLANx_GetNbScalarFields", _wrap_PLANx_GetNbScalarFields, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"Get the number of scalar fields of a PLANx.  \n"
		"\n"
		"python usage : nb_scalarfields = PLANx_GetNbScalarFields()  \n"
		"\n"
		"Returns\n"
		"-------\n"
		"nb_scalarfields (integer) : the number of scalar fields of a PLANx  \n"
		"\n"
		""},
	 { (char *)"PLANx_GetPtrAllConnectivities", _wrap_PLANx_GetPtrAllConnectivities, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"Get a reference on the connectivities of all PLANx.  \n"
		"\n"
		"usage : connec = PLANx_GetPtrAllConnectivities()  \n"
		"\n"
		"Returns\n"
		"-------\n"
		"connec (integer array) : a reference on all_connectivities  \n"
		"\n"
		""},
	 { (char *)"PLANx_CleanMemory", _wrap_PLANx_CleanMemory, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"Free all memory allocated within PLANx module.  \n"
		"\n"
		"python usage : PLANx_CleanMemory()  \n"
		"\n"
		""},
	 { (char *)"POLYR_LoadTactors", _wrap_POLYR_LoadTactors, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"load POLYR from RBDY3 or MAILx and initialize existing_entites  \n"
		"\n"
		"python usage : POLYR_LoadTactors()  \n"
		"\n"
		""},
	 { (char *)"POLYR_GetContactorColor", _wrap_POLYR_GetContactorColor, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"Get the color of a given POLYR.  \n"
		"\n"
		"python usage : color = POLYR_GetContactorColor(itacty)  \n"
		"\n"
		"Parameters\n"
		"----------\n"
		"itacty(integer) : rank of POLYR  \n"
		"\n"
		"Returns\n"
		"-------\n"
		"color (string) : the color of the POLYR itact  \n"
		"\n"
		""},
	 { (char *)"POLYR_SaveVertex", _wrap_POLYR_SaveVertex, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"write position of vertex in a file  \n"
		"\n"
		"python usage : POLYR_SaveVertex()  \n"
		"\n"
		""},
	 { (char *)"POLYR_ModifyRadius", _wrap_POLYR_ModifyRadius, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"apply an amplification/reduction size factor  \n"
		"\n"
		"python usage : POLYR_ModifyRadius(ratio)  \n"
		"\n"
		"Parameters\n"
		"----------\n"
		"ratio(real) : ratio factor  \n"
		"ratio(double) : ratio factor  \n"
		"\n"
		""},
	 { (char *)"POLYR_SetThresholdBigPolyr", _wrap_POLYR_SetThresholdBigPolyr, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"define the threshold between a plain and a big polyr. big polyr are such that\n"
		"radius > threshold*mean_radius. default threshold = 4. Must be defined before\n"
		"the load of tactors.  \n"
		"\n"
		"python usage : POLYR_SetThresholdBigPolyr(ratio)  \n"
		"\n"
		"Parameters\n"
		"----------\n"
		"ratio(real) : ratio factor  \n"
		"ratio(double) : ratio factor  \n"
		"\n"
		""},
	 { (char *)"POLYR_SetBigPolyr", _wrap_POLYR_SetBigPolyr, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"impose explicitly that an object is big. Must be set after the load of tactors.  \n"
		"\n"
		"python usage : POLYR_SetBigPolyr(itacty)  \n"
		"\n"
		"Parameters\n"
		"----------\n"
		"itacty(integer) : rank of the polyr  \n"
		"itacty(int) : rank of the polyr  \n"
		"\n"
		""},
	 { (char *)"POLYR_SetNbBigPolyr", _wrap_POLYR_SetNbBigPolyr, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"impose explicitly the number of big POLYR. Must be set after the load of\n"
		"tactors.  \n"
		"\n"
		"python usage : POLYR_SetNbBigPolyr(nb)  \n"
		"\n"
		"Parameters\n"
		"----------\n"
		"nb(integer) : number of polyr  \n"
		"number(int) : number of polyr  \n"
		"\n"
		""},
	 { (char *)"POLYR_SkipTopoBigPolyr", _wrap_POLYR_SkipTopoBigPolyr, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"skip the topological decomposition of a big POLYR. its surface is considered as\n"
		"a soup of triangle. usefull with complicated surface using Cundall CP detection  \n"
		"\n"
		"python usage : POLYR_SkipTopoBigPolyr()  \n"
		"\n"
		""},
	 { (char *)"POLYR_SkipAutomaticReorientation", _wrap_POLYR_SkipAutomaticReorientation, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"disable automatic reorientation (which works only with convex POLYR).  \n"
		"\n"
		"python usage : POLYR_SkipAutomaticReorientation()  \n"
		"\n"
		"\n"
		" Disable the automatic reorientation of normals performed by lmgc90.  \n"
		" This is necessary when using non-convex objects.  \n"
		"\n"
		""},
	 { (char *)"POLYR_SkipHEBuild", _wrap_POLYR_SkipHEBuild, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"disable Half-Edge structure generation (HE is necessary for non convex contact\n"
		"detection)  \n"
		"\n"
		"python usage : POLYR_SkipHEBuild()  \n"
		"\n"
		"\n"
		" Disable the Half-Edge structure generation performed by lmgc90.  \n"
		" This is necessary when testing the import of strange object.  \n"
		"\n"
		""},
	 { (char *)"POLYR_TopologyAngle", _wrap_POLYR_TopologyAngle, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"set the maximum angle (between 0 and 180 degree) threshold between 2 elements to\n"
		"declare them as belonging to the same topological face  \n"
		"\n"
		"python usage : POLYR_TopologyAngle(angle)  \n"
		"\n"
		""},
	 { (char *)"POLYR_FlatnessAngle", _wrap_POLYR_FlatnessAngle, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"set the maximum angle (between 0 and 180 degree) variation between elements of a\n"
		"topological face to declare it as flat  \n"
		"\n"
		"python usage : POLYR_FlatnessAngle(angle)  \n"
		"\n"
		""},
	 { (char *)"POLYR_GetWireframe", _wrap_POLYR_GetWireframe, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"Get wireframe of a POLYR.  \n"
		"\n"
		"python usage : coor,connectivity = POLYR_GetWireframe(itacty, angle)  \n"
		"\n"
		"Parameters\n"
		"----------\n"
		"itacty(integer) : rank of the POLYR  \n"
		"angle(double) : threshold angle to skip some nodes on boundary of faces of the\n"
		"    POLYR  \n"
		"\n"
		"Returns\n"
		"-------\n"
		"coor (double array) : reference on the coor vector seen as a numpy array of size\n"
		"[nb_point,3] connectivity (integer array) : reference on the connectivity vector\n"
		"seen as a numpy array  \n"
		"\n"
		""},
	 { (char *)"POLYR_GetVertex", _wrap_POLYR_GetVertex, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"Get the outline of a POLYR in almost current configuration.  \n"
		"\n"
		"If the POLYR is a real POLYR the current position of the center of the POLYR is\n"
		"used but the local frame for the orientation is the on in detection\n"
		"configuration.  \n"
		"\n"
		"If the POLYR is in fact a POLYD the current position of nodes of the mesh are\n"
		"used.  \n"
		"\n"
		"usage : vertex = POLYR_GetVertex(itacty)  \n"
		"\n"
		"Parameters\n"
		"----------\n"
		"itacty(integer) : rank of considered POLYR  \n"
		"\n"
		"Returns\n"
		"-------\n"
		"vertex (double 2D-array) : the coordinates of the vertices  \n"
		"\n"
		""},
	 { (char *)"POLYR_GetPtrVertexTT", _wrap_POLYR_GetPtrVertexTT, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"Get a pointer on the outline of a POLYR in detection configuration.  \n"
		"\n"
		"usage : vertex = POLYR_GetPtrVertexTT(itacty)  \n"
		"\n"
		"Parameters\n"
		"----------\n"
		"itacty(integer) : rank of considered POLYR  \n"
		"\n"
		"Returns\n"
		"-------\n"
		"vertex (double 2D-array) : the coordinates of the vertices  \n"
		"\n"
		""},
	 { (char *)"POLYR_GetPtrNormalTT", _wrap_POLYR_GetPtrNormalTT, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"Get a pointer on the outline of a POLYR in detection configuration - be carefull\n"
		"to move polyr.  \n"
		"\n"
		"usage : normal = POLYR_GetPtrNormalTT(itacty)  \n"
		"\n"
		"Parameters\n"
		"----------\n"
		"itacty(integer) : rank of considered POLYR  \n"
		"\n"
		"Returns\n"
		"-------\n"
		"normal (double 2D-array) : the coordinates of the vertices  \n"
		"\n"
		""},
	 { (char *)"POLYR_MoveToConfigurationTT", _wrap_POLYR_MoveToConfigurationTT, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"move the polyr in the configuration TT ; mandatory to get the wireframe in\n"
		"deformed configuration  \n"
		"\n"
		"python usage : POLYR_MoveToConfigurationTT()  \n"
		"\n"
		""},
	 { (char *)"POLYR_GetPOLYR2BDYTY", _wrap_POLYR_GetPOLYR2BDYTY, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"Get a copy of map POLYR2bdyty.  \n"
		"\n"
		"usage : polyr2bdyty = POLYR_GetPOLYR2BDYTY()  \n"
		"\n"
		"Returns\n"
		"-------\n"
		"polyr2bdyty (integer 2D-array) : the polyr2bdyty map  \n"
		"\n"
		""},
	 { (char *)"POLYR_GetPtrPOLYR2BDYTY", _wrap_POLYR_GetPtrPOLYR2BDYTY, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"Get a pointer on map POLYR2bdyty.  \n"
		"\n"
		"usage : polyr2bdyty = POLYR_GetPtrPOLYR2BDYTY()  \n"
		"\n"
		"Returns\n"
		"-------\n"
		"polyr2bdyty (integer 2D-array) : a pointer in the polyr2bdyty map  \n"
		"\n"
		""},
	 { (char *)"POLYR_IsVisible", _wrap_POLYR_IsVisible, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"return if a given contactor is attached to a visible body  \n"
		"\n"
		"python usage : visible = POLYR_IsVisible(itacty)  \n"
		"\n"
		"Parameters\n"
		"----------\n"
		"itacty(integer) : id of the contactor we want visibility  \n"
		"\n"
		"Returns\n"
		"-------\n"
		"visible (integer) : 1 if body is visible, 0 else  \n"
		"\n"
		""},
	 { (char *)"POLYR_GetNbPOLYR", _wrap_POLYR_GetNbPOLYR, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"Get the number of POLYR.  \n"
		"\n"
		"python usage : nb_POLYR = POLYR_GetNbPOLYR()  \n"
		"\n"
		"Returns\n"
		"-------\n"
		"nb_POLYR (integer) : the number of POLYR  \n"
		"\n"
		""},
	 { (char *)"POLYR_InitOutlines", _wrap_POLYR_InitOutlines, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"Get a reference on the outlines of all POLYR.  \n"
		"\n"
		"usage : outlines = POLYR_InitOutlines()  \n"
		"\n"
		"Returns\n"
		"-------\n"
		"outlines (double array) : a reference on outlines_POLYR  \n"
		"\n"
		""},
	 { (char *)"POLYR_InitScalarFields", _wrap_POLYR_InitScalarFields, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"Get a reference on the scalar fields of all POLYR.  \n"
		"\n"
		"usage : scalarfields = POLYR_InitScalarfields()  \n"
		"\n"
		"Returns\n"
		"-------\n"
		"scalarfields (double array) : reference on scalarfields_POLYR array  \n"
		"\n"
		""},
	 { (char *)"POLYR_UpdatePostdata", _wrap_POLYR_UpdatePostdata, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"Update values of outlines_POLYR and scalarfields_POLYR pointers.  \n"
		"\n"
		"usage : POLYR_UpdatePostdata()  \n"
		"\n"
		""},
	 { (char *)"POLYR_GetNbPointOutlines", _wrap_POLYR_GetNbPointOutlines, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"Get the list of cumulated outline points number.  \n"
		"\n"
		"python usage : nb_pointOutlines = POLYR_GetNbPointOutlines()  \n"
		"\n"
		"Returns\n"
		"-------\n"
		"nb_pointOutlines (integer array) : the cumulated number of outline points of the\n"
		"POLYR  \n"
		"\n"
		""},
	 { (char *)"POLYR_GetNbScalarFields", _wrap_POLYR_GetNbScalarFields, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"Get the number of scalar fields of a POLYR.  \n"
		"\n"
		"python usage : nb_scalarfields = POLYR_GetNbScalarFields()  \n"
		"\n"
		"Returns\n"
		"-------\n"
		"nb_scalarfields (integer) : the number of scalar fields of a POLYR  \n"
		"\n"
		""},
	 { (char *)"POLYR_GetPtrAllConnectivities", _wrap_POLYR_GetPtrAllConnectivities, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"Get a reference on the connectivities of all POLYR.  \n"
		"\n"
		"usage : connec = POLYR_GetPtrAllConnectivities()  \n"
		"\n"
		"Returns\n"
		"-------\n"
		"connec (integer array) : a reference on all_connectivities  \n"
		"\n"
		""},
	 { (char *)"POLYR_GetPtrConnectivity", _wrap_POLYR_GetPtrConnectivity, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"Get a reference on the connectivity of one POLYR.  \n"
		"\n"
		"usage : connec = POLYR_GetPtrConnectivity(itacty)  \n"
		"\n"
		"Parameters\n"
		"----------\n"
		"itacty(integer) : POLYR number  \n"
		"\n"
		"Returns\n"
		"-------\n"
		"connec (integer 2D-array) : reference on connectivity  \n"
		"\n"
		""},
	 { (char *)"POLYR_GetPtrVertexRef", _wrap_POLYR_GetPtrVertexRef, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"Get the position of the vertices of a POLYR in its inertia frame.  \n"
		"\n"
		"usage : vertex = POLYR_GetPtrVertexRef(itacty)  \n"
		"\n"
		"Parameters\n"
		"----------\n"
		"itacty(integer) : rank of considered POLYR  \n"
		"\n"
		"Returns\n"
		"-------\n"
		"vertex (double 2D-array) : the coordinates of the vertices  \n"
		"\n"
		""},
	 { (char *)"POLYR_GetTopoData", _wrap_POLYR_GetTopoData, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"Get for each face of all POLYR : contactor id, topo id, face id and face status.  \n"
		"\n"
		"usage : topo_data = POLYR_GetTopoData()  \n"
		"\n"
		"Returns\n"
		"-------\n"
		"topt_data (int 2D-array) : topology data of all faces of all POLYR  \n"
		"\n"
		""},
	 { (char *)"POLYR_CleanMemory", _wrap_POLYR_CleanMemory, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"Free all memory allocated within POLYR module.  \n"
		"\n"
		"python usage : POLYR_CleanMemory()  \n"
		"\n"
		""},
	 { (char *)"PT3Dx_LoadTactors", _wrap_PT3Dx_LoadTactors, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"load PT3Dx from RBDY3 and initialize existing_entites  \n"
		"\n"
		"python usage : PT3Dx_LoadTactors()  \n"
		"\n"
		""},
	 { (char *)"PT3Dx_IsVisible", _wrap_PT3Dx_IsVisible, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"return if a given contactor is attached to a visible body  \n"
		"\n"
		"python usage : visible = PT3Dx_IsVisible(itacty)  \n"
		"\n"
		"Parameters\n"
		"----------\n"
		"itacty(integer) : id of the contactor we want visibility  \n"
		"\n"
		"Returns\n"
		"-------\n"
		"visible (integer) : 1 if body is visible, 0 else  \n"
		"\n"
		""},
	 { (char *)"PT3Dx_GetNbPT3Dx", _wrap_PT3Dx_GetNbPT3Dx, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"Get the number of PT3Dx.  \n"
		"\n"
		"python usage : nb_PT3Dx = PT3Dx_GetNbPT3Dx()  \n"
		"\n"
		"Returns\n"
		"-------\n"
		"nb_PT3Dx (integer) : the number of PT3Dx  \n"
		"\n"
		""},
	 { (char *)"PT3Dx_SetDisplayRadius", _wrap_PT3Dx_SetDisplayRadius, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"set the size of the glyph representing the PT3Dx  \n"
		"\n"
		"python usage : PT3Dx_SetDisplayRadius(radius)  \n"
		"\n"
		"Parameters\n"
		"----------\n"
		"radius(double): radius of the PT3Dx contactors  \n"
		"\n"
		""},
	 { (char *)"PT3Dx_GetPtrPT3Dx2BDYTY", _wrap_PT3Dx_GetPtrPT3Dx2BDYTY, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"return a pointer onto the map pt3dx2bdyty  \n"
		"\n"
		"python usage : pt3dx2bdyty = PT3Dx_GetPtrPT3Dx2BDYTY()  \n"
		"\n"
		"Returns\n"
		"-------\n"
		"pt3dx2bdyty (integer array) : reference on map between pt3dx rank and body rank  \n"
		"\n"
		""},
	 { (char *)"PT3Dx_InitOutlines", _wrap_PT3Dx_InitOutlines, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"Get a reference on the outlines of all PT3Dx.  \n"
		"\n"
		"usage : outlines = PT3Dx_InitOutlines()  \n"
		"\n"
		"Returns\n"
		"-------\n"
		"outlines (double array) : a reference on outlines_PT3Dx  \n"
		"\n"
		""},
	 { (char *)"PT3Dx_InitScalarFields", _wrap_PT3Dx_InitScalarFields, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"Get a reference on the scalar fields of all PT3Dx.  \n"
		"\n"
		"usage : scalarfields = PT3Dx_InitScalarfields()  \n"
		"\n"
		"Returns\n"
		"-------\n"
		"scalarfields (double array) : reference on scalarfields_PT3Dx array  \n"
		"\n"
		""},
	 { (char *)"PT3Dx_UpdatePostdata", _wrap_PT3Dx_UpdatePostdata, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"Update values of outlines_PT3Dx and scalarfields_PT3Dx pointers.  \n"
		"\n"
		"usage : PT3Dx_UpdatePostdata  \n"
		"\n"
		""},
	 { (char *)"PT3Dx_GetNbPointOutlines", _wrap_PT3Dx_GetNbPointOutlines, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"Get the list of cumulated outline points number.  \n"
		"\n"
		"python usage : nb_pointOutlines = PT3Dx_GetNbPointOutlines()  \n"
		"\n"
		"Returns\n"
		"-------\n"
		"nb_pointOutlines (integer array) : the cumulated number of outline points of the\n"
		"PT3Dx  \n"
		"\n"
		""},
	 { (char *)"PT3Dx_GetNbScalarFields", _wrap_PT3Dx_GetNbScalarFields, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"Get the number of scalar fields of a PT3Dx.  \n"
		"\n"
		"python usage : nb_scalarfields = PT3Dx_GetNbScalarFields()  \n"
		"\n"
		"Returns\n"
		"-------\n"
		"nb_scalarfields (integer) : the number of scalar fields of a PT3Dx  \n"
		"\n"
		""},
	 { (char *)"PT3Dx_GetPtrAllConnectivities", _wrap_PT3Dx_GetPtrAllConnectivities, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"Get a reference on the connectivities of all PT3Dx.  \n"
		"\n"
		"usage : connec = PT3Dx_GetPtrAllConnectivities()  \n"
		"\n"
		"Returns\n"
		"-------\n"
		"connec (integer array) : a reference on all_connectivities  \n"
		"\n"
		""},
	 { (char *)"PT3Dx_CleanMemory", _wrap_PT3Dx_CleanMemory, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"Free all memory allocated within PT3Dx module.  \n"
		"\n"
		"python usage : PT3Dx_CleanMemory()  \n"
		"\n"
		""},
	 { (char *)"RBDY3_IncrementStep", _wrap_RBDY3_IncrementStep, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"compute the current velocity and displacement  \n"
		"\n"
		"python usage : RBDY3_IncrementStep()  \n"
		"\n"
		""},
	 { (char *)"RBDY3_SetVlocyDrivenDof", _wrap_RBDY3_SetVlocyDrivenDof, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"Override the value of an existing velocity driven dof.  \n"
		"\n"
		"usage : RBDY3_SetVlocyDrivenDof(ibdyty, idrvdof, value)  \n"
		"\n"
		"Parameters\n"
		"----------\n"
		"ibdyty(integer) : rank of considered  \n"
		"idrvdof(integer) : index of velocity driven dof to set  \n"
		"value(real) : new value of the velocity driven dof  \n"
		"\n"
		""},
	 { (char *)"RBDY3_FatalDamping", _wrap_RBDY3_FatalDamping, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"Nullify body velocities (current and initial) of a list of bodies.  \n"
		"\n"
		"python usage : RBDY3_FatalDamping(i_list)  \n"
		"\n"
		"Parameters\n"
		"----------\n"
		"i_list(list of integer) : list of bodies to reset current velocity if omitted\n"
		"    works on all objetcs  \n"
		"\n"
		""},
	 { (char *)"RBDY3_ComputeFext", _wrap_RBDY3_ComputeFext, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"compute external forces  \n"
		"\n"
		"python usage : RBDY3_ComputeFext()  \n"
		"\n"
		""},
	 { (char *)"RBDY3_ComputeBulk", _wrap_RBDY3_ComputeBulk, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"compute internal forces  \n"
		"\n"
		"python usage : RBDY3_ComputeBulk()  \n"
		"\n"
		""},
	 { (char *)"RBDY3_ComputeFreeVelocity", _wrap_RBDY3_ComputeFreeVelocity, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"compute free velocity  \n"
		"\n"
		"python usage : RBDY3_ComputeFreeVelocity()  \n"
		"\n"
		""},
	 { (char *)"RBDY3_ComputeDof", _wrap_RBDY3_ComputeDof, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"update current position and velocity  \n"
		"\n"
		"python usage : RBDY3_ComputeDof()  \n"
		"\n"
		""},
	 { (char *)"RBDY3_UpdateDof", _wrap_RBDY3_UpdateDof, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"save d.o.f. of the end of the time step to d.o.f. of the begining of the next\n"
		"one  \n"
		"\n"
		"python usage : RBDY3_UpdateDof()  \n"
		"\n"
		""},
	 { (char *)"RBDY3_ComputeContactDetectionConfiguration", _wrap_RBDY3_ComputeContactDetectionConfiguration, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"compute the contact detection configuration  \n"
		"\n"
		"python usage : RBDY3_ComputeContactDetectionConfiguration()  \n"
		"\n"
		""},
	 { (char *)"RBDY3_WriteLastDof", _wrap_RBDY3_WriteLastDof, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"write ascii DOF.LAST file  \n"
		"\n"
		"python usage : RBDY3_WriteLastDof()  \n"
		"\n"
		""},
	 { (char *)"RBDY3_WriteOutDof", _wrap_RBDY3_WriteOutDof, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"write ascii DOF.OUT file. Can be activate only each N step  \n"
		"\n"
		"If 0 for ifrom and ito, dofs of all bodies are written.  \n"
		"\n"
		"python usage : RBDY3_WriteOutDof(ifrom=0, ito=0)  \n"
		"\n"
		"Parameters\n"
		"----------\n"
		"ifrom(integer) : begining of bodys' index that will be written  \n"
		"ito(integer) : end of bodys'index that will be written  \n"
		"\n"
		""},
	 { (char *)"RBDY3_DisplayOutDof", _wrap_RBDY3_DisplayOutDof, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"display bodies degrees of freedom  \n"
		"\n"
		"python usage : RBDY3_DisplayOutDof()  \n"
		"\n"
		""},
	 { (char *)"RBDY3_WriteLastRnod", _wrap_RBDY3_WriteLastRnod, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"write ascii Rnod.LAST file  \n"
		"\n"
		"python usage : RBDY3_WriteLastRnod()  \n"
		"\n"
		""},
	 { (char *)"RBDY3_WriteOutRnod", _wrap_RBDY3_WriteOutRnod, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"write ascii Rnod.OUT file. Can be activate only each N step.  \n"
		"\n"
		"python usage : RBDY3_WriteOutRnod()  \n"
		"\n"
		""},
	 { (char *)"RBDY3_DisplayOutRnod", _wrap_RBDY3_DisplayOutRnod, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"display body forces.  \n"
		"\n"
		"python usage : RBDY3_DisplayOutRnod()  \n"
		"\n"
		""},
	 { (char *)"RBDY3_WriteBodies", _wrap_RBDY3_WriteBodies, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"write BODIES.OUT file  \n"
		"\n"
		"python usage : RBDY3_WriteBodies()  \n"
		"\n"
		""},
	 { (char *)"RBDY3_WriteDrivenDof", _wrap_RBDY3_WriteDrivenDof, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"write DRV_DOF.OUT file  \n"
		"\n"
		"python usage : RBDY3_WriteDrivenDof()  \n"
		"\n"
		""},
	 { (char *)"RBDY3_ReadBodies", _wrap_RBDY3_ReadBodies, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"read BODIES.DAT file  \n"
		"\n"
		"Initializes existing_entities variable in RBDY3  \n"
		"\n"
		"Adds the number of found bodies to entity  \n"
		"\n"
		"python usage : RBDY3_ReadBodies()  \n"
		"\n"
		""},
	 { (char *)"RBDY3_ReadCompressedBodies", _wrap_RBDY3_ReadCompressedBodies, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"read BODIES.DAT file without any comment  \n"
		"\n"
		"Initializes existing_entities variable in RBDY3  \n"
		"\n"
		"Adds the number of found bodies to entity  \n"
		"\n"
		"python usage : RBDY3_ReadCompressedBodies()  \n"
		"\n"
		""},
	 { (char *)"RBDY3_ReadIniDof", _wrap_RBDY3_ReadIniDof, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"Read DOF file.  \n"
		"\n"
		"If num <= 0 : DATBOX/DOF.INI file is read  \n"
		"\n"
		"Else : OUTBOX/DOF.OUT.num is read, num being the parameter used in\n"
		"TimeEvolution_ReadIniDof last call  \n"
		"\n"
		"usage : RBDY3_ReadIniDof(num=0)  \n"
		"\n"
		"Parameters\n"
		"----------\n"
		"num(integer) : which DOF file to read  \n"
		"\n"
		""},
	 { (char *)"RBDY3_ReadDrivenDof", _wrap_RBDY3_ReadDrivenDof, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"read DRV_DOF.DAT file  \n"
		"\n"
		"python usage : RBDY3_ReadDrivenDof()  \n"
		"\n"
		""},
	 { (char *)"RBDY3_LoadBehaviours", _wrap_RBDY3_LoadBehaviours, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"Load bulk behaviour id from bulk_behav module.  \n"
		"\n"
		"python usage : RBDY3_LoadBehaviours()  \n"
		"\n"
		""},
	 { (char *)"RBDY3_ComputeMass", _wrap_RBDY3_ComputeMass, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"compute mass and inertia of bodies  \n"
		"\n"
		"python usage : RBDY3_ComputeMass()  \n"
		"\n"
		""},
	 { (char *)"RBDY3_NewRotationScheme", _wrap_RBDY3_NewRotationScheme, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"active new rotation scheme FLAG  \n"
		"\n"
		"python usage : RBDY3_NewRotationScheme()  \n"
		"\n"
		""},
	 { (char *)"RBDY3_SetZminBoundary", _wrap_RBDY3_SetZminBoundary, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"define the boundary of command CHECK_OUT_OF_BOUNDS  \n"
		"\n"
		"python usage : RBDY3_SetZminBoundary(Zmin)  \n"
		"\n"
		"Parameters\n"
		"----------\n"
		"Zmin(real) : inferior boundary value  \n"
		"\n"
		""},
	 { (char *)"RBDY3_SetZmaxBoundary", _wrap_RBDY3_SetZmaxBoundary, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"define the boundary of command CHECK_OUT_OF_BOUNDS  \n"
		"\n"
		"python usage : RBDY3_SetZmaxBoundary(Zmax)  \n"
		"\n"
		"Parameters\n"
		"----------\n"
		"Zmax(real) : superior boundary value  \n"
		"\n"
		""},
	 { (char *)"RBDY3_SetYminBoundary", _wrap_RBDY3_SetYminBoundary, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"define the boundary of command CHECK_OUT_OF_BOUNDS  \n"
		"\n"
		"python usage : RBDY3_SetYminBoundary(Ymin)  \n"
		"\n"
		"Parameters\n"
		"----------\n"
		"Ymin(real) : left boundary value  \n"
		"\n"
		""},
	 { (char *)"RBDY3_SetYmaxBoundary", _wrap_RBDY3_SetYmaxBoundary, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"define the boundary of command CHECK_OUT_OF_BOUNDS  \n"
		"\n"
		"python usage : RBDY3_SetYmaxBoundary(Ymax)  \n"
		"\n"
		"Parameters\n"
		"----------\n"
		"Ymax(real) : right boundary value  \n"
		"\n"
		""},
	 { (char *)"RBDY3_SetXminBoundary", _wrap_RBDY3_SetXminBoundary, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"define the boundary of command CHECK_OUT_OF_BOUNDS  \n"
		"\n"
		"python usage : RBDY3_SetXminBoundary(Xmin)  \n"
		"\n"
		"Parameters\n"
		"----------\n"
		"Xmin(real) : inferior boundary value  \n"
		"\n"
		""},
	 { (char *)"RBDY3_SetXmaxBoundary", _wrap_RBDY3_SetXmaxBoundary, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"define the boundary of command CHECK_OUT_OF_BOUNDS  \n"
		"\n"
		"python usage : RBDY3_SetXmaxBoundary(Xmax)  \n"
		"\n"
		"Parameters\n"
		"----------\n"
		"Xmax(real) : front boundary value  \n"
		"\n"
		""},
	 { (char *)"RBDY3_SetXPeriodicCondition", _wrap_RBDY3_SetXPeriodicCondition, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"set the period on X axis  \n"
		"\n"
		"python usage : RBDY3_SetXPeriodicCondition(xperiod)  \n"
		"\n"
		"Parameters\n"
		"----------\n"
		"xperiod(real) : period on x axis  \n"
		"\n"
		""},
	 { (char *)"RBDY3_SetYPeriodicCondition", _wrap_RBDY3_SetYPeriodicCondition, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"set the periode on Y axis  \n"
		"\n"
		"python usage : RBDY3_SetYPeriodicCondition(yperiod)  \n"
		"\n"
		"Parameters\n"
		"----------\n"
		"yperiod(real) : period on y axis  \n"
		"\n"
		""},
	 { (char *)"RBDY3_AvoidBodyRotation", _wrap_RBDY3_AvoidBodyRotation, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"kill rotation effect for RBDY3  \n"
		"\n"
		"python usage : RBDY3_AvoidBodyRotation()  \n"
		"\n"
		""},
	 { (char *)"RBDY3_SkipInvisible", _wrap_RBDY3_SkipInvisible, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"if a body is invisible, il will not be written in bodies.out and dof.out  \n"
		"\n"
		"python usage : RBDY3_SkipInvisible()  \n"
		"\n"
		""},
	 { (char *)"RBDY3_KeepIniDofOrder", _wrap_RBDY3_KeepIniDofOrder, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"numbering information as they are read  \n"
		"\n"
		"python usage : RBDY3_KeepIniDofOrder()  \n"
		"\n"
		""},
	 { (char *)"RBDY3_SetVisible", _wrap_RBDY3_SetVisible, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"rended a given RBDY3 visible  \n"
		"\n"
		"python usage : RBDY3_SetVisible(ibdyty)  \n"
		"\n"
		"Parameters\n"
		"----------\n"
		"ibdyty(integer): index of the RBDY3  \n"
		"\n"
		""},
	 { (char *)"RBDY3_SetInvisible", _wrap_RBDY3_SetInvisible, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"rended a given RBDY3 invisible  \n"
		"\n"
		"python usage : RBDY3_SetInvisible(ibdyty)  \n"
		"\n"
		"Parameters\n"
		"----------\n"
		"ibdyty(integer): index of the RBDY3  \n"
		"\n"
		""},
	 { (char *)"RBDY3_IsVisible", _wrap_RBDY3_IsVisible, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"return if a given body visible  \n"
		"\n"
		"python usage : visible = RBDY3_IsVisible(ibdyty)  \n"
		"\n"
		"Parameters\n"
		"----------\n"
		"idbdy(integer): id of the body we want visibility  \n"
		"\n"
		"Returns\n"
		"-------\n"
		"visible (integer) : 1 if body is visible, 0 else  \n"
		"\n"
		""},
	 { (char *)"RBDY3_CompCoor", _wrap_RBDY3_CompCoor, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"Compute the position of bodies.  \n"
		"\n"
		"python usage : RBDY3_CompCoor()  \n"
		"\n"
		""},
	 { (char *)"RBDY3_GetBodyDensity", _wrap_RBDY3_GetBodyDensity, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"Get the density of a given body.  \n"
		"\n"
		"python usage : density = RBDY3_GetBodyDensity(ibdyty)  \n"
		"\n"
		"Parameters\n"
		"----------\n"
		"ibdyty(integer): rank of the RBDY3  \n"
		"\n"
		"Returns\n"
		"-------\n"
		"density(double) : density of the RBDY3  \n"
		"\n"
		""},
	 { (char *)"RBDY3_GetBodyInertia", _wrap_RBDY3_GetBodyInertia, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"Get the principal inertia of a given RBDY3.  \n"
		"\n"
		"python usage : inertia = RBDY3_GetBodyInertia(ibdyty)  \n"
		"\n"
		"Parameters\n"
		"----------\n"
		"ibdyty(integer) : rank of the RBDY3  \n"
		"\n"
		"Returns\n"
		"-------\n"
		"inertia (double array) : inertia vector of the desired RBDY3  \n"
		"\n"
		""},
	 { (char *)"RBDY3_GetAllInertia", _wrap_RBDY3_GetAllInertia, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"Get the inertia of a all RBDY3 body.  \n"
		"\n"
		"usage : inertia = RBDY3_GetAllInertia()  \n"
		"\n"
		"Parameters\n"
		"----------\n"
		"inertia(double array): the inertia of all bodies  \n"
		"\n"
		""},
	 { (char *)"RBDY3_CollectBodiesDotOUT", _wrap_RBDY3_CollectBodiesDotOUT, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"python usage : RBDY3_CollectBodiesDotOUT()  \n"
		"\n"
		""},
	 { (char *)"RBDY3_AppendToBodiesDotOUT", _wrap_RBDY3_AppendToBodiesDotOUT, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"python usage : RBDY3_AppendToBodiesDotOUT()  \n"
		"\n"
		""},
	 { (char *)"RBDY3_RebuildBodiesDotDAT", _wrap_RBDY3_RebuildBodiesDotDAT, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"python usage : RBDY3_RebuildBodiesDotDAT()  \n"
		"\n"
		""},
	 { (char *)"RBDY3_PutBodyVector", _wrap_RBDY3_PutBodyVector, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"Set a vector of a RBDY3 body.  \n"
		"\n"
		"Possible values for datatype field are:  \n"
		"\n"
		"*   \"Coor0\": reference coordinates  \n"
		"*   \"X____\": cumulated displacements over time in computed configuration  \n"
		"*   \"Xbeg_\": cumulated displacements over time at beginning of time step  \n"
		"*   \"V____\": velocity in computed configuration  \n"
		"*   \"Vbeg_\": velocity at beginning of time step  \n"
		"*   \"Vfree\": velocity free of contacts  \n"
		"*   \"Reac_\": contact reaction force  \n"
		"*   \"Raux_\": working array for reaction force  \n"
		"*   \"Ireac\": contact impulse  \n"
		"*   \"Iaux_\": working array for impulste  \n"
		"*   \"Fext_\": external forces  \n"
		"\n"
		"uses copy, and in case of Fext, the operation is not just setting but adding  \n"
		"\n"
		"python usage : RBDY3_PutBodyVector(datatype, ibdyty, vector)  \n"
		"\n"
		"Parameters\n"
		"----------\n"
		"datatype(string [5]) : the vector to set  \n"
		"ibdyty(integer) : rank of the RBDY3  \n"
		"vector(double array) : the new value of the vector  \n"
		"\n"
		""},
	 { (char *)"RBDY3_PutAllBodyVector", _wrap_RBDY3_PutAllBodyVector, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"Put an array of a vector of all RBDY3 bodies (visible and invisible)  \n"
		"\n"
		"Possible values for datatype field are: ... see RBDY3_PutBodyVector  \n"
		"\n"
		"python usage : RBDY3_PutAllBodyVector(datatype, matrix)  \n"
		"\n"
		"Parameters\n"
		"----------\n"
		"datatype(string [5]) : the vector to set  \n"
		"matrix(double array) : input matrix  \n"
		"\n"
		""},
	 { (char *)"RBDY3_GetBodyVector", _wrap_RBDY3_GetBodyVector, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"Get a copy of a vector of a RBDY3 body.  \n"
		"\n"
		"Possible values for datatype field are:  \n"
		"\n"
		"*   \"Coor0\": reference coordinates  \n"
		"*   \"Coor_\": coordinates in computed configuration  \n"
		"*   \"Coorb\": coordinates at beginning of time step  \n"
		"*   \"Coorm\": coordinates in detection configuration  \n"
		"*   \"X____\": cumulated displacements over time in computed configuration  \n"
		"*   \"Xbeg_\": cumulated displacements over time at beginning of time step  \n"
		"*   \"V____\": velocity in computed configuration  \n"
		"*   \"Vbeg_\": velocity at beginning of time step  \n"
		"*   \"Vaux_\": working array for velocity  \n"
		"*   \"Vfree\": velocity free of contacts  \n"
		"*   \"Reac_\": contact reaction force  \n"
		"*   \"Raux_\": working array for reaction force  \n"
		"*   \"Ireac\": contact impulse  \n"
		"*   \"Iaux_\": working array for impulste  \n"
		"*   \"Fext_\": external forces  \n"
		"*   \"Fint_\": internal forces  \n"
		"\n"
		"python usage : vector = RBDY3_GetBodyVector(datatype, ibdyty)  \n"
		"\n"
		"Parameters\n"
		"----------\n"
		"datatype(string [5]) : the vector to get  \n"
		"ibdyty(integer) : rank of the RBDY3  \n"
		"\n"
		"Returns\n"
		"-------\n"
		"vector (double array) : output vector  \n"
		"\n"
		""},
	 { (char *)"RBDY3_GetAllBodyVector", _wrap_RBDY3_GetAllBodyVector, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"Get an array of a vector of all RBDY3 bodies (visible and invisible)  \n"
		"\n"
		"Possible values for datatype field are: ... see RBDY3_GetBodyVector  \n"
		"\n"
		"python usage : matrix = RBDY3_GetBodyVector(datatype, ibdyty)  \n"
		"\n"
		"Parameters\n"
		"----------\n"
		"datatype(string [5]) : the vector to get  \n"
		"\n"
		"Returns\n"
		"-------\n"
		"matrix (double array) : output matrix  \n"
		"\n"
		""},
	 { (char *)"RBDY3_GetPtrBodyVector", _wrap_RBDY3_GetPtrBodyVector, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"Get a pointer on a vector of a RBDY3 body.  \n"
		"\n"
		"Possible values for datatype field are:  \n"
		"\n"
		"*   \"Coor0\": reference coordinates  \n"
		"*   \"X____\": cumulated displacements over time in computed configuration  \n"
		"*   \"Xbeg_\": cumulated displacements over time at beginning of time step  \n"
		"*   \"V____\": velocity in computed configuration  \n"
		"*   \"Vbeg_\": velocity at beginning of time step  \n"
		"*   \"Vaux_\": working array for velocity  \n"
		"*   \"Ireac\": contact impulse  \n"
		"*   \"Iaux_\": working array for impulste  \n"
		"*   \"Fext_\": external forces  \n"
		"\n"
		"python usage : vector_ptr = RBDY3_GetPtrBodyVector(datatype, ibdyty)  \n"
		"\n"
		"Parameters\n"
		"----------\n"
		"datatype(string [5]) : the vector to set  \n"
		"ibdyty(integer) : rank of the RBDY3  \n"
		"\n"
		"Returns\n"
		"-------\n"
		"vector_ptr (double array) : reference on the desired vector seen as a numpy\n"
		"array  \n"
		"\n"
		""},
	 { (char *)"RBDY3_PutBodyMatrix", _wrap_RBDY3_PutBodyMatrix, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"Set a matrix of a RBDY3 body.  \n"
		"\n"
		"Possible values for datatype field are:  \n"
		"\n"
		"*   \"IFbeg\": inertia frame at beginning of time step  \n"
		"*   \"IFTT_\": inertia frame in detection configuration  \n"
		"*   \"IF___\": inertia frame in computed configuration  \n"
		"\n"
		"Uses copy  \n"
		"\n"
		"python usage : RBDY3_PutBodyMatrix(datatype, ibdyty, matrix)  \n"
		"\n"
		"Parameters\n"
		"----------\n"
		"datatype(string [5]) : the vector to set  \n"
		"ibdyty(integer) : rank of the RBDY3  \n"
		"matrix(double array) : a matrix  \n"
		"\n"
		""},
	 { (char *)"RBDY3_GetBodyMatrix", _wrap_RBDY3_GetBodyMatrix, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"Get a copy of a matrix of a RBDY3 body.  \n"
		"\n"
		"Possible values for datatype field are:  \n"
		"\n"
		"*   \"IFref\": inertia frame in reference configuration  \n"
		"*   \"IFbeg\": inertia frame at beginning of time step  \n"
		"*   \"IFTT_\": inertia frame in detection configuration  \n"
		"*   \"IF___\": inertia frame in computed configuration  \n"
		"\n"
		"Uses copy  \n"
		"\n"
		"python usage : matrix = RBDY3_GetBodyMatrix(datatype, ibdyty)  \n"
		"\n"
		"Parameters\n"
		"----------\n"
		"datatype(string [5]) : the vector to get  \n"
		"ibdyty(integer) : rank of the RBDY3  \n"
		"\n"
		"Returns\n"
		"-------\n"
		"matrix (double array) : output matrix  \n"
		"\n"
		""},
	 { (char *)"RBDY3_GetAllRData", _wrap_RBDY3_GetAllRData, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"Get a copy of a real data of all rbdy3.  \n"
		"\n"
		"In this order : coor, frame, vlocy, spin, fext, reac  \n"
		"\n"
		"python usage : rdata = RBDY3_GetAllRData()  \n"
		"\n"
		"Returns\n"
		"-------\n"
		"rdata (double array) : output matrix  \n"
		"\n"
		""},
	 { (char *)"RBDY3_GetNbRBDY3", _wrap_RBDY3_GetNbRBDY3, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"get the number of RBDY3  \n"
		"\n"
		"python usage : nb_RBDY3 = RBDY3_GetNbRBDY3()  \n"
		"\n"
		"Returns\n"
		"-------\n"
		"nb_RBDY3 (integer) : number of RBDY3 in container  \n"
		"\n"
		""},
	 { (char *)"RBDY3_GetMass", _wrap_RBDY3_GetMass, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"Get the mass of a body.  \n"
		"\n"
		"python usage : mass = RBDY3_GetMass(ibdyty)  \n"
		"\n"
		"Parameters\n"
		"----------\n"
		"ibdyty(integer) : rank of the RBDY3  \n"
		"\n"
		"Returns\n"
		"-------\n"
		"mass (double) : mass of the RBDY3  \n"
		"\n"
		""},
	 { (char *)"RBDY3_GetAllMass", _wrap_RBDY3_GetAllMass, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"Get the mass of a all body (visible and invisible)  \n"
		"\n"
		"python usage : masses = RBDY3_GetAllMass()  \n"
		"\n"
		"Returns\n"
		"-------\n"
		"masses (double array) : masses of all RBDY3  \n"
		"\n"
		""},
	 { (char *)"RBDY3_GetPtrMass", _wrap_RBDY3_GetPtrMass, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"Get a pointer onto the mass matrix of a body.  \n"
		"\n"
		"Parameters\n"
		"----------\n"
		"ibdyty(int): index of the RBDY3  \n"
		"mass(double**): mass matrix of the RBDY3  \n"
		"\n"
		""},
	 { (char *)"RBDY3_GetVelocity", _wrap_RBDY3_GetVelocity, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"Get the velocity of a body.  \n"
		"\n"
		"Parameters\n"
		"----------\n"
		"ibdyty(int): index of the RBDY3  \n"
		"velocity(double[6]): velocity of the RBDY3  \n"
		"\n"
		""},
	 { (char *)"RBDY3_GetGlobInertia", _wrap_RBDY3_GetGlobInertia, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"Get the global inertia.  \n"
		"\n"
		"usage : inertia = RBDY3_GetGlobInertia(ibdyty)  \n"
		"\n"
		"Parameters\n"
		"----------\n"
		"ibdyty(integer) : id of desired RBDY3  \n"
		"\n"
		"Returns\n"
		"-------\n"
		"inertia (double 2D array) : the inertia matrix  \n"
		"\n"
		""},
	 { (char *)"RBDY3_GetBehavior", _wrap_RBDY3_GetBehavior, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"Get the type of the nickname of the behavior.  \n"
		"\n"
		"usage name = RBDY3_GetBehavior(ibdyty)  \n"
		"\n"
		"Parameters\n"
		"----------\n"
		"ibdyty(integer) : rank of the RBDY3 in container  \n"
		"\n"
		"Returns\n"
		"-------\n"
		"type (string) : nickname  \n"
		"\n"
		""},
	 { (char *)"RBDY3_GetNbContactor", _wrap_RBDY3_GetNbContactor, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"get the number of contactor of RBDY3  \n"
		"\n"
		"python usage : nb = RBDY3_GetNbContactor(ibdyty)  \n"
		"\n"
		"Parameters\n"
		"----------\n"
		"ibdyty(integer) : rank of the RBDY3 in container  \n"
		"\n"
		"Returns\n"
		"-------\n"
		"nb (integer) : number of contactor attached to a RBDY3  \n"
		"\n"
		""},
	 { (char *)"RBDY3_GetContactorType", _wrap_RBDY3_GetContactorType, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"Get the type of the itacty contactor of a body ibdyty.  \n"
		"\n"
		"usage type = RBDY3_GetContactorType(ibdyty,itacty)  \n"
		"\n"
		"Parameters\n"
		"----------\n"
		"ibdyty(integer) : rank of the RBDY3 in container  \n"
		"itacty(integer) : rank of the contactor in the RBDY3  \n"
		"\n"
		"Returns\n"
		"-------\n"
		"type (string) : type of the contactor of the body  \n"
		"\n"
		""},
	 { (char *)"RBDY3_SetContactorColor", _wrap_RBDY3_SetContactorColor, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"Set the color of a given contactor of a body.  \n"
		"\n"
		"usage : RBDY3_SetContactorColor(ibdyty, itacty, color)  \n"
		"\n"
		"Parameters\n"
		"----------\n"
		"ibdyty(integer) : rank of the RBDY3  \n"
		"itacty(integer) : rank of the contactor in the RBDY3  \n"
		"color(string of size 5) : the color  \n"
		"\n"
		""},
	 { (char *)"RBDY3_GetContactorColor", _wrap_RBDY3_GetContactorColor, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"Get the color of the itacty contactor of a body ibdyty.  \n"
		"\n"
		"usage color = RBDY3_GetContactorColor(ibdyty,itacty)  \n"
		"\n"
		"Parameters\n"
		"----------\n"
		"ibdyty(integer) : rank of the RBDY3 in container  \n"
		"itacty(integer) : rank of the contactor in the RBDY3  \n"
		"\n"
		"Returns\n"
		"-------\n"
		"color (string) : color of the contactor of the body  \n"
		"\n"
		""},
	 { (char *)"RBDY3_getDrvVlocy", _wrap_RBDY3_getDrvVlocy, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"Get the driven dof of a body.  \n"
		"\n"
		"python usage : [drvdof_indices, drvdof_values] = RBDY3_getDrvVlocy(ibdyty)  \n"
		"\n"
		"Parameters\n"
		"----------\n"
		"ibdyty(integer) : index of the RBDY3  \n"
		"drvdof_indices(integer array) : indices list of driven dof  \n"
		"drvdof_values(real array) : values of the driven dof  \n"
		"\n"
		""},
	 { (char *)"RBDY3_computeDrvVlocy", _wrap_RBDY3_computeDrvVlocy, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"Compute the value of the driven velocity of a body at current time.  \n"
		"\n"
		"In place replacement in the input array of the new value(s) of the driven\n"
		"velocity  \n"
		"\n"
		"python usage : RBDY3_computeDrvVlocy(ibdyty, values)  \n"
		"\n"
		"Parameters\n"
		"----------\n"
		"ibdyty(integer) : index of the RBDY3  \n"
		"values(double array) : numpy array, input old values of imposed velocity, output\n"
		"    new ones  \n"
		"\n"
		""},
	 { (char *)"RBDY3_WriteOutOneBody", _wrap_RBDY3_WriteOutOneBody, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"write a bdyty to BODIES.OUT with a given rank  \n"
		"\n"
		"python usage : RBDY3_WriteOutOneBody(ibdyty, new_ibdyty)  \n"
		"\n"
		"Parameters\n"
		"----------\n"
		"ibdyty(integer) : index of the RBDY3  \n"
		"new_ibdyty(integer): new index of the RBDY3  \n"
		"\n"
		""},
	 { (char *)"RBDY3_WriteOutDofOneBody", _wrap_RBDY3_WriteOutDofOneBody, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"write a bdyty dof to DOF.OUT with a given rank  \n"
		"\n"
		"python usage : RBDY3_WriteOutDofOneBody(ibdyty, new_ibdyty)  \n"
		"\n"
		"Parameters\n"
		"----------\n"
		"ibdyty(integer) : index of the RBDY3  \n"
		"new_ibdyty(integer): new index of the RBDY3  \n"
		"\n"
		""},
	 { (char *)"RBDY3_LoadThreadNetwork", _wrap_RBDY3_LoadThreadNetwork, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"read thread structure for textile structure  \n"
		"\n"
		"python usage : RBDY3_LoadThreadNetwork(void);  \n"
		"\n"
		""},
	 { (char *)"RBDY3_SetInvisibleSmallObjects", _wrap_RBDY3_SetInvisibleSmallObjects, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"Set the objects to invisible if their average radius is less than radius.  \n"
		"\n"
		"python usage : RBDY3_SetInvisibleSmallObjects(radius)  \n"
		"\n"
		"Parameters\n"
		"----------\n"
		"radius(double) : radius threshold  \n"
		"\n"
		""},
	 { (char *)"RBDY3_SetVisibleVlocyDrivenDof", _wrap_RBDY3_SetVisibleVlocyDrivenDof, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"rended a given Velocy DOF visible  \n"
		"\n"
		"python usage : RBDY3_SetVisibleVlocyDrivenDof(ibdyty, iccdof)  \n"
		"\n"
		"Parameters\n"
		"----------\n"
		"ibdyty(integer): index of the RBDY3  \n"
		"iccdof(integer): index of the DOF to set visible  \n"
		"\n"
		""},
	 { (char *)"RBDY3_SetInvisibleVlocyDrivenDof", _wrap_RBDY3_SetInvisibleVlocyDrivenDof, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"rended a given Velocy DOF invisible  \n"
		"\n"
		"python usage : RBDY3_SetInvisibleVlocyDrivenDof(ibdyty, iccdof)  \n"
		"\n"
		"Parameters\n"
		"----------\n"
		"ibdyty(integer): index of the RBDY3  \n"
		"iccdof(integer): index of the DOF to set invisible  \n"
		"\n"
		""},
	 { (char *)"RBDY3_PartialDamping", _wrap_RBDY3_PartialDamping, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"Limit body velocity to Vmax value.  \n"
		"\n"
		"usage : RBDY3_PartialDamping(nb_steps, Vmax)  \n"
		"\n"
		"Parameters\n"
		"----------\n"
		"nb_steps(integer) : periodicity @parma[in] Vmax (double) : Vmax  \n"
		"\n"
		""},
	 { (char *)"RBDY3_GetVolume", _wrap_RBDY3_GetVolume, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"Get volume of a body.  \n"
		"\n"
		"usage : volume = RBDY3_GetVolume(ibdyty)  \n"
		"\n"
		"Parameters\n"
		"----------\n"
		"ibdyty(integer) : RBDY3 id  \n"
		"\n"
		"Returns\n"
		"-------\n"
		"volume (double) : volume  \n"
		"\n"
		""},
	 { (char *)"RBDY3_GetAllVolume", _wrap_RBDY3_GetAllVolume, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"Get the area of a all body (visible and invisible)  \n"
		"\n"
		"python usage : area = RBDY3_GetAllVolume()  \n"
		"\n"
		"Returns\n"
		"-------\n"
		"area (double array) : masses of all RBDY2  \n"
		"\n"
		""},
	 { (char *)"RBDY3_RenumVisibleBodies", _wrap_RBDY3_RenumVisibleBodies, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"give a new numerotation of visible bodies  \n"
		"\n"
		"python usage : RBDY3_RenumVisibleBodies()  \n"
		"\n"
		""},
	 { (char *)"RBDY3_GetBulkBehavNumber", _wrap_RBDY3_GetBulkBehavNumber, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"return the bulk number of a given RBDY3  \n"
		"\n"
		"python usage : ibehav = RBDY3_GetBulkBehavNumber(ibdyty)  \n"
		"\n"
		"Parameters\n"
		"----------\n"
		"ibdyty(integer) : rank of a RBDY3  \n"
		"\n"
		"Returns\n"
		"-------\n"
		"ibehav (integer) : the bulk behav number  \n"
		"\n"
		""},
	 { (char *)"RBDY3_CleanMemory", _wrap_RBDY3_CleanMemory, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"Free all memory allocated within RBDY3 module.  \n"
		"\n"
		"python usage : RBDY3_CleanMemory()  \n"
		"\n"
		""},
	 { (char *)"RBDY3_LoadMpBehaviours", _wrap_RBDY3_LoadMpBehaviours, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"read extra physical behaviour in BULK_BEHAV.DAT file.  \n"
		"\n"
		"Must be used for THERMO_RIGID ELECTRO_RIGID and THERMO_ELECTRO_RIGID behaviour  \n"
		"\n"
		"python usage : RBDY3_LoadMpBehaviours(disper)  \n"
		"\n"
		"Parameters\n"
		"----------\n"
		"disper(double): some dispersion coefficient  \n"
		"\n"
		""},
	 { (char *)"RBDY3_IncrementWSvsT", _wrap_RBDY3_IncrementWSvsT, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"python usage : RBDY3_IncrementWSvsT()  \n"
		"\n"
		""},
	 { (char *)"RBDY3_UpdateGAMMAvsT", _wrap_RBDY3_UpdateGAMMAvsT, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"python usage : RBDY3_UpdateGAMMAvsT()  \n"
		"\n"
		""},
	 { (char *)"RBDY3_GetThermalValue", _wrap_RBDY3_GetThermalValue, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"Get temperature of rigid particle.  \n"
		"\n"
		"usage : T = RBDY3_GetThermalValu(ibdyty, itacty)  \n"
		"\n"
		"Parameters\n"
		"----------\n"
		"ibdyty(integer) : rank of body  \n"
		"itacty(integer) : rank of tacty \"  \n"
		"\n"
		""},
	 { (char *)"RBDY3_SetEquilibriumNorm", _wrap_RBDY3_SetEquilibriumNorm, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"Initialization of data for the equilibrium state check.  \n"
		"\n"
		"You must precise the type of check test :  \n"
		"\n"
		"*   Qvlcy : quadratic norm velocy  \n"
		"*   Mvlcy : maximum norm velocy  \n"
		"\n"
		"usage : RBDY3_CheckEquilibrium(norm_type , tolerance)  \n"
		"\n"
		"Parameters\n"
		"----------\n"
		"norm_type(string of size 5) : norm type use for the equilibrium check  \n"
		"tolerance(double) : norm tolerance  \n"
		"\n"
		""},
	 { (char *)"RBDY3_CheckEquilibriumState", _wrap_RBDY3_CheckEquilibriumState, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"check if all the RBDY3 rich an equilibrium state (velocity is almost equal to\n"
		"zero)  \n"
		"\n"
		"usage : isBalanced = RBDY3_CheckEquilibriumState()  \n"
		"\n"
		"Returns\n"
		"-------\n"
		"isBalanced (boolean) : True if in equilibrium state  \n"
		"\n"
		""},
	 { (char *)"RBDY3_SetSourcePoint", _wrap_RBDY3_SetSourcePoint, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"create an assembly by source point deposit  \n"
		"\n"
		"python usage : RBDY3_SetSourcePoint(first_RBDY3, radius, Xshift, Yshift, Zshift)  \n"
		"\n"
		"Parameters\n"
		"----------\n"
		"first_RBDY3(int): number of first invisible body  \n"
		"radius: source point area radius  \n"
		"Xshift: X translation of deposited object from reference coordinate  \n"
		"Yshift: Y translation of deposited object from reference coordinate  \n"
		"Zshift: Z translation of deposited object from reference coordinate  \n"
		"\n"
		""},
	 { (char *)"RBDY3_SetSourcePointWithIni", _wrap_RBDY3_SetSourcePointWithIni, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"create an assembly by source point deposit  \n"
		"\n"
		"python usage : RBDY3_SetSourcePointWithIni(first_RBDY3, radius, Xshift, Yshift,\n"
		"Zshift)  \n"
		"\n"
		"Parameters\n"
		"----------\n"
		"first_RBDY3(int): number of first invisible body  \n"
		"radius: source point area radius  \n"
		"Xshift: X coordinate of deposited object  \n"
		"Yshift: Y coordinate of deposited object  \n"
		"Zshift: Z coordinate of deposited object  \n"
		"\n"
		""},
	 { (char *)"RBDY3_InitializeProgressiveActivation", _wrap_RBDY3_InitializeProgressiveActivation, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"set the progression of altitude  \n"
		"\n"
		"python usage : RBDY3_InitializeProgressiveActivation(zini, dz)  \n"
		"\n"
		"Parameters\n"
		"----------\n"
		"zini(real) : initial altitude  \n"
		"dz(real) : increment of altitude  \n"
		"\n"
		""},
	 { (char *)"RBDY3_ApplyProgressiveActivation", _wrap_RBDY3_ApplyProgressiveActivation, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"set occurence of activation  \n"
		"\n"
		"python usage : RBDY3_ApplyProgressiveActivation(freq)  \n"
		"\n"
		"Parameters\n"
		"----------\n"
		"freq(integer) : activation frequence of progression  \n"
		"\n"
		""},
	 { (char *)"RBDY3_InitFreeBoundary", _wrap_RBDY3_InitFreeBoundary, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"python usage : RBDY3_InitFreeBoundary(xmin, xmax, ymin, ymax, radius)  \n"
		"\n"
		"Parameters\n"
		"----------\n"
		"xmin(real) :  \n"
		"xmax(real) :  \n"
		"ymin(real) :  \n"
		"ymax(real) :  \n"
		"radius(real) :  \n"
		"\n"
		""},
	 { (char *)"RBDY3_TriaxialLoading", _wrap_RBDY3_TriaxialLoading, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"Triaxial load of a sample using a rigid box.  \n"
		"\n"
		"python usage : TriaxialLoading(num_down, num_right, num_up, num_left, num_front,\n"
		"num_rear, nb_loads, loads)  \n"
		"\n"
		"Parameters\n"
		"----------\n"
		"num_down(integer) :  \n"
		"num_right(integer) :  \n"
		"num_up(integer) :  \n"
		"num_left(integer) :  \n"
		"num_front(integer) :  \n"
		"num_rear(integer) :  \n"
		"nb_loads(integer) : the number of walls you want to load with a pressure (1 to 6)  \n"
		"loads(array) : loads(2,nb_loads): load(1,i) contains which wall is loaded\n"
		"    (1==down, 2==right, 3==up, 4==left, 5==front, 6==rear) and load(2,i)\n"
		"    contains the amplitude of the stress (a positive value means compression).  \n"
		"\n"
		""},
	 { (char *)"RBDY3_GetDofStatus", _wrap_RBDY3_GetDofStatus, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"Get dof status.  \n"
		"\n"
		"python usage : status = RBDY3_GetDofStatus(ibdyty)  \n"
		"\n"
		"Parameters\n"
		"----------\n"
		"ibdyty(integer): rank of the RBDY3  \n"
		"\n"
		"Returns\n"
		"-------\n"
		"status(integer) : dof status of the RBDY3  \n"
		"\n"
		""},
	 { (char *)"SPHER_LoadTactors", _wrap_SPHER_LoadTactors, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"load SPHER from RBDY3 and initialize existing_entites  \n"
		"\n"
		"python usage : SPHER_LoadTactors()  \n"
		"\n"
		""},
	 { (char *)"SPHER_SetRadiusCorrection", _wrap_SPHER_SetRadiusCorrection, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"set a radius correction  \n"
		"\n"
		"python usage : SPHER_SetRadiusCorrection(corr)  \n"
		"\n"
		"Parameters\n"
		"----------\n"
		"corr(real) :  \n"
		"\n"
		""},
	 { (char *)"SPHER_GetNbSPHER", _wrap_SPHER_GetNbSPHER, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"Get the number of SPHER.  \n"
		"\n"
		"python usage : nb_SPHER = SPHER_GetNbSPHER()  \n"
		"\n"
		"Returns\n"
		"-------\n"
		"nb_SPHER (integer) : the number of SPHER  \n"
		"\n"
		""},
	 { (char *)"SPHER_GetSPHER2BDYTY", _wrap_SPHER_GetSPHER2BDYTY, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"Get a copy of map SPHER2bdyty.  \n"
		"\n"
		"usage : polyr2bdyty = SPHER_GetSPHER2BDYTY()  \n"
		"\n"
		"Returns\n"
		"-------\n"
		"polyr2bdyty (integer 2D-array) : the polyr2bdyty map  \n"
		"\n"
		""},
	 { (char *)"SPHER_GetPtrSPHER2BDYTY", _wrap_SPHER_GetPtrSPHER2BDYTY, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"return a pointer onto the map spher2bdyty  \n"
		"\n"
		"python usage : spher2bdyty = SPHER_GetPtrSPHER2BDYTY()  \n"
		"\n"
		"Returns\n"
		"-------\n"
		"spher2bdyty (integer array) : reference on map between spher rank and body rank  \n"
		"\n"
		""},
	 { (char *)"SPHER_GetContactorRadius", _wrap_SPHER_GetContactorRadius, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"Get the radius of a SPHER contactor.  \n"
		"\n"
		"python usage : radius = SPHER_GetContactorRadius(itact)  \n"
		"\n"
		"Parameters\n"
		"----------\n"
		"itact(integer) : id of a SPHER  \n"
		"\n"
		"Returns\n"
		"-------\n"
		"radius (double) : the radius of the SPHER number itact  \n"
		"\n"
		""},
	 { (char *)"SPHER_GetContactorCoor", _wrap_SPHER_GetContactorCoor, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"get coordinates of the center of a given SPHER  \n"
		"\n"
		"usage : vector = SPHER_GetContactorCoor(itacty)  \n"
		"\n"
		"Parameters\n"
		"----------\n"
		"itacty(integer) : rank of considered contactor  \n"
		"\n"
		"Returns\n"
		"-------\n"
		"vector (double array) : the desired vector  \n"
		"\n"
		""},
	 { (char *)"SPHER_GetContactorCoorb", _wrap_SPHER_GetContactorCoorb, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"get coordinates at the begin of the time step of the center of a given SPHER  \n"
		"\n"
		"usage : vector = SPHER_GetContactorCoorb(itacty)  \n"
		"\n"
		"Parameters\n"
		"----------\n"
		"itacty(integer) : rank of considered contactor  \n"
		"\n"
		"Returns\n"
		"-------\n"
		"vector (double array) : the desired vector  \n"
		"\n"
		""},
	 { (char *)"SPHER_IsVisible", _wrap_SPHER_IsVisible, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"return if a given contactor is attached to a visible body  \n"
		"\n"
		"python usage : visible = SPHER_IsVisible(itacty)  \n"
		"\n"
		"Parameters\n"
		"----------\n"
		"itacty(integer) : id of the contactor we want visibility  \n"
		"\n"
		"Returns\n"
		"-------\n"
		"visible (integer) : 1 if body is visible, 0 else  \n"
		"\n"
		""},
	 { (char *)"SPHER_InitOutlines", _wrap_SPHER_InitOutlines, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"Get a reference on the outlines of all SPHER.  \n"
		"\n"
		"usage : outlines = SPHER_InitOutlines()  \n"
		"\n"
		"Returns\n"
		"-------\n"
		"outlines (double array) : a reference on outlines_SPHER  \n"
		"\n"
		""},
	 { (char *)"SPHER_InitScalarFields", _wrap_SPHER_InitScalarFields, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"Get a reference on the scalar fields of all SPHER.  \n"
		"\n"
		"usage : scalarfields = SPHER_InitScalarfields()  \n"
		"\n"
		"Returns\n"
		"-------\n"
		"scalarfields (double array) : reference on scalarfields_SPHER array  \n"
		"\n"
		""},
	 { (char *)"SPHER_UpdatePostdata", _wrap_SPHER_UpdatePostdata, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"Update values of outlines_SPHER and scalarfields_SPHER pointers.  \n"
		"\n"
		"usage : SPHER_UpdatePostdata  \n"
		"\n"
		""},
	 { (char *)"SPHER_GetNbPointOutlines", _wrap_SPHER_GetNbPointOutlines, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"Get the list of cumulated outline points number.  \n"
		"\n"
		"python usage : nb_pointOutlines = SPHER_GetNbPointOutlines()  \n"
		"\n"
		"Returns\n"
		"-------\n"
		"nb_pointOutlines (integer array) : the cumulated number of outline points of the\n"
		"SPHER  \n"
		"\n"
		""},
	 { (char *)"SPHER_GetNbScalarFields", _wrap_SPHER_GetNbScalarFields, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"Get the number of scalar fields of a SPHER.  \n"
		"\n"
		"python usage : nb_scalarfields = SPHER_GetNbScalarFields()  \n"
		"\n"
		"Returns\n"
		"-------\n"
		"nb_scalarfields (integer) : the number of scalar fields of a SPHER  \n"
		"\n"
		""},
	 { (char *)"SPHER_GetPtrAllConnectivities", _wrap_SPHER_GetPtrAllConnectivities, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"Get a reference on the connectivities of all SPHER.  \n"
		"\n"
		"usage : connec = SPHER_GetPtrAllConnectivities()  \n"
		"\n"
		"Returns\n"
		"-------\n"
		"connec (integer array) : a reference on all_connectivities  \n"
		"\n"
		""},
	 { (char *)"SPHER_CleanMemory", _wrap_SPHER_CleanMemory, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"Free all memory allocated within SPHER module.  \n"
		"\n"
		"python usage : SPHER_CleanMemory()  \n"
		"\n"
		""},
	 { (char *)"MBS2D_setNb", _wrap_MBS2D_setNb, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"Set the number of MBS.  \n"
		"\n"
		"python usage : MBS2D_setNb(nb)  \n"
		"\n"
		"Parameters\n"
		"----------\n"
		"nb(integer) : set the number of MBS  \n"
		"\n"
		""},
	 { (char *)"MBS2D_getNb", _wrap_MBS2D_getNb, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"Get the number of MBS.  \n"
		"\n"
		"python usage : nb = MBS2D_getNb()  \n"
		"\n"
		"Returns\n"
		"-------\n"
		"nb (integer) : the number of MBS  \n"
		"\n"
		""},
	 { (char *)"MBS2D_setNbNodes", _wrap_MBS2D_setNbNodes, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"Set the number of nodes of a MBS.  \n"
		"\n"
		"python usage : MBS2D_setNbNodes(ibdyty, nb)  \n"
		"\n"
		"Parameters\n"
		"----------\n"
		"ibdyty(integer): id of the MBS  \n"
		"nb(integer) : the number of nodes of the MBS  \n"
		"\n"
		""},
	 { (char *)"MBS2D_setNbTactors", _wrap_MBS2D_setNbTactors, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"Set the number contactors of a MBS.  \n"
		"\n"
		"python usage : MBS2D_setNbTactors(ibdyty, nb)  \n"
		"\n"
		"Parameters\n"
		"----------\n"
		"ibdyty(integer): id of the MBS  \n"
		"nb(integer) : the number of contactor of the MBS  \n"
		"\n"
		""},
	 { (char *)"MBS2D_getPtrCoor", _wrap_MBS2D_getPtrCoor, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"Get a pointer on the coor of a MBS.  \n"
		"\n"
		"python usage : coor = MBS2D_getPtrCoor(ibdyty)  \n"
		"\n"
		"Parameters\n"
		"----------\n"
		"ibdyty(integer) : rank of considered MBS  \n"
		"\n"
		"Returns\n"
		"-------\n"
		"coor (double 2D-array) : reference on the coordinates of the nodes  \n"
		"\n"
		""},
	 { (char *)"MBS2D_getPtrCoorTT", _wrap_MBS2D_getPtrCoorTT, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"Set the array of coordinates of nodes of a MBS.  \n"
		"\n"
		"python usage : coorTT = MBS2D_GetPtrCoorTT(ibdyty)  \n"
		"\n"
		"Parameters\n"
		"----------\n"
		"ibdyty(integer): id of the MBS  \n"
		"\n"
		"Returns\n"
		"-------\n"
		"coorTT (double array) : coordinates of nodes of a MBS  \n"
		"\n"
		""},
	 { (char *)"MBS2D_addContactor", _wrap_MBS2D_addContactor, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"Add a new contactor to a MBS.  \n"
		"\n"
		"Available contactor types are :  \n"
		"\n"
		"*   JONCx: inputs are:\n"
		"    -   rdata must hold [axe_x, axe_y]  \n"
		"*   POLYR: inputs are:\n"
		"    -   rdata must hold the coordinates of the vertices [x_1, y_1, ... x_n, y_n]  \n"
		"    -   idata must hold the number of vertices  \n"
		"\n"
		"python usage : MBS2D_addContactor(ibdyty, inodty, itacty, tacttype, color,\n"
		"rdata, idata=None)  \n"
		"\n"
		"Parameters\n"
		"----------\n"
		"ibdyty(integer) : rank of the MBS  \n"
		"inodty(integer) : rank of the node of the MBS the contactor is tied to  \n"
		"itacty(integer) : rank of the contactor of MBS  \n"
		"tactype(string [5]) : the type of contactor  \n"
		"color(string [5]) : the color of the contactor  \n"
		"rdata(double array) : the new value of the vector  \n"
		"idata(integer array) : the new value of the vector  \n"
		"\n"
		""},
	 { (char *)"MBS2D_initialize", _wrap_MBS2D_initialize, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"Initialize MBS module once loading is done.  \n"
		"\n"
		"python usage : MBS2D_initialize()  \n"
		"\n"
		""},
	 { (char *)"MBS2D_finalize", _wrap_MBS2D_finalize, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"Finalize MBS module.  \n"
		"\n"
		"python usage : MBS2D_finalize()  \n"
		"\n"
		""},
	 { (char *)"MBS2D_IncrementStep", _wrap_MBS2D_IncrementStep, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"compute the current velocity and displacement  \n"
		"\n"
		"python usage : MBS2D_IncrementStep()  \n"
		"\n"
		""},
	 { (char *)"MBS2D_ComputeFreeVelocity", _wrap_MBS2D_ComputeFreeVelocity, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"compute free velocity  \n"
		"\n"
		"python usage : MBS2D_ComputeFreeVelocity()  \n"
		"\n"
		""},
	 { (char *)"MBS2D_ComputeDof", _wrap_MBS2D_ComputeDof, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"update current position and velocity  \n"
		"\n"
		"python usage : MBS2D_ComputeDof()  \n"
		"\n"
		""},
	 { (char *)"MBS2D_UpdateDof", _wrap_MBS2D_UpdateDof, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"save d.o.f. of the end of the time step to d.o.f. of the begining of the next\n"
		"one  \n"
		"\n"
		"python usage : MBS2D_UpdateDof()  \n"
		"\n"
		""},
	 { (char *)"MBS3D_setNb", _wrap_MBS3D_setNb, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"Set the number of MBS.  \n"
		"\n"
		"python usage : MBS3D_setNb(nb)  \n"
		"\n"
		"Parameters\n"
		"----------\n"
		"nb(integer) : set the number of MBS  \n"
		"\n"
		""},
	 { (char *)"MBS3D_getNb", _wrap_MBS3D_getNb, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"Get the number of MBS.  \n"
		"\n"
		"python usage : nb = MBS3D_getNb()  \n"
		"\n"
		"Returns\n"
		"-------\n"
		"nb (integer) : the number of MBS  \n"
		"\n"
		""},
	 { (char *)"MBS3D_setNbNodes", _wrap_MBS3D_setNbNodes, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"Set the number of nodes of a MBS.  \n"
		"\n"
		"python usage : MBS3D_setNbNodes(ibdyty, nb)  \n"
		"\n"
		"Parameters\n"
		"----------\n"
		"ibdyty(integer): id of the MBS  \n"
		"nb(integer) : the number of nodes of the MBS  \n"
		"\n"
		""},
	 { (char *)"MBS3D_setNbTactors", _wrap_MBS3D_setNbTactors, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"Set the number contactors of a MBS.  \n"
		"\n"
		"python usage : MBS3D_setNbTactors(ibdyty, nb)  \n"
		"\n"
		"Parameters\n"
		"----------\n"
		"ibdyty(integer): id of the MBS  \n"
		"nb(integer) : the number of contactor of the MBS  \n"
		"\n"
		""},
	 { (char *)"MBS3D_getPtrCoor", _wrap_MBS3D_getPtrCoor, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"Get a pointer on the coor of a MBS.  \n"
		"\n"
		"usage : coor = MBS3D_GetPtrCoor(ibdyty)  \n"
		"\n"
		"Parameters\n"
		"----------\n"
		"ibdyty(integer) : rank of considered MBS  \n"
		"\n"
		"Returns\n"
		"-------\n"
		"coor (double 2D-array) : reference on the coordinates of the nodes  \n"
		"\n"
		""},
	 { (char *)"MBS3D_getPtrCoorTT", _wrap_MBS3D_getPtrCoorTT, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"Set the array of coordinates of nodes of a MBS.  \n"
		"\n"
		"python usage : coor = MBS3D_getPtrCoorTT(ibdyty)  \n"
		"\n"
		"Parameters\n"
		"----------\n"
		"ibdyty(integer): id of the MBS  \n"
		"\n"
		"Returns\n"
		"-------\n"
		"coor (double array) : coordinates of nodes of a MBS (in contact configuration)  \n"
		"\n"
		""},
	 { (char *)"MBS3D_getPtrLocalFrame", _wrap_MBS3D_getPtrLocalFrame, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"Get a pointer on the coor of a MBS.  \n"
		"\n"
		"usage : frame = MBS3D_GetPtrLocalFrame(ibdyty)  \n"
		"\n"
		"Parameters\n"
		"----------\n"
		"ibdyty(integer) : rank of considered MBS  \n"
		"\n"
		"Returns\n"
		"-------\n"
		"frame (double 2D-array) : local frame  \n"
		"\n"
		""},
	 { (char *)"MBS3D_getPtrLocalFrameTT", _wrap_MBS3D_getPtrLocalFrameTT, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"Set the array of coordinates of nodes of a MBS.  \n"
		"\n"
		"python usage : frameTT = MBS3D_GetPtrLocalFrameTT(ibdyty)  \n"
		"\n"
		"Parameters\n"
		"----------\n"
		"ibdyty(integer): id of the MBS  \n"
		"\n"
		"Returns\n"
		"-------\n"
		"frameTT (double array) : local frame (in contact configuration)  \n"
		"\n"
		""},
	 { (char *)"MBS3D_addContactor", _wrap_MBS3D_addContactor, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"Add a new contactor to a MBS.  \n"
		"\n"
		"Available contactor types are :  \n"
		"\n"
		"*   PLANx: inputs are:\n"
		"    -   rdata must hold [axe_x, axe_y, axe_z]  \n"
		"*   POLYR: inputs are:\n"
		"    -   rdata must hold the coordinates of the vertices [x_1, y_1, z_1, ... x_n,\n"
		"        y_n, z_n]  \n"
		"    -   idata must hold the connecivity of each triangle defining the surface  \n"
		"\n"
		"python usage : MBS3D_addContactor(ibdyty, inodty, itacty, tacttype, color,\n"
		"rdata, idata=None)  \n"
		"\n"
		"Parameters\n"
		"----------\n"
		"ibdyty(integer) : rank of the MBS  \n"
		"inodty(integer) : rank of the node of the MBS the contactor is tied to  \n"
		"itacty(integer) : rank of the contactor of MBS  \n"
		"tactype(string [5]) : the type of contactor  \n"
		"color(string [5]) : the color of the contactor  \n"
		"rdata(double array) : the new value of the vector  \n"
		"idata(integer array) : the new value of the vector  \n"
		"\n"
		""},
	 { (char *)"MBS3D_initialize", _wrap_MBS3D_initialize, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"Initialize MBS module once loading is done.  \n"
		"\n"
		"python usage : MBS3D_initialize()  \n"
		"\n"
		""},
	 { (char *)"MBS3D_finalize", _wrap_MBS3D_finalize, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"Finalize MBS module.  \n"
		"\n"
		"python usage : MBS3D_finalize()  \n"
		"\n"
		""},
	 { (char *)"MBS3D_IncrementStep", _wrap_MBS3D_IncrementStep, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"compute the current velocity and displacement  \n"
		"\n"
		"python usage : MBS3D_IncrementStep()  \n"
		"\n"
		""},
	 { (char *)"MBS3D_ComputeFreeVelocity", _wrap_MBS3D_ComputeFreeVelocity, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"compute free velocity  \n"
		"\n"
		"python usage : MBS3D_ComputeFreeVelocity()  \n"
		"\n"
		""},
	 { (char *)"MBS3D_ComputeDof", _wrap_MBS3D_ComputeDof, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"update current position and velocity  \n"
		"\n"
		"python usage : MBS3D_ComputeDof()  \n"
		"\n"
		""},
	 { (char *)"MBS3D_UpdateDof", _wrap_MBS3D_UpdateDof, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"save d.o.f. of the end of the time step to d.o.f. of the begining of the next\n"
		"one  \n"
		"\n"
		"python usage : MBS3D_UpdateDof()  \n"
		"\n"
		""},
	 { (char *)"ALpxx_LoadTactors", _wrap_ALpxx_LoadTactors, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"load ALpxx from MAILx and initialize existing_entities  \n"
		"\n"
		"python usage : ALpxx_LoadTactors()  \n"
		"\n"
		""},
	 { (char *)"ALpxx_PushPreconNodes", _wrap_ALpxx_PushPreconNodes, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"set ALpxx supporting nodes as precon  \n"
		"\n"
		"python usage : ALpxx_PushPreconNodes()  \n"
		"\n"
		""},
	 { (char *)"ALpxx_GetAllConnec", _wrap_ALpxx_GetAllConnec, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"return connectivity of all AL in a single vector using gloab node numbering of\n"
		"mecaMAILx  \n"
		"\n"
		"python usage : connec = ALxxx_getAllConnec()  \n"
		"\n"
		"Returns\n"
		"-------\n"
		"connec (integer 1D-array) : connectiviy of ALxxx elements  \n"
		"\n"
		""},
	 { (char *)"ALpxx_GetAllData", _wrap_ALpxx_GetAllData, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"return integer (ibdyty, itacty, i_as) and real data (normal) of all ALxxx  \n"
		"\n"
		"python usage : idata, rdata = ALxxx_getAllData()  \n"
		"\n"
		"Returns\n"
		"-------\n"
		"idata (integer 2D-array) : integer data array  \n"
		"\n"
		"Returns\n"
		"-------\n"
		"rdata (real 2D-array) : real data array  \n"
		"\n"
		""},
	 { (char *)"ALpxx_CleanMemory", _wrap_ALpxx_CleanMemory, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"Free all memory allocated within ALpxx module.  \n"
		"\n"
		"python usage : ALpxx_CleanMemory()  \n"
		"\n"
		""},
	 { (char *)"ASpxx_LoadTactors", _wrap_ASpxx_LoadTactors, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"Load ASpxx from MAILx and Initialize existing_entities.  \n"
		"\n"
		"python usage : ASpxx_LoadTactors()  \n"
		"\n"
		""},
	 { (char *)"ASpxx_PushPreconNodes", _wrap_ASpxx_PushPreconNodes, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"set ASpxx supporting nodes as precon  \n"
		"\n"
		"python usage : ASpxx_PushPreconNodes()  \n"
		"\n"
		""},
	 { (char *)"ASpxx_GetAllConnec", _wrap_ASpxx_GetAllConnec, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"return connectivity of all AS in a single vector using gloab node numbering of\n"
		"mecaMAILx  \n"
		"\n"
		"python usage : connec = ASxxx_getAllConnec()  \n"
		"\n"
		"Returns\n"
		"-------\n"
		"connec (integer 1D-array) : connectiviy of ASxxx elements  \n"
		"\n"
		""},
	 { (char *)"ASpxx_GetAllData", _wrap_ASpxx_GetAllData, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"return integer (ibdyty, itacty, i_as) and real data (normal) of all ASxxx  \n"
		"\n"
		"python usage : idata, rdata = ASxxx_getAllData()  \n"
		"\n"
		"Returns\n"
		"-------\n"
		"idata (integer 2D-array) : integer data array  \n"
		"\n"
		"Returns\n"
		"-------\n"
		"rdata (real 2D-array) : real data array  \n"
		"\n"
		""},
	 { (char *)"ASpxx_CleanMemory", _wrap_ASpxx_CleanMemory, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"Free all memory allocated within ASpxx module.  \n"
		"\n"
		"python usage : ASpxx_CleanMemory()  \n"
		"\n"
		""},
	 { (char *)"ASpxx_ExplodePatch", _wrap_ASpxx_ExplodePatch, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"Explode ASpxx patch in singleton.  \n"
		"\n"
		"python usage : ASpxx_ExplodePatch()  \n"
		"\n"
		""},
	 { (char *)"CLxxx_LoadTactors", _wrap_CLxxx_LoadTactors, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"load CLxxx from MAILx and Initialize existing_entities  \n"
		"\n"
		"python usage : CLxxx_LoadTactors()  \n"
		"\n"
		""},
	 { (char *)"CLxxx_SetNbNodesByCLxxx", _wrap_CLxxx_SetNbNodesByCLxxx, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"Set the number of CL nodes by edges. It helps to compute the length associated\n"
		"to a contact node. Default is 2.  \n"
		"\n"
		"python usage : CLxxx_SetNbNodesByCLxxx(nb_nodes)  \n"
		"\n"
		"Parameters\n"
		"----------\n"
		"nb_nodes(integer) : number of CLxxx contactors by edges  \n"
		"\n"
		""},
	 { (char *)"CLxxx_PushPreconNodes", _wrap_CLxxx_PushPreconNodes, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"set CLxxx supporting nodes as precon  \n"
		"\n"
		"python usage : CLxxx_PushPreconNodes()  \n"
		"\n"
		""},
	 { (char *)"CLxxx_GetNbCLxxx", _wrap_CLxxx_GetNbCLxxx, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"Get the number of CLxxx.  \n"
		"\n"
		"usage : nb_CLxxx = CLxxx_GetNbCLxxx()  \n"
		"\n"
		"Parameters\n"
		"----------\n"
		"nb_CLxxx(integer) : number of CLxxx in container  \n"
		"\n"
		""},
	 { (char *)"CLpxx_GetAllConnec", _wrap_CLpxx_GetAllConnec, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"return connectivity of all CL in a single vector using gloab node numbering of\n"
		"mecaMAILx  \n"
		"\n"
		"python usage : connec = CLxxx_getAllConnec()  \n"
		"\n"
		"Returns\n"
		"-------\n"
		"connec (integer 1D-array) : connectiviy of CLxxx elements  \n"
		"\n"
		""},
	 { (char *)"CLpxx_GetAllData", _wrap_CLpxx_GetAllData, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"return integer (ibdyty, itacty, i_as) and real data (normal) of all CLxxx  \n"
		"\n"
		"python usage : idata, rdata = CLxxx_getAllData()  \n"
		"\n"
		"Returns\n"
		"-------\n"
		"idata (integer 2D-array) : integer data array  \n"
		"\n"
		"Returns\n"
		"-------\n"
		"rdata (real 2D-array) : real data array  \n"
		"\n"
		""},
	 { (char *)"CLxxx_CleanMemory", _wrap_CLxxx_CleanMemory, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"Free all memory allocated within CLxxx module.  \n"
		"\n"
		"python usage : CLxxx_CleanMemory()  \n"
		"\n"
		""},
	 { (char *)"CSxxx_LoadTactors", _wrap_CSxxx_LoadTactors, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"Load CSxxx from MAILx and Initialize existing_entities.  \n"
		"\n"
		"python usage : CSxxx_LoadTactors()  \n"
		"\n"
		""},
	 { (char *)"CSxxx_PushPreconNodes", _wrap_CSxxx_PushPreconNodes, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"set CSxxx supporting nodes as precon  \n"
		"\n"
		"python usage : CSxxx_PushPreconNodes()  \n"
		"\n"
		""},
	 { (char *)"CSxxx_FlipOrientation", _wrap_CSxxx_FlipOrientation, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"Flip normal of all CSxxx of a given MAILx body.  \n"
		"\n"
		"python usage : CSxxx_FlipOrientation(ibdyty)  \n"
		"\n"
		"Parameters\n"
		"----------\n"
		"ibdyty(integer) : rank of desired body  \n"
		"\n"
		""},
	 { (char *)"CSxxx_FlipOrientationOnePatch", _wrap_CSxxx_FlipOrientationOnePatch, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"Flip normal of CSxxx belonging to given patch of a given MAILx body.  \n"
		"\n"
		"python usage : CSxxx_FlipOrientationOnePatch(ibdyty,icspxx)  \n"
		"\n"
		"Parameters\n"
		"----------\n"
		"ibdyty(integer) : rank of desired body  \n"
		"icspxx(integer) : rank of desired patch  \n"
		"\n"
		""},
	 { (char *)"CSxxx_SetShrink", _wrap_CSxxx_SetShrink, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"shrink position of nodes in CSxxx contactors  \n"
		"\n"
		"python usage : CSxxx_SetShrink(shrink)  \n"
		"\n"
		"Parameters\n"
		"----------\n"
		"shrink(real) : shrink value  \n"
		"\n"
		""},
	 { (char *)"CSxxx_SetQuadrature", _wrap_CSxxx_SetQuadrature, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"Set the contact quadrature rule of a CSxxx face. OBSOLETE FUNCTION !!!! To\n"
		"remove in the future.  \n"
		"\n"
		"python usage : CSxxx_SetQuadrature(ivalue)  \n"
		"\n"
		"Parameters\n"
		"----------\n"
		"ivalue(integer) : degree on CSxxx contactor  \n"
		"\n"
		""},
	 { (char *)"CSxxx_AddReac", _wrap_CSxxx_AddReac, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"Apply an external reaction on a CSxxx.  \n"
		"\n"
		"python usage : CSxxx_AddReac(datatype, iCSxxx, reac)  \n"
		"\n"
		"Parameters\n"
		"----------\n"
		"datatype(string of size 5) : the vector to set  \n"
		"iCSxxx(integer) : id of the CSpxx  \n"
		"reac(double array) : the value to add  \n"
		"\n"
		""},
	 { (char *)"CSpxx_ApplySurfaceLoad", _wrap_CSpxx_ApplySurfaceLoad, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		""},
	 { (char *)"CSpxx_ApplyPressure", _wrap_CSpxx_ApplyPressure, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"Apply an external pressure on a CSpxx.  \n"
		"\n"
		"python usage : CSpxx_ApplyPressure(ivalue,rvalue)  \n"
		"\n"
		"Parameters\n"
		"----------\n"
		"ivalue(integer) : id of the CSpxx  \n"
		"rvalue(real) : pressure  \n"
		"\n"
		""},
	 { (char *)"CSxxx_GetNbCSxxx", _wrap_CSxxx_GetNbCSxxx, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"Get the number of CSxxx.  \n"
		"\n"
		"usage : nb_CSxxx = CSxxx_GetNbCSxxx()  \n"
		"\n"
		"Parameters\n"
		"----------\n"
		"nb_CSxxx(integer) : number of CSxxx in container  \n"
		"\n"
		""},
	 { (char *)"CSpxx_GetAllConnec", _wrap_CSpxx_GetAllConnec, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"return connectivity of all CS in a single vector using gloab node numbering of\n"
		"mecaMAILx  \n"
		"\n"
		"python usage : connec = CSxxx_getAllConnec()  \n"
		"\n"
		"Returns\n"
		"-------\n"
		"connec (integer 1D-array) : connectiviy of CSxxx elements  \n"
		"\n"
		""},
	 { (char *)"CSpxx_GetAllData", _wrap_CSpxx_GetAllData, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"return integer (ibdyty, itacty, i_as) and real data (normal) of all CSxxx  \n"
		"\n"
		"python usage : idata, rdata = CSxxx_getAllData()  \n"
		"\n"
		"Returns\n"
		"-------\n"
		"idata (integer 2D-array) : integer data array  \n"
		"\n"
		"Returns\n"
		"-------\n"
		"rdata (real 2D-array) : real data array  \n"
		"\n"
		""},
	 { (char *)"CSxxx_CleanMemory", _wrap_CSxxx_CleanMemory, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"Free all memory allocated within CSxxx module.  \n"
		"\n"
		"python usage : CSxxx_CleanMemory()  \n"
		"\n"
		""},
	 { (char *)"DISKL_LoadTactors", _wrap_DISKL_LoadTactors, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"Load DISKL from MAILx and Initialize existing_entities.  \n"
		"\n"
		"python usage : DISKL_LoadTactors()  \n"
		"\n"
		""},
	 { (char *)"DISKL_PushPreconNodes", _wrap_DISKL_PushPreconNodes, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"declare the DISKL supporting nodes as precon  \n"
		"\n"
		"python usage : DISKL_PushPreconNodes()  \n"
		"\n"
		""},
	 { (char *)"DISKL_CleanMemory", _wrap_DISKL_CleanMemory, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"Free all memory allocated within DISKL module.  \n"
		"\n"
		"python usage : DISKL_CleanMemory()  \n"
		"\n"
		""},
	 { (char *)"MAILx_ReadBodies", _wrap_MAILx_ReadBodies, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"read MAILx from DATBOX/BODIES.DAT  \n"
		"\n"
		"Input string is of form vX.Y where X is major version number and Y is minor one.  \n"
		" If not specified, last available version is used.  \n"
		"\n"
		"python usage : MAILx_ReadBodies(version)  \n"
		"\n"
		"param[in] version (string) : file format version to use  \n"
		"\n"
		""},
	 { (char *)"MAILx_WriteBodies", _wrap_MAILx_WriteBodies, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"write MAILx to OUTBOX/BODIES.OUT  \n"
		"\n"
		"Input string is of form vX.Y where X is major version number and Y is minor one.  \n"
		" If not specified, last available version is used.  \n"
		"\n"
		"python usage : MAILx_WriteBodies(version)  \n"
		"\n"
		"param[in] version (string) : file format version to use  \n"
		"\n"
		""},
	 { (char *)"MAILx_WriteLastGPV", _wrap_MAILx_WriteLastGPV, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"write OUTBOX/GPV.LAST  \n"
		"\n"
		"python usage : MAILx_WriteLastGPV()  \n"
		"\n"
		""},
	 { (char *)"MAILx_WriteOutGPV", _wrap_MAILx_WriteOutGPV, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"write OUTBOX/GPV.OUT.x  \n"
		"\n"
		"python usage : MAILx_WriteOutGPV()  \n"
		"\n"
		""},
	 { (char *)"MAILx_DisplayOutGPV", _wrap_MAILx_DisplayOutGPV, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"display GPV values  \n"
		"\n"
		"python usage : MAILx_DisplayOutGPV()  \n"
		"\n"
		""},
	 { (char *)"MAILx_AddDof2InBodies", _wrap_MAILx_AddDof2InBodies, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"set cooref = cooref + X  \n"
		"\n"
		"python usage : MAILx_AddDof2InBodies()  \n"
		"\n"
		""},
	 { (char *)"MAILx_GetNbMAILx", _wrap_MAILx_GetNbMAILx, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"Get the number of MAILx.  \n"
		"\n"
		"python usage : nb_MAILx = GetNbMAILx()  \n"
		"\n"
		"Returns\n"
		"-------\n"
		"nb_MAILx (integer) : number of MAILx  \n"
		"\n"
		""},
	 { (char *)"MAILx_GetNbCell", _wrap_MAILx_GetNbCell, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"Get the number of Cells of a given MAILx.  \n"
		"\n"
		"python usage : nb_MAILx = GetNbCell(IdBody)  \n"
		"\n"
		"Parameters\n"
		"----------\n"
		"IdBody(integer) : id of the concern body  \n"
		"\n"
		"Returns\n"
		"-------\n"
		"nb_cell (integer) : number of cell  \n"
		"\n"
		""},
	 { (char *)"MAILx_SetCoorRef", _wrap_MAILx_SetCoorRef, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"set reference coordinates on a given body  \n"
		"\n"
		"python usage : MAILx_SetCoorRef(IdBody, f, length)  \n"
		"\n"
		"Parameters\n"
		"----------\n"
		"IdBody(integer) : id of the concern body  \n"
		"f(double array) : value of the vitesse  \n"
		"length(integer) : length of vector  \n"
		"\n"
		""},
	 { (char *)"MAILx_GetCoordNodty", _wrap_MAILx_GetCoordNodty, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"Get one coordinate of a node of a body.  \n"
		"\n"
		"python usage : x = MAILx_GetCoordNodty(int ibdty,int inodty,int icomp)  \n"
		"\n"
		"Parameters\n"
		"----------\n"
		"ibdyty(integer) : rank of considered body  \n"
		"inodty(integer) : the node  \n"
		"icomp(integer) : the component  \n"
		"\n"
		"Returns\n"
		"-------\n"
		"x (double) : coordinate of node  \n"
		"\n"
		""},
	 { (char *)"MAILx_GetCoordsNodty", _wrap_MAILx_GetCoordsNodty, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"Get the coordinates of a node of a body.  \n"
		"\n"
		"python usage : x = MAILx_GetCoordsNodty(int ibdty, int inodty, int length)  \n"
		"\n"
		"Parameters\n"
		"----------\n"
		"ibdyty(integer) : rank of considered body  \n"
		"inodty(integer) : the node  \n"
		"length(integer) : the number of component  \n"
		"\n"
		"Returns\n"
		"-------\n"
		"x (double array) : the desired vector  \n"
		"\n"
		""},
	 { (char *)"MAILx_GetNbNodes", _wrap_MAILx_GetNbNodes, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"Get the number of nodes of a given MAILx.  \n"
		"\n"
		"python usage : nb_nodes = MAILx_GetNbNodes(ibdyty)  \n"
		"\n"
		"Parameters\n"
		"----------\n"
		"ibdyty(integer) : body id  \n"
		"\n"
		"Returns\n"
		"-------\n"
		"nb_nodes (integer) : number of nodes of the body  \n"
		"\n"
		""},
	 { (char *)"MAILx_InitNodalFields", _wrap_MAILx_InitNodalFields, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"Set the number of nodal_fields for a given body.  \n"
		"\n"
		"python usage : MAILx_InitNodalFields(ibdyty,nb_nodal_fields)  \n"
		"\n"
		"Parameters\n"
		"----------\n"
		"ibdyty(integer) : body id  \n"
		"nb_nodal_fields(integer) : number of nodal fields required  \n"
		"\n"
		""},
	 { (char *)"MAILx_InitNodalField", _wrap_MAILx_InitNodalField, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"Set name and size of a nodal_field of a given body.  \n"
		"\n"
		"python usage : MAILx_InitNodalField(ibdyty,name,rank,sz)  \n"
		"\n"
		"Parameters\n"
		"----------\n"
		"ibdyty(integer) : body id  \n"
		"name(string) : field name  \n"
		"rank(integer) : field rank  \n"
		"sz(integer) : size of the field  \n"
		"\n"
		""},
	 { (char *)"MAILx_SetNodalField", _wrap_MAILx_SetNodalField, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"Set a nodal_field of a given body.  \n"
		"\n"
		"python usage : MAILx_SetNodalField(ibdyty,rank,field)  \n"
		"\n"
		"Parameters\n"
		"----------\n"
		"ibdyty(integer) : body id  \n"
		"rank(integer) : field rank  \n"
		"field(double vector) : field  \n"
		"\n"
		""},
	 { (char *)"MAILx_CleanMemory", _wrap_MAILx_CleanMemory, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"Free all memory allocated within MAILx module.  \n"
		"\n"
		"python usage : MAILx_CleanMemory()  \n"
		"\n"
		""},
	 { (char *)"PT2DL_LoadTactors", _wrap_PT2DL_LoadTactors, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"Initialize existing_entities variable for PT2DL contactors.  \n"
		"\n"
		"python usage : PT2DL_LoadTactors()  \n"
		"\n"
		""},
	 { (char *)"PT2DL_PushPreconNodes", _wrap_PT2DL_PushPreconNodes, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"python usage : PT2DL_PushPreconNodes()  \n"
		"\n"
		""},
	 { (char *)"PT2DL_GetNbPT2DL", _wrap_PT2DL_GetNbPT2DL, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"Get the number of PT2DL.  \n"
		"\n"
		"usage : nb_PT2DL = PT2DL_GetNbPT2DL()  \n"
		"\n"
		"Parameters\n"
		"----------\n"
		"nb_PT2DL(integer) : number of PT2DL in container  \n"
		"\n"
		""},
	 { (char *)"PT2DL_GetNbPT2TL", _wrap_PT2DL_GetNbPT2TL, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"Get the number of PT2TL of a body.  \n"
		"\n"
		"usage : nb_PT2DL = PT2DL_GetNbPT2TL(ibdyty)  \n"
		"\n"
		"Parameters\n"
		"----------\n"
		"nb_PT2TL(integer) : number of PT2TL in container  \n"
		"\n"
		""},
	 { (char *)"PT2DL_ComputeConvectiveFlux", _wrap_PT2DL_ComputeConvectiveFlux, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"python usage : PT2DL_ComputeConvectiveFlux()  \n"
		"\n"
		""},
	 { (char *)"PT2DL_AssembThermKT", _wrap_PT2DL_AssembThermKT, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"python usage : PT2DL_AssembThermKT()  \n"
		"\n"
		""},
	 { (char *)"PT2DL_AssembThermRHS", _wrap_PT2DL_AssembThermRHS, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"python usage : PT2DL_AssembThermRHS()  \n"
		"\n"
		""},
	 { (char *)"PT2DL_GetBody", _wrap_PT2DL_GetBody, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"return corresponding body  \n"
		"\n"
		"python usage : ibdy = PT2DL_GetBody(itacty)  \n"
		"\n"
		""},
	 { (char *)"PT2DL_CleanMemory", _wrap_PT2DL_CleanMemory, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"Free all memory allocated within PT2DL module.  \n"
		"\n"
		"python usage : PT2DL_CleanMemory()  \n"
		"\n"
		""},
	 { (char *)"mecaMAILx_WithoutRenumbering", _wrap_mecaMAILx_WithoutRenumbering, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"skip renumbering of the unknowns using a rcc method  \n"
		"\n"
		"python usage : mecaMAILx_WithoutRenumbering()  \n"
		"\n"
		""},
	 { (char *)"mecaMAILx_BandStorage", _wrap_mecaMAILx_BandStorage, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"use band matrix  \n"
		"\n"
		"python usage : mecaMAILx_BandStorage()  \n"
		"\n"
		""},
	 { (char *)"mecaMAILx_SparseStorage", _wrap_mecaMAILx_SparseStorage, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"use sparse matrix  \n"
		"\n"
		"python usage : mecaMAILx_SparseStorage()  \n"
		"\n"
		""},
	 { (char *)"mecaMAILx_ExplodedStorage", _wrap_mecaMAILx_ExplodedStorage, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"use element by element matrix  \n"
		"\n"
		"python usage : mecaMAILx_ExplodedStorage()  \n"
		"\n"
		""},
	 { (char *)"mecaMAILx_DiagonalStorage", _wrap_mecaMAILx_DiagonalStorage, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"use diagonal matrix  \n"
		"\n"
		"python usage : mecaMAILx_DiagonalStorage()  \n"
		"\n"
		""},
	 { (char *)"mecaMAILx_SkylineStorage", _wrap_mecaMAILx_SkylineStorage, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"use skyline matrix  \n"
		"\n"
		"python usage : mecaMAILx_SkylineStorage()  \n"
		"\n"
		""},
	 { (char *)"mecaMAILx_FullStorage", _wrap_mecaMAILx_FullStorage, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"use full matrix  \n"
		"\n"
		"python usage : mecaMAILx_FullStorage()  \n"
		"\n"
		""},
	 { (char *)"mecaMAILx_SymmetricShape", _wrap_mecaMAILx_SymmetricShape, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"assume matrix is symmetrical  \n"
		"\n"
		"python usage : mecaMAILx_SymmetricShape()  \n"
		"\n"
		""},
	 { (char *)"mecaMAILx_UnspecifiedShape", _wrap_mecaMAILx_UnspecifiedShape, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"does not assume any thing on matrix shape  \n"
		"\n"
		"python usage : mecaMAILx_UnspecifiedShape()  \n"
		"\n"
		""},
	 { (char *)"mecaMAILx_GetNbMecaMAILx", _wrap_mecaMAILx_GetNbMecaMAILx, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"Get the number of mecaMAILx.  \n"
		"\n"
		"python usage : nb_mecaMAILx = mecaMAILx_GetNbMecaMAILx()  \n"
		"\n"
		"Returns\n"
		"-------\n"
		"nb_mecaMAILx (integer) : number of mecaMAILx  \n"
		"\n"
		""},
	 { (char *)"mecaMAILx_GetNbNodes", _wrap_mecaMAILx_GetNbNodes, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"Get the number of nodes of a mecaMAILx.  \n"
		"\n"
		"python usage : nb_nodes = mecaMAILx_GetNbNodes(ibdyty)  \n"
		"\n"
		"Parameters\n"
		"----------\n"
		"ivalue(integer) : id of the mecaMAILx  \n"
		"\n"
		"Returns\n"
		"-------\n"
		"nb_nodes (integer) : number of nodes of a mecaMAILx  \n"
		"\n"
		""},
	 { (char *)"mecaMAILx_GetNbElements", _wrap_mecaMAILx_GetNbElements, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"Get the number of elements of a mecaMAILx.  \n"
		"\n"
		"python usage : nb_elements = mecaMAILx_GetNbElements(ibdyty)  \n"
		"\n"
		"Parameters\n"
		"----------\n"
		"ivalue(integer) : id of the mecaMAILx  \n"
		"\n"
		"Returns\n"
		"-------\n"
		"nb_nodes (integer) : number of elements of a mecaMAILx  \n"
		"\n"
		""},
	 { (char *)"mecaMAILx_GetNbGp", _wrap_mecaMAILx_GetNbGp, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"Get the number of Gauss points of an element of a mecaMAILx.  \n"
		"\n"
		"python usage : nb_gp = mecaMAILx_GetNbElements(ibdyty, iblmty)  \n"
		"\n"
		"Parameters\n"
		"----------\n"
		"ibdyty(integer) : id of the mecaMAILx  \n"
		"iblmty(integer) : id of the element  \n"
		"\n"
		"Returns\n"
		"-------\n"
		"nb_gp (integer) : number of Gauss point of an element of a mecaMAILx  \n"
		"\n"
		""},
	 { (char *)"mecaMAILx_SetPreconBody", _wrap_mecaMAILx_SetPreconBody, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"ask for precomputation of the W matrix on support node dofs of contactors for\n"
		"one body. Assumes bulk behaviour is linear.  \n"
		"\n"
		"python usage : mecaMAILx_SetPreconBody(ivalue)  \n"
		"\n"
		"Parameters\n"
		"----------\n"
		"ivalue(integer) : id of body to set precon  \n"
		"\n"
		""},
	 { (char *)"mecaMAILx_SetPreconAllBodies", _wrap_mecaMAILx_SetPreconAllBodies, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"ask for precomputation of the W matrix on support node dofs of contactors for\n"
		"all bodies. Assumes bulk behaviour is linear.  \n"
		"\n"
		"python usage : mecaMAILx_SetPreconAllBodies()  \n"
		"\n"
		""},
	 { (char *)"mecaMAILx_ComputePreconW", _wrap_mecaMAILx_ComputePreconW, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"compute the precon W on precon bodies  \n"
		"\n"
		"python usage : mecaMAILx_ComputePreconW()  \n"
		"\n"
		""},
	 { (char *)"mecaMAILx_InitPreconW", _wrap_mecaMAILx_InitPreconW, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"initialize an empty precon W  \n"
		"\n"
		"python usage : mecaMAILx_InitPreconW()  \n"
		"\n"
		""},
	 { (char *)"mecaMAILx_PutPreconW", _wrap_mecaMAILx_PutPreconW, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"push a column of precon W  \n"
		"\n"
		"python usage : mecaMAILx_PutPreconW(ivalue1, ivalue2, ivalue3, vect)  \n"
		"\n"
		"Parameters\n"
		"----------\n"
		"ivalue1(integer) : body number  \n"
		"ivalue2(integer) : node number  \n"
		"ivalue3(integer) : dof number  \n"
		"vect(double) : column  \n"
		"\n"
		""},
	 { (char *)"mecaMAILx_GetNodesPrecon", _wrap_mecaMAILx_GetNodesPrecon, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"Get the list of preconditionned nodes of a mecaMAILx body.  \n"
		"\n"
		"Here memory is allocated within lmgc90 so that the pointer can be freely\n"
		"modified by third parties without nasty effect on lmgc90 functioning.  \n"
		"\n"
		"python usage : precon_list = mecaMAILx_GetNodesPrecon(ibdyty)  \n"
		"\n"
		"Parameters\n"
		"----------\n"
		"ibdyty(integer) : index of the desired mecaMAILx  \n"
		"\n"
		"Returns\n"
		"-------\n"
		"precon_list (integer list) : list of the preconditionned nodes  \n"
		"\n"
		""},
	 { (char *)"mecaMAILx_SetCoroAllBodies", _wrap_mecaMAILx_SetCoroAllBodies, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"ask for corotationnal computation of the W matrix. Assumes bulk behaviour is\n"
		"linear.  \n"
		"\n"
		"python usage : mecaMAILx_SetCoroAllBodies()  \n"
		"\n"
		""},
	 { (char *)"mecaMAILx_SetCoroBody", _wrap_mecaMAILx_SetCoroBody, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"ask for corotationnal computation of the W matrix of a given body. Assumes bulk\n"
		"behaviour is linear.  \n"
		"\n"
		"python usage : mecaMAILx_SetCoroBody(ivalue)  \n"
		"\n"
		"Parameters\n"
		"----------\n"
		"ivalue(integer) : id of body to set coro  \n"
		"\n"
		""},
	 { (char *)"mecaMAILx_SetTolCoro", _wrap_mecaMAILx_SetTolCoro, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"set the admssible tolerance on rigid body velocity computed by deformable model  \n"
		"\n"
		"python usage : mecaMAILx_SetTolCoro(tol)  \n"
		"\n"
		"Parameters\n"
		"----------\n"
		"tol(double) : tolerance  \n"
		"\n"
		""},
	 { (char *)"mecaMAILx_SetRigidAllBodies", _wrap_mecaMAILx_SetRigidAllBodies, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"ask for rigid computation of the W matrix. Assumes bulk behaviour is linear.  \n"
		"\n"
		"python usage : mecaMAILx_SetRigidAllBodies()  \n"
		"\n"
		""},
	 { (char *)"mecaMAILx_SetRigidBody", _wrap_mecaMAILx_SetRigidBody, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"ask for rigid computation of the W matrix of a given body. Assumes bulk\n"
		"behaviour is linear.  \n"
		"\n"
		"python usage : mecaMAILx_SetRigidBody(ivalue)  \n"
		"\n"
		"Parameters\n"
		"----------\n"
		"ivalue(integer) : id of body to compute as a rigid  \n"
		"\n"
		""},
	 { (char *)"mecaMAILx_SkipDeformableComputationAllBodies", _wrap_mecaMAILx_SkipDeformableComputationAllBodies, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"avoid deformable part computation of a deformable body declared as rigid  \n"
		"\n"
		"python usage : mecaMAILx_SkipDeformableComputationAllBodies()  \n"
		"\n"
		""},
	 { (char *)"mecaMAILx_SkipDeformableComputationBody", _wrap_mecaMAILx_SkipDeformableComputationBody, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"avoid deformable part computation of a given deformable body declared as rigid  \n"
		"\n"
		"python usage : mecaMAILx_SkipDeformableComputationBody(ivalue)  \n"
		"\n"
		"Parameters\n"
		"----------\n"
		"ivalue(integer) : id of body to compute without deformation  \n"
		"\n"
		""},
	 { (char *)"mecaMAILx_BuildRigidBodies", _wrap_mecaMAILx_BuildRigidBodies, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"computes internal matrices for rigid description  \n"
		"\n"
		"python usage : mecaMAILx_BuildRigidBodies()  \n"
		"\n"
		""},
	 { (char *)"mecaMAILx_IsRigid", _wrap_mecaMAILx_IsRigid, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"return 1 if a given body is rigid/coro, 0 otherwize  \n"
		"\n"
		"python usage : rigid = mecaMAILx_IsRigid(ibdyty)  \n"
		"\n"
		"Parameters\n"
		"----------\n"
		"idbdy(integer): id of the body we want visibility  \n"
		"\n"
		"Returns\n"
		"-------\n"
		"rigid (integer) : 1 if body is visible, 0 otherwize  \n"
		"\n"
		""},
	 { (char *)"mecaMAILx_GetRigidFrame", _wrap_mecaMAILx_GetRigidFrame, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"return an inertia frame matrix  \n"
		"\n"
		"Possible values for datatype field are \"RFbeg\", \"RF___\", \"RFTT_ (stands for\n"
		"Rigid Frame)  \n"
		"\n"
		"python usage : mat = mecaMAILx_GetRigidFrame(datatype, ibdyty)  \n"
		"\n"
		"Parameters\n"
		"----------\n"
		"idbdy(integer): id of the body  \n"
		"\n"
		"Returns\n"
		"-------\n"
		"vec (float matrix) : frame matrix (beg, current or TT)  \n"
		"\n"
		""},
	 { (char *)"mecaMAILx_GetRigidCoorTT", _wrap_mecaMAILx_GetRigidCoorTT, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"return TT center of inertia coordinates  \n"
		"\n"
		"python usage : vec = mecaMAILx_GetRigidCoorTT(ibdyty)  \n"
		"\n"
		"Parameters\n"
		"----------\n"
		"idbdy(integer): id of the body  \n"
		"\n"
		"Returns\n"
		"-------\n"
		"vec (float vector) : TT center of inertia coordinates  \n"
		"\n"
		""},
	 { (char *)"mecaMAILx_GetRigidCooref", _wrap_mecaMAILx_GetRigidCooref, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"return ref center of inertia coordinates  \n"
		"\n"
		"python usage : vec = mecaMAILx_GetRigidCooref(ibdyty)  \n"
		"\n"
		"Parameters\n"
		"----------\n"
		"idbdy(integer): id of the body  \n"
		"\n"
		"Returns\n"
		"-------\n"
		"vec (float vector) : ref center of inertia coordinates  \n"
		"\n"
		""},
	 { (char *)"mecaMAILx_SetRVDrivenDofs", _wrap_mecaMAILx_SetRVDrivenDofs, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"declares rigid velocity dof as driven  \n"
		"\n"
		"python usage : mecaMAILx_SetRVDrivenDofs(idbody,vector_in)  \n"
		"\n"
		"Parameters\n"
		"----------\n"
		"idbody(integer) : id of the body  \n"
		"vector(integer) : list of driven dofs  \n"
		"\n"
		""},
	 { (char *)"mecaMAILx_SetRVDrivenDofValue", _wrap_mecaMAILx_SetRVDrivenDofValue, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"set the value of rigid velocity dof value  \n"
		"\n"
		"python usage : mecaMAILx_SetRVDrivenDofValue(idbody,iddof,rv)  \n"
		"\n"
		"Parameters\n"
		"----------\n"
		"idbody(integer) : id of the body  \n"
		"iddof(integer) : id of dof  \n"
		"rv(float) : value  \n"
		"\n"
		""},
	 { (char *)"mecaMAILx_PutBodyRVector", _wrap_mecaMAILx_PutBodyRVector, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"Set a vector of a coro or rigid mecaMAILx body.  \n"
		"\n"
		"Possible values for datatype field are:  \n"
		"\n"
		"*   \"Coor0\": reference coordinates  \n"
		"*   \"Xbeg_\": cumulated displacements over time at beginning of time step  \n"
		"*   \"X____\": cumulated displacements over time in computed configuration  \n"
		"*   \"Vbeg_\": velocity at beginning of time step  \n"
		"*   \"V____\": velocity in computed configuration  \n"
		"*   \"Vfree\": velocity free of contacts  \n"
		"*   \"Reac_\": contact reaction force  \n"
		"*   \"Raux_\": working array for reaction force  \n"
		"*   \"Ireac\": contact impulse  \n"
		"*   \"Iaux_\": working array for impulste  \n"
		"*   \"Fext_\": external forces  \n"
		"\n"
		"uses copy, and in case fo Fext, the operation is not just setting but adding  \n"
		"\n"
		"python usage : mecaMAILx_PutBodyRVector(datatype, ibdyty, vector)  \n"
		"\n"
		"Parameters\n"
		"----------\n"
		"datatype(string [5]) : the vector to set  \n"
		"ibdyty(integer) : rank of the RBDY3  \n"
		"vector(double array) : the new value of the vector  \n"
		"\n"
		""},
	 { (char *)"mecaMAILx_GetBodyRVector", _wrap_mecaMAILx_GetBodyRVector, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"Get a copy of a vector of a mecaMAILx body.  \n"
		"\n"
		"Possible values for datatype field are:  \n"
		"\n"
		"*   \"Coor0\": reference coordinates  \n"
		"*   \"Coorb\": coordinates at beginning of time step  \n"
		"*   \"Xbeg_\": cumulated displacements over time at beginning of time step  \n"
		"*   \"XTT__\": cumulated displacements over time in detection configuration  \n"
		"*   \"X____\": cumulated displacements over time in computed configuration  \n"
		"*   \"V____\": velocity in computed configuration  \n"
		"*   \"Vbeg_\": velocity at beginning of time step  \n"
		"*   \"Vfree\": velocity free of contacts  \n"
		"*   \"Reac_\": contact reaction force  \n"
		"*   \"Raux_\": working array for reaction force  \n"
		"*   \"Ireac\": contact impulse  \n"
		"*   \"Iaux_\": working array for impulste  \n"
		"*   \"Fext_\": external forces  \n"
		"*   \"Fint_\": internal forces  \n"
		"\n"
		"python usage : vector = mecaMAILx_GetBodyRVector(datatype, ibdyty)  \n"
		"\n"
		"Parameters\n"
		"----------\n"
		"datatype(string [5]) : the vector to get  \n"
		"ibdyty(integer) : rank of the RBDY3  \n"
		"\n"
		"Returns\n"
		"-------\n"
		"vector (double array) : output vector  \n"
		"\n"
		""},
	 { (char *)"mecaMAILx_PutBodyVector", _wrap_mecaMAILx_PutBodyVector, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"Set a vector of a given body.  \n"
		"\n"
		"Possible values for datatype field are:  \n"
		"\n"
		"*   \"Coor0\": reference coordinates  \n"
		"*   \"Coor_\": coordinates in computed configuration  \n"
		"*   \"Coorb\": coordinates at beginning of time step  \n"
		"*   \"X____\": cumulated displacements over time in computed configuration  \n"
		"*   \"Xbeg_\": cumulated displacements over time at beginning of time step  \n"
		"*   \"V____\": velocity in computed configuration  \n"
		"*   \"Vbeg_\": velocity at beginning of time step  \n"
		"*   \"Vfree\": velocity free of contacts  \n"
		"*   \"Reac_\": contact reaction force  \n"
		"*   \"Raux_\": working array for reaction force  \n"
		"*   \"Ireac\": contact impulse  \n"
		"*   \"Iaux_\": working array for impulste  \n"
		"*   \"Fext_\": external forces  \n"
		"*   \"Fint_\": internal forces  \n"
		"\n"
		"python usage : mecaMAILx_PutBodyVector(datatype, ibdyty, matrix)  \n"
		"\n"
		"Parameters\n"
		"----------\n"
		"datatype(string of size 5) : the vector to set  \n"
		"ibdyty(integer) : rank of body  \n"
		"matrix(double array) : the new value  \n"
		"\n"
		""},
	 { (char *)"mecaMAILx_GetBodyVector", _wrap_mecaMAILx_GetBodyVector, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"Get a copy of a vector of a given body.  \n"
		"\n"
		"Possible values for datatype field are:  \n"
		"\n"
		"*   \"Coor0\": reference coordinates  \n"
		"*   \"Coor_\": coordinates in computed configuration  \n"
		"*   \"Coorb\": coordinates at beginning of time step  \n"
		"*   \"X____\": cumulated displacements over time in computed configuration  \n"
		"*   \"Xbeg_\": cumulated displacements over time at beginning of time step  \n"
		"*   \"V____\": velocity in computed configuration  \n"
		"*   \"Vbeg_\": velocity at beginning of time step  \n"
		"*   \"Vaux_\": working array for velocity  \n"
		"*   \"Vfree\": velocity free of contacts  \n"
		"*   \"Reac_\": contact reaction force  \n"
		"*   \"Raux_\": working array for reaction force  \n"
		"*   \"Ireac\": contact impulse  \n"
		"*   \"Iaux_\": working array for impulste  \n"
		"*   \"Fext_\": external forces  \n"
		"*   \"Fint_\": internal forces  \n"
		"\n"
		"Python usage : vector = mecaMAILx_GetBodyVector(datatype, ibdyty)  \n"
		"\n"
		"Parameters\n"
		"----------\n"
		"datatype(string of size 5) : the vector to get  \n"
		"ibdyty(integer) : rank of considered body  \n"
		"\n"
		"Returns\n"
		"-------\n"
		"vector (double 2D-array) : the desired data  \n"
		"\n"
		""},
	 { (char *)"mecaMAILx_GetMaterials", _wrap_mecaMAILx_GetMaterials, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"Get a copy of a the elements' material vector of a given body.  \n"
		"\n"
		"Python usage : materials = mecaMAILx_GetMaterials(ibdyty)  \n"
		"\n"
		"Parameters\n"
		"----------\n"
		"ibdyty(integer) : rank of considered body  \n"
		"\n"
		"Returns\n"
		"-------\n"
		"vector (double 1D-array) : the material index of elements  \n"
		"\n"
		""},
	 { (char *)"mecaMAILx_GetStress", _wrap_mecaMAILx_GetStress, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"Get a copy of the smoothed nodal stress (Cauchy) of a given body: 2D\n"
		"Sxx,Syy,Sxy,Szz,Svm | 3D Sxx,Sxy,Syy,Sxz,Syz,Szz,Svm.  \n"
		"\n"
		"Python usage : stress = mecaMAILx_GetStress(ibdyty)  \n"
		"\n"
		"Parameters\n"
		"----------\n"
		"ibdyty(integer) : rank of considered body  \n"
		"\n"
		"Returns\n"
		"-------\n"
		"stress (double 2D-array) : nodal stress of the desired body  \n"
		"\n"
		""},
	 { (char *)"mecaMAILx_GetStrain", _wrap_mecaMAILx_GetStrain, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"Get a copy of the smoothed nodal strain (Almansi) of a given body: 2D\n"
		"Exx,Eyy,Exy,Ezz,J | 3D Exx,Exy,Eyy,Exz,Eyz,Ezz,J.  \n"
		"\n"
		"Python usage : strain = mecaMAILx_GetStrain(ibdyty)  \n"
		"\n"
		"Parameters\n"
		"----------\n"
		"ibdyty(integer) : rank of considered body  \n"
		"\n"
		"Returns\n"
		"-------\n"
		"strain (double 2D-array) : nodal strain of the desired body  \n"
		"\n"
		""},
	 { (char *)"mecaMAILx_GetInternalVariables", _wrap_mecaMAILx_GetInternalVariables, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"Get a copy of the smoothed nodal internal variables (2D:10 ; 3D:57)  \n"
		"\n"
		"Python usage : strain = mecaMAILx_GetInternalVariables(ibdyty)  \n"
		"\n"
		"Parameters\n"
		"----------\n"
		"ibdyty(integer) : rank of considered body  \n"
		"\n"
		"Returns\n"
		"-------\n"
		"strain (double 2D-array) : nodal internal variables of the desired body  \n"
		"\n"
		""},
	 { (char *)"mecaMAILx_GetElementStress", _wrap_mecaMAILx_GetElementStress, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"Get a copy of the mean stress (Cauchy) of a given body: 2D Sxx,Syy,Sxy,Szz,Svm |\n"
		"3D Sxx,Sxy,Syy,Sxz,Syz,Szz,Svm.  \n"
		"\n"
		"Python usage : stress = mecaMAILx_GetElementStress(ibdyty)  \n"
		"\n"
		"Parameters\n"
		"----------\n"
		"ibdyty(integer) : rank of considered body  \n"
		"\n"
		"Returns\n"
		"-------\n"
		"stress (double 2D-array) : nodal stress of the desired body  \n"
		"\n"
		""},
	 { (char *)"mecaMAILx_PushProperties", _wrap_mecaMAILx_PushProperties, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"gives to model the couple of model,behavior used at gauss point  \n"
		"\n"
		"python usage : mecaMAILx_PushProperties()  \n"
		"\n"
		""},
	 { (char *)"mecaMAILx_UseNewPPSet", _wrap_mecaMAILx_UseNewPPSet, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"each gauss point will have its own property set (necessary in multi physics)  \n"
		"\n"
		"python usage : mecaMAILx_UseNewPPSet()  \n"
		"\n"
		""},
	 { (char *)"mecaMAILx_ComputeFreeVelocity", _wrap_mecaMAILx_ComputeFreeVelocity, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"computes free velocity of a list of bodies  \n"
		"\n"
		"python usage : mecaMAILx_ComputeFreeVelocity(i_list)  \n"
		"\n"
		"Parameters\n"
		"----------\n"
		"i_list(list of integer) : list of bodies to compute free velocity if omitted works\n"
		"    on all objects  \n"
		"\n"
		""},
	 { (char *)"mecaMAILx_AssembKT", _wrap_mecaMAILx_AssembKT, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"assemble pseudo mass matrix and apply drvdof of a list of bodies  \n"
		"\n"
		"python usage : mecaMAILx_AssembKT(i_list)  \n"
		"\n"
		"Parameters\n"
		"----------\n"
		"i_list(list of integer) : list of bodies to assemble pseudo mass matrix and apply\n"
		"    drvdof if omitted works on all objects  \n"
		"\n"
		""},
	 { (char *)"mecaMAILx_OnlyAssembKT", _wrap_mecaMAILx_OnlyAssembKT, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"assemble pseudo mass matrix of a list of bodies  \n"
		"\n"
		"python usage : mecaMAILx_OnlyAssembKT(i_list)  \n"
		"\n"
		"Parameters\n"
		"----------\n"
		"i_list(list of integer) : list of bodies to assemble pseudo mass matrix if omitted\n"
		"    works on all objects  \n"
		"\n"
		""},
	 { (char *)"mecaMAILx_ApplyDrvDofKT", _wrap_mecaMAILx_ApplyDrvDofKT, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"apply drvdof pseudo mass matrix  \n"
		"\n"
		"python usage : mecaMAILx_ApplyDrvDofKT(i_list)  \n"
		"\n"
		"Parameters\n"
		"----------\n"
		"i_list(list of integer) : list of bodies to apply drvdof on pseudo mass matrix if\n"
		"    omitted works on all objects  \n"
		"\n"
		""},
	 { (char *)"mecaMAILx_AssembRHS", _wrap_mecaMAILx_AssembRHS, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"assembles right hand side of a list of bodies  \n"
		"\n"
		"python usage : mecaMAILx_AssembRHS(i_list)  \n"
		"\n"
		"Parameters\n"
		"----------\n"
		"i_list(list of integer) : list of bodies to assemble right hand side if omitted\n"
		"    works on all objects  \n"
		"\n"
		""},
	 { (char *)"mecaMAILx_ComputeResidueNorm", _wrap_mecaMAILx_ComputeResidueNorm, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"computes the norm of the residue of a list of bodies  \n"
		"\n"
		"python usage : norm = mecaMAILx_ComputeResidueNorm(i_list)  \n"
		"\n"
		"Parameters\n"
		"----------\n"
		"i_list(list of integer) : list of bodies to compute the norm of the residue if\n"
		"    omitted works on all objects  \n"
		"\n"
		"Returns\n"
		"-------\n"
		"norm (double) : Residue Norm  \n"
		"\n"
		""},
	 { (char *)"mecaMAILx_ComputeBulk", _wrap_mecaMAILx_ComputeBulk, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"computes elementary stiffness and viscosity matrices and internal forces of a\n"
		"list of bodies  \n"
		"\n"
		"python usage : mecaMAILx_ComputeBulk(i_list)  \n"
		"\n"
		"Parameters\n"
		"----------\n"
		"i_list(list of integer) : list of bodies to compute stiffness and viscosity\n"
		"    matrices and internal forces if omitted works on all objects  \n"
		"\n"
		""},
	 { (char *)"mecaMAILx_ComputeField", _wrap_mecaMAILx_ComputeField, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"computes elementary fields of a list of bodies  \n"
		"\n"
		"python usage : mecaMAILx_ComputeField(i_list)  \n"
		"\n"
		"Parameters\n"
		"----------\n"
		"i_list(list of integer) : list of bodies to compute elementary fields if omitted\n"
		"    works on all objects  \n"
		"\n"
		""},
	 { (char *)"mecaMAILx_ComputeFint", _wrap_mecaMAILx_ComputeFint, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"computes elementary internal forces of a list of bodies  \n"
		"\n"
		"python usage : mecaMAILx_ComputeFint(i_list)  \n"
		"\n"
		"Parameters\n"
		"----------\n"
		"i_list(list of integer) : list of bodies to compute internal forces if omitted\n"
		"    works on all objects  \n"
		"\n"
		""},
	 { (char *)"mecaMAILx_UpdateBulk", _wrap_mecaMAILx_UpdateBulk, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"update begin elementary fields with current elementary fields of a list of\n"
		"bodies  \n"
		"\n"
		"python usage : mecaMAILx_UpdateBulk(i_list)  \n"
		"\n"
		"Parameters\n"
		"----------\n"
		"i_list(list of integer) : list of bodies to compute elementary fields if omitted\n"
		"    works on all objects  \n"
		"\n"
		""},
	 { (char *)"mecaMAILx_UpdateDof", _wrap_mecaMAILx_UpdateDof, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"update begin d.o.f. with current d.o.f. of a list of bodies  \n"
		"\n"
		"python usage : mecaMAILx_UpdateDof(i_list)  \n"
		"\n"
		"Parameters\n"
		"----------\n"
		"i_list(list of integer) : list of bodies to update current d.o.f if omitted works\n"
		"    on all objects  \n"
		"\n"
		""},
	 { (char *)"mecaMAILx_ComputeDof", _wrap_mecaMAILx_ComputeDof, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"computes the current d.o.f knowing all the forces (free + contact) of a list of\n"
		"bodies  \n"
		"\n"
		"python usage : mecaMAILx_ComputeDof(i_list)  \n"
		"\n"
		"Parameters\n"
		"----------\n"
		"i_list(list of integer) : list of bodies to compute current d.o.f if omitted works\n"
		"    on all objects  \n"
		"\n"
		""},
	 { (char *)"mecaMAILx_IncrementStep", _wrap_mecaMAILx_IncrementStep, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"initializes the current d.o.f and some driven d.o.f values  \n"
		"\n"
		"python usage : mecaMAILx_IncrementStep()  \n"
		"\n"
		""},
	 { (char *)"mecaMAILx_ComputeFext", _wrap_mecaMAILx_ComputeFext, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"compute elementary external forces of a list of bodies  \n"
		"\n"
		"python usage : mecaMAILx_ComputeFext(i_list)  \n"
		"\n"
		"Parameters\n"
		"----------\n"
		"i_list(list of integer) : list of bodies to compute external forces if omitted\n"
		"    works on all objects  \n"
		"\n"
		""},
	 { (char *)"mecaMAILx_ComputeMass", _wrap_mecaMAILx_ComputeMass, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"compute elementary mass and inertia of a list of bodies  \n"
		"\n"
		"python usage : mecaMAILx_ComputeMass(i_list)  \n"
		"\n"
		"Parameters\n"
		"----------\n"
		"i_list(list of integer) : list of bodies to compute mass and inertia if omitted\n"
		"    works on all objects  \n"
		"\n"
		""},
	 { (char *)"mecaMAILx_FatalDamping", _wrap_mecaMAILx_FatalDamping, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"set to 0 current velocities of a list of bodies  \n"
		"\n"
		"This keyword must be between the ComputeDof and UpdateDof ones.  \n"
		"\n"
		"python usage : mecaMAILx_FatalDamping(i_list)  \n"
		"\n"
		"Parameters\n"
		"----------\n"
		"i_list(list of integer) : list of bodies to reset current velocity if omitted\n"
		"    works on all objects  \n"
		"\n"
		""},
	 { (char *)"mecaMAILx_CheckEquilibriumState", _wrap_mecaMAILx_CheckEquilibriumState, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"Check if the bodies riches an equilibrium state (velocities almost equal to 0)  \n"
		"\n"
		"python usage : iconv = mecaMAILx_CheckEquilibriumState()  \n"
		"\n"
		"Returns\n"
		"-------\n"
		"iconv (boolean) : True if in equilibrium state  \n"
		"\n"
		""},
	 { (char *)"mecaMAILx_SetEquilibriumNorm", _wrap_mecaMAILx_SetEquilibriumNorm, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"set the norm for CheckEquilibriumState  \n"
		"\n"
		"Type of check test:  \n"
		"\n"
		"*   Qvlcy : quadratic norm of velocy  \n"
		"*   Maxm : maximum norm of velocy  \n"
		"\n"
		"python usage : mecaMAILx_SetEquilibriumNorm(checktype, tol)  \n"
		"\n"
		"Parameters\n"
		"----------\n"
		"checktype(char[5]) : type of check test  \n"
		"tol(double) : tolerance  \n"
		"\n"
		""},
	 { (char *)"mecaMAILx_ReadDrivenDof", _wrap_mecaMAILx_ReadDrivenDof, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"Read DRV_DOF.DAT.  \n"
		"\n"
		"python usage : mecaMAILx_ReadDrivenDof()  \n"
		"\n"
		""},
	 { (char *)"mecaMAILx_ReadIniGPV", _wrap_mecaMAILx_ReadIniGPV, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"Read GPV file.  \n"
		"\n"
		"If num <= 0 : DATBOX/GPV.INI file is read  \n"
		"\n"
		"Else : OUTBOX/GPV.OUT.num is read, num being the parameter used in\n"
		"TimeEvolution_ReadIniGPV last call  \n"
		"\n"
		"python usage : mecaMAILx_ReadIniGPV(num=0)  \n"
		"\n"
		"Parameters\n"
		"----------\n"
		"num(integer) : which GPV file to read  \n"
		"\n"
		""},
	 { (char *)"mecaMAILx_ReadIniDof", _wrap_mecaMAILx_ReadIniDof, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"Read DOF file.  \n"
		"\n"
		"If num <= 0 : DATBOX/DOF.INI file is read  \n"
		"\n"
		"Else : OUTBOX/DOF.OUT.num is read, num being the parameter used in\n"
		"TimeEvolution_ReadIniDof last call  \n"
		"\n"
		"python usage : mecaMAILx_ReadIniDof(num=0)  \n"
		"\n"
		"Parameters\n"
		"----------\n"
		"num(integer) : which DOF file to read  \n"
		"\n"
		""},
	 { (char *)"mecaMAILx_LoadBehaviours", _wrap_mecaMAILx_LoadBehaviours, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"load behaviours from bulk_behav  \n"
		"\n"
		"python usage : mecaMAILx_LoadBehaviours()  \n"
		"\n"
		""},
	 { (char *)"mecaMAILx_LoadModels", _wrap_mecaMAILx_LoadModels, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"load models from models  \n"
		"\n"
		"python usage : mecaMAILx_LoadModels()  \n"
		"\n"
		""},
	 { (char *)"mecaMAILx_WriteDrivenDof", _wrap_mecaMAILx_WriteDrivenDof, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"Write DRV_DOF.OUT.  \n"
		"\n"
		"python usage : mecaMAILx_WriteDrivenDof()  \n"
		"\n"
		""},
	 { (char *)"mecaMAILx_WriteLastDof", _wrap_mecaMAILx_WriteLastDof, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"Write ascii DOF.LAST file.  \n"
		"\n"
		"python usage : mecaMAILx_WriteLastDof()  \n"
		"\n"
		""},
	 { (char *)"mecaMAILx_WriteOutDof", _wrap_mecaMAILx_WriteOutDof, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"Write ascii DOF.OUT file. Can be activate only each N step.  \n"
		"\n"
		"python usage : mecaMAILx_WriteOutDof()  \n"
		"\n"
		""},
	 { (char *)"mecaMAILx_DisplayOutDof", _wrap_mecaMAILx_DisplayOutDof, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"Display body degrees of freedom.  \n"
		"\n"
		"python usage : mecaMAILx_DisplayOutDof()  \n"
		"\n"
		""},
	 { (char *)"mecaMAILx_DisplayBulkElement", _wrap_mecaMAILx_DisplayBulkElement, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"Display fields of a bulk element.  \n"
		"\n"
		"Parameters\n"
		"----------\n"
		"IdBody(int) : id of the concern body  \n"
		"IdElem(int) : id of the concern element python usage :\n"
		"    mecaMAILx_DisplayBulkElement(IdBody,IdElem)  \n"
		"\n"
		""},
	 { (char *)"mecaMAILx_WriteLastRnod", _wrap_mecaMAILx_WriteLastRnod, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"Write ascii Rnod.LAST file of a list of bodies.  \n"
		"\n"
		"python usage : mecaMAILx_WriteLastRnod(i_list)  \n"
		"\n"
		"Parameters\n"
		"----------\n"
		"i_list(list of integer) : list of bodies to write in Rnod.LAST if omitted works on\n"
		"    all objects  \n"
		"\n"
		""},
	 { (char *)"mecaMAILx_WriteOutRnod", _wrap_mecaMAILx_WriteOutRnod, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"Write ascii Rnod.OUT file of a list of bodies. Can be activat only each N step.  \n"
		"\n"
		"python usage : mecaMAILx_WriteOutRnod(i_list)  \n"
		"\n"
		"Parameters\n"
		"----------\n"
		"i_list(list of integer) : list of bodies to write in Rnod.OUT if omitted works on\n"
		"    all objects  \n"
		"\n"
		""},
	 { (char *)"mecaMAILx_DisplayOutRnod", _wrap_mecaMAILx_DisplayOutRnod, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"Display body forces of a list of bodies.  \n"
		"\n"
		"python usage : mecaMAILx_DisplayOutRnod(i_list)  \n"
		"\n"
		"Parameters\n"
		"----------\n"
		"i_list(list of integer) : list of bodies to display body forces if omitted works\n"
		"    on all objects  \n"
		"\n"
		""},
	 { (char *)"mecaMAILx_WriteLastNodalForces", _wrap_mecaMAILx_WriteLastNodalForces, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"Write ascii Rnod.LAST file of a list of bodies.  \n"
		"\n"
		"This function is almost like WriteLastRnod, but write also internal and inertial\n"
		"forces.  \n"
		"\n"
		"python usage : mecaMAILx_WriteLastNodalForces(i_list)  \n"
		"\n"
		"Parameters\n"
		"----------\n"
		"i_list(list of integer) : list of bodies to write in Rnod.LAST if omitted works on\n"
		"    all objects  \n"
		"\n"
		""},
	 { (char *)"mecaMAILx_WriteOutNodalForces", _wrap_mecaMAILx_WriteOutNodalForces, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"Write ascii Rnod.OUT file of a list of bodies. Can be activat only each N step.  \n"
		"\n"
		"This function is almost like WriteOutRnod, but write also internal and inertial\n"
		"forces.  \n"
		"\n"
		"python usage : mecaMAILx_WriteOutNodalForces(i_list)  \n"
		"\n"
		"Parameters\n"
		"----------\n"
		"i_list(list of integer) : list of bodies to write in Rnod.OUT if omitted works on\n"
		"    all objects  \n"
		"\n"
		""},
	 { (char *)"mecaMAILx_DisplayOutNodalForces", _wrap_mecaMAILx_DisplayOutNodalForces, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"Display computed nodal forces of a list of bodies.  \n"
		"\n"
		"python usage : mecaMAILx_DisplayOutNodalForces(i_list)  \n"
		"\n"
		"Parameters\n"
		"----------\n"
		"i_list(list of integer) : list of bodies to display body forces if omitted works\n"
		"    on all objects  \n"
		"\n"
		""},
	 { (char *)"mecaMAILx_GetScalarFieldRank", _wrap_mecaMAILx_GetScalarFieldRank, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"Get the rank of scalar field of an element of a body from its name.  \n"
		"\n"
		"python usage : f_rank = mecaMAILx_GetScalarFieldRank(ibdyty, iblmty, name)  \n"
		"\n"
		"Parameters\n"
		"----------\n"
		"ibdyty(integer) : id of the concern body  \n"
		"iblmty(integer) : id of the concern element  \n"
		"name(string) : name of the desired field  \n"
		"\n"
		"Returns\n"
		"-------\n"
		"f_rank (integer) : rank of the corresponding field  \n"
		"\n"
		""},
	 { (char *)"mecaMAILx_SetScalarFieldByNode", _wrap_mecaMAILx_SetScalarFieldByNode, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"Update elementary scalar field through a nodal external field on a given body.  \n"
		"\n"
		"Use the form functions of the elements and input values to compute and store\n"
		"field values at Gauss points.  \n"
		"\n"
		"python usage : mecaMAILx_SetScalarFieldByNode(IdBody, f_rank, f)  \n"
		"\n"
		"Parameters\n"
		"----------\n"
		"IdBody(integer) : id of the concern body  \n"
		"f_rank(integer) : rank of the field to set  \n"
		"f(double array) : value of the field  \n"
		"\n"
		" You need to declare this field in your MODELS.DAT  \n"
		"\n"
		""},
	 { (char *)"mecaMAILx_SetScalarFieldByElement", _wrap_mecaMAILx_SetScalarFieldByElement, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"Update elementary scalar field through a element external field on a given body.  \n"
		"\n"
		"Field values are stored at Gauss point, on an element all Gauss point have the\n"
		"element value  \n"
		"\n"
		"python usage : mecaMAILx_SetScalarFieldByElement(IdBody, f_rank, f)  \n"
		"\n"
		"Parameters\n"
		"----------\n"
		"IdBody(integer) : id of the concern body  \n"
		"f_rank(integer) : rank of the field to set  \n"
		"f(double array) : value of the field  \n"
		"\n"
		" You need to declare this field in your MODELS.DAT  \n"
		"\n"
		""},
	 { (char *)"mecaMAILx_GetVectorFieldRank", _wrap_mecaMAILx_GetVectorFieldRank, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"Get the rank of field of an element of a body from its name.  \n"
		"\n"
		"python usage : f_rank = mecaMAILx_GetVectorFieldRank(ibdyty, iblmty, name)  \n"
		"\n"
		"Parameters\n"
		"----------\n"
		"ibdyty(integer) : id of the concern body  \n"
		"iblmty(integer) : id of the concern element  \n"
		"name(string) : name of the desired vector field  \n"
		"\n"
		"Returns\n"
		"-------\n"
		"f_rank (integer) : rank of the corresponding vector field  \n"
		"\n"
		""},
	 { (char *)"mecaMAILx_SetVectorFieldByNode", _wrap_mecaMAILx_SetVectorFieldByNode, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"Update elementary fields through a nodal external field on a given body.  \n"
		"\n"
		"Use the form functions of the elements and input values to compute and store\n"
		"field values at Gauss points.  \n"
		"\n"
		"You need to declare this field in your MODELS.DAT  \n"
		"\n"
		"python usage : mecaMAILx_SetVectorFieldByNode(IdBody, f_rank, f)  \n"
		"\n"
		"Parameters\n"
		"----------\n"
		"IdBody(integer) : id of the concern body  \n"
		"f_rank(integer) : rank of the vector field to set  \n"
		"f(double array) : value of the vector field  \n"
		"\n"
		""},
	 { (char *)"mecaMAILx_SetVectorFieldByElement", _wrap_mecaMAILx_SetVectorFieldByElement, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"Update elementary fields through a nodal external field on a given body.  \n"
		"\n"
		"Use the form functions of the elements and input values to compute and store\n"
		"field values at Gauss points.  \n"
		"\n"
		"You need to declare this field in your MODELS.DAT  \n"
		"\n"
		"python usage : mecaMAILx_SetVectorFieldByElement(IdBody, f_rank, f)  \n"
		"\n"
		"Parameters\n"
		"----------\n"
		"IdBody(integer) : id of the concern body  \n"
		"f_rank(integer) : rank of the vector field to set  \n"
		"f(double array) : value of the vector field  \n"
		"\n"
		""},
	 { (char *)"mecaMAILx_Terminate", _wrap_mecaMAILx_Terminate, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"Stop job properly.  \n"
		"\n"
		"python usage : mecaMAILx_Terminate()  \n"
		"\n"
		""},
	 { (char *)"mecaMAILx_ComputeOrthoFrame", _wrap_mecaMAILx_ComputeOrthoFrame, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"Use user routine to compute the ortho frame of a list of bodies.  \n"
		"\n"
		"This method uses a routine define by the user in user.f90  \n"
		"\n"
		"python usage : mecaMAILx_ComputeOrthoFrame(i_list)  \n"
		"\n"
		"Parameters\n"
		"----------\n"
		"i_list(list of integer) : list of bodies to compute ortho frame with user routine\n"
		"    if omitted works on all objects  \n"
		"\n"
		""},
	 { (char *)"mecaMAILx_ComputeUserField", _wrap_mecaMAILx_ComputeUserField, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"Use user routine to compute a field at gp.  \n"
		"\n"
		"python usage : mecaMAILx_ComputeUserField(ifield, i_list)  \n"
		"\n"
		"Parameters\n"
		"----------\n"
		"ifield(integer) : id of the field to compute  \n"
		"i_list(list of integer) : list of bodies to compute user fields on if omitted\n"
		"    works on all objects  \n"
		"\n"
		""},
	 { (char *)"mecaMAILx_SetVisible", _wrap_mecaMAILx_SetVisible, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"set visible a given mecaMAILx  \n"
		"\n"
		"python usage : mecaMAILx_SetVisible(ibdyty)  \n"
		"\n"
		"Parameters\n"
		"----------\n"
		"ibdyty(integer): index of the mecaMAILx  \n"
		"\n"
		""},
	 { (char *)"mecaMAILx_SetInvisible", _wrap_mecaMAILx_SetInvisible, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"rended a given mecaMAILx invisible  \n"
		"\n"
		"python usage : mecaMAILx_SetInvisible(ibdyty)  \n"
		"\n"
		"Parameters\n"
		"----------\n"
		"ibdyty(integer): index of the mecaMAILx  \n"
		"\n"
		""},
	 { (char *)"mecaMAILx_IsVisible", _wrap_mecaMAILx_IsVisible, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"return if a given body visible  \n"
		"\n"
		"python usage : visible = mecaMAILx_IsVisible(ibdyty)  \n"
		"\n"
		"Parameters\n"
		"----------\n"
		"idbdy(integer): id of the body we want visibility  \n"
		"\n"
		"Returns\n"
		"-------\n"
		"visible (integer) : 1 if body is visible, 0 else  \n"
		"\n"
		""},
	 { (char *)"mecaMAILx_ComputeRayleighDamping", _wrap_mecaMAILx_ComputeRayleighDamping, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"compute the Rayleigh damping: C=alpha*M+beta*K of a list of bodies  \n"
		"\n"
		"python usage : mecaMAILx_ComputeRayleighDamping(alpha,beta,i_list)  \n"
		"\n"
		"Parameters\n"
		"----------\n"
		"alpha(real) : damping value  \n"
		"beta(real) : damping value  \n"
		"i_list(list of integer) : list of bodies to compute Rayleigh damping if omitted\n"
		"    works on all objects  \n"
		"\n"
		""},
	 { (char *)"mecaMAILx_ComputeRayleighDampingDiscreteElement", _wrap_mecaMAILx_ComputeRayleighDampingDiscreteElement, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"set damping for discrete FE element of a list of bodies  \n"
		"\n"
		"python usage : mecaMAILx_ComputeRayleighDampingDiscreteElement(damp, i_list)  \n"
		"\n"
		"Parameters\n"
		"----------\n"
		"ref_size(real) : damping value  \n"
		"i_list(list of integer) : list of bodies to compute damping for discrete FE\n"
		"    element if omitted works on all objects  \n"
		"\n"
		""},
	 { (char *)"mecaMAILx_GetNodeCoorTT", _wrap_mecaMAILx_GetNodeCoorTT, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"return TT node coordinates  \n"
		"\n"
		"python usage : vec = mecaMAILx_GetNodeCoorTT(ibdyty,inodty)  \n"
		"\n"
		"Parameters\n"
		"----------\n"
		"idbdy(integer): id of the body  \n"
		"inodty(integer): id of the node  \n"
		"\n"
		"Returns\n"
		"-------\n"
		"vec (float vector) : TT node coordinates  \n"
		"\n"
		""},
	 { (char *)"mecaMAILx_GetNodeCooref", _wrap_mecaMAILx_GetNodeCooref, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"return ref node coordinates  \n"
		"\n"
		"python usage : vec = mecaMAILx_GetNodeCoorref(ibdyty,inodty)  \n"
		"\n"
		"Parameters\n"
		"----------\n"
		"idbdy(integer): id of the body  \n"
		"inodty(integer): id of the node  \n"
		"\n"
		"Returns\n"
		"-------\n"
		"vec (float vector) : ref node coordinates  \n"
		"\n"
		""},
	 { (char *)"mecaMAILx_GetBodyMatrix", _wrap_mecaMAILx_GetBodyMatrix, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"Get a copy of a matrix of a given body.  \n"
		"\n"
		"Possible values for datatype field are \"mass_\", \"stiff\", \"damp_\"  \n"
		"\n"
		"Python usage : matrix = mecaMAILx_GetBodyMatrix(datatype, ibdyty)  \n"
		"\n"
		"Parameters\n"
		"----------\n"
		"datatype(string of size 5) : the matrix to get  \n"
		"ibdyty(integer) : rank of considered body  \n"
		"\n"
		"Returns\n"
		"-------\n"
		"matrix (double array) : the desired matrix  \n"
		"\n"
		""},
	 { (char *)"mecaMAILx_getDrvVlocy", _wrap_mecaMAILx_getDrvVlocy, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"Get the driven dof of a body.  \n"
		"\n"
		"python usage : [drvdof_indices, drvdof_values] = mecaMAILx_getDrvVlocy(ibdyty)  \n"
		"\n"
		"Parameters\n"
		"----------\n"
		"ibdyty(integer) : index of the mecaMAILx  \n"
		"drvdof_indices(integer array) : indices list of driven dof  \n"
		"drvdof_values(real array) : values of the driven dof  \n"
		"\n"
		""},
	 { (char *)"mecaMAILx_computeDrvVlocy", _wrap_mecaMAILx_computeDrvVlocy, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"Compute the value of the driven velocity of a body a current time.  \n"
		"\n"
		"In place replacement in the input array of the new value(s) of the driven\n"
		"velocity  \n"
		"\n"
		"python usage : mecaMAILx_computeDrvVlocy(ibdyty, values)  \n"
		"\n"
		"Parameters\n"
		"----------\n"
		"ibdyty(integer) : index of the mecaMAILx  \n"
		"values(double array) : numpy array, input old values of imposed velocity, output\n"
		"    new ones  \n"
		"\n"
		""},
	 { (char *)"mecaMAILx_SetVlocyDrivenDof", _wrap_mecaMAILx_SetVlocyDrivenDof, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"Apply Drv Dof on a given body.  \n"
		"\n"
		"python usage : mecaMAILx_SetVlocyDrivenDof(IdBody, f_dof, f_node, f_value)  \n"
		"\n"
		"Parameters\n"
		"----------\n"
		"IdBody(integer) : id of the concern body  \n"
		"f_dof(integer) : dof of the concern node  \n"
		"f_node(integer) : node  \n"
		"f_value(double) : value of the drvdof  \n"
		"\n"
		""},
	 { (char *)"mecaMAILx_ComputeContactDetectionConfiguration", _wrap_mecaMAILx_ComputeContactDetectionConfiguration, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"compute the contact detection configuration of a list of bodies  \n"
		"\n"
		"python usage : mecaMAILx_ComputeContactDetectionConfiguration(i_list)  \n"
		"\n"
		"Parameters\n"
		"----------\n"
		"i_list(list of integer) : list of bodies to compute contact detection\n"
		"    configuration if omitted works on all objects  \n"
		"\n"
		""},
	 { (char *)"mecaMAILx_NullifyReac", _wrap_mecaMAILx_NullifyReac, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"set to 0 the reac of the IdBody mecaMAILx  \n"
		"\n"
		"python usage : mecaMAILx_NullifyReac(datatype, IdBody)  \n"
		"\n"
		"Parameters\n"
		"----------\n"
		"datatype(string of size 5) : the vector to set  \n"
		"IdBody(integer) : id of the concerned body  \n"
		"\n"
		""},
	 { (char *)"mecaMAILx_GetAll", _wrap_mecaMAILx_GetAll, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"return mechanical data computed for idBody  \n"
		"\n"
		"python usage : array = mecaMAILx_GetAll(idBody)  \n"
		"\n"
		"Parameters\n"
		"----------\n"
		"IdBody(integer) : id of the concerned body  \n"
		"\n"
		"Returns\n"
		"-------\n"
		"array (double 2D-array) : mechanical data  \n"
		"\n"
		""},
	 { (char *)"mecaMAILx_GetCooref", _wrap_mecaMAILx_GetCooref, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"return node coordinates of idBody  \n"
		"\n"
		"python usage : array = mecaMAILx_GetCooref(idBody)  \n"
		"\n"
		"Parameters\n"
		"----------\n"
		"IdBody(integer) : id of the concerned body  \n"
		"\n"
		"Returns\n"
		"-------\n"
		"array (double 2D-array) : coordinates  \n"
		"\n"
		""},
	 { (char *)"mecaMAILx_GetConnectivity", _wrap_mecaMAILx_GetConnectivity, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"return connectivity of idBody elements  \n"
		"\n"
		"python usage : vector = mecaMAILx_GetConnectivity(idBody)  \n"
		"\n"
		"Parameters\n"
		"----------\n"
		"IdBody(integer) : id of the concerned body  \n"
		"\n"
		"Returns\n"
		"-------\n"
		"vector (integer) : connectivity  \n"
		"\n"
		""},
	 { (char *)"mecaMAILx_GetElementsVolume", _wrap_mecaMAILx_GetElementsVolume, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"return volume of elements  \n"
		"\n"
		"python usage : volumes = mecaMAILx_GetElementsVolume(idBody)  \n"
		"\n"
		"Parameters\n"
		"----------\n"
		"IdBody(integer) : id of the concerned body  \n"
		"\n"
		"Returns\n"
		"-------\n"
		"volumes[nb_ele] (double) : volume  \n"
		"\n"
		""},
	 { (char *)"mecaMAILx_GetGpCoor", _wrap_mecaMAILx_GetGpCoor, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"return Gauss points coordinates of idBody  \n"
		"\n"
		"python usage : array = mecaMAILx_GetGpCoor(idBody)  \n"
		"\n"
		"Parameters\n"
		"----------\n"
		"IdBody(integer) : id of the concerned body  \n"
		"\n"
		"Returns\n"
		"-------\n"
		"array (double 2D-array) : coordinates of all Gauss points  \n"
		"\n"
		""},
	 { (char *)"mecaMAILx_GetGpStrain", _wrap_mecaMAILx_GetGpStrain, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"return strain values stored at a gp  \n"
		"\n"
		"python usage : strain = mecaMAILx_GetGpStrain(idBody,idEle,idGp)  \n"
		"\n"
		"Parameters\n"
		"----------\n"
		"IdBody(integer) : id of the concerned body  \n"
		"IdEle(integer) : id of the concerned element  \n"
		"IdGp(integer) : id of the concerned gauss point  \n"
		"\n"
		"Returns\n"
		"-------\n"
		"strain[size] (double) : value of strain  \n"
		"\n"
		""},
	 { (char *)"mecaMAILx_GetGpStress", _wrap_mecaMAILx_GetGpStress, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"return stress values stored at a gp  \n"
		"\n"
		"python usage : stress = mecaMAILx_GetGpStress(idBody,idEle,idGp)  \n"
		"\n"
		"Parameters\n"
		"----------\n"
		"IdBody(integer) : id of the concerned body  \n"
		"IdEle(integer) : id of the concerned element  \n"
		"IdGp(integer) : id of the concerned gauss point  \n"
		"\n"
		"Returns\n"
		"-------\n"
		"stress[size] (double) : value of stress  \n"
		"\n"
		""},
	 { (char *)"mecaMAILx_GetGpInternals", _wrap_mecaMAILx_GetGpInternals, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"return internal values stored at a gp  \n"
		"\n"
		"python usage : internals = mecaMAILx_GetGpInternals(idBody,idEle,idGp)  \n"
		"\n"
		"Parameters\n"
		"----------\n"
		"IdBody(integer) : id of the concerned body  \n"
		"IdEle(integer) : id of the concerned element  \n"
		"IdGp(integer) : id of the concerned gauss point  \n"
		"\n"
		"Returns\n"
		"-------\n"
		"internals[nb_internals] (double) : value of internals  \n"
		"\n"
		""},
	 { (char *)"mecaMAILx_GetGpPrincipalField", _wrap_mecaMAILx_GetGpPrincipalField, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"return principal field (strain or stress) at a gp  \n"
		"\n"
		"python usage : field = mecaMAILx_GetGpPrincipalField(idBody,idEle,idGp,idField)  \n"
		"\n"
		"Parameters\n"
		"----------\n"
		"IdBody(integer) : id of the concerned body  \n"
		"IdEle(integer) : id of the concerned element  \n"
		"IdGp(integer) : id of the concerned gauss point  \n"
		"IdField(integer): id of the field (1: strain, 2: stress)  \n"
		"\n"
		"Returns\n"
		"-------\n"
		"field (double array): tensor field with principal values  \n"
		"\n"
		""},
	 { (char *)"mecaMAILx_GetElementsInternal", _wrap_mecaMAILx_GetElementsInternal, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"return a value over elements of an internal stored at gp  \n"
		"\n"
		"python usage : internals = mecaMAILx_GetElementsInternal(idBody,id,f)  \n"
		"\n"
		"Parameters\n"
		"----------\n"
		"IdBody(integer) : id of the concerned body  \n"
		"Id(integer) : id of the internal  \n"
		"f(integer) : flag 1: mean, 2: sum, 3:max, 4: min  \n"
		"\n"
		"Returns\n"
		"-------\n"
		"internals[nb_ele] (double) : value of internal  \n"
		"\n"
		""},
	 { (char *)"mecaMAILx_GetElementsInternalIntegral", _wrap_mecaMAILx_GetElementsInternalIntegral, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"return integral over elements of an internal stored at gp  \n"
		"\n"
		"python usage : internals = mecaMAILx_GetElementsInternalIntegral(idBody,id)  \n"
		"\n"
		"Parameters\n"
		"----------\n"
		"IdBody(integer) : id of the concerned body  \n"
		"Id(integer) : id of the internal  \n"
		"\n"
		"Returns\n"
		"-------\n"
		"internals[nb_ele] (double) : value of internal  \n"
		"\n"
		""},
	 { (char *)"mecaMAILx_GetElementsCenter", _wrap_mecaMAILx_GetElementsCenter, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"return center of elements  \n"
		"\n"
		"python usage : centers = mecaMAILx_GetElementsCenter(idBody)  \n"
		"\n"
		"Parameters\n"
		"----------\n"
		"IdBody(integer) : id of the concerned body  \n"
		"\n"
		"Returns\n"
		"-------\n"
		"centers[3*nb_ele] (double) : center  \n"
		"\n"
		""},
	 { (char *)"mecaMAILx_GetElementsJacobian", _wrap_mecaMAILx_GetElementsJacobian, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"return jacobian of elements  \n"
		"\n"
		"python usage : jacobians = mecaMAILx_GetElementsJacobian(idBody)  \n"
		"\n"
		"Parameters\n"
		"----------\n"
		"IdBody(integer) : id of the concerned body  \n"
		"\n"
		"Returns\n"
		"-------\n"
		"jacobians[nb_ele] (double) : jacobian  \n"
		"\n"
		""},
	 { (char *)"mecaMAILx_ComputeElementsEnergy", _wrap_mecaMAILx_ComputeElementsEnergy, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"return energy of elements  \n"
		"\n"
		"python usage : mecaMAILx_ComputeElementsEnergy()  \n"
		"\n"
		""},
	 { (char *)"mecaMAILx_GetPtrElementsEnergy", _wrap_mecaMAILx_GetPtrElementsEnergy, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"return energy of elements  \n"
		"\n"
		"python usage : energies = mecaMAILx_GetElementsEnergy(idBody)  \n"
		"\n"
		"Parameters\n"
		"----------\n"
		"IdBody(integer) : id of the concerned body  \n"
		"\n"
		"Returns\n"
		"-------\n"
		"energies (double array) : reference on the desired vector seen as a numpy array  \n"
		"\n"
		""},
	 { (char *)"mecaMAILx_GetElementsNeighbor", _wrap_mecaMAILx_GetElementsNeighbor, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"return elements in the tol-neighbor of an element of idBody  \n"
		"\n"
		"python usage : neighbors = mecaMAILx_GetElementsNeighbor(idBody,tol)  \n"
		"\n"
		"Parameters\n"
		"----------\n"
		"IdBody(integer) : id of the concerned body  \n"
		"tol(double) : tolerance  \n"
		"\n"
		"Returns\n"
		"-------\n"
		"array (double 2D-array) : neighbor[nb_ele,max_neighbors]  \n"
		"\n"
		""},
	 { (char *)"mecaMAILx_GetPtrElementsVisibility", _wrap_mecaMAILx_GetPtrElementsVisibility, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"Get a pointer on the elements visibility vector.  \n"
		"\n"
		"python usage : eviz = mecaMAILx_GetPtrElementsVisibility(ibdyty)  \n"
		"\n"
		"Parameters\n"
		"----------\n"
		"ibdyty(integer) : rank of the mecaMAILx  \n"
		"\n"
		"Returns\n"
		"-------\n"
		"eviz (int array) : reference on the desired vector seen as a numpy array  \n"
		"\n"
		""},
	 { (char *)"mecaMAILx_AddNodalFieldDivergence", _wrap_mecaMAILx_AddNodalFieldDivergence, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"Add the divergence of a diagonal field to external forces.  \n"
		"\n"
		"python usage : mecaMAILx_AddNodalFieldDivergence(ibdyty, ifield)  \n"
		"\n"
		"Parameters\n"
		"----------\n"
		"ibdyty(integer) : rank of body  \n"
		"ifield(integer) : rank of field  \n"
		"\n"
		""},
	 { (char *)"mecaMAILx_CleanMemory", _wrap_mecaMAILx_CleanMemory, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"Free all memory allocated within mecaMAILx module.  \n"
		"\n"
		"python usage : mecaMAILx_CleanMemory()  \n"
		"\n"
		""},
	 { (char *)"mecaMAILx_ComputeInfoPrincipalStressField", _wrap_mecaMAILx_ComputeInfoPrincipalStressField, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"Get info on the principal stress field: min,mean,max.  \n"
		"\n"
		"Python usage : info = mecaMAILx_ComputeInfoPrincipalStressField(ibdyty)  \n"
		"\n"
		"Parameters\n"
		"----------\n"
		"ibdyty(integer) : rank of considered body  \n"
		"\n"
		"Returns\n"
		"-------\n"
		"info (double array) : the desired info  \n"
		"\n"
		""},
	 { (char *)"mecaMAILx_ComputePDFPressure", _wrap_mecaMAILx_ComputePDFPressure, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"Get pdf on the pressure.  \n"
		"\n"
		"Python usage : pdf = mecaMAILx_ComputePDFPressure()  \n"
		"\n"
		"Returns\n"
		"-------\n"
		"pdf (double array) : the desired info  \n"
		"\n"
		""},
	 { (char *)"mecaMAILx_GetDeformationEnergy", _wrap_mecaMAILx_GetDeformationEnergy, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"Get the deformation energy of a given displacement field.  \n"
		"\n"
		"python usage : energy = mecaMAILx_GetDeformationEnergy(id,displacement)  \n"
		"\n"
		"Parameters\n"
		"----------\n"
		"ibdyty(integer) : rank of considered body  \n"
		"displacement(double vector) : displacement field  \n"
		"\n"
		"Returns\n"
		"-------\n"
		"energy (double) : deformation energy  \n"
		"\n"
		""},
	 { (char *)"mecaMAILx_GetKineticEnergy", _wrap_mecaMAILx_GetKineticEnergy, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"Get the kinetic energy of a given velocity field.  \n"
		"\n"
		"python usage : energy = mecaMAILx_GetKineticEnergy(id,velocity)  \n"
		"\n"
		"Parameters\n"
		"----------\n"
		"ibdyty(integer) : rank of considered body  \n"
		"velocity(double vector) : velocity field  \n"
		"\n"
		"Returns\n"
		"-------\n"
		"energy (double) : kinetic energy  \n"
		"\n"
		""},
	 { (char *)"mecaMAILx_GetNeighborElementsToElement", _wrap_mecaMAILx_GetNeighborElementsToElement, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"return neighbor elements to element idEle of body idBody  \n"
		"\n"
		"python usage : vector = mecaMAILx_GetNeighborElementsToElement(idBody,idEle)  \n"
		"\n"
		"Parameters\n"
		"----------\n"
		"IdBody(integer) : id of the concerned body  \n"
		"IdEle(integer) : id of the concerned element  \n"
		"\n"
		"Returns\n"
		"-------\n"
		"vector (integer) : list of elements  \n"
		"\n"
		""},
	 { (char *)"mecaMAILx_GetNeighborElementsToNode", _wrap_mecaMAILx_GetNeighborElementsToNode, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"return neighbor elements to node idNode of body idBody  \n"
		"\n"
		"python usage : vector = mecaMAILx_GetNeighborElementsToNode(idBody,idNode)  \n"
		"\n"
		"Parameters\n"
		"----------\n"
		"IdBody(integer) : id of the concerned body  \n"
		"IdNode(integer) : id of the concerned node  \n"
		"\n"
		"Returns\n"
		"-------\n"
		"vector (integer) : list of elements  \n"
		"\n"
		""},
	 { (char *)"mecaMAILx_GetBoundaryElements", _wrap_mecaMAILx_GetBoundaryElements, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"return boundary elements  \n"
		"\n"
		"python usage : vector = mecaMAILx_GetBoundaryElements(idBody)  \n"
		"\n"
		"Parameters\n"
		"----------\n"
		"IdBody(integer) : id of the concerned body  \n"
		"\n"
		"Returns\n"
		"-------\n"
		"vector (integer) : for each element =0 no boundary, otherwise gives the number\n"
		"of free edge/face  \n"
		"\n"
		""},
	 { (char *)"mecaMAILx_LoadWPreconBody", _wrap_mecaMAILx_LoadWPreconBody, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"load the precomputed W matrix on support node dofs of contactors for one body.\n"
		"Assumes bulk behaviour is linear.  \n"
		"\n"
		"python usage : mecaMAILx_LoadWPreconBody(ivalue)  \n"
		"\n"
		"Parameters\n"
		"----------\n"
		"ivalue(integer) : id of body to set precon  \n"
		"\n"
		""},
	 { (char *)"mecaMAILx_GetPtrPreconW", _wrap_mecaMAILx_GetPtrPreconW, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"Get a pointer on the preconW Matrix of a given body.  \n"
		"\n"
		"python usage : pcW = mecaMAILx_GetPtrPreconW(ibdyty)  \n"
		"\n"
		"Parameters\n"
		"----------\n"
		"ibdyty(integer) : rank of the mecaMAILx  \n"
		"\n"
		"Returns\n"
		"-------\n"
		"pcW (double array) : reference on the desired vector seen as a numpy array  \n"
		"\n"
		""},
	 { (char *)"mecaMAILx_GetInternalVariable", _wrap_mecaMAILx_GetInternalVariable, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"Get a copy of the internal variable of a given body.  \n"
		"\n"
		"Python usage : internal = mecaMAILx_GetInternalVariable(ibdyty)  \n"
		"\n"
		"Parameters\n"
		"----------\n"
		"ibdyty(integer) : rank of considered body  \n"
		"\n"
		"Returns\n"
		"-------\n"
		"internal (double array) : internal variable of desired body  \n"
		"\n"
		""},
	 { (char *)"mecaMAILx_GetNbInternal", _wrap_mecaMAILx_GetNbInternal, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"Get the number of internal variable of a given body.  \n"
		"\n"
		"python usage : nb_internal = mecaMAILx_GetNbInternal(ibdyty)  \n"
		"\n"
		"Parameters\n"
		"----------\n"
		"ivalue(integer) : rank of the body  \n"
		"\n"
		"Returns\n"
		"-------\n"
		"nb_internal (integer) : number of internal variable of a body  \n"
		"\n"
		""},
	 { (char *)"mecaMAILx_GetPtrBodyVector", _wrap_mecaMAILx_GetPtrBodyVector, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"return pointer on body vector cvalue1_c of body IdBody  \n"
		"\n"
		"Reac and Raux are impulsions (and not forces)  \n"
		"\n"
		"python usage : vector_ptr = mecaMAILx_GetPtrBodyVector( cvalue1_c, IdBody )  \n"
		"\n"
		"Parameters\n"
		"----------\n"
		"cvalue1_c(string of size 5) : name of the body vector  \n"
		"IdBody(integer) : id of the body  \n"
		"\n"
		"Returns\n"
		"-------\n"
		"vector_ptr (double array) : reference on the desired body vector  \n"
		"\n"
		""},
	 { (char *)"mecaMAILx_GetDofStatus", _wrap_mecaMAILx_GetDofStatus, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"Get the status of nodes: 0 free, 1 x, 10 y.  \n"
		"\n"
		"Python usage : vector = mecaMAILx_GetDofStatus(ibdyty)  \n"
		"\n"
		"Parameters\n"
		"----------\n"
		"ibdyty(integer) : rank of considered body  \n"
		"\n"
		"Returns\n"
		"-------\n"
		"vector (double 2D-array) : the desired data  \n"
		"\n"
		""},
	 { (char *)"mecaMAILx_PrepGlobalSolver", _wrap_mecaMAILx_PrepGlobalSolver, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"computes free velocity of a list of bodies  \n"
		"\n"
		"python usage : mecaMAILx_PrepGlobalSolver(i_list)  \n"
		"\n"
		"Parameters\n"
		"----------\n"
		"i_list(list of integer) : list of bodies to compute free velocity if omitted works\n"
		"    on all objects  \n"
		"\n"
		""},
	 { (char *)"mecaMAILx_PostGlobalSolver", _wrap_mecaMAILx_PostGlobalSolver, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"computes the current d.o.f knowing all the forces (free + contact) of a list of\n"
		"bodies  \n"
		"\n"
		"python usage : mecaMAILx_PostGlobalSolver(i_list)  \n"
		"\n"
		"Parameters\n"
		"----------\n"
		"i_list(list of integer) : list of bodies to compute current d.o.f if omitted works\n"
		"    on all objects  \n"
		"\n"
		""},
	 { (char *)"mecaMAILx_AddBodyForceToFext", _wrap_mecaMAILx_AddBodyForceToFext, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"Add a body force (M*gamma) to Fext for a given body.  \n"
		"\n"
		"python usage : mecaMAILx_AddBodyForceToFext(ibdyty, matrix)  \n"
		"\n"
		"Parameters\n"
		"----------\n"
		"ibdyty(integer) : rank of body  \n"
		"matrix(double array) : the new value  \n"
		"\n"
		""},
	 { (char *)"mecaMAILx_CheckProperties", _wrap_mecaMAILx_CheckProperties, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"check if model and material are matching ; set material parameter if external\n"
		"model  \n"
		"\n"
		"python usage : mecaMAILx_CheckProperties()  \n"
		"\n"
		""},
	 { (char *)"mecaMAILx_GetNbGpByElem", _wrap_mecaMAILx_GetNbGpByElem, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"Get the list of finite elements for MECAx models and the associated number of\n"
		"Gauss Points.  \n"
		"\n"
		"Here memory is allocated within lmgc90 so that the pointer can be freely\n"
		"modified by third parties without nasty effect on lmgc90 functioning.  \n"
		"\n"
		"python usage : names, nb_gps = mecaMAILx_GetNbGpByElem()  \n"
		"\n"
		"Returns\n"
		"-------\n"
		"names (string list) : list of the finite elements nb_gps (integer list): list of\n"
		"the number of Gauss Points  \n"
		"\n"
		""},
	 { (char *)"mecaMAILx_MassScaling", _wrap_mecaMAILx_MassScaling, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"set mass scaling (default 1.d0)  \n"
		"\n"
		"python usage : mecaMAILx_MassScaling(scale)  \n"
		"\n"
		"Parameters\n"
		"----------\n"
		"scale(double) : scaling  \n"
		"\n"
		""},
	 { (char *)"mecaMAILx_GetGpAllJoint", _wrap_mecaMAILx_GetGpAllJoint, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"return GP value for joints  \n"
		"\n"
		"python usage : vec = mecaMAILx_GetGpAllJoint()  \n"
		"\n"
		"Returns\n"
		"-------\n"
		"vec (float matrix) : value at GP  \n"
		"\n"
		""},
	 { (char *)"mecaMAILx_SetVisibleVlocyDrivenDof", _wrap_mecaMAILx_SetVisibleVlocyDrivenDof, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"allows to (re)activate a given vlocydrivendof (i.e. which has been declared in\n"
		"preprocessing)  \n"
		"\n"
		"python usage : mecaMAILx_SetVisibleVlocyDrivenDof(ibdyty, inod, idof)  \n"
		"\n"
		"Parameters\n"
		"----------\n"
		"ibdyty(integer): index of the mecaMAILx  \n"
		"inod(integer): index of the node to set visible  \n"
		"idof(integer): index of the dof of the node to set visible  \n"
		"\n"
		""},
	 { (char *)"mecaMAILx_SetInvisibleVlocyDrivenDof", _wrap_mecaMAILx_SetInvisibleVlocyDrivenDof, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"allows to deactivate a given vlocydrivendof (i.e. which has been declared in\n"
		"preprocessing)  \n"
		"\n"
		"python usage : mecaMAILx_SetInvisibleVlocyDrivenDof(ibdyty, inod, idof)  \n"
		"\n"
		"Parameters\n"
		"----------\n"
		"ibdyty(integer): index of the mecaMAILx  \n"
		"inod(integer): index of the node to set invisible  \n"
		"idof(integer): index of the dof of the node to set invisible  \n"
		"\n"
		""},
	 { (char *)"mecaMAILx_UpdateVlocyDrivenDofStructures", _wrap_mecaMAILx_UpdateVlocyDrivenDofStructures, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"takes into account modifications on Vlocy driven dof status  \n"
		"\n"
		"python usage : mecaMAILx_UpdateVlocyDrivenDofStructures(ibdyty)  \n"
		"\n"
		"Parameters\n"
		"----------\n"
		"ibdyty(integer): index of the mecaMAILx  \n"
		"\n"
		""},
	 { (char *)"therMAILx_GetNbTherMAILx", _wrap_therMAILx_GetNbTherMAILx, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"Get the number of therMAILx.  \n"
		"\n"
		"python usage : nb_therMAILx = therMAILx_GetNbTherMAILx()  \n"
		"\n"
		"Returns\n"
		"-------\n"
		"nb_therMAILx (integer) : number of therMAILx  \n"
		"\n"
		""},
	 { (char *)"therMAILx_GetNbNodes", _wrap_therMAILx_GetNbNodes, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"Get the number of nodes of a therMAILx.  \n"
		"\n"
		"python usage : nb_nodes = therMAILx_GetNbNodes(ibdyty)  \n"
		"\n"
		"Parameters\n"
		"----------\n"
		"ivalue(integer) : id of the therMAILx  \n"
		"\n"
		"Returns\n"
		"-------\n"
		"nb_nodes (integer) : number of nodes of a therMAILx  \n"
		"\n"
		""},
	 { (char *)"therMAILx_GetNbElements", _wrap_therMAILx_GetNbElements, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"Get the number of nodes of a therMAILx.  \n"
		"\n"
		"python usage : nb_nodes = therMAILx_GetNbElements(ibdyty)  \n"
		"\n"
		"Parameters\n"
		"----------\n"
		"ivalue(integer) : id of the therMAILx  \n"
		"\n"
		"Returns\n"
		"-------\n"
		"nb_nodes (integer) : number of nodes of a therMAILx  \n"
		"\n"
		""},
	 { (char *)"therMAILx_GetNbDofs", _wrap_therMAILx_GetNbDofs, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"Get the number of dofs for the therMAILX.  \n"
		"\n"
		"python usage : nb_dofs = therMAILx_GetNbDofs(int ibdyty)  \n"
		"\n"
		"Returns\n"
		"-------\n"
		"nb_dofs (integer) : number of dofs of the body for the model  \n"
		"\n"
		""},
	 { (char *)"therMAILx_IncrementStep", _wrap_therMAILx_IncrementStep, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"initializes current dof  \n"
		"\n"
		"python usage : therMAILx_IncrementStep()  \n"
		"\n"
		""},
	 { (char *)"therMAILx_ComputeConductivity", _wrap_therMAILx_ComputeConductivity, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"computes the elementary conductivity matrices of a list of bodies  \n"
		"\n"
		"If the input list is empty, the conductivities of all bodies will be computed  \n"
		"\n"
		"python usage : therMAILx_ComputeConductivity(i_list)  \n"
		"\n"
		"Parameters\n"
		"----------\n"
		"i_list(list of integer) : list of bodies to compute conductivities if omitted\n"
		"    works on all objects  \n"
		"\n"
		""},
	 { (char *)"therMAILx_ComputeCapacity", _wrap_therMAILx_ComputeCapacity, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"computes the elemetary capacity matrices  \n"
		"\n"
		"python usage : therMAILx_ComputeCapacity(i_list)  \n"
		"\n"
		"Parameters\n"
		"----------\n"
		"i_list(list of integer) : list of bodies to compute conductivities if omitted\n"
		"    works on all objects  \n"
		"\n"
		""},
	 { (char *)"therMAILx_ComputeConvection", _wrap_therMAILx_ComputeConvection, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"compute elementary convection terms  \n"
		"\n"
		"python usage : therMAILx_ComputeConvection(i_list)  \n"
		"\n"
		"Parameters\n"
		"----------\n"
		"i_list(list of integer) : list of bodies to compute conductivities if omitted\n"
		"    works on all objects  \n"
		"\n"
		""},
	 { (char *)"therMAILx_ComputeInternalFlux", _wrap_therMAILx_ComputeInternalFlux, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"compute elementary internal flux  \n"
		"\n"
		"python usage : therMAILx_ComputeInternalFlux(i_list)  \n"
		"\n"
		"Parameters\n"
		"----------\n"
		"i_list(list of integer) : list of bodies to compute conductivities if omitted\n"
		"    works on all objects  \n"
		"\n"
		""},
	 { (char *)"therMAILx_ComputeExternalFlux", _wrap_therMAILx_ComputeExternalFlux, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"compute elementary external flux  \n"
		"\n"
		"python usage : therMAILx_ComputeExternalFlux(i_list)  \n"
		"\n"
		"Parameters\n"
		"----------\n"
		"i_list(list of integer) : list of bodies to compute conductivities if omitted\n"
		"    works on all objects  \n"
		"\n"
		""},
	 { (char *)"therMAILx_AssembThermKT", _wrap_therMAILx_AssembThermKT, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"assembles elementary matrices  \n"
		"\n"
		"python usage : therMAILx_AssembKT(i_list)  \n"
		"\n"
		"Parameters\n"
		"----------\n"
		"i_list(list of integer) : list of bodies to compute conductivities if omitted\n"
		"    works on all objects  \n"
		"\n"
		""},
	 { (char *)"therMAILx_AssembThermRHS", _wrap_therMAILx_AssembThermRHS, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"assembles elementary vectors  \n"
		"\n"
		"python usage : therMAILx_AssembRHS(i_list)  \n"
		"\n"
		"Parameters\n"
		"----------\n"
		"i_list(list of integer) : list of bodies to compute conductivities if omitted\n"
		"    works on all objects  \n"
		"\n"
		""},
	 { (char *)"therMAILx_ComputeThermDof", _wrap_therMAILx_ComputeThermDof, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"computes current dof  \n"
		"\n"
		"python usage : therMAILx_ComputeThermDof(i_list)  \n"
		"\n"
		"Parameters\n"
		"----------\n"
		"i_list(list of integer) : list of bodies to compute conductivities if omitted\n"
		"    works on all objects  \n"
		"\n"
		""},
	 { (char *)"therMAILx_ComputeThermFields", _wrap_therMAILx_ComputeThermFields, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"computes elementary fields  \n"
		"\n"
		"python usage : therMAILx_ComputeThermFields(i_list)  \n"
		"\n"
		"Parameters\n"
		"----------\n"
		"i_list(list of integer) : list of bodies to compute conductivities if omitted\n"
		"    works on all objects  \n"
		"\n"
		""},
	 { (char *)"therMAILx_UpdateThermDof", _wrap_therMAILx_UpdateThermDof, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"update begin dof with current dof  \n"
		"\n"
		"python usage : therMAILx_UpdateThermDof(i_list)  \n"
		"\n"
		"Parameters\n"
		"----------\n"
		"i_list(list of integer) : list of bodies to compute conductivities if omitted\n"
		"    works on all objects  \n"
		"\n"
		""},
	 { (char *)"therMAILx_UpdateThermBulk", _wrap_therMAILx_UpdateThermBulk, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"update begin elementary fields with current elementary fields  \n"
		"\n"
		"python usage : therMAILx_UpdateThermBulk(i_list)  \n"
		"\n"
		"Parameters\n"
		"----------\n"
		"i_list(list of integer) : list of bodies to compute conductivities if omitted\n"
		"    works on all objects  \n"
		"\n"
		""},
	 { (char *)"therMAILx_ComputeResidueNorm", _wrap_therMAILx_ComputeResidueNorm, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"compute the residue of the thermal equation  \n"
		"\n"
		"python usage : norm = therMAILx_ComputeResidueNorm(i_list)  \n"
		"\n"
		"Parameters\n"
		"----------\n"
		"i_list(list of integer) : list of bodies to compute conductivities if omitted\n"
		"    works on all objects  \n"
		"\n"
		"Returns\n"
		"-------\n"
		"norm (double) : value of the norm  \n"
		"\n"
		""},
	 { (char *)"therMAILx_ReadDrivenDof", _wrap_therMAILx_ReadDrivenDof, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"Read DRV_DOF.DAT.  \n"
		"\n"
		"python usage : therMAILx_ReadDrivenDof()  \n"
		"\n"
		""},
	 { (char *)"therMAILx_WriteDrivenDof", _wrap_therMAILx_WriteDrivenDof, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"Write DRV_DOF.OUT.  \n"
		"\n"
		"python usage : therMAILx_WriteDrivenDof()  \n"
		"\n"
		""},
	 { (char *)"therMAILx_LoadModels", _wrap_therMAILx_LoadModels, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"loads models frol models module  \n"
		"\n"
		"python usage : therMAILx_LoadModels()  \n"
		"\n"
		""},
	 { (char *)"therMAILx_LoadBehaviours", _wrap_therMAILx_LoadBehaviours, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"loads bulk behaviors parameters from bulk_behav module  \n"
		"\n"
		"python usage : therMAILx_LoadBehaviours()  \n"
		"\n"
		""},
	 { (char *)"therMAILx_ReadIniDof", _wrap_therMAILx_ReadIniDof, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"Read DOF file.  \n"
		"\n"
		"If num <= 0 : DATBOX/DOF.INI file is read Else : OUTBOX/DOF.OUT.num is read, num\n"
		"being the parameter used in TimeEvolution_ReadIniDof last call  \n"
		"\n"
		"python usage : therMAILx_ReadIniDof(num=0)  \n"
		"\n"
		"Parameters\n"
		"----------\n"
		"num(integer) : which DOF file to read  \n"
		"\n"
		""},
	 { (char *)"therMAILx_ReadIniGPV", _wrap_therMAILx_ReadIniGPV, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"Read GPV file.  \n"
		"\n"
		"If num <= 0 : DATBOX/GPV.INI file is read  \n"
		"\n"
		"Else : OUTBOX/GPV.OUT.num is read, num being the parameter used in\n"
		"TimeEvolution_ReadIniGPV last call  \n"
		"\n"
		"python usage : therMAILx_ReadIniGPV(num=0)  \n"
		"\n"
		"Parameters\n"
		"----------\n"
		"num(integer) : which GPV file to read  \n"
		"\n"
		""},
	 { (char *)"therMAILx_WriteLastDof", _wrap_therMAILx_WriteLastDof, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"Write ascii DOF.LAST file.  \n"
		"\n"
		"python usage : therMAILx_WriteLastDof()  \n"
		"\n"
		""},
	 { (char *)"therMAILx_WriteOutDof", _wrap_therMAILx_WriteOutDof, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"Write ascii DOF.OUT file. Can be activate only each N step.  \n"
		"\n"
		"python usage : therMAILx_WriteOutDof()  \n"
		"\n"
		""},
	 { (char *)"therMAILx_DisplayOutDof", _wrap_therMAILx_DisplayOutDof, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"Display body degrees of freedom.  \n"
		"\n"
		"python usage : therMAILx_DisplayOutDof()  \n"
		"\n"
		""},
	 { (char *)"therMAILx_PutBodyVector", _wrap_therMAILx_PutBodyVector, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"Set a vector of a given body.  \n"
		"\n"
		"Possible values for datatype field are:  \n"
		"\n"
		"*   \"T____\": Temperature in computed configuration  \n"
		"*   \"Tbeg_\": Temperature at beginning of time step  \n"
		"*   \"Taux_\": Temperature in working array  \n"
		"*   \"Fext_\": external flux  \n"
		"*   \"Fint_\": internal flux  \n"
		"\n"
		"Uses copy  \n"
		"\n"
		"python usage : therMAILx_PutBodyVector(datatype, ibdyty, matrix)  \n"
		"\n"
		"Parameters\n"
		"----------\n"
		"datatype(string of size 5) : the vector to set  \n"
		"ibdyty(integer) : rank of body  \n"
		"matrix(double array) : the new values  \n"
		"\n"
		""},
	 { (char *)"therMAILx_GetBodyVector", _wrap_therMAILx_GetBodyVector, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"Get a copy of a vector of a given body.  \n"
		"\n"
		"Possible values for datatype field are:  \n"
		"\n"
		"*   \"Coor0\": reference coordinates  \n"
		"*   \"T____\": Temperature in computed configuration  \n"
		"*   \"Tbeg_\": Temperature at beginning of time step  \n"
		"*   \"Taux_\": Temperature in working array  \n"
		"*   \"Fext_\": external flux  \n"
		"*   \"Fint_\": internal flux  \n"
		"\n"
		"Uses copy  \n"
		"\n"
		"python usage : vector = therMAILx_GetBodyVector(datatype, ibdyty)  \n"
		"\n"
		"Parameters\n"
		"----------\n"
		"datatype(string of size 5) : the vector to get  \n"
		"ibdyty(integer) : rank of considered body  \n"
		"\n"
		"Returns\n"
		"-------\n"
		"vector (double 2D-array) : the desired vector  \n"
		"\n"
		""},
	 { (char *)"therMAILx_GetScalarFieldRank", _wrap_therMAILx_GetScalarFieldRank, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"Get the rank of field of an element of a body from its name.  \n"
		"\n"
		"python usage : f_rank = therMAILx_GetScalarFieldRank(ibdyty, iblmty, name)  \n"
		"\n"
		"Parameters\n"
		"----------\n"
		"ibdyty(integer) : id of the concern body  \n"
		"iblmty(integer) : id of the concern element  \n"
		"name(string) : name of the desired field  \n"
		"\n"
		"Returns\n"
		"-------\n"
		"f_rank (integer) : rank of the corresponding field  \n"
		"\n"
		""},
	 { (char *)"therMAILx_SetScalarFieldByNode", _wrap_therMAILx_SetScalarFieldByNode, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"Update an external field on a given body.  \n"
		"\n"
		"You need to set this field in your models.dat  \n"
		"\n"
		"python usage : therMAILx_SetScalarFieldByNode(IdBody, f_rank, f)  \n"
		"\n"
		"Parameters\n"
		"----------\n"
		"IdBody(integer) : id of the concern body  \n"
		"f_rank(integer) : rank of the field to set  \n"
		"f(double array) : value of the field  \n"
		"\n"
		""},
	 { (char *)"therMAILx_SetScalarFieldByElement", _wrap_therMAILx_SetScalarFieldByElement, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"Update elementary scalar field through a element external field on a given body.  \n"
		"\n"
		"Field values are stored at Gauss point, on an element all Gauss point have the\n"
		"element value  \n"
		"\n"
		"You need to declare this field in your MODELS.DAT  \n"
		"\n"
		"python usage : therMAILx_SetScalarFieldByElement(IdBody, f_rank, f)  \n"
		"\n"
		"Parameters\n"
		"----------\n"
		"IdBody(integer) : id of the concern body  \n"
		"f_rank(integer) : rank of the field to set  \n"
		"f(double array) : value of the field  \n"
		"\n"
		""},
	 { (char *)"therMAILx_GetVectorFieldRank", _wrap_therMAILx_GetVectorFieldRank, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"Get the rank of field of an element of a body from its name.  \n"
		"\n"
		"python usage : f_rank = therMAILx_GetVectorFieldRank(ibdyty, iblmty, name)  \n"
		"\n"
		"Parameters\n"
		"----------\n"
		"ibdyty(integer) : id of the concern body  \n"
		"iblmty(integer) : id of the concern element  \n"
		"name(string) : name of the desired vector field  \n"
		"\n"
		"Returns\n"
		"-------\n"
		"f_rank (integer) : rank of the corresponding vector field  \n"
		"\n"
		""},
	 { (char *)"therMAILx_SetVectorFieldByNode", _wrap_therMAILx_SetVectorFieldByNode, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"Update elementary fields through a nodal external field on a given body.  \n"
		"\n"
		"Use the form functions of the elements and input values to compute and store\n"
		"field values at Gauss points.  \n"
		"\n"
		"You need to declare this field in your MODELS.DAT  \n"
		"\n"
		"python usage : therMAILx_SetFieldByNode(IdBody, f_rank, f)  \n"
		"\n"
		"Parameters\n"
		"----------\n"
		"IdBody(integer) : id of the concern body  \n"
		"f_rank(integer) : rank of the vector field to set  \n"
		"f(double array) : value of the vector field  \n"
		"\n"
		""},
	 { (char *)"therMAILx_SetVectorFieldByElement", _wrap_therMAILx_SetVectorFieldByElement, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"Update elementary fields through a nodal external field on a given body.  \n"
		"\n"
		"Use the form functions of the elements and input values to compute and store\n"
		"field values at Gauss points.  \n"
		"\n"
		"You need to declare this field in your MODELS.DAT  \n"
		"\n"
		"python usage : therMAILx_SetFieldByElement(IdBody, f_rank, f)  \n"
		"\n"
		"Parameters\n"
		"----------\n"
		"IdBody(integer) : id of the concern body  \n"
		"f_rank(integer) : rank of the vector field to set  \n"
		"f(double array) : value of the vector field  \n"
		"\n"
		""},
	 { (char *)"therMAILx_AddSource", _wrap_therMAILx_AddSource, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"Add a volumic source into a given body.  \n"
		"\n"
		"python usage : therMAILx_AddSource(ibdyty, ifield)  \n"
		"\n"
		"Parameters\n"
		"----------\n"
		"ibdyty(integer) : rank of body  \n"
		"ifield(integer) : rank of field  \n"
		"\n"
		""},
	 { (char *)"therMAILx_AddNodalFieldDivergence", _wrap_therMAILx_AddNodalFieldDivergence, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"Add the divergence of a field to external flux.  \n"
		"\n"
		"python usage : therMAILx_AddNodalFieldDivergence(ibdyty, ifield)  \n"
		"\n"
		"Parameters\n"
		"----------\n"
		"ibdyty(integer) : rank of body  \n"
		"ifield(integer) : rank of field  \n"
		"\n"
		""},
	 { (char *)"therMAILx_PushProperties", _wrap_therMAILx_PushProperties, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"declares to module model the couples (model,behavior) used  \n"
		"\n"
		"python usage : therMAILx_PushProperties()  \n"
		"\n"
		""},
	 { (char *)"therMAILx_WithoutRenumbering", _wrap_therMAILx_WithoutRenumbering, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"skip renumbering of the unknowns using a rcc method  \n"
		"\n"
		"python usage : therMAILx_WithoutRenumbering()  \n"
		"\n"
		""},
	 { (char *)"therMAILx_BandStorage", _wrap_therMAILx_BandStorage, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"use band matrix  \n"
		"\n"
		"python usage : therMAILx_BandStorage()  \n"
		"\n"
		""},
	 { (char *)"therMAILx_SparseStorage", _wrap_therMAILx_SparseStorage, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"use sparse matrix  \n"
		"\n"
		"python usage : therMAILx_SparseStorage()  \n"
		"\n"
		""},
	 { (char *)"therMAILx_ExplodedStorage", _wrap_therMAILx_ExplodedStorage, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"use element by element matrix  \n"
		"\n"
		"python usage : therMAILx_ExplodedStorage()  \n"
		"\n"
		""},
	 { (char *)"therMAILx_DiagonalStorage", _wrap_therMAILx_DiagonalStorage, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"use diagonal matrix  \n"
		"\n"
		"python usage : therMAILx_DiagonalStorage()  \n"
		"\n"
		""},
	 { (char *)"therMAILx_SkylineStorage", _wrap_therMAILx_SkylineStorage, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"use skyline matrix  \n"
		"\n"
		"python usage : therMAILx_SkylineStorage()  \n"
		"\n"
		""},
	 { (char *)"therMAILx_FullStorage", _wrap_therMAILx_FullStorage, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"use full matrix  \n"
		"\n"
		"python usage : therMAILx_FullStorage()  \n"
		"\n"
		""},
	 { (char *)"therMAILx_SymmetricShape", _wrap_therMAILx_SymmetricShape, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"assume matrix is symmetrical  \n"
		"\n"
		"python usage : therMAILx_SymmetricShape()  \n"
		"\n"
		""},
	 { (char *)"therMAILx_UnspecifiedShape", _wrap_therMAILx_UnspecifiedShape, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"does not assume any thing on matrix shape  \n"
		"\n"
		"python usage : therMAILx_UnspecifiedShape()  \n"
		"\n"
		""},
	 { (char *)"therMAILx_GetGrad", _wrap_therMAILx_GetGrad, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"Get a copy of a gradient of a given body.  \n"
		"\n"
		"Python usage : grad_T = therMAILx_GetGrad(ibdyty)  \n"
		"\n"
		"Parameters\n"
		"----------\n"
		"ibdyty(integer) : rank of considered body  \n"
		"\n"
		"Returns\n"
		"-------\n"
		"grad_T (double 2D-array) : the desired gradient  \n"
		"\n"
		""},
	 { (char *)"therMAILx_GetFlux", _wrap_therMAILx_GetFlux, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"Get a copy of a gradient of a given body.  \n"
		"\n"
		"Python usage : Flux_T = therMAILx_GetFlux(ibdyty)  \n"
		"\n"
		"Parameters\n"
		"----------\n"
		"ibdyty(integer) : rank of considered body  \n"
		"\n"
		"Returns\n"
		"-------\n"
		"Flux_T (double array) : the desired flux  \n"
		"\n"
		""},
	 { (char *)"therMAILx_InitializeElementaryFlux", _wrap_therMAILx_InitializeElementaryFlux, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"set elementary flux to 0  \n"
		"\n"
		"python usage : therMAILx_InitializeElementaryFlux()  \n"
		"\n"
		""},
	 { (char *)"therMAILx_GetCoor", _wrap_therMAILx_GetCoor, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"return node coordinates of idBody  \n"
		"\n"
		"python usage : array = therMAILx_GetCoor(idBody)  \n"
		"\n"
		"Parameters\n"
		"----------\n"
		"IdBody(integer) : id of the concerned body  \n"
		"\n"
		"Returns\n"
		"-------\n"
		"array (double 2D-array) : coordinates  \n"
		"\n"
		""},
	 { (char *)"therMAILx_GetConnectivity", _wrap_therMAILx_GetConnectivity, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"return connectivity of idBody elements  \n"
		"\n"
		"python usage : vector = therMAILx_GetConnectivity(idBody)  \n"
		"\n"
		"Parameters\n"
		"----------\n"
		"IdBody(integer) : id of the concerned body  \n"
		"\n"
		"Returns\n"
		"-------\n"
		"vector (integer) : connectivity  \n"
		"\n"
		""},
	 { (char *)"therMAILx_GetAll", _wrap_therMAILx_GetAll, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"return mechanical data computed for idBody  \n"
		"\n"
		"python usage : array = therMAILx_GetAll(idBody)  \n"
		"\n"
		"Parameters\n"
		"----------\n"
		"IdBody(integer) : id of the concerned body  \n"
		"\n"
		"Returns\n"
		"-------\n"
		"array (double 2D-array) : mechanical data  \n"
		"\n"
		""},
	 { (char *)"therMAILx_GetGpCoor", _wrap_therMAILx_GetGpCoor, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"return Gauss points coordinates of idBody  \n"
		"\n"
		"python usage : array = therMAILx_GetGpCoor(idBody)  \n"
		"\n"
		"Parameters\n"
		"----------\n"
		"IdBody(integer) : id of the concerned body  \n"
		"\n"
		"Returns\n"
		"-------\n"
		"array (double 2D-array) : coordinates of all Gauss points  \n"
		"\n"
		""},
	 { (char *)"therMAILx_GetGpField", _wrap_therMAILx_GetGpField, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"return field values stored at a gp  \n"
		"\n"
		"python usage : field = therMAILx_GetGpField(idBody,idEle,idGp,idField)  \n"
		"\n"
		"Parameters\n"
		"----------\n"
		"IdBody(integer) : id of the concerned body  \n"
		"IdEle(integer) : id of the concerned element  \n"
		"IdGp(integer) : id of the concerned gauss point  \n"
		"IdField(integer) : id of the concerned field  \n"
		"\n"
		"Returns\n"
		"-------\n"
		"field (double array) : field value  \n"
		"\n"
		""},
	 { (char *)"therMAILx_TrialAssembThermKT", _wrap_therMAILx_TrialAssembThermKT, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"[experimental] assembles elementary matrices  \n"
		"\n"
		"python usage : therMAILx_AssembThermKT()  \n"
		"\n"
		""},
	 { (char *)"therMAILx_TrialAssembThermRHS", _wrap_therMAILx_TrialAssembThermRHS, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"[experimental] assembles elementary vectors  \n"
		"\n"
		"python usage : therMAILx_AssembThermRHS()  \n"
		"\n"
		""},
	 { (char *)"therMAILx_CleanMemory", _wrap_therMAILx_CleanMemory, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"Free all memory allocated within therMAILx module.  \n"
		"\n"
		"python usage : therMAILx_CleanMemory()  \n"
		"\n"
		""},
	 { (char *)"therMAILx_CheckProperties", _wrap_therMAILx_CheckProperties, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"check if model and material are matching ; set material parameter if external\n"
		"model  \n"
		"\n"
		"python usage : therMAILx_CheckProperties()  \n"
		"\n"
		""},
	 { (char *)"therMAILx_GetNbGpByElem", _wrap_therMAILx_GetNbGpByElem, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"Get the list of finite elements for therx models and the associated number of\n"
		"Gauss Points.  \n"
		"\n"
		"Here memory is allocated within lmgc90 so that the pointer can be freely\n"
		"modified by third parties without nasty effect on lmgc90 functioning.  \n"
		"\n"
		"python usage : names, nb_gps = therMAILx_GetNbGpByElem()  \n"
		"\n"
		"Returns\n"
		"-------\n"
		"names (string list) : list of the finite elements nb_gps (integer list): list of\n"
		"the number of Gauss Points  \n"
		"\n"
		""},
	 { (char *)"therMAILx_GetNbGp", _wrap_therMAILx_GetNbGp, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"Get the number of Gauss points of an element of a therMAILx.  \n"
		"\n"
		"python usage : nb_gp = therMAILx_GetNbElements(ibdyty, iblmty)  \n"
		"\n"
		"Parameters\n"
		"----------\n"
		"ibdyty(integer) : id of the therMAILx  \n"
		"iblmty(integer) : id of the element  \n"
		"\n"
		"Returns\n"
		"-------\n"
		"nb_gp (integer) : number of Gauss point of an element of a therMAILx  \n"
		"\n"
		""},
	 { (char *)"poroMAILx_LoadModels", _wrap_poroMAILx_LoadModels, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"load from MAILx and models  \n"
		"\n"
		"python usage : poroMAILx_LoadModels()  \n"
		"\n"
		""},
	 { (char *)"poroMAILx_LoadBehaviours", _wrap_poroMAILx_LoadBehaviours, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"load from bulk_behav  \n"
		"\n"
		"python usage : pordMAILx_LoadBehaviours()  \n"
		"\n"
		""},
	 { (char *)"poroMAILx_PushProperties", _wrap_poroMAILx_PushProperties, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"declares to models couple (model,behav)  \n"
		"\n"
		"python usage : poroMAILx_PushProperties()  \n"
		"\n"
		""},
	 { (char *)"poroMAILx_ReadDrivenDof", _wrap_poroMAILx_ReadDrivenDof, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"Read DRV_DOF.DAT.  \n"
		"\n"
		"python usage : poroMAILx_ReadDrivenDof()  \n"
		"\n"
		""},
	 { (char *)"poroMAILx_WriteDrivenDof", _wrap_poroMAILx_WriteDrivenDof, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"Write DRV_DOF.OUT.  \n"
		"\n"
		"python usage : poroMAILx_WriteDrivenDof()  \n"
		"\n"
		""},
	 { (char *)"poroMAILx_ReadIniDof", _wrap_poroMAILx_ReadIniDof, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"Read DOF.INI.  \n"
		"\n"
		"If num <= 0 : DATBOX/DOF.INI file is read  \n"
		"\n"
		"Else : OUTBOX/DOF.OUT.num is read, num being the parameter used in\n"
		"TimeEvolution_ReadIniDof last call  \n"
		"\n"
		"python usage : poroMAILx_ReadIniDof(num=0)  \n"
		"\n"
		"Parameters\n"
		"----------\n"
		"num(integer) : which DOF file to read  \n"
		"\n"
		""},
	 { (char *)"poroMAILx_ReadIniMecaDof", _wrap_poroMAILx_ReadIniMecaDof, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"Read DOF file.  \n"
		"\n"
		"If num <= 0 : DATBOX/DOF.INI file is read  \n"
		"\n"
		"Else : OUTBOX/DOF.OUT.num is read, num being the parameter used in\n"
		"TimeEvolution_ReadIniMecaDof last call  \n"
		"\n"
		"python usage : poroMAILx_ReadIniMecaDof(num=0)  \n"
		"\n"
		"Parameters\n"
		"----------\n"
		"num(integer) : which DOF file to read  \n"
		"\n"
		""},
	 { (char *)"poroMAILx_ReadIniGPV", _wrap_poroMAILx_ReadIniGPV, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"Read GPV file.  \n"
		"\n"
		"If num <= 0 : DATBOX/GPV.INI file is read  \n"
		"\n"
		"Else : OUTBOX/GPV.OUT.num is read, num being the parameter used in\n"
		"TimeEvolution_ReadIniGPV last call  \n"
		"\n"
		"python usage : poroMAILx_ReadIniGPV(num=0)  \n"
		"\n"
		"Parameters\n"
		"----------\n"
		"num(integer) : which GPV file to read  \n"
		"\n"
		""},
	 { (char *)"poroMAILx_ReadIniMecaGPV", _wrap_poroMAILx_ReadIniMecaGPV, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"Read GPV file.  \n"
		"\n"
		"If num <= 0 : DATBOX/GPV.INI file is read Else : OUTBOX/GPV.OUT.num is read, num\n"
		"being the parameter used in TimeEvolution_ReadIniMecaGPV last call  \n"
		"\n"
		"python usage : poroMAILx_ReadIniMecaGPV(num=0)  \n"
		"\n"
		"Parameters\n"
		"----------\n"
		"num(integer) : which GPV file to read  \n"
		"\n"
		""},
	 { (char *)"poroMAILx_WriteLastDof", _wrap_poroMAILx_WriteLastDof, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"Write ascii DOF.LAST file.  \n"
		"\n"
		"python usage : poroMAILx_WriteLastDof()  \n"
		"\n"
		""},
	 { (char *)"poroMAILx_ComputeMass", _wrap_poroMAILx_ComputeMass, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"compute elementary mass and inertia of bodies  \n"
		"\n"
		"python usage : poroMAILx_ComputeMass()  \n"
		"\n"
		""},
	 { (char *)"poroMAILx_ComputeFext", _wrap_poroMAILx_ComputeFext, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"compute elementary external forces  \n"
		"\n"
		"python usage : poroMAILx_ComputeFext()  \n"
		"\n"
		""},
	 { (char *)"poroMAILx_ComputeBulk", _wrap_poroMAILx_ComputeBulk, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"compute elementary stiffness  \n"
		"\n"
		"python usage : poroMAILx_ComputeBulk()  \n"
		"\n"
		""},
	 { (char *)"poroMAILx_ComputeDamping", _wrap_poroMAILx_ComputeDamping, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"compute elemenatry damping  \n"
		"\n"
		"python usage : poroMAILx_ComputeDamping()  \n"
		"\n"
		""},
	 { (char *)"poroMAILx_AssembKT", _wrap_poroMAILx_AssembKT, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"assembles matrice  \n"
		"\n"
		"python usage : poroMAILx_AssembKT()  \n"
		"\n"
		""},
	 { (char *)"poroMAILx_AssembRHS", _wrap_poroMAILx_AssembRHS, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"assembles RHS  \n"
		"\n"
		"python usage : poroMAILx_AssembRHS()  \n"
		"\n"
		""},
	 { (char *)"poroMAILx_ComputeFreeVelocity", _wrap_poroMAILx_ComputeFreeVelocity, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"computes free motion (without contact contribution)  \n"
		"\n"
		"python usage : poroMAILx_ComputeFreeVelocity()  \n"
		"\n"
		""},
	 { (char *)"poroMAILx_ComputeDof", _wrap_poroMAILx_ComputeDof, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"computes motion (free + contact)  \n"
		"\n"
		"python usage : poroMAILx_ComputeDof()  \n"
		"\n"
		""},
	 { (char *)"poroMAILx_DisplayOutDof", _wrap_poroMAILx_DisplayOutDof, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"Display body degrees of freedom.  \n"
		"\n"
		"python usage : poroMAILx_DisplayOutDof()  \n"
		"\n"
		""},
	 { (char *)"poroMAILx_UpdateDof", _wrap_poroMAILx_UpdateDof, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"update begin dof with current dof  \n"
		"\n"
		"python usage : poroMAILx_UpdateDof()  \n"
		"\n"
		""},
	 { (char *)"poroMAILx_UpdateBulk", _wrap_poroMAILx_UpdateBulk, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"update begin elementary fields with current elementary fields  \n"
		"\n"
		"python usage : poroMAILx_UpdateBulk(void)  \n"
		"\n"
		""},
	 { (char *)"poroMAILx_ComputeGrad", _wrap_poroMAILx_ComputeGrad, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"apply elementary fields gradient  \n"
		"\n"
		"python usage : poroMAILx_ComputeGrad(void)  \n"
		"\n"
		""},
	 { (char *)"poroMAILx_GetBodyVector", _wrap_poroMAILx_GetBodyVector, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"Get a copy of a vector of a given body.  \n"
		"\n"
		"*   \"Xbeg_\": cumulated displacements over time at beginning of time step  \n"
		"*   \"X____\": cumulated displacements over time in computed configuration  \n"
		"*   \"Vbeg_\": velocity at beginning of time step  \n"
		"*   \"V____\": velocity in computed configuration  \n"
		"*   \"VbALE\": fluid velocity at beginning of time step  \n"
		"*   \"V_ALE\": fluid velocity at beginning of time step  \n"
		"*   \"Vaux_\": working array for velocity  \n"
		"*   \"Vfree\": velocity free of contacts  \n"
		"*   \"Reac_\": contact reaction force  \n"
		"*   \"Fext_\": external forces  \n"
		"*   \"Fint_\": internal forces  \n"
		"*   \"Pbeg_\": pressure at beginning of time step  \n"
		"*   \"P____\": pressure in computed configuration  \n"
		"*   \"Qext_\": external fluxes  \n"
		"*   \"Qint_\": internal luxces  \n"
		"*   \"NodId\":  \n"
		"\n"
		"Possible values for datatype field are \"X____\", \"Xbeg_\", \"V____\",\n"
		"\"Vbeg_\", \"Vaux_\", \"Reac_\", \"Vfree\", \"Fext_\", \"Fint_\"  \n"
		"\n"
		"Python usage : vector = poroMAILx_GetBodyVector(datatype, ibdyty)  \n"
		"\n"
		"Parameters\n"
		"----------\n"
		"datatype(string of size 5) : the vector to get  \n"
		"ibdyty(integer) : rank of considered body  \n"
		"\n"
		"Returns\n"
		"-------\n"
		"vector (double 2D-array) : the desired vector  \n"
		"\n"
		""},
	 { (char *)"poroMAILx_GetNbNodes", _wrap_poroMAILx_GetNbNodes, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"Get the number of nodes of a poroMAILx.  \n"
		"\n"
		"python usage : nb_nodes = poroMAILx_GetNbNodes(ibdyty)  \n"
		"\n"
		"Parameters\n"
		"----------\n"
		"ivalue(integer) : id of the poroMAILx  \n"
		"\n"
		"Returns\n"
		"-------\n"
		"nb_nodes (integer) : number of nodes of a poroMAILx  \n"
		"\n"
		""},
	 { (char *)"poroMAILx_GetNbElements", _wrap_poroMAILx_GetNbElements, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"Get the number of elements of a poroMAILx.  \n"
		"\n"
		"python usage : nb_elements = poroMAILx_GetNbElements(ibdyty)  \n"
		"\n"
		"Parameters\n"
		"----------\n"
		"ivalue(integer) : id of the poroMAILx  \n"
		"\n"
		"Returns\n"
		"-------\n"
		"nb_nodes (integer) : number of elements of a poroMAILx  \n"
		"\n"
		""},
	 { (char *)"poroMAILx_IncrementStep", _wrap_poroMAILx_IncrementStep, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"correction of the configuration parameter using the theta-method  \n"
		"\n"
		"python usage : poroMAILx_IncrementStep()  \n"
		"\n"
		""},
	 { (char *)"poroMAILx_WithoutRenumbering", _wrap_poroMAILx_WithoutRenumbering, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"skip renumbering of the unknowns using a rcc method  \n"
		"\n"
		"python usage : poroMAILx_WithoutRenumbering()  \n"
		"\n"
		""},
	 { (char *)"poroMAILx_BandStorage", _wrap_poroMAILx_BandStorage, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"use band matrix  \n"
		"\n"
		"python usage : poroMAILx_BandStorage()  \n"
		"\n"
		""},
	 { (char *)"poroMAILx_SparseStorage", _wrap_poroMAILx_SparseStorage, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"use sparse matrix  \n"
		"\n"
		"python usage : poroMAILx_SparseStorage()  \n"
		"\n"
		""},
	 { (char *)"poroMAILx_ExplodedStorage", _wrap_poroMAILx_ExplodedStorage, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"use element by element matrix  \n"
		"\n"
		"python usage : poroMAILx_ExplodedStorage()  \n"
		"\n"
		""},
	 { (char *)"poroMAILx_DiagonalStorage", _wrap_poroMAILx_DiagonalStorage, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"use diagonal matrix  \n"
		"\n"
		"python usage : poroMAILx_DiagonalStorage()  \n"
		"\n"
		""},
	 { (char *)"poroMAILx_SkylineStorage", _wrap_poroMAILx_SkylineStorage, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"use skyline matrix  \n"
		"\n"
		"python usage : poroMAILx_SkylineStorage()  \n"
		"\n"
		""},
	 { (char *)"poroMAILx_FullStorage", _wrap_poroMAILx_FullStorage, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"use full matrix  \n"
		"\n"
		"python usage : poroMAILx_FullStorage()  \n"
		"\n"
		""},
	 { (char *)"poroMAILx_SymmetricShape", _wrap_poroMAILx_SymmetricShape, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"assume matrix is symmetrical  \n"
		"\n"
		"python usage : poroMAILx_SymmetricShape()  \n"
		"\n"
		""},
	 { (char *)"poroMAILx_UnspecifiedShape", _wrap_poroMAILx_UnspecifiedShape, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"does not assume any thing on matrix shape  \n"
		"\n"
		"python usage : poroMAILx_UnspecifiedShape()  \n"
		"\n"
		""},
	 { (char *)"poroMAILx_SetMecaScalarFieldByNode", _wrap_poroMAILx_SetMecaScalarFieldByNode, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"Update an external field on a given body.  \n"
		"\n"
		"python usage : poroMAILx_SetMecaScalarFieldByNode(IdBody, f_rank, f)  \n"
		"\n"
		"Parameters\n"
		"----------\n"
		"IdBody(integer) : id of the concern body  \n"
		"f_rank(integer) : rank of the field to set  \n"
		"f(double array) : value of the field  \n"
		"\n"
		" You need to set this field in your models.dat  \n"
		"\n"
		""},
	 { (char *)"poroMAILx_SetTherScalarFieldByNode", _wrap_poroMAILx_SetTherScalarFieldByNode, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"Update an external field on a given body.  \n"
		"\n"
		"python usage : poroMAILx_SetTherieldByNode(IdBody, f_rank, f)  \n"
		"\n"
		"Parameters\n"
		"----------\n"
		"IdBody(integer) : id of the concern body  \n"
		"f_rank(integer) : rank of the field to set  \n"
		"f(double array) : value of the field  \n"
		"\n"
		" You need to set this field in your models.dat  \n"
		"\n"
		""},
	 { (char *)"poroMAILx_SetMecaScalarFieldByElement", _wrap_poroMAILx_SetMecaScalarFieldByElement, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"Update elementary scalar field through a element external field on a given body.  \n"
		"\n"
		"Field values are stored at Gauss point, on an element all Gauss point have the\n"
		"element value  \n"
		"\n"
		"You need to declare this field in your MODELS.DAT  \n"
		"\n"
		"python usage : poroMAILx_SetMecaScalarFieldByElement(IdBody, f_rank, f)  \n"
		"\n"
		"Parameters\n"
		"----------\n"
		"IdBody(integer) : id of the concern body  \n"
		"f_rank(integer) : rank of the field to set  \n"
		"f(double array) : value of the field  \n"
		"\n"
		""},
	 { (char *)"poroMAILx_SetTherScalarFieldByElement", _wrap_poroMAILx_SetTherScalarFieldByElement, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"Update elementary scalar field through a element external field on a given body.  \n"
		"\n"
		"Field values are stored at Gauss point, on an element all Gauss point have the\n"
		"element value  \n"
		"\n"
		"You need to declare this field in your MODELS.DAT  \n"
		"\n"
		"python usage : poroMAILx_SetTherScalarFieldByElement(IdBody, f_rank, f)  \n"
		"\n"
		"Parameters\n"
		"----------\n"
		"IdBody(integer) : id of the concern body  \n"
		"f_rank(integer) : rank of the field to set  \n"
		"f(double array) : value of the field  \n"
		"\n"
		""},
	 { (char *)"poroMAILx_GetMecaScalarFieldRank", _wrap_poroMAILx_GetMecaScalarFieldRank, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"Get the rank of field of an element of a body from its name.  \n"
		"\n"
		"python usage : f_rank = poroMAILx_GetMecaScalarFieldRank(ibdyty, iblmty, name)  \n"
		"\n"
		"Parameters\n"
		"----------\n"
		"ibdyty(integer) : id of the concern body  \n"
		"iblmty(integer) : id of the concern element  \n"
		"name(string) : name of the desired scalar field  \n"
		"\n"
		"Returns\n"
		"-------\n"
		"f_rank (integer) : rank of the corresponding scalar field  \n"
		"\n"
		""},
	 { (char *)"poroMAILx_GetMecaVectorFieldRank", _wrap_poroMAILx_GetMecaVectorFieldRank, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"Get the rank of field of an element of a body from its name.  \n"
		"\n"
		"python usage : f_rank = poroMAILx_GetMecaVectorFieldRank(ibdyty, iblmty, name)  \n"
		"\n"
		"Parameters\n"
		"----------\n"
		"ibdyty(integer) : id of the concern body  \n"
		"iblmty(integer) : id of the concern element  \n"
		"name(string) : name of the desired vector field  \n"
		"\n"
		"Returns\n"
		"-------\n"
		"f_rank (integer) : rank of the corresponding vector field  \n"
		"\n"
		""},
	 { (char *)"poroMAILx_GetTherScalarFieldRank", _wrap_poroMAILx_GetTherScalarFieldRank, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"Get the rank of field of an element of a body from its name.  \n"
		"\n"
		"python usage : f_rank = poroMAILx_GetTherScalarFieldRank(ibdyty, iblmty, name)  \n"
		"\n"
		"Parameters\n"
		"----------\n"
		"ibdyty(integer) : id of the concern body  \n"
		"iblmty(integer) : id of the concern element  \n"
		"name(string) : name of the desired scalar field  \n"
		"\n"
		"Returns\n"
		"-------\n"
		"f_rank (integer) : rank of the corresponding scalar field  \n"
		"\n"
		""},
	 { (char *)"poroMAILx_GetTherVectorFieldRank", _wrap_poroMAILx_GetTherVectorFieldRank, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"Get the rank of field of an element of a body from its name.  \n"
		"\n"
		"python usage : f_rank = poroMAILx_GetTherVectorFieldRank(ibdyty, iblmty, name)  \n"
		"\n"
		"Parameters\n"
		"----------\n"
		"ibdyty(integer) : id of the concern body  \n"
		"iblmty(integer) : id of the concern element  \n"
		"name(string) : name of the desired vector field  \n"
		"\n"
		"Returns\n"
		"-------\n"
		"f_rank (integer) : rank of the corresponding vector field  \n"
		"\n"
		""},
	 { (char *)"poroMAILx_SetMecaVectorFieldByNode", _wrap_poroMAILx_SetMecaVectorFieldByNode, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"Update elementary fields through a nodal external field on a given body.  \n"
		"\n"
		"Use the form functions of the elements and input values to compute and store\n"
		"field values at Gauss points.  \n"
		"\n"
		"You need to declare this field in your MODELS.DAT  \n"
		"\n"
		"python usage : poroMAILx_SetFieldByNode(IdBody, f_rank, f)  \n"
		"\n"
		"Parameters\n"
		"----------\n"
		"IdBody(integer) : id of the concern body  \n"
		"f_rank(integer) : rank of the vector field to set  \n"
		"f(double array) : value of the vector field  \n"
		"\n"
		""},
	 { (char *)"poroMAILx_SetMecaVectorFieldByElement", _wrap_poroMAILx_SetMecaVectorFieldByElement, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"Update elementary fields through a nodal external field on a given body.  \n"
		"\n"
		"Use the form functions of the elements and input values to compute and store\n"
		"field values at Gauss points.  \n"
		"\n"
		"You need to declare this field in your MODELS.DAT  \n"
		"\n"
		"python usage : poroMAILx_SetVectorFieldByElement(IdBody, f_rank, f)  \n"
		"\n"
		"Parameters\n"
		"----------\n"
		"IdBody(integer) : id of the concern body  \n"
		"f_rank(integer) : rank of the vector field to set  \n"
		"f(double array) : value of the vector field  \n"
		"\n"
		""},
	 { (char *)"poroMAILx_SetTherVectorFieldByNode", _wrap_poroMAILx_SetTherVectorFieldByNode, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"Update elementary fields through a nodal external field on a given body.  \n"
		"\n"
		"Use the form functions of the elements and input values to compute and store\n"
		"field values at Gauss points.  \n"
		"\n"
		"You need to declare this field in your MODELS.DAT  \n"
		"\n"
		"python usage : poroMAILx_SetFieldByNode(IdBody, f_rank, f)  \n"
		"\n"
		"Parameters\n"
		"----------\n"
		"IdBody(integer) : id of the concern body  \n"
		"f_rank(integer) : rank of the vector field to set  \n"
		"f(double array) : value of the vector field  \n"
		"\n"
		""},
	 { (char *)"poroMAILx_SetTherVectorFieldByElement", _wrap_poroMAILx_SetTherVectorFieldByElement, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"Update elementary fields through a nodal external field on a given body.  \n"
		"\n"
		"Use the form functions of the elements and input values to compute and store\n"
		"field values at Gauss points.  \n"
		"\n"
		"You need to declare this field in your MODELS.DAT  \n"
		"\n"
		"python usage : poroMAILx_SetFieldByElement(IdBody, f_rank, f)  \n"
		"\n"
		"Parameters\n"
		"----------\n"
		"IdBody(integer) : id of the concern body  \n"
		"f_rank(integer) : rank of the vector field to set  \n"
		"f(double array) : value of the vector field  \n"
		"\n"
		""},
	 { (char *)"poroMAILx_LoadALE", _wrap_poroMAILx_LoadALE, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"Apply an ALE Formulation in Fluid zone.  \n"
		"\n"
		"python usage : poroMAILx_LoadALE(IdBody)  \n"
		"\n"
		""},
	 { (char *)"poroMAILx_PutBodyVector", _wrap_poroMAILx_PutBodyVector, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"Set a vector of a given body.  \n"
		"\n"
		"*   \"Xbeg_\": cumulated displacements over time at beginning of time step  \n"
		"*   \"X____\": cumulated displacements over time in computed configuration  \n"
		"*   \"Vbeg_\": velocity at beginning of time step  \n"
		"*   \"V____\": velocity in computed configuration  \n"
		"*   \"VbALE\": fluid velocity at beginning of time step  \n"
		"*   \"V_ALE\": fluid velocity at beginning of time step  \n"
		"*   \"Raux_\": working array for reaction  \n"
		"*   \"Vfree\": velocity free of contacts  \n"
		"*   \"Reac_\": contact reaction force  \n"
		"*   \"Fext_\": external forces  \n"
		"*   \"Fint_\": internal forces  \n"
		"*   \"Qext_\": external fluxes  \n"
		"*   \"Qint_\": internal luxces  \n"
		"*   \"Pbeg_\": pressure at beginning of time step  \n"
		"*   \"P____\": pressure in computed configuration  \n"
		"\n"
		"python usage : poroMAILx_PutBodyVector(datatype, ibdyty, matrix)  \n"
		"\n"
		"Parameters\n"
		"----------\n"
		"datatype(string of size 5) : the vector to set  \n"
		"ibdyty(integer) : rank of body  \n"
		"matrix(double array) : the new values  \n"
		"\n"
		""},
	 { (char *)"poroMAILx_ComputeResidueNorm", _wrap_poroMAILx_ComputeResidueNorm, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"computes the norm of the residue  \n"
		"\n"
		"python usage : norm = poroMAILx_ComputeResidueNorm()  \n"
		"\n"
		"Returns\n"
		"-------\n"
		"norm (double) : Residue Norm  \n"
		"\n"
		""},
	 { (char *)"poroMAILx_GetStress", _wrap_poroMAILx_GetStress, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"Get a copy of a stress of a given body.  \n"
		"\n"
		"Python usage : stress = poroMAILx_GetStress(ibdyty,required_field=0)  \n"
		"\n"
		"Parameters\n"
		"----------\n"
		"ibdyty(integer) : rank of considered body  \n"
		"required_field(integer) : required additional field  \n"
		"\n"
		"Returns\n"
		"-------\n"
		"matrix_out (double 2D-array) : the desired stress  \n"
		"\n"
		""},
	 { (char *)"poroMAILx_GetStrain", _wrap_poroMAILx_GetStrain, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"Get a copy of a strain of a given body.  \n"
		"\n"
		"Python usage : strain = poroMAILx_GetStrain(ibdyty, required_field=0)  \n"
		"\n"
		"Parameters\n"
		"----------\n"
		"ibdyty(integer) : rank of considered body  \n"
		"required_field(integer) : required additional field  \n"
		"\n"
		"Returns\n"
		"-------\n"
		"strain (double 2D-array) : the desired strain  \n"
		"\n"
		""},
	 { (char *)"poroMAILx_ComputeContactDetectionConfiguration", _wrap_poroMAILx_ComputeContactDetectionConfiguration, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"compute the contact detection configuration  \n"
		"\n"
		"python usage : poroMAILx_ComputeContactDetectionConfiguration()  \n"
		"\n"
		""},
	 { (char *)"poroMAILx_SetPreconAllBodies", _wrap_poroMAILx_SetPreconAllBodies, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"ask for precomputation of the W matrix on support node dofs of contactors for\n"
		"all bodies. Assumes bulk behaviour is linear.  \n"
		"\n"
		"python usage : poroMAILx_SetPreconAllBodies()  \n"
		"\n"
		""},
	 { (char *)"poroMAILx_ComputePreconW", _wrap_poroMAILx_ComputePreconW, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"compute the precon W on precon bodies  \n"
		"\n"
		"python usage : poroMAILx_ComputePreconW()  \n"
		"\n"
		""},
	 { (char *)"poroMAILx_GetNbPoroMAILx", _wrap_poroMAILx_GetNbPoroMAILx, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"Get the number of poroMAILx.  \n"
		"\n"
		"python usage : nb_poroMAILx = poroMAILx_GetNbPoroMAILx()  \n"
		"\n"
		"Returns\n"
		"-------\n"
		"nb_poroMAILx (integer) : number of poroMAILx  \n"
		"\n"
		""},
	 { (char *)"poroMAILx_GetCoor", _wrap_poroMAILx_GetCoor, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"return node coordinates of idBody  \n"
		"\n"
		"python usage : array = poroMAILx_GetCoor(idBody)  \n"
		"\n"
		"Parameters\n"
		"----------\n"
		"IdBody(integer) : id of the concerned body  \n"
		"\n"
		"Returns\n"
		"-------\n"
		"array (double 2D-array) : coordinates  \n"
		"\n"
		""},
	 { (char *)"poroMAILx_GetAll", _wrap_poroMAILx_GetAll, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"return poro mechanical data computed for idBody  \n"
		"\n"
		"python usage : array = poroMAILx_GetAll(idBody)  \n"
		"\n"
		"Parameters\n"
		"----------\n"
		"IdBody(integer) : id of the concerned body  \n"
		"\n"
		"Returns\n"
		"-------\n"
		"array (double 2D-array) : poro mechanical data  \n"
		"\n"
		""},
	 { (char *)"poroMAILx_GetGrad", _wrap_poroMAILx_GetGrad, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"Get a copy of a grad P of a given body.  \n"
		"\n"
		"Python usage : grad = poroMAILx_GetGrad(ibdyty)  \n"
		"\n"
		"Parameters\n"
		"----------\n"
		"ibdyty(integer) : rank of considered body  \n"
		"\n"
		"Returns\n"
		"-------\n"
		"grad (double 2D-array) : the desired grad  \n"
		"\n"
		""},
	 { (char *)"poroMAILx_GetFlux", _wrap_poroMAILx_GetFlux, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"Get a copy of a Darcy Flux of a given body.  \n"
		"\n"
		"Python usage : flux = poroMAILx_GetFlux(ibdyty)  \n"
		"\n"
		"Parameters\n"
		"----------\n"
		"ibdyty(integer) : rank of considered body  \n"
		"\n"
		"Returns\n"
		"-------\n"
		"flux (double 2D-array) : the desired flux  \n"
		"\n"
		""},
	 { (char *)"poroMAILx_GetInternal", _wrap_poroMAILx_GetInternal, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"return internal mechanical data computed for idBody  \n"
		"\n"
		"python usage : array = poroMAILx_GetInternal(idBody)  \n"
		"\n"
		"Parameters\n"
		"----------\n"
		"IdBody(integer) : id of the concerned body  \n"
		"\n"
		"Returns\n"
		"-------\n"
		"array (double 2D-array) : mechanical internal data  \n"
		"\n"
		""},
	 { (char *)"poroMAILx_GetConnectivity", _wrap_poroMAILx_GetConnectivity, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"return connectivity of idBody elements  \n"
		"\n"
		"python usage : vector = poroMAILx_GetConnectivity(idBody)  \n"
		"\n"
		"Parameters\n"
		"----------\n"
		"IdBody(integer) : id of the concerned body  \n"
		"\n"
		"Returns\n"
		"-------\n"
		"vector (integer) : connectivity  \n"
		"\n"
		""},
	 { (char *)"poroMAILx_SetVlocyDrivenDof", _wrap_poroMAILx_SetVlocyDrivenDof, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"Apply Drv Dof on a given body.  \n"
		"\n"
		"python usage : poroMAILx_SetVlocyDrivenDof(IdBody, f_dof, f_node, f_value)  \n"
		"\n"
		"Parameters\n"
		"----------\n"
		"IdBody(integer) : id of the concern body  \n"
		"f_dof(integer) : dof of the concern node  \n"
		"f_node(integer) : node  \n"
		"f_value(double) : value of the drvdof  \n"
		"\n"
		""},
	 { (char *)"poroMAILx_AddFieldLoad", _wrap_poroMAILx_AddFieldLoad, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"Add elementary load through a nodal external field on a given body.  \n"
		"\n"
		"python usage : poroMAILx_AddFieldLoad(IdBody, Ideriv, f)  \n"
		"\n"
		"Parameters\n"
		"----------\n"
		"IdBody(integer) : id of the concern body  \n"
		"f(double array) : value of the field  \n"
		"\n"
		""},
	 { (char *)"poroMAILx_WriteOutDof", _wrap_poroMAILx_WriteOutDof, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"Write ascii DOF.OUT file. Can be activate only each N step.  \n"
		"\n"
		"python usage : poroMAILx_WriteOutDof()  \n"
		"\n"
		""},
	 { (char *)"poroMAILx_PostModels", _wrap_poroMAILx_PostModels, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"load from MAILx and models for post  \n"
		"\n"
		"python usage : poroMAILx_PostModels()  \n"
		"\n"
		""},
	 { (char *)"poroMAILx_CleanMemory", _wrap_poroMAILx_CleanMemory, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"Free all memory allocated within poroMAILx module.  \n"
		"\n"
		"python usage : poroMAILx_CleanMemory()  \n"
		"\n"
		""},
	 { (char *)"poroMAILx_CheckProperties", _wrap_poroMAILx_CheckProperties, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"check if model and material are matching ; set material parameter if external\n"
		"model  \n"
		"\n"
		"python usage : poroMAILx_CheckProperties()  \n"
		"\n"
		""},
	 { (char *)"poroMAILx_GetNbGpByElem", _wrap_poroMAILx_GetNbGpByElem, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"Get the list of finite elements for porox models and the associated number of\n"
		"Gauss Points for MECA and THER physics.  \n"
		"\n"
		"Here memory is allocated within lmgc90 so that the pointer can be freely\n"
		"modified by third parties without nasty effect on lmgc90 functioning.  \n"
		"\n"
		"python usage : names, meca_nb, ther_nb = poroMAILx_GetNbGpByElem()  \n"
		"\n"
		"Returns\n"
		"-------\n"
		"names (string list) : list of the finite elements meca_nb (integer list): list\n"
		"of the number of Gauss Points for MECA ther_nb (integer list): list of the\n"
		"number of Gauss Points for THER  \n"
		"\n"
		""},
	 { (char *)"multiMAILx_UsePicardScheme", _wrap_multiMAILx_UsePicardScheme, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"use Picard scheme (fixed point method)  \n"
		"\n"
		"python usage : multiMAILx_UsePicardScheme()  \n"
		"\n"
		""},
	 { (char *)"multiMAILx_UseNewtonScheme", _wrap_multiMAILx_UseNewtonScheme, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"use Newton scheme  \n"
		"\n"
		"python usage : multiMAILx_UseNewtonScheme()  \n"
		"\n"
		""},
	 { (char *)"multiMAILx_WithoutRenumbering", _wrap_multiMAILx_WithoutRenumbering, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"skip renumbering of the unknowns using a rcc method  \n"
		"\n"
		"python usage : multiMAILx_WithoutRenumbering()  \n"
		"\n"
		""},
	 { (char *)"multiMAILx_BandStorage", _wrap_multiMAILx_BandStorage, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"use band matrix  \n"
		"\n"
		"python usage : multiMAILx_BandStorage()  \n"
		"\n"
		""},
	 { (char *)"multiMAILx_SparseStorage", _wrap_multiMAILx_SparseStorage, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"use sparse matrix  \n"
		"\n"
		"python usage : multiMAILx_SparseStorage()  \n"
		"\n"
		""},
	 { (char *)"multiMAILx_ExplodedStorage", _wrap_multiMAILx_ExplodedStorage, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"use element by element matrix  \n"
		"\n"
		"python usage : multiMAILx_ExplodedStorage()  \n"
		"\n"
		""},
	 { (char *)"multiMAILx_DiagonalStorage", _wrap_multiMAILx_DiagonalStorage, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"use diagonal matrix  \n"
		"\n"
		"python usage : multiMAILx_DiagonalStorage()  \n"
		"\n"
		""},
	 { (char *)"multiMAILx_SkylineStorage", _wrap_multiMAILx_SkylineStorage, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"use skyline matrix  \n"
		"\n"
		"python usage : multiMAILx_SkylineStorage()  \n"
		"\n"
		""},
	 { (char *)"multiMAILx_FullStorage", _wrap_multiMAILx_FullStorage, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"use full matrix  \n"
		"\n"
		"python usage : multiMAILx_FullStorage()  \n"
		"\n"
		""},
	 { (char *)"multiMAILx_SymmetricShape", _wrap_multiMAILx_SymmetricShape, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"assume matrix is symmetrical  \n"
		"\n"
		"python usage : multiMAILx_SymmetricShape()  \n"
		"\n"
		""},
	 { (char *)"multiMAILx_UnspecifiedShape", _wrap_multiMAILx_UnspecifiedShape, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"does not assume any thing on matrix shape  \n"
		"\n"
		"python usage : multiMAILx_UnspecifiedShape()  \n"
		"\n"
		""},
	 { (char *)"multiMAILx_GetNb", _wrap_multiMAILx_GetNb, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"Get the number of multiMAILx.  \n"
		"\n"
		"python usage : nb_multiMAILx = multiMAILx_GetNb()  \n"
		"\n"
		"Returns\n"
		"-------\n"
		"nb_multiMAILx (integer) : number of multiMAILx  \n"
		"\n"
		""},
	 { (char *)"multiMAILx_GetNbNodes", _wrap_multiMAILx_GetNbNodes, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"Get the number of nodes of a multiMAILx.  \n"
		"\n"
		"python usage : nb_nodes = multiMAILx_GetNbNodes(ibdyty)  \n"
		"\n"
		"Parameters\n"
		"----------\n"
		"ivalue(integer) : id of the multiMAILx  \n"
		"\n"
		"Returns\n"
		"-------\n"
		"nb_nodes (integer) : number of nodes of a multiMAILx  \n"
		"\n"
		""},
	 { (char *)"multiMAILx_GetNbElements", _wrap_multiMAILx_GetNbElements, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"Get the number of elements of a multiMAILx.  \n"
		"\n"
		"python usage : nb_elements = multiMAILx_GetNbElements(ibdyty)  \n"
		"\n"
		"Parameters\n"
		"----------\n"
		"ivalue(integer) : id of the multiMAILx  \n"
		"\n"
		"Returns\n"
		"-------\n"
		"nb_nodes (integer) : number of elements of a multiMAILx  \n"
		"\n"
		""},
	 { (char *)"multiMAILx_IsVisible", _wrap_multiMAILx_IsVisible, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"return if a given body visible  \n"
		"\n"
		"python usage : visible = multiMAILx_IsVisible(ibdyty)  \n"
		"\n"
		"Parameters\n"
		"----------\n"
		"idbdy(integer): id of the body we want visibility  \n"
		"\n"
		"Returns\n"
		"-------\n"
		"visible (integer) : 1 if body is visible, 0 else  \n"
		"\n"
		""},
	 { (char *)"multiMAILx_GetBodyVector", _wrap_multiMAILx_GetBodyVector, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"Get a copy of a vector of a given body.  \n"
		"\n"
		"Possible values for datatype field are:  \n"
		"\n"
		"*   \"Coor0\": reference coordinates  \n"
		"*   \"X____\": cumulated displacements over time in computed configuration  \n"
		"*   \"Xbeg_\": cumulated displacements over time at beginning of time step  \n"
		"*   \"V____\": velocity in computed configuration  \n"
		"*   \"Vbeg_\": velocity at beginning of time step  \n"
		"*   \"Pcbeg\": pressure of 1st fluid at beginning of time step  \n"
		"*   \"Pc___\": pressure of 1st fluid in computed configuration  \n"
		"*   \"Pnbeg\": pressure of 2nd fluid at beginning of time step  \n"
		"*   \"Pn___\": pressure of 2nd fluid in computed configuration  \n"
		"*   \"U_Fex\": external forces  \n"
		"*   \"PcFex\": external pressure for 1st fluid  \n"
		"*   \"PnFex\": external pressure for 2nd fluid  \n"
		"*   \"U_Fin\": internal forces  \n"
		"*   \"PcFin\": internal pressure for 1st fluid  \n"
		"*   \"PnFin\": internal pressure for 2nd fluid  \n"
		"*   \"U_Fdp\":  \n"
		"*   \"PcFdp\":  \n"
		"*   \"PnFdp\":  \n"
		"*   \"U_Fdy\":  \n"
		"*   \"PcFdy\":  \n"
		"*   \"PnFdy\":  \n"
		"\n"
		"Possible values for datatype field are \"X____\", \"Xbeg_\", \"V____\",\n"
		"\"Vbeg_\", \"Pw___\", \"Pwbeg\", \"Pn___\", \"Pnbeg\"  \n"
		"\n"
		"Python usage : vector = multiMAILx_GetBodyVector(datatype, ibdyty)  \n"
		"\n"
		"Parameters\n"
		"----------\n"
		"datatype(string of size 5) : the vector to get  \n"
		"ibdyty(integer) : rank of considered body  \n"
		"\n"
		"Returns\n"
		"-------\n"
		"vector (double 2D-array) : the desired data  \n"
		"\n"
		""},
	 { (char *)"multiMAILx_PutBodyVector", _wrap_multiMAILx_PutBodyVector, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"Set a vector of a given body.  \n"
		"\n"
		"Possible values for datatype field are:  \n"
		"\n"
		"*   \"X____\": cumulated displacements over time in computed configuration  \n"
		"*   \"Xbeg_\": cumulated displacements over time at beginning of time step  \n"
		"*   \"V____\": velocity in computed configuration  \n"
		"*   \"Vbeg_\": velocity at beginning of time step  \n"
		"*   \"Pcbeg\": pressure of 1st fluid at beginning of time step  \n"
		"*   \"Pc___\": pressure of 1st fluid in computed configuration  \n"
		"*   \"Pnbeg\": pressure of 2nd fluid at beginning of time step  \n"
		"*   \"Pn___\": pressure of 2nd fluid in computed configuration  \n"
		"\n"
		"python usage : multiMAILx_PutBodyVector(datatype, ibdyty, matrix)  \n"
		"\n"
		"Parameters\n"
		"----------\n"
		"datatype(string of size 5) : the vector to set  \n"
		"ibdyty(integer) : rank of body  \n"
		"matrix(double array) : the new values  \n"
		"\n"
		""},
	 { (char *)"multiMAILx_ReadDrivenDof", _wrap_multiMAILx_ReadDrivenDof, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"Read DRV_DOF.DAT.  \n"
		"\n"
		"python usage : multiMAILx_ReadDrivenDof()  \n"
		"\n"
		""},
	 { (char *)"multiMAILx_WriteDrivenDof", _wrap_multiMAILx_WriteDrivenDof, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"Write DRV_DOF.OUT.  \n"
		"\n"
		"python usage : multiMAILx_WriteDrivenDof()  \n"
		"\n"
		""},
	 { (char *)"multiMAILx_ReadIniGPV", _wrap_multiMAILx_ReadIniGPV, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"Read GPV file.  \n"
		"\n"
		"If num <= 0 : DATBOX/GPV.INI file is read  \n"
		"\n"
		"Else : OUTBOX/GPV.OUT.num is read, num being the parameter used in\n"
		"TimeEvolution_ReadIniGPV last call  \n"
		"\n"
		"python usage : multiMAILx_ReadIniGPV(num=0)  \n"
		"\n"
		"Parameters\n"
		"----------\n"
		"num(integer) : which GPV file to read  \n"
		"\n"
		""},
	 { (char *)"multiMAILx_ReadIniDof", _wrap_multiMAILx_ReadIniDof, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"Read DOF file.  \n"
		"\n"
		"If num <= 0 : DATBOX/DOF.INI file is read  \n"
		"\n"
		"Else : OUTBOX/DOF.OUT.num is read, num being the parameter used in\n"
		"TimeEvolution_ReadIniDof last call  \n"
		"\n"
		"python usage : multiMAILx_ReadIniDof(num=0)  \n"
		"\n"
		"Parameters\n"
		"----------\n"
		"num(integer) : which DOF file to read  \n"
		"\n"
		""},
	 { (char *)"multiMAILx_WriteLastDof", _wrap_multiMAILx_WriteLastDof, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"Write DOF.LAST file.  \n"
		"\n"
		"python usage : multiMAILx_WriteLastDof(i_list)  \n"
		"\n"
		"Parameters\n"
		"----------\n"
		"i_list(list of integer) : list of bodies to write dof if omitted works on all\n"
		"    objects  \n"
		"\n"
		""},
	 { (char *)"multiMAILx_WriteOutDof", _wrap_multiMAILx_WriteOutDof, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"Write DOF.OUT file.  \n"
		"\n"
		"python usage : multiMAILx_WriteOutDof(i_list)  \n"
		"\n"
		"Parameters\n"
		"----------\n"
		"i_list(list of integer) : list of bodies to write dof if omitted works on all\n"
		"    objects  \n"
		"\n"
		""},
	 { (char *)"multiMAILx_LoadBehaviours", _wrap_multiMAILx_LoadBehaviours, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"load behaviours from bulk_behav  \n"
		"\n"
		"python usage : multiMAILx_LoadBehaviours()  \n"
		"\n"
		""},
	 { (char *)"multiMAILx_LoadModels", _wrap_multiMAILx_LoadModels, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"load models from models  \n"
		"\n"
		"python usage : multiMAILx_LoadModels()  \n"
		"\n"
		""},
	 { (char *)"multiMAILx_PushProperties", _wrap_multiMAILx_PushProperties, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"gives to model the couple of model,behavior used at gauss point  \n"
		"\n"
		"python usage : multiMAILx_PushProperties()  \n"
		"\n"
		""},
	 { (char *)"multiMAILx_IncrementStep", _wrap_multiMAILx_IncrementStep, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"initializes the current d.o.f and some driven d.o.f values  \n"
		"\n"
		"python usage : multiMAILx_IncrementStep()  \n"
		"\n"
		""},
	 { (char *)"multiMAILx_ComputeMass", _wrap_multiMAILx_ComputeMass, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"compute elementary mass and inertia of a list of bodies  \n"
		"\n"
		"python usage : multiMAILx_ComputeMass(i_list)  \n"
		"\n"
		"Parameters\n"
		"----------\n"
		"i_list(list of integer) : list of bodies to compute mass and inertia if omitted\n"
		"    works on all objects  \n"
		"\n"
		""},
	 { (char *)"multiMAILx_ComputeBulk", _wrap_multiMAILx_ComputeBulk, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"computes elementary stiffness and viscosity matrices of a list of bodies  \n"
		"\n"
		"python usage : multiMAILx_ComputeBulk(i_list)  \n"
		"\n"
		"Parameters\n"
		"----------\n"
		"i_list(list of integer) : list of bodies to compute stiffness and viscosity\n"
		"    matrices if omitted works on all objects  \n"
		"\n"
		""},
	 { (char *)"multiMAILx_ComputeFext", _wrap_multiMAILx_ComputeFext, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"compute elementary external forces of a list of bodies  \n"
		"\n"
		"python usage : multiMAILx_ComputeFext(i_list)  \n"
		"\n"
		"Parameters\n"
		"----------\n"
		"i_list(list of integer) : list of bodies to compute external forces if omitted\n"
		"    works on all objects  \n"
		"\n"
		""},
	 { (char *)"multiMAILx_AssembKT", _wrap_multiMAILx_AssembKT, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"assemble pseudo mass matrix and apply drvdof of a list of bodies  \n"
		"\n"
		"python usage : multiMAILx_AssembKT(i_list)  \n"
		"\n"
		"Parameters\n"
		"----------\n"
		"i_list(list of integer) : list of bodies to assemble pseudo mass matrix and apply\n"
		"    drvdof if omitted works on all objects  \n"
		"\n"
		""},
	 { (char *)"multiMAILx_AssembRHS", _wrap_multiMAILx_AssembRHS, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"assembles right hand side of a list of bodies  \n"
		"\n"
		"python usage : multiMAILx_AssembRHS(i_list)  \n"
		"\n"
		"Parameters\n"
		"----------\n"
		"i_list(list of integer) : list of bodies to assemble right hand side if omitted\n"
		"    works on all objects  \n"
		"\n"
		""},
	 { (char *)"multiMAILx_ComputeResidueNorm", _wrap_multiMAILx_ComputeResidueNorm, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"computes the norm of the residue of a list of bodies  \n"
		"\n"
		"python usage : norm = multiMAILx_ComputeResidueNorm(i_list)  \n"
		"\n"
		"Parameters\n"
		"----------\n"
		"i_list(list of integer) : list of bodies to compute the norm of the residue if\n"
		"    omitted works on all objects  \n"
		"\n"
		"Returns\n"
		"-------\n"
		"norm (double) : Residue Norm  \n"
		"\n"
		""},
	 { (char *)"multiMAILx_ComputeFreeState", _wrap_multiMAILx_ComputeFreeState, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"computes free (of interactions) state of a list of bodies  \n"
		"\n"
		"python usage : multiMAILx_ComputeFreeState(i_list)  \n"
		"\n"
		"Parameters\n"
		"----------\n"
		"i_list(list of integer) : list of bodies to compute free state if omitted works on\n"
		"    all objects  \n"
		"\n"
		""},
	 { (char *)"multiMAILx_ComputeDof", _wrap_multiMAILx_ComputeDof, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"computes the current d.o.f knowing all the forces/fluxses (free + contact) of a\n"
		"list of bodies  \n"
		"\n"
		"python usage : multiMAILx_ComputeDof(i_list)  \n"
		"\n"
		"Parameters\n"
		"----------\n"
		"i_list(list of integer) : list of bodies to compute current d.o.f if omitted works\n"
		"    on all objects  \n"
		"\n"
		""},
	 { (char *)"multiMAILx_ComputeField", _wrap_multiMAILx_ComputeField, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"computes elementary fields of a list of bodies  \n"
		"\n"
		"python usage : multiMAILx_ComputeField(i_list)  \n"
		"\n"
		"Parameters\n"
		"----------\n"
		"i_list(list of integer) : list of bodies to compute elementary fields if omitted\n"
		"    works on all objects  \n"
		"\n"
		""},
	 { (char *)"multiMAILx_UpdateBulk", _wrap_multiMAILx_UpdateBulk, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"update begin elementary fields with current elementary fields of a list of\n"
		"bodies  \n"
		"\n"
		"python usage : multiMAILx_UpdateBulk(i_list)  \n"
		"\n"
		"Parameters\n"
		"----------\n"
		"i_list(list of integer) : list of bodies to compute elementary fields if omitted\n"
		"    works on all objects  \n"
		"\n"
		""},
	 { (char *)"multiMAILx_UpdateDof", _wrap_multiMAILx_UpdateDof, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"update begin d.o.f. with current d.o.f. of a list of bodies  \n"
		"\n"
		"python usage : multiMAILx_UpdateDof(i_list)  \n"
		"\n"
		"Parameters\n"
		"----------\n"
		"i_list(list of integer) : list of bodies to update current d.o.f if omitted works\n"
		"    on all objects  \n"
		"\n"
		""},
	 { (char *)"multiMAILx_GetScalarFieldRank", _wrap_multiMAILx_GetScalarFieldRank, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"Get the rank of field of an element of a body from its name.  \n"
		"\n"
		"python usage : f_rank = multiMAILx_GetScalarFieldRank(ibdyty, iblmty, name)  \n"
		"\n"
		"Parameters\n"
		"----------\n"
		"ibdyty(integer) : id of the concern body  \n"
		"iblmty(integer) : id of the concern element  \n"
		"name(string) : name of the desired field  \n"
		"\n"
		"Returns\n"
		"-------\n"
		"f_rank (integer) : rank of the corresponding field  \n"
		"\n"
		""},
	 { (char *)"multiMAILx_SetScalarFieldByNode", _wrap_multiMAILx_SetScalarFieldByNode, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"Update elementary fields through a nodal external field on a given body.  \n"
		"\n"
		"You need to declare this field in your MODELS.DAT  \n"
		"\n"
		"python usage : multiMAILx_SetScalarFieldByNode(IdBody, f_rank, f)  \n"
		"\n"
		"Parameters\n"
		"----------\n"
		"IdBody(integer) : id of the concern body  \n"
		"f_rank(integer) : rank of the field to set  \n"
		"f(double array) : value of the field  \n"
		"\n"
		""},
	 { (char *)"multiMAILx_SetScalarFieldByElement", _wrap_multiMAILx_SetScalarFieldByElement, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"Update elementary scalar field through a element external field on a given body.  \n"
		"\n"
		"Field values are stored at Gauss point, on an element all Gauss point have the\n"
		"element value  \n"
		"\n"
		"You need to declare this field in your MODELS.DAT  \n"
		"\n"
		"python usage : multiMAILx_SetScalarFieldByElement(IdBody, f_rank, f)  \n"
		"\n"
		"Parameters\n"
		"----------\n"
		"IdBody(integer) : id of the concern body  \n"
		"f_rank(integer) : rank of the field to set  \n"
		"f(double array) : value of the field  \n"
		"\n"
		""},
	 { (char *)"multiMAILx_GetVectorFieldRank", _wrap_multiMAILx_GetVectorFieldRank, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"Get the rank of field of an element of a body from its name.  \n"
		"\n"
		"python usage : f_rank = multiMAILx_GetVectorFieldRank(ibdyty, iblmty, name)  \n"
		"\n"
		"Parameters\n"
		"----------\n"
		"ibdyty(integer) : id of the concern body  \n"
		"iblmty(integer) : id of the concern element  \n"
		"name(string) : name of the desired vector field  \n"
		"\n"
		"Returns\n"
		"-------\n"
		"f_rank (integer) : rank of the corresponding vector field  \n"
		"\n"
		""},
	 { (char *)"multiMAILx_SetVectorFieldByNode", _wrap_multiMAILx_SetVectorFieldByNode, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"Update elementary fields through a nodal external field on a given body.  \n"
		"\n"
		"Use the form functions of the elements and input values to compute and store\n"
		"field values at Gauss points.  \n"
		"\n"
		"You need to declare this field in your MODELS.DAT  \n"
		"\n"
		"python usage : multiMAILx_SetFieldByNode(IdBody, f_rank, f)  \n"
		"\n"
		"Parameters\n"
		"----------\n"
		"IdBody(integer) : id of the concern body  \n"
		"f_rank(integer) : rank of the vector field to set  \n"
		"f(double array) : value of the vector field  \n"
		"\n"
		""},
	 { (char *)"multiMAILx_SetVectorFieldByElement", _wrap_multiMAILx_SetVectorFieldByElement, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"Update elementary fields through a nodal external field on a given body.  \n"
		"\n"
		"Use the form functions of the elements and input values to compute and store\n"
		"field values at Gauss points.  \n"
		"\n"
		"You need to declare this field in your MODELS.DAT  \n"
		"\n"
		"python usage : multiMAILx_SetFieldByElement(IdBody, f_rank, f)  \n"
		"\n"
		"Parameters\n"
		"----------\n"
		"IdBody(integer) : id of the concern body  \n"
		"f_rank(integer) : rank of the vector field to set  \n"
		"f(double array) : value of the vector field  \n"
		"\n"
		""},
	 { (char *)"multiMAILx_GetConnectivity", _wrap_multiMAILx_GetConnectivity, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"return connectivity of idBody elements  \n"
		"\n"
		"python usage : vector = multiMAILx_GetConnectivity(idBody)  \n"
		"\n"
		"Parameters\n"
		"----------\n"
		"IdBody(integer) : id of the concerned body  \n"
		"\n"
		"Returns\n"
		"-------\n"
		"vector (integer) : connectivity  \n"
		"\n"
		""},
	 { (char *)"multiMAILx_GetCoor", _wrap_multiMAILx_GetCoor, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"return node coordinates of idBody  \n"
		"\n"
		"python usage : array = multiMAILx_GetCoor(idBody)  \n"
		"\n"
		"Parameters\n"
		"----------\n"
		"IdBody(integer) : id of the concerned body  \n"
		"\n"
		"Returns\n"
		"-------\n"
		"array (double 2D-array) : coordinates  \n"
		"\n"
		""},
	 { (char *)"multiMAILx_GetAll", _wrap_multiMAILx_GetAll, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"return mechanical data computed for idBody  \n"
		"\n"
		"python usage : array = multiMAILx_GetAll(idBody)  \n"
		"\n"
		"Parameters\n"
		"----------\n"
		"IdBody(integer) : id of the concerned body  \n"
		"\n"
		"Returns\n"
		"-------\n"
		"array (double 2D-array) : mechanical data  \n"
		"\n"
		""},
	 { (char *)"multiMAILx_GetElementsVolume", _wrap_multiMAILx_GetElementsVolume, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"return volume of elements  \n"
		"\n"
		"python usage : volumes = multiMAILx_GetElementsVolume(idBody)  \n"
		"\n"
		"Parameters\n"
		"----------\n"
		"IdBody(integer) : id of the concerned body  \n"
		"\n"
		"Returns\n"
		"-------\n"
		"volumes[nb_ele] (double) : volume  \n"
		"\n"
		""},
	 { (char *)"multiMAILx_GetElementsNeighbor", _wrap_multiMAILx_GetElementsNeighbor, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"return elements in the tol-neighbor of an element of idBody  \n"
		"\n"
		"python usage : neighbors =\n"
		"multiMAILx_GetElementsNeighbor(idBody,tol,max_neighbors)  \n"
		"\n"
		"Parameters\n"
		"----------\n"
		"IdBody(integer) : id of the concerned body  \n"
		"tol(double) : tolerance  \n"
		"\n"
		"Returns\n"
		"-------\n"
		"array (double 2D-array) : neighbor[nb_ele,max_neighbors]  \n"
		"\n"
		""},
	 { (char *)"multiMAILx_GetPtrElementsEnergy", _wrap_multiMAILx_GetPtrElementsEnergy, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"return pointer on energy of elements  \n"
		"\n"
		"python usage : energies = multiMAILx_GetPtrElementsEnergy(idBody)  \n"
		"\n"
		"Parameters\n"
		"----------\n"
		"IdBody(integer) : id of the concerned body  \n"
		"\n"
		"Returns\n"
		"-------\n"
		"energies[nb_ele] (double) : energy  \n"
		"\n"
		""},
	 { (char *)"multiMAILx_ComputeElementsEnergy", _wrap_multiMAILx_ComputeElementsEnergy, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"compute energy of elements  \n"
		"\n"
		"python usage : multiMAILx_ComputeElementsEnergy(idBody)  \n"
		"\n"
		""},
	 { (char *)"multiMAILx_GetPtrElementsJacobian", _wrap_multiMAILx_GetPtrElementsJacobian, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"return jacobian of elements  \n"
		"\n"
		"python usage : jacobians = multiMAILx_GetPtrElementsJacobian(idBody)  \n"
		"\n"
		"Parameters\n"
		"----------\n"
		"IdBody(integer) : id of the concerned body  \n"
		"\n"
		"Returns\n"
		"-------\n"
		"jacobians[nb_ele] (double) : jacobian  \n"
		"\n"
		""},
	 { (char *)"multiMAILx_ComputeElementsJacobian", _wrap_multiMAILx_ComputeElementsJacobian, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"compute jacobian of elements  \n"
		"\n"
		"python usage : multiMAILx_ComputeElementsJacobian(idBody)  \n"
		"\n"
		""},
	 { (char *)"multiMAILx_GetPtrElementsVisibility", _wrap_multiMAILx_GetPtrElementsVisibility, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"Get a pointer on the elements visibility vector.  \n"
		"\n"
		"python usage : eviz = multiMAILx_GetPtrElementsVisibility(ibdyty)  \n"
		"\n"
		"Parameters\n"
		"----------\n"
		"ibdyty(integer) : rank of the multiMAILx  \n"
		"\n"
		"Returns\n"
		"-------\n"
		"eviz (int array) : reference on the desired vector seen as a numpy array  \n"
		"\n"
		""},
	 { (char *)"multiMAILx_GetDeformationEnergy", _wrap_multiMAILx_GetDeformationEnergy, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"Get the deformation energy of a given displacement field.  \n"
		"\n"
		"python usage : energy = multiMAILx_GetDeformationEnergy(id,displacement)  \n"
		"\n"
		"Parameters\n"
		"----------\n"
		"ibdyty(integer) : rank of considered body  \n"
		"displacement(double matrix) : displacement field  \n"
		"\n"
		"Returns\n"
		"-------\n"
		"energy (double) : deformation energy  \n"
		"\n"
		""},
	 { (char *)"multiMAILx_GetPtrBoundaryElements", _wrap_multiMAILx_GetPtrBoundaryElements, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"return boundary elements  \n"
		"\n"
		"python usage : vector = multiMAILx_GetPtrBoundaryElements(idBody)  \n"
		"\n"
		"Parameters\n"
		"----------\n"
		"IdBody(integer) : id of the concerned body  \n"
		"\n"
		"Returns\n"
		"-------\n"
		"vector (integer) : for each element =0 no boundary, otherwise gives the number\n"
		"of free edge/face  \n"
		"\n"
		""},
	 { (char *)"multiMAILx_CleanMemory", _wrap_multiMAILx_CleanMemory, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"Free all memory allocated within multiMAILx module.  \n"
		"\n"
		"python usage : multiMAILx_CleanMemory()  \n"
		"\n"
		""},
	 { (char *)"ExternalModels_InitModels", _wrap_ExternalModels_InitModels, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"Initialize the external models (if any)  \n"
		"\n"
		"python usage : ExternalModels_InitModels()  \n"
		"\n"
		""},
	 { (char *)"ExternalModels_StoreProperties", _wrap_ExternalModels_StoreProperties, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"Store external models (if any)  \n"
		"\n"
		"python usage : ExternalModels_StoreProperties()  \n"
		"\n"
		""},
	 { (char *)"ExternalModels_CleanMemory", _wrap_ExternalModels_CleanMemory, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"Free all memory allocated within ExternalModels module.  \n"
		"\n"
		"python usage : ExternalModels_CleanMemory()  \n"
		"\n"
		""},
	 { (char *)"bulk_behav_ReadBehaviours", _wrap_bulk_behav_ReadBehaviours, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"read gravity and behaviors from DATBOX/BULK_BEHAV.DAT file  \n"
		"\n"
		"python usage : bulk_behav_ReadBehaviours()  \n"
		"\n"
		""},
	 { (char *)"bulk_behav_WriteBehaviours", _wrap_bulk_behav_WriteBehaviours, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"write gravity and behaviors to OUTBOX/BULK_BEHAV.OUT file  \n"
		"\n"
		"python usage : bulk_behav_WriteBehaviours()  \n"
		"\n"
		""},
	 { (char *)"bulk_behav_CollectOutBulkBehav", _wrap_bulk_behav_CollectOutBulkBehav, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"read gravity and behaviors from OUTBOX/BULK_BEHAV.OUT file  \n"
		"\n"
		"python usage : bulk_behav_CollectOutBulkBehav()  \n"
		"\n"
		""},
	 { (char *)"bulk_behav_CleanOutBulkBehav", _wrap_bulk_behav_CleanOutBulkBehav, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"write (replacing) gravity and behaviors to OUTBOX/BULK_BEHAV.OUT file  \n"
		"\n"
		"python usage : bulk_behav_CleanOutBulkBehav()  \n"
		"\n"
		""},
	 { (char *)"bulk_behav_AppendOutBulkBehav", _wrap_bulk_behav_AppendOutBulkBehav, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"write (appending) gravity and behaviors to OUTBOX/BULK_BEHAV.OUT file  \n"
		"\n"
		"python usage : bulk_behav_AppendOutBulkBehav()  \n"
		"\n"
		""},
	 { (char *)"bulk_behav_RebuildInBulkBehav", _wrap_bulk_behav_RebuildInBulkBehav, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"write (replace) gravity and behaviors to DATBOX/BULK_BEHAV.DAT file  \n"
		"\n"
		"python usage : bulk_behav_RebuildInBulkBehav()  \n"
		"\n"
		""},
	 { (char *)"bulk_behav_GetGravity", _wrap_bulk_behav_GetGravity, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"get the gravity acceleration used  \n"
		"\n"
		"python usage : gravity = bulk_behav_GetGravity()  \n"
		"\n"
		"Returns\n"
		"-------\n"
		"gravity (double array) : gravity vector  \n"
		"\n"
		""},
	 { (char *)"bulk_behav_SetGravity", _wrap_bulk_behav_SetGravity, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"set the gravity acceleration to be used  \n"
		"\n"
		"python usage : bulk_behav_SetGravity(gravity)  \n"
		"\n"
		"Parameters\n"
		"----------\n"
		"gravity(double array) : gravity vector (size 3)  \n"
		"\n"
		""},
	 { (char *)"bulk_behav_SetConductivity", _wrap_bulk_behav_SetConductivity, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"set the conductivity parameter to be used  \n"
		"\n"
		"python usage : bulk_behav_SetConductivity(cvalue ,ivalue, rvalue)  \n"
		"\n"
		"Parameters\n"
		"----------\n"
		"cvalue(string of size 5) : nickname of bulk behaviour  \n"
		"ivalue(integer) : type of parameter: 0 = constant, 1 = field  \n"
		"rvalue(real) : conductivity value  \n"
		"\n"
		""},
	 { (char *)"bulk_behav_SetCapacity", _wrap_bulk_behav_SetCapacity, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"set the Capacity parameter to be used  \n"
		"\n"
		"python usage : bulk_behav_SetCapacity(cvalue ,ivalue, rvalue)  \n"
		"\n"
		"Parameters\n"
		"----------\n"
		"cvalue(string of size 5) : nickname of bulk behaviour  \n"
		"ivalue(integer) : type of parameter: 0 = constant, 1 = field  \n"
		"rvalue(real) : Capacity value  \n"
		"\n"
		""},
	 { (char *)"bulk_behav_SetBiot", _wrap_bulk_behav_SetBiot, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"set the Biot parameter to be used  \n"
		"\n"
		"python usage : bulk_behav_SetBiot(cvalue ,ivalue, rvalue)  \n"
		"\n"
		"Parameters\n"
		"----------\n"
		"cvalue(string of size 5) : nickname of bulk behaviour  \n"
		"ivalue(integer) : type of parameter: 0 = constant, 1 = field  \n"
		"rvalue(real) : Biot value  \n"
		"\n"
		""},
	 { (char *)"bulk_behav_SetExternalFlux", _wrap_bulk_behav_SetExternalFlux, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"set the External Flux parameter to be used  \n"
		"\n"
		"python usage : bulk_behav_SetExternalFlux(cvalue ,ivalue, rvalue)  \n"
		"\n"
		"Parameters\n"
		"----------\n"
		"cvalue(string of size 5) : nickname of bulk behaviour  \n"
		"ivalue(integer) : type of parameter: 0 = constant, 1 = field  \n"
		"rvalue(real) : External Flux value  \n"
		"\n"
		""},
	 { (char *)"bulk_behav_SetDensity", _wrap_bulk_behav_SetDensity, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"set the Density parameter to be used  \n"
		"\n"
		"python usage : bulk_behav_SetDensity(cvalue , rvalue)  \n"
		"\n"
		"Parameters\n"
		"----------\n"
		"cvalue(string of size 5) : nickname of bulk behaviour  \n"
		"rvalue(real) : Density value  \n"
		"\n"
		""},
	 { (char *)"bulk_behav_GetNbBulkBehav", _wrap_bulk_behav_GetNbBulkBehav, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"get the number of bulk laws  \n"
		"\n"
		"python usage : nb_bulk_behav = bulk_behav_GetNbBulkBehav()  \n"
		"\n"
		"Parameters\n"
		"----------\n"
		"nb_bulk_behav(integer) : number of bulk behaviour in lmgc90  \n"
		"\n"
		""},
	 { (char *)"bulk_behav_GetBulkBehav", _wrap_bulk_behav_GetBulkBehav, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"get a given bulk law  \n"
		"\n"
		"python usage : lawty, behav = bulk_behav_GetBulkBehav(i_bb)  \n"
		"\n"
		"Parameters\n"
		"----------\n"
		"i_bb(integer) : index of the desired bulk_behav  \n"
		"lawty(string) : type of the bulk law  \n"
		"behav(string) : name of the bulk law  \n"
		"param(real vector) : parameters of the law  \n"
		"\n"
		""},
	 { (char *)"bulk_behav_CleanMemory", _wrap_bulk_behav_CleanMemory, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"Free all memory allocated within bulk_behav module.  \n"
		"\n"
		"python usage : bulk_behav_CleanMemory()  \n"
		"\n"
		""},
	 { (char *)"models_ReadModels", _wrap_models_ReadModels, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"read models from DATBOX/MODELS.DAT  \n"
		"\n"
		"python usage : models_ReadModels()  \n"
		"\n"
		""},
	 { (char *)"models_WriteModels", _wrap_models_WriteModels, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"write models to OUTBOX/MODELS.OUT  \n"
		"\n"
		"python usage : models_WriteModels()  \n"
		"\n"
		""},
	 { (char *)"models_InitModels", _wrap_models_InitModels, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"initialize models  \n"
		"\n"
		"python usage : models_InitModels()  \n"
		"\n"
		""},
	 { (char *)"models_InitProperties", _wrap_models_InitProperties, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"initialize properties  \n"
		"\n"
		"In face re-initialize properties (since it is done in InitModels). Necessary if\n"
		"a Store has been done and it is wanted again to LoadModel  \n"
		"\n"
		"python usage : models_InitProperties()  \n"
		"\n"
		""},
	 { (char *)"models_StoreProperties", _wrap_models_StoreProperties, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"create properties (couple of model and models)  \n"
		"\n"
		"python usage : models_StoreProperties()  \n"
		"\n"
		""},
	 { (char *)"models_CleanMemory", _wrap_models_CleanMemory, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"Free all memory allocated within models module.  \n"
		"\n"
		"python usage : models_CleanMemory()  \n"
		"\n"
		""},
	 { (char *)"overall_Initialize", _wrap_overall_Initialize, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"Initialize LMGC90.  \n"
		"\n"
		"python usage : overall_Initialize()  \n"
		"\n"
		""},
	 { (char *)"overall_Finalize", _wrap_overall_Finalize, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"Finalize LMGC90.  \n"
		"\n"
		"python usage : overall_Finalize()  \n"
		"\n"
		""},
	 { (char *)"overall_InitEntityList", _wrap_overall_InitEntityList, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"Initialize entity list : must be done after LoadTactors.  \n"
		"\n"
		"python usage : overall_InitEntityList()  \n"
		"\n"
		""},
	 { (char *)"TimeEvolution_SetTimeStep", _wrap_TimeEvolution_SetTimeStep, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"Set value of the time step.  \n"
		"\n"
		"python usage : TimeEvolution_SetTimeStep(dt)  \n"
		"\n"
		"Parameters\n"
		"----------\n"
		"dt(double) : value of time step  \n"
		"\n"
		""},
	 { (char *)"TimeEvolution_IncrementStep", _wrap_TimeEvolution_IncrementStep, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"Increment curent time, time step and eventually initialize NR loop counter.  \n"
		"\n"
		"python usage : TimeEvolution_IncrementStep()  \n"
		"\n"
		""},
	 { (char *)"TimeEvolution_UpdateStep", _wrap_TimeEvolution_UpdateStep, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"update the initial time to the current time  \n"
		"\n"
		"python usage : TimeEvolution_UpdateStep()  \n"
		"\n"
		""},
	 { (char *)"TimeEvolution_DisplayStep", _wrap_TimeEvolution_DisplayStep, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"Display time evolution step informations.  \n"
		"\n"
		"python usage : TimeEvolution_DisplayStep()  \n"
		"\n"
		""},
	 { (char *)"TimeEvolution_SetInitialStep", _wrap_TimeEvolution_SetInitialStep, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"Set the rank of the first time step.  \n"
		"\n"
		"python usage : TimeEvolution_SetInitialStep(first_step)  \n"
		"\n"
		"Parameters\n"
		"----------\n"
		"first_step(integer) : rank of the first time step  \n"
		"\n"
		""},
	 { (char *)"TimeEvolution_SetInitialTime", _wrap_TimeEvolution_SetInitialTime, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"Set initial time.  \n"
		"\n"
		"python usage : TimeEvolution_SetInitialTime(t_init)  \n"
		"\n"
		"Parameters\n"
		"----------\n"
		"t_init(double) : initial time  \n"
		"\n"
		""},
	 { (char *)"TimeEvolution_GetTime", _wrap_TimeEvolution_GetTime, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"get current time  \n"
		"\n"
		"python usage : time = TimeEvolution_GetTime()  \n"
		"\n"
		"Returns\n"
		"-------\n"
		"time (double) : current time  \n"
		"\n"
		""},
	 { (char *)"TimeEvolution_GetTimeStep", _wrap_TimeEvolution_GetTimeStep, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"get current time step  \n"
		"\n"
		"python usage : dt = TimeEvolution_GetTimeStep()  \n"
		"\n"
		"Returns\n"
		"-------\n"
		"dt (double) : time step  \n"
		"\n"
		""},
	 { (char *)"TimeEvolution_GetStep", _wrap_TimeEvolution_GetStep, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"get current step number  \n"
		"\n"
		"python usage : it = TimeEvolution_GetStep()  \n"
		"\n"
		"Returns\n"
		"-------\n"
		"it (int) : current step number  \n"
		"\n"
		""},
	 { (char *)"TimeEvolution_WriteLastDof", _wrap_TimeEvolution_WriteLastDof, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"python usage : TimeEvolution_WriteLastDof()  \n"
		"\n"
		""},
	 { (char *)"TimeEvolution_WriteOutDof", _wrap_TimeEvolution_WriteOutDof, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"python usage : TimeEvolution_WriteOutDof(Nstep_writeDof)  \n"
		"\n"
		"Parameters\n"
		"----------\n"
		"Nstep_writeDof(integer) : periodicity of DOF write  \n"
		"\n"
		""},
	 { (char *)"TimeEvolution_DisplayOutDof", _wrap_TimeEvolution_DisplayOutDof, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"python usage : TimeEvolution_DisplayOutDof()  \n"
		"\n"
		""},
	 { (char *)"TimeEvolution_WriteLastRnod", _wrap_TimeEvolution_WriteLastRnod, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"python usage : TimeEvolution_WriteLastRnod()  \n"
		"\n"
		""},
	 { (char *)"TimeEvolution_WriteOutRnod", _wrap_TimeEvolution_WriteOutRnod, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"python usage : TimeEvolution_WriteOutRnod(nstep)  \n"
		"\n"
		"Parameters\n"
		"----------\n"
		"nstep(integer) : a freq of writing  \n"
		"\n"
		""},
	 { (char *)"TimeEvolution_DisplayOutRnod", _wrap_TimeEvolution_DisplayOutRnod, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"python usage : TimeEvolution_DisplayOutRnod()  \n"
		"\n"
		""},
	 { (char *)"TimeEvolution_WriteLastVlocRloc", _wrap_TimeEvolution_WriteLastVlocRloc, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"python usage : TimeEvolution_WriteLastVlocRloc()  \n"
		"\n"
		""},
	 { (char *)"TimeEvolution_WriteOutVlocRloc", _wrap_TimeEvolution_WriteOutVlocRloc, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"python usage : TimeEvolution_WriteOutVlocRloc(nstep)  \n"
		"\n"
		"Parameters\n"
		"----------\n"
		"nstep(integer) : a freq of writing  \n"
		"\n"
		""},
	 { (char *)"TimeEvolution_DisplayOutVlocRloc", _wrap_TimeEvolution_DisplayOutVlocRloc, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"python usage : TimeEvolution_DisplayOutVlocRloc()  \n"
		"\n"
		""},
	 { (char *)"TimeEvolution_WriteLastGPV", _wrap_TimeEvolution_WriteLastGPV, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"python usage : TimeEvolution_WriteLastGPV()  \n"
		"\n"
		""},
	 { (char *)"TimeEvolution_WriteOutGPV", _wrap_TimeEvolution_WriteOutGPV, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"python usage : TimeEvolution_WriteOutGPV(nstep)  \n"
		"\n"
		"Parameters\n"
		"----------\n"
		"nstep(integer) : a freq of writing  \n"
		"\n"
		""},
	 { (char *)"TimeEvolution_ReadIniDof", _wrap_TimeEvolution_ReadIniDof, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"Read header of a DOF file.  \n"
		"\n"
		"python usage : TimeEvolution_ReadIniDof(num=0)  \n"
		"\n"
		"Parameters\n"
		"----------\n"
		"num(integer) : num of file to read  \n"
		"\n"
		""},
	 { (char *)"TimeEvolution_ReadIniVlocRloc", _wrap_TimeEvolution_ReadIniVlocRloc, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"Read header of a VlocRloc file.  \n"
		"\n"
		"python usage : TimeEvolution_ReadIniVlocRloc(num=0)  \n"
		"\n"
		"Parameters\n"
		"----------\n"
		"num(integer) : num of file to read  \n"
		"\n"
		""},
	 { (char *)"TimeEvolution_ReadIniGPV", _wrap_TimeEvolution_ReadIniGPV, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"Read header of a GPV file.  \n"
		"\n"
		"python usage : TimeEvolution_ReadIniGPV(num=0)  \n"
		"\n"
		"Parameters\n"
		"----------\n"
		"num(integer) : num of file to read  \n"
		"\n"
		""},
	 { (char *)"NewtonRaphson_Initialize", _wrap_NewtonRaphson_Initialize, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"initialize Newton Raphson Loop  \n"
		"\n"
		"python usage : NewtonRaphson_Initialize(tol)  \n"
		"\n"
		"Parameters\n"
		"----------\n"
		"tol(double) : tolerance  \n"
		"\n"
		""},
	 { (char *)"NewtonRaphson_CheckConvergence", _wrap_NewtonRaphson_CheckConvergence, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"check if Newton Raphson loop converges  \n"
		"\n"
		"python usage : iconv = NewtonRaphson_CheckConvergence(norm)  \n"
		"\n"
		"Parameters\n"
		"----------\n"
		"norm(double) : value to check  \n"
		"\n"
		"Returns\n"
		"-------\n"
		"iconv (integer) : convergence status  \n"
		"\n"
		"*   iconv = 0 : converges  \n"
		"*   iconv = 1 : unknown  \n"
		"*   iconv = 2 : diverges  \n"
		"\n"
		""},
	 { (char *)"NewtonRaphson_ComputeTimeStep", _wrap_NewtonRaphson_ComputeTimeStep, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"manages time step evolution depending on newton raphson convergence  \n"
		"\n"
		"python usage : itodo = NewtonRaphson_ComputeTimeStep()  \n"
		"\n"
		"Returns\n"
		"-------\n"
		"itodo (integer) : what to do now  \n"
		"\n"
		"*   itodo = 0 : just keep going (time step may have been modified)  \n"
		"*   itodo = 1 : redo time step (time step has been decreased)  \n"
		"*   itodo = 2 : it's hopeless just stop where you are  \n"
		"\n"
		""},
	 { (char *)"NewtonRaphson_SetMinTimeStep", _wrap_NewtonRaphson_SetMinTimeStep, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"Set value of the mininum possible time step.  \n"
		"\n"
		"python usage : NewtonRaphson_SetMinTimeStep(dt)  \n"
		"\n"
		"Parameters\n"
		"----------\n"
		"dt(double) : minimum value of time step  \n"
		"\n"
		" Needed only if adaptive time step feature is used  \n"
		"\n"
		""},
	 { (char *)"NewtonRaphson_SetMaxTimeStep", _wrap_NewtonRaphson_SetMaxTimeStep, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"Set value of the maximum possible time step.  \n"
		"\n"
		"python usage : NewtonRaphson_SetMaxTimeStep(dt)  \n"
		"\n"
		"Parameters\n"
		"----------\n"
		"dt(double) : maximum value of time step  \n"
		"\n"
		" Needed only if adaptive time step feature is used  \n"
		"\n"
		""},
	 { (char *)"NewtonRaphson_SetFinalTime", _wrap_NewtonRaphson_SetFinalTime, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"Set final time.  \n"
		"\n"
		"python usage : NewtonRaphson_SetFinalTime(t_final)  \n"
		"\n"
		"Parameters\n"
		"----------\n"
		"t_final(double) : final time  \n"
		"\n"
		""},
	 { (char *)"NewtonRaphson_SetMaxIter", _wrap_NewtonRaphson_SetMaxIter, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"Max number of iterations - default is 50.  \n"
		"\n"
		"python usage : NewtonRaphson_SetMaxIter(max_iter)  \n"
		"\n"
		"Parameters\n"
		"----------\n"
		"max_iter(integer) :  \n"
		"\n"
		""},
	 { (char *)"NewtonRaphson_SetGoodIter", _wrap_NewtonRaphson_SetGoodIter, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"Set the max number of iterations for good convergence - default is 10.  \n"
		"\n"
		"python usage : NewtonRaphson_SetGoodIter(good_iter)  \n"
		"\n"
		"Parameters\n"
		"----------\n"
		"good_iter(integer) :  \n"
		"\n"
		""},
	 { (char *)"NewtonRaphson_SetBadIter", _wrap_NewtonRaphson_SetBadIter, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"Set the max number of iterations for bad convergence - default is 30.  \n"
		"\n"
		"python usage : NewtonRaphson_SetBadIter(bad_iter)  \n"
		"\n"
		"Parameters\n"
		"----------\n"
		"bad_iter(integer) :  \n"
		"\n"
		""},
	 { (char *)"NewtonRaphson_SetIncPatience", _wrap_NewtonRaphson_SetIncPatience, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"Set the number of increments to adapt the time step when successive good\n"
		"convergence (increase time step) or bad convergence (decrease time step) -\n"
		"default is 3.  \n"
		"\n"
		"python usage : NewtonRaphson_SetIncPatience(patience)  \n"
		"\n"
		"Parameters\n"
		"----------\n"
		"patience(integer) :  \n"
		"\n"
		""},
	 { (char *)"overall_SelectProxTactors", _wrap_overall_SelectProxTactors, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"Prepare contact detection.  \n"
		"\n"
		"python usage : overall_SelectProxTactors(Nstep_rough_seek)  \n"
		"\n"
		"Parameters\n"
		"----------\n"
		"Nstep_rough_seek(integer) : periodicity of rough detection  \n"
		"\n"
		""},
	 { (char *)"overall_DisplayProxTactors", _wrap_overall_DisplayProxTactors, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"python usage : overall_DisplayProxTactors()  \n"
		"\n"
		""},
	 { (char *)"overall_DIME", _wrap_overall_DIME, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"set space dimension and in 2D the modelling assumption  \n"
		"\n"
		"python usage : overall_DIME(idim, imod)  \n"
		"\n"
		"Parameters\n"
		"----------\n"
		"idim(integer) : dimension (2 or 3)  \n"
		"imod(integer) : kind of model (2D only)  \n"
		"\n"
		"*   imod = 1 => plane strain  \n"
		"*   imod = 2 => plane stress  \n"
		"*   imod = 3 => axisymmetric  \n"
		"\n"
		""},
	 { (char *)"Integrator_InitTheta", _wrap_Integrator_InitTheta, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"python usage : Integrator_InitTheta(theta)  \n"
		"\n"
		"Parameters\n"
		"----------\n"
		"theta(double) : value of theta in integrator  \n"
		"\n"
		""},
	 { (char *)"Integrator_InitQS", _wrap_Integrator_InitQS, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"python usage : Integrator_InitQS()  \n"
		"\n"
		""},
	 { (char *)"Integrator_InitCrankNickolson", _wrap_Integrator_InitCrankNickolson, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"python usage : Integrator_InitCrankNickolson(theta)  \n"
		"\n"
		"Parameters\n"
		"----------\n"
		"theta(double) : value of theta in integrator  \n"
		"\n"
		""},
	 { (char *)"Integrator_InitGear", _wrap_Integrator_InitGear, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"python usage : Integrator_InitGear()  \n"
		"\n"
		""},
	 { (char *)"Integrator_InitVerlet", _wrap_Integrator_InitVerlet, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"python usage : Integrator_InitVerlet()  \n"
		"\n"
		""},
	 { (char *)"Integrator_InitBeta2", _wrap_Integrator_InitBeta2, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"python usage : Integrator_InitBeta2(value)  \n"
		"\n"
		"Parameters\n"
		"----------\n"
		"value(double) : numeric diffusion ([0.5,1] and 0.5 is conservative)  \n"
		"\n"
		""},
	 { (char *)"Integrator_SetContactDetectionConfiguration", _wrap_Integrator_SetContactDetectionConfiguration, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"set the parameters necessary to define the contact detection configuration\n"
		"(default: 1-theta, 0.)  \n"
		"\n"
		"python usage : Integrator_SetContactDetectionConfiguration(alpha_b,alpha_e)  \n"
		"\n"
		"Parameters\n"
		"----------\n"
		"alpha_b(double) : value of the V_begin weight  \n"
		"alpha_e(double) : value of the V weight  \n"
		"\n"
		""},
	 { (char *)"overall_RequireXxlComputation", _wrap_overall_RequireXxlComputation, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"python usage : overall_RequireXxlComputation()  \n"
		"\n"
		""},
	 { (char *)"overall_UpdatePostData", _wrap_overall_UpdatePostData, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"python usage : overall_UpdatePostData()  \n"
		"\n"
		""},
	 { (char *)"overall_InitPostData", _wrap_overall_InitPostData, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"python usage : overall_InitPostData(ifirst, ilast)  \n"
		"\n"
		"Parameters\n"
		"----------\n"
		"ifirst(integer) :  \n"
		"ilast(integer) :  \n"
		"\n"
		""},
	 { (char *)"overall_SetWorkingDirectory", _wrap_overall_SetWorkingDirectory, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"python usage : overall_SetWorkingDirectory(path)  \n"
		"\n"
		"Parameters\n"
		"----------\n"
		"path(string) : set path to DATBOX directory  \n"
		"\n"
		""},
	 { (char *)"overall_GetWorkingDirectory", _wrap_overall_GetWorkingDirectory, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"python usage : path = overall_GetWorkingDirectory()  \n"
		"\n"
		"Returns\n"
		"-------\n"
		"path (string) : working directory  \n"
		"\n"
		""},
	 { (char *)"overall_WriteDrivenDof", _wrap_overall_WriteDrivenDof, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"python usage : overall_WriteDrivenDof()  \n"
		"\n"
		""},
	 { (char *)"overall_WriteOutDisplayFile", _wrap_overall_WriteOutDisplayFile, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"python usage : overall_WriteOutDisplayFile(freq_display)  \n"
		"\n"
		"Parameters\n"
		"----------\n"
		"freq_display(integer) : periodicity of display write  \n"
		"\n"
		""},
	 { (char *)"TimeEvolution_ReadIniMpValues", _wrap_TimeEvolution_ReadIniMpValues, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"Read header of a MP_VALUES file.  \n"
		"\n"
		"python usage : TimeEvolution_ReadIniMpValues(num=0)  \n"
		"\n"
		"Parameters\n"
		"----------\n"
		"num(integer) : num of file to read  \n"
		"\n"
		""},
	 { (char *)"TimeEvolution_WriteOutMpValues", _wrap_TimeEvolution_WriteOutMpValues, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"python usage : TimeEvolution_WriteOutMpValues(nstep)  \n"
		"\n"
		"Parameters\n"
		"----------\n"
		"nstep(integer) : a freq of writing  \n"
		"\n"
		""},
	 { (char *)"TimeEvolution_WriteLastMpValues", _wrap_TimeEvolution_WriteLastMpValues, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"python usage : TimeEvolution_WriteLastMpValues()  \n"
		"\n"
		""},
	 { (char *)"overall_WriteBodies", _wrap_overall_WriteBodies, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"python usage : overall_WriteBodies()  \n"
		"\n"
		""},
	 { (char *)"overall_CleanOutBodies", _wrap_overall_CleanOutBodies, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"python usage : overall_CleanOutBodies()  \n"
		"\n"
		""},
	 { (char *)"overall_RebuildInBodies", _wrap_overall_RebuildInBodies, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"python usage : overall_RebuildInBodies()  \n"
		"\n"
		""},
	 { (char *)"overall_CleanWriteOutFlags", _wrap_overall_CleanWriteOutFlags, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"python usage : overall_CleanWriteOutFlags()  \n"
		"\n"
		""},
	 { (char *)"overall_UseExperimentalDev", _wrap_overall_UseExperimentalDev, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"Activate some unstable devs.  \n"
		"\n"
		"python usage : overall_UseExperimentalDev()  \n"
		"\n"
		""},
	 { (char *)"overall_UseExternalFem", _wrap_overall_UseExternalFem, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"Allow to use the externalFem library instead of lmgc90 Fem lib.  \n"
		"\n"
		"python usage : overall_UseExternalFem()  \n"
		"\n"
		""},
	 { (char *)"overall_GetMaxInternalTact", _wrap_overall_GetMaxInternalTact, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"get max of internal for tact  \n"
		"\n"
		"python usage : nb = overall_GetMaxInternalTact()  \n"
		"\n"
		"Returns\n"
		"-------\n"
		"nb (integer) : maximum number of internal for interactions  \n"
		"\n"
		""},
	 { (char *)"tact_behav_OpenBehavContainer", _wrap_tact_behav_OpenBehavContainer, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"open the container (access as a linked list) in order to add/remove objects  \n"
		"\n"
		"python usage : tact_behav_OpenBehavContainer()  \n"
		"\n"
		""},
	 { (char *)"tact_behav_CloseBehavContainer", _wrap_tact_behav_CloseBehavContainer, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"close the container (access as an array)  \n"
		"\n"
		"python usage : tact_behav_TactBehavContainer()  \n"
		"\n"
		""},
	 { (char *)"tact_behav_OpenSeeContainer", _wrap_tact_behav_OpenSeeContainer, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"open the container (access as a linked list) in order to add/remove objects  \n"
		"\n"
		"python usage : tact_behav_OpenSeeContainer()  \n"
		"\n"
		""},
	 { (char *)"tact_behav_CloseSeeContainer", _wrap_tact_behav_CloseSeeContainer, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"close the container (access as an array)  \n"
		"\n"
		"python usage : tact_behav_CloseSeeContainer()  \n"
		"\n"
		""},
	 { (char *)"tact_behav_FillContainersFromFile", _wrap_tact_behav_FillContainersFromFile, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"read DATBOX/TACT_BEHAV.DAT and fill the containers (see and tact)  \n"
		"\n"
		"python usage : tact_behav_FillContainersFromFile()  \n"
		"\n"
		""},
	 { (char *)"tact_behav_AddToSeeContainer", _wrap_tact_behav_AddToSeeContainer, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"add a see table to the container  \n"
		"\n"
		"python usage :\n"
		"tact_behav_AddToSeeContainer(cdbdy,cdtac,cdcol,behav,anbdy,antac,ancol,alert,global_alert)  \n"
		"\n"
		""},
	 { (char *)"tact_behav_ReadBehaviours", _wrap_tact_behav_ReadBehaviours, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"open + fill + close  \n"
		"\n"
		"python usage : tact_behav_ReadBehaviours()  \n"
		"\n"
		""},
	 { (char *)"tact_behav_CollectOutTactBehav", _wrap_tact_behav_CollectOutTactBehav, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"old fashion read from OUTBOX/TACT_BEHAV.OUT  \n"
		"\n"
		"python usage : tact_behav_CollectOutTactBehav()  \n"
		"\n"
		""},
	 { (char *)"tact_behav_WriteBehaviours", _wrap_tact_behav_WriteBehaviours, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"write (replace) tact and see to OUTBOX/TACT_BEHAV.OUT  \n"
		"\n"
		"python usage : tact_behav_WriteBehaviours()  \n"
		"\n"
		""},
	 { (char *)"tact_behav_AppendOutTactBehav", _wrap_tact_behav_AppendOutTactBehav, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"write (append) tact and see to OUTBOX/TACT_BEHAV.OUT  \n"
		"\n"
		"python usage : tact_behav_AppendOutTactBehav()  \n"
		"\n"
		""},
	 { (char *)"tact_behav_RebuildInTactBehav", _wrap_tact_behav_RebuildInTactBehav, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"write (replace) tact and see to DATBOX/TACT_BEHAV.DAT  \n"
		"\n"
		"python usage : tact_behav_RebuildInTactBehav()  \n"
		"\n"
		""},
	 { (char *)"tact_behav_CleanOutTactBehav", _wrap_tact_behav_CleanOutTactBehav, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"erase OUTBOX/TACT_BEHAV.OUT  \n"
		"\n"
		"python usage : tact_behav_CleanOutTactBehav()  \n"
		"\n"
		""},
	 { (char *)"tact_behav_GetNbTactBehav", _wrap_tact_behav_GetNbTactBehav, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"get the number of tact laws  \n"
		"\n"
		"python usage : nb_tact_behav = tact_behav_GetNbTactBehav()  \n"
		"\n"
		"Parameters\n"
		"----------\n"
		"nb_tact_behav(integer) : number of contact behaviour in lmgc90  \n"
		"\n"
		""},
	 { (char *)"tact_behav_GetTactBehav", _wrap_tact_behav_GetTactBehav, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"get information related to a given tact law  \n"
		"\n"
		"python usage : [lawty, behav, param] = tact_behav_GetTactBehav(i_tb)  \n"
		"\n"
		"Parameters\n"
		"----------\n"
		"i_tb(integer) : rank (in the contact laws list) of the desired tact_behav  \n"
		"lawty(string) : type of the contact law  \n"
		"behav(string) : name of the contact law  \n"
		"param(real vector) : parameters of the law  \n"
		"\n"
		""},
	 { (char *)"tact_behav_GetInternalComment", _wrap_tact_behav_GetInternalComment, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"Get internal variables comment of a given interaction law.  \n"
		"\n"
		"python usage : comment = tact_behav_GetInternalComment(ilaw)  \n"
		"\n"
		"Parameters\n"
		"----------\n"
		"ilaw(integer) : rank of the interaction law  \n"
		"\n"
		"Returns\n"
		"-------\n"
		"comment (char[100]) : the string to get  \n"
		"\n"
		""},
	 { (char *)"tact_behav_SetCZMwithInitialFriction", _wrap_tact_behav_SetCZMwithInitialFriction, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"define the way friction evolve with damage: =0. constant value, (1. - beta)**pow\n"
		"otherwize  \n"
		"\n"
		"python usage : tact_behav_SetCZMwithInitialFriction(pow)  \n"
		"\n"
		"Parameters\n"
		"----------\n"
		"pow(real) : parameter of power law evlution for friction\n"
		"    mu(beta)=mu_s*(1-beta)**pow  \n"
		"\n"
		""},
	 { (char *)"tact_behav_initFrictionEvolution", _wrap_tact_behav_initFrictionEvolution, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"[experimental] read a friction time evolution map  \n"
		"\n"
		"python usage : tact_behav_initFrictionEvolution()  \n"
		"\n"
		""},
	 { (char *)"tact_behav_setRandomFriction", _wrap_tact_behav_setRandomFriction, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"Active variation of local friction.  \n"
		"\n"
		"python usage : tact_behav_setRandomFriction(r8)  \n"
		"\n"
		""},
	 { (char *)"tact_behav_GetTactBehavRankFromName", _wrap_tact_behav_GetTactBehavRankFromName, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"get the rank (in the list of tact laws) of a tact behav law  \n"
		"\n"
		"python usage : rank = tact_behav_GetTactBehavRankFromName(c5)  \n"
		"\n"
		""},
	 { (char *)"tact_behav_GetParamRankFromName", _wrap_tact_behav_GetParamRankFromName, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"get the rank of a param for a given tact behav law  \n"
		"\n"
		"python usage : rank = tact_behav_GetParamRankFromName(i_tact,c5)  \n"
		"\n"
		""},
	 { (char *)"tact_behav_GetParam", _wrap_tact_behav_GetParam, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"get the value of a parameter  \n"
		"\n"
		"python usage : param = tact_behav_GetParam(i_tact,i_param)  \n"
		"\n"
		"Parameters\n"
		"----------\n"
		"i_tact(integer) : rank of the interaction law  \n"
		"i_param(integer) : rank of the parameter  \n"
		"param(real ) : value of the parameter  \n"
		"\n"
		""},
	 { (char *)"tact_behav_SetParam", _wrap_tact_behav_SetParam, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"set the value ...  \n"
		"\n"
		"python usage : tact_behav_SetParam(i_tact, i_param, param)  \n"
		"\n"
		"Parameters\n"
		"----------\n"
		"i_tact(integer) : rank of the interaction law  \n"
		"i_param(integer) : rank of the parameter  \n"
		"param(real ) : value of the parameter  \n"
		"\n"
		""},
	 { (char *)"tact_behav_GetLawInternalComment", _wrap_tact_behav_GetLawInternalComment, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		""},
	 { (char *)"tact_behav_SetRNcap", _wrap_tact_behav_SetRNcap, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"set a maximal compression value  \n"
		"\n"
		"python usage : tact_behav_SetRNcap(param)  \n"
		"\n"
		""},
	 { (char *)"tact_behav_SetDilatancyParameters", _wrap_tact_behav_SetDilatancyParameters, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"set dilatancy parameters  \n"
		"\n"
		"python usage : tact_behav_SetDilatancyParameters(fric,height)  \n"
		"\n"
		""},
	 { (char *)"tact_behav_SetPressureParameters", _wrap_tact_behav_SetPressureParameters, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"set pressure parameters  \n"
		"\n"
		"Parameters\n"
		"----------\n"
		"ibehav(integer) : rank of the tact behav  \n"
		"flag(integer) : kind of build-in pressure law (0 no pressure, 1: time dependent,\n"
		"    2: linearly progressive since crack starts, 3: exponentially progressive\n"
		"    since crack starts, 4: external)  \n"
		"params(double array) : the new value of the params [p0,dp,tau,alpha]  \n"
		"\n"
		"python usage : tact_behav_SetPressureParameters(ibehav,flag,params)  \n"
		"\n"
		""},
	 { (char *)"tact_behav_CleanMemory", _wrap_tact_behav_CleanMemory, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"Free all memory allocated within tact_behav module.  \n"
		"\n"
		"python usage : tact_behav_CleanMemory()  \n"
		"\n"
		""},
	 { (char *)"timer_InitializeTimers", _wrap_timer_InitializeTimers, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"Set all timers to 0.  \n"
		"\n"
		"python usage : timer_InitializeTimers()  \n"
		"\n"
		""},
	 { (char *)"timer_WriteOutTimers", _wrap_timer_WriteOutTimers, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"write the cumulated times of all the timers  \n"
		"\n"
		"python usage : timer_WriteOutTimers()  \n"
		"\n"
		""},
	 { (char *)"timer_GetNewTimer", _wrap_timer_GetNewTimer, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"create a new timer  \n"
		"\n"
		"python usage : id = timer_GetNewTimer(name)  \n"
		"\n"
		"Parameters\n"
		"----------\n"
		"name(string) : name of new timer  \n"
		"\n"
		"Returns\n"
		"-------\n"
		"id (integer) : id of the timer created  \n"
		"\n"
		""},
	 { (char *)"timer_StartTimer", _wrap_timer_StartTimer, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"start a given timer  \n"
		"\n"
		"python usage : timer_StartTimer(timer_id)  \n"
		"\n"
		"Parameters\n"
		"----------\n"
		"timer_id(integer) : id of the timer to start  \n"
		"\n"
		""},
	 { (char *)"timer_StopTimer", _wrap_timer_StopTimer, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"stop a given timer, and add the elapsed time since start to the time  \n"
		"\n"
		"python usage : timer_StopTimer(timer_id)  \n"
		"\n"
		"Parameters\n"
		"----------\n"
		"timer_id(integer) : id of the timer to stop  \n"
		"\n"
		""},
	 { (char *)"timer_ClearAll", _wrap_timer_ClearAll, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"clear all timers (internal, external and user)  \n"
		"\n"
		"python usage : timer_ClearAll()  \n"
		"\n"
		""},
	 { (char *)"utilities_logMes", _wrap_utilities_logMes, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"ask to write a message  \n"
		"\n"
		"If the message is too long (more than 256 characters) it will be truncated  \n"
		"\n"
		"python usage : utilities_logMes(message)  \n"
		"\n"
		"Parameters\n"
		"----------\n"
		"message(string) : log message to add  \n"
		"length(integer) : length of the message string  \n"
		"\n"
		""},
	 { (char *)"utilities_DisableLogMes", _wrap_utilities_DisableLogMes, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"disable printing of messages  \n"
		"\n"
		"python usage : utilities_DisableLogMes()  \n"
		"\n"
		""},
	 { (char *)"utilities_EnableLogMes", _wrap_utilities_EnableLogMes, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"enable priting of messages  \n"
		"\n"
		"python usage : utilities_EnableLogMes()  \n"
		"\n"
		""},
	 { (char *)"utilities_setIoUnitLimits", _wrap_utilities_setIoUnitLimits, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"set the interval of unit numbers lmgc90 can use to open file  \n"
		"\n"
		""},
	 { (char *)"utilities_setStopMode", _wrap_utilities_setStopMode, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"Decide to stop or store a message in case of fatal error.  \n"
		"\n"
		"python usage : utilities_setStopMode()  \n"
		"\n"
		""},
	 { (char *)"utilities_resetFatal", _wrap_utilities_resetFatal, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"Clean fatal error state.  \n"
		"\n"
		"This function is not intended to be used in python but by swig to throw an\n"
		"excpetion  \n"
		"\n"
		""},
	 { (char *)"utilities_checkFatal", _wrap_utilities_checkFatal, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		""},
	 { (char *)"utilities_OpenFileStandardOutput", _wrap_utilities_OpenFileStandardOutput, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"Select the file for standard and errors outputs.  \n"
		"\n"
		"If the filename is too long (more than 256 characters) it will be truncated  \n"
		"\n"
		"python usage : utilities_OpenFileStandardOutput(filename)  \n"
		"\n"
		"Parameters\n"
		"----------\n"
		"filename(string) : the name of file  \n"
		"length(integer) : length the name of the file  \n"
		"\n"
		""},
	 { (char *)"utilities_CloseFileStandardOutput", _wrap_utilities_CloseFileStandardOutput, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"Close the file for standard and errors outputs.  \n"
		"\n"
		"python usage : utilities_CloseFileStandardOutput()  \n"
		"\n"
		""},
	 { (char *)"utilities_InitRandomSeed", _wrap_utilities_InitRandomSeed, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"Re-initialize the seed of the build-in random function.  \n"
		"\n"
		"python usage : utilities_InitRandomSeed([seed])  \n"
		"\n"
		"Parameters\n"
		"----------\n"
		"seed(integer array) : an optional desired input seed  \n"
		"\n"
		""},
	 { (char *)"utilities_Finalize", _wrap_utilities_Finalize, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"End of simulation operations.  \n"
		"\n"
		"Only close all possibly opened units by the program.  \n"
		"\n"
		"python usage : utilities_Finalize()  \n"
		"\n"
		""},
	 { (char *)"a_EF_InterpolateField", _wrap_a_EF_InterpolateField, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		""},
	 { (char *)"a_EF_ComputeCenter", _wrap_a_EF_ComputeCenter, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"Compute the geometric center of an element.  \n"
		"\n"
		"python usage : center = a_EF_ComputeCenter(coor)  \n"
		"\n"
		"Parameters\n"
		"----------\n"
		"coor(double array) : coordinates the nodes of the element  \n"
		"\n"
		"Returns\n"
		"-------\n"
		"center (double array) : computed center of the element  \n"
		"\n"
		""},
	 { (char *)"MecaPolyg_CentralKernel", _wrap_MecaPolyg_CentralKernel, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"Compute the central kernel of an input surface (which may be composed of several\n"
		"polygons)  \n"
		"\n"
		"python usage : ck_pts = MecaPolyg_CentralKernel(points, sizes)  \n"
		"\n"
		"Parameters\n"
		"----------\n"
		"points(double array) : coordinates of the points of the surface (2D)  \n"
		"sizes(integer array) : number of vertices of each polygons of the surface  \n"
		"\n"
		"Returns\n"
		"-------\n"
		"ck_pts (double array) : coordinates of the points of the central kernel  \n"
		"\n"
		""},
	 { (char *)"MecaPolyg_StressField", _wrap_MecaPolyg_StressField, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		""},
	 { (char *)"parameters_getPhysicTypeId", _wrap_parameters_getPhysicTypeId, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"Get the id a body type from its name.  \n"
		"\n"
		"usage i_param = parameters_getPhysicTypeId(bodyName)  \n"
		"\n"
		"Parameters\n"
		"----------\n"
		"bodyName(string): body type name  \n"
		"\n"
		"Returns\n"
		"-------\n"
		"i_param (int) : body type parameter  \n"
		"\n"
		""},
	 { (char *)"parameters_getPhysicTypeNames", _wrap_parameters_getPhysicTypeNames, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"Get the list of body types.  \n"
		"\n"
		"usage bodyNames = parameters_getPhysicTypeName()  \n"
		"\n"
		"Returns\n"
		"-------\n"
		"bodyName (string array) : body type names  \n"
		"\n"
		""},
	 { (char *)"parameters_getBodyModelId", _wrap_parameters_getBodyModelId, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"Get the id a body model from its name.  \n"
		"\n"
		"usage i_param = parameters_getBodyModelId(bodyName)  \n"
		"\n"
		"Parameters\n"
		"----------\n"
		"bodyName(string): body model name  \n"
		"\n"
		"Returns\n"
		"-------\n"
		"i_param (int) : body model parameter  \n"
		"\n"
		""},
	 { (char *)"parameters_getBodyModelNames", _wrap_parameters_getBodyModelNames, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"Get the list of body types.  \n"
		"\n"
		"usage bodyNames = parameters_getBodyModelName()  \n"
		"\n"
		"Returns\n"
		"-------\n"
		"bodyName (string array) : body model names  \n"
		"\n"
		""},
	 { (char *)"parameters_getContactorId", _wrap_parameters_getContactorId, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"Get the id a contactor from its name.  \n"
		"\n"
		"usage i_param = parameters_getContactorId(bodyName)  \n"
		"\n"
		"Parameters\n"
		"----------\n"
		"bodyName(string): contactor name  \n"
		"\n"
		"Returns\n"
		"-------\n"
		"i_param (int) : contactor parameter  \n"
		"\n"
		""},
	 { (char *)"parameters_getContactorNames", _wrap_parameters_getContactorNames, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"Get the list of contactors.  \n"
		"\n"
		"usage bodyNames = parameters_getContactorName()  \n"
		"\n"
		"Returns\n"
		"-------\n"
		"bodyName (string array) : contactor names  \n"
		"\n"
		""},
	 { (char *)"parameters_getInteractionId", _wrap_parameters_getInteractionId, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"Get the id a interaction from its name.  \n"
		"\n"
		"usage i_param = parameters_getInteractionId(bodyName)  \n"
		"\n"
		"Parameters\n"
		"----------\n"
		"bodyName(string): interaction name  \n"
		"\n"
		"Returns\n"
		"-------\n"
		"i_param (int) : interaction parameter  \n"
		"\n"
		""},
	 { (char *)"parameters_getInteractionNames", _wrap_parameters_getInteractionNames, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"Get the list of interactions.  \n"
		"\n"
		"usage bodyNames = parameters_getInteractionName()  \n"
		"\n"
		"Returns\n"
		"-------\n"
		"bodyName (string array) : interaction names  \n"
		"\n"
		""},
	 { (char *)"parameters_getMatrixStorageId", _wrap_parameters_getMatrixStorageId, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"Get the id a matrix storage from its name.  \n"
		"\n"
		"usage i_param = parameters_getMatrixStorageId(bodyName)  \n"
		"\n"
		"Parameters\n"
		"----------\n"
		"bodyName(string): matrix storage name  \n"
		"\n"
		"Returns\n"
		"-------\n"
		"i_param (int) : matrix storage parameter  \n"
		"\n"
		""},
	 { (char *)"parameters_getMatrixStorageNames", _wrap_parameters_getMatrixStorageNames, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"Get the list of matrix storages.  \n"
		"\n"
		"usage bodyNames = parameters_getMatrixStorageName()  \n"
		"\n"
		"Returns\n"
		"-------\n"
		"bodyName (string array) : matrix storage names  \n"
		"\n"
		""},
	 { (char *)"parameters_getMatrixShapeId", _wrap_parameters_getMatrixShapeId, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"Get the id a matrix shape from its name.  \n"
		"\n"
		"usage i_param = parameters_getMatrixShapeId(bodyName)  \n"
		"\n"
		"Parameters\n"
		"----------\n"
		"bodyName(string): matrix shape name  \n"
		"\n"
		"Returns\n"
		"-------\n"
		"i_param (int) : matrix shape parameter  \n"
		"\n"
		""},
	 { (char *)"parameters_getMatrixShapeNames", _wrap_parameters_getMatrixShapeNames, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"Get the list of matrix shapes.  \n"
		"\n"
		"usage bodyNames = parameters_getMatrixShapeName()  \n"
		"\n"
		"Returns\n"
		"-------\n"
		"bodyName (string array) : matrix shape names  \n"
		"\n"
		""},
	 { (char *)"parameters_getGeneralizedCoordinatesId", _wrap_parameters_getGeneralizedCoordinatesId, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"Get the id a generalized coordinates from its name.  \n"
		"\n"
		"usage i_param = parameters_getGeneralizedCoordinatesId(bodyName)  \n"
		"\n"
		"Parameters\n"
		"----------\n"
		"bodyName(string): generalized coordinates name  \n"
		"\n"
		"Returns\n"
		"-------\n"
		"i_param (int) : generalized coordinates parameter  \n"
		"\n"
		""},
	 { (char *)"parameters_getGeneralizedCoordinatesNames", _wrap_parameters_getGeneralizedCoordinatesNames, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"Get the list of generalized coordinatess.  \n"
		"\n"
		"usage bodyNames = parameters_getGeneralizedCoordinatesName()  \n"
		"\n"
		"Returns\n"
		"-------\n"
		"bodyName (string array) : generalized coordinates names  \n"
		"\n"
		""},
	 { (char *)"parameters_getSurfaceEnergyStatusId", _wrap_parameters_getSurfaceEnergyStatusId, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"Get the id a surface energy status from its name.  \n"
		"\n"
		"usage i_param = parameters_getSurfaceEnergyStatusId(bodyName)  \n"
		"\n"
		"Parameters\n"
		"----------\n"
		"bodyName(string): surface energy status name  \n"
		"\n"
		"Returns\n"
		"-------\n"
		"i_param (int) : surface energy status parameter  \n"
		"\n"
		""},
	 { (char *)"parameters_getSurfaceEnergyStatusNames", _wrap_parameters_getSurfaceEnergyStatusNames, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"Get the list of surface energy statuss.  \n"
		"\n"
		"usage bodyNames = parameters_getSurfaceEnergyStatusName()  \n"
		"\n"
		"Returns\n"
		"-------\n"
		"bodyName (string array) : surface energy status names  \n"
		"\n"
		""},
	 { (char *)"parameters_getInterLawId", _wrap_parameters_getInterLawId, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"Get the id a inter law from its name.  \n"
		"\n"
		"usage i_param = parameters_getInterLawId(bodyName)  \n"
		"\n"
		"Parameters\n"
		"----------\n"
		"bodyName(string): inter law name  \n"
		"\n"
		"Returns\n"
		"-------\n"
		"i_param (int) : inter law parameter  \n"
		"\n"
		""},
	 { (char *)"parameters_getInterLawNames", _wrap_parameters_getInterLawNames, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"Get the list of inter laws.  \n"
		"\n"
		"usage bodyNames = parameters_getInterLawName()  \n"
		"\n"
		"Returns\n"
		"-------\n"
		"bodyName (string array) : inter law names  \n"
		"\n"
		""},
	 { (char *)"parameters_getIntegratorId", _wrap_parameters_getIntegratorId, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"Get the id a integrator from its name.  \n"
		"\n"
		"usage i_param = parameters_getIntegratorId(bodyName)  \n"
		"\n"
		"Parameters\n"
		"----------\n"
		"bodyName(string): integrator name  \n"
		"\n"
		"Returns\n"
		"-------\n"
		"i_param (int) : integrator parameter  \n"
		"\n"
		""},
	 { (char *)"parameters_getIntegratorNames", _wrap_parameters_getIntegratorNames, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"Get the list of integrators.  \n"
		"\n"
		"usage bodyNames = parameters_getIntegratorName()  \n"
		"\n"
		"Returns\n"
		"-------\n"
		"bodyName (string array) : integrator names  \n"
		"\n"
		""},
	 { (char *)"parameters_getNodeId", _wrap_parameters_getNodeId, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"Get the id a node from its name.  \n"
		"\n"
		"usage i_param = parameters_getNodeId(bodyName)  \n"
		"\n"
		"Parameters\n"
		"----------\n"
		"bodyName(string): node name  \n"
		"\n"
		"Returns\n"
		"-------\n"
		"i_param (int) : node parameter  \n"
		"\n"
		""},
	 { (char *)"parameters_getNodeNames", _wrap_parameters_getNodeNames, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"Get the list of nodes.  \n"
		"\n"
		"usage bodyNames = parameters_getNodeName()  \n"
		"\n"
		"Returns\n"
		"-------\n"
		"bodyName (string array) : node names  \n"
		"\n"
		""},
	 { (char *)"parameters_getDimeModeId", _wrap_parameters_getDimeModeId, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"Get the id a dime mode from its name.  \n"
		"\n"
		"usage i_param = parameters_getDimeModeId(bodyName)  \n"
		"\n"
		"Parameters\n"
		"----------\n"
		"bodyName(string): dime mode name  \n"
		"\n"
		"Returns\n"
		"-------\n"
		"i_param (int) : dime mode parameter  \n"
		"\n"
		""},
	 { (char *)"parameters_getDimeModeNames", _wrap_parameters_getDimeModeNames, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"Get the list of dime modes.  \n"
		"\n"
		"usage bodyNames = parameters_getDimeModeName()  \n"
		"\n"
		"Returns\n"
		"-------\n"
		"bodyName (string array) : dime mode names  \n"
		"\n"
		""},
	 { (char *)"parameters_getBodyVectorId", _wrap_parameters_getBodyVectorId, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"Get the id a body vector from its name.  \n"
		"\n"
		"usage i_param = parameters_getBodyVectorId(bodyName)  \n"
		"\n"
		"Parameters\n"
		"----------\n"
		"bodyName(string): body vector name  \n"
		"\n"
		"Returns\n"
		"-------\n"
		"i_param (int) : body vector parameter  \n"
		"\n"
		""},
	 { (char *)"parameters_getBodyVectorNames", _wrap_parameters_getBodyVectorNames, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"Get the list of body vectors.  \n"
		"\n"
		"usage bodyNames = parameters_getBodyVectorName()  \n"
		"\n"
		"Returns\n"
		"-------\n"
		"bodyName (string array) : body vector names  \n"
		"\n"
		""},
	 { (char *)"parameters_getContactStatusId", _wrap_parameters_getContactStatusId, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"Get the id a contact status from its name.  \n"
		"\n"
		"usage i_param = parameters_getContactStatusId(bodyName)  \n"
		"\n"
		"Parameters\n"
		"----------\n"
		"bodyName(string): contact status name  \n"
		"\n"
		"Returns\n"
		"-------\n"
		"i_param (int) : contact status parameter  \n"
		"\n"
		""},
	 { (char *)"parameters_getContactStatusNames", _wrap_parameters_getContactStatusNames, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"Get the list of contact statuss.  \n"
		"\n"
		"usage bodyNames = parameters_getContactStatusName()  \n"
		"\n"
		"Returns\n"
		"-------\n"
		"bodyName (string array) : contact status names  \n"
		"\n"
		""},
	 { (char *)"parameters_checkAll", _wrap_parameters_checkAll, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"Check the consistency of all parameters id and name.  \n"
		"\n"
		"usage parameters_checkAll()  \n"
		"\n"
		""},
	 { (char *)"CLALp_SelectProxTactors", _wrap_CLALp_SelectProxTactors, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"contact detection between CLxxx and ALpxx tactors  \n"
		"\n"
		"First recup coordinate prediction, then proceed to a box selection to found\n"
		"rough contact list and finally compute the final contact list.  \n"
		"If reset not equal to 0, the initialization flag is reset and detection skipped  \n"
		"\n"
		"python usage : CLALp_SelectProxTactors(reset=0, use_external=0)  \n"
		"\n"
		"Parameters\n"
		"----------\n"
		"reset(integer) : if not 0, detection is skipped but the boxes will be computed\n"
		"    anew at next call  \n"
		"use_external(integer) : if not 0, external detection is used  \n"
		"\n"
		""},
	 { (char *)"CLALp_UpdateWear", _wrap_CLALp_UpdateWear, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"python usage : CLALp_UpdateWear()  \n"
		"\n"
		""},
	 { (char *)"CLALp_WriteLastVlocRloc", _wrap_CLALp_WriteLastVlocRloc, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"write last local values of all CLALp contacts  \n"
		"\n"
		"The values written are relative velocity, forces and local frame  \n"
		"\n"
		"python usage : CLALp_WriteLastVlocRloc()  \n"
		"\n"
		""},
	 { (char *)"CLALp_WriteOutVlocRloc", _wrap_CLALp_WriteOutVlocRloc, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"write local values of all CLALp contacts  \n"
		"\n"
		"The values written are relative velocity, forces and local frame  \n"
		"\n"
		"python usage : CLALp_WriteOutVlocRloc()  \n"
		"\n"
		""},
	 { (char *)"CLALp_DisplayOutVlocRloc", _wrap_CLALp_DisplayOutVlocRloc, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"display local values of all CLALp contacts  \n"
		"\n"
		"The values displayed are relative velocity, forces and local frame  \n"
		"\n"
		"python usage : CLALp_DisplayOutVlocRloc()  \n"
		"\n"
		""},
	 { (char *)"CLALp_DisplayProxTactors", _wrap_CLALp_DisplayProxTactors, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"display contacts  \n"
		"\n"
		"python usage : CLALp_DisplayProxTactors()  \n"
		"\n"
		""},
	 { (char *)"CLALp_ReadIniVlocRloc", _wrap_CLALp_ReadIniVlocRloc, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"Read VlocRloc file.  \n"
		"\n"
		"*   If num <= 0 : DATBOX/VlocRloc.INI file is read  \n"
		"*   Else : OUTBOX/VlocRloc.OUT.num is read, num being +the parameter used in\n"
		"    TimeEvolution_ReadIniVlocRloc last call  \n"
		"\n"
		"python usage : CLALp_ReadIniVlocRloc(num=0)  \n"
		"\n"
		"Parameters\n"
		"----------\n"
		"num(integer) : which VlocRloc file to read  \n"
		"\n"
		""},
	 { (char *)"CLALp_SetNonSymmetricDetection", _wrap_CLALp_SetNonSymmetricDetection, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"this function allows non symmetric detection i.e. only one interaction is kept\n"
		"when two bodies with candidate and antagonist contactors see each other  \n"
		"\n"
		"python usage : CLALp_SetNonSymmetricDetection()  \n"
		"\n"
		""},
	 { (char *)"CLALp_Trim", _wrap_CLALp_Trim, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"trim contact (only contact within a line - not with extremities)  \n"
		"\n"
		"python usage : CLALp_Trim()  \n"
		"\n"
		""},
	 { (char *)"CLALp_CleanMemory", _wrap_CLALp_CleanMemory, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"Free all memory allocated within CLALp module.  \n"
		"\n"
		"python usage : CLALp_CleanMemory()  \n"
		"\n"
		""},
	 { (char *)"CLJCx_SelectProxTactors", _wrap_CLJCx_SelectProxTactors, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"contact detection between CLxxx and JCxxx tactors  \n"
		"\n"
		"First recup coordinate prediction, then proceed to a box selection to found\n"
		"rough contact list and finally compute the final contact list.  \n"
		"\n"
		"python usage : CLJCx_SelectProxTactors(reset=0)  \n"
		"\n"
		"Parameters\n"
		"----------\n"
		"reset(integer) : if not 0, detection is skipped but the boxes will be computed\n"
		"    anew at next call  \n"
		"\n"
		""},
	 { (char *)"CLJCx_WriteLastVlocRloc", _wrap_CLJCx_WriteLastVlocRloc, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"write last local values of all CLJCx contacts  \n"
		"\n"
		"The values written are relative velocity, forces and local frame  \n"
		"\n"
		"python usage : CLJCx_WriteLastVlocRloc()  \n"
		"\n"
		""},
	 { (char *)"CLJCx_WriteOutVlocRloc", _wrap_CLJCx_WriteOutVlocRloc, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"write local values of all CLJCx contacts  \n"
		"\n"
		"The values written are relative velocity, forces and local frame  \n"
		"\n"
		"python usage : CLJCx_WriteOutVlocRloc()  \n"
		"\n"
		""},
	 { (char *)"CLJCx_DisplayOutVlocRloc", _wrap_CLJCx_DisplayOutVlocRloc, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"display local values of all CLJCx contacts  \n"
		"\n"
		"The values displayed are relative velocity, forces and local frame  \n"
		"\n"
		"python usage : CLJCx_DisplayOutVlocRloc()  \n"
		"\n"
		""},
	 { (char *)"CLJCx_DisplayProxTactors", _wrap_CLJCx_DisplayProxTactors, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"display contacts  \n"
		"\n"
		"python usage : CLJCx_DisplayProxTactors()  \n"
		"\n"
		""},
	 { (char *)"CLJCx_ReadIniVlocRloc", _wrap_CLJCx_ReadIniVlocRloc, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"Read VlocRloc file.  \n"
		"\n"
		"*   If num <= 0 : DATBOX/VlocRloc.INI file is read  \n"
		"*   Else : OUTBOX/VlocRloc.OUT.num is read, num being +the parameter used in\n"
		"    TimeEvolution_ReadIniVlocRloc last call  \n"
		"\n"
		"usage : CLJCx_ReadIniVlocRloc(num=0)  \n"
		"\n"
		"Parameters\n"
		"----------\n"
		"num(integer) : which VlocRloc file to read  \n"
		"\n"
		""},
	 { (char *)"CLJCx_CleanMemory", _wrap_CLJCx_CleanMemory, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"Free all memory allocated within CLJCx module.  \n"
		"\n"
		"python usage : CLJCx_CleanMemory()  \n"
		"\n"
		""},
	 { (char *)"DKALp_SelectProxTactors", _wrap_DKALp_SelectProxTactors, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"contact detection between DISKx and ALpxx tactors  \n"
		"\n"
		"First recup coordinate prediction, then proceed to a box selection to found\n"
		"rough contact list and finally compute the final contact list.  \n"
		"\n"
		"python usage : DKALp_SelectProxTactors(reset=0)  \n"
		"\n"
		"Parameters\n"
		"----------\n"
		"reset(integer) : if not 0, detection is skipped but the boxes will be computed\n"
		"    anew at next call  \n"
		"\n"
		""},
	 { (char *)"DKALp_WriteLastVlocRloc", _wrap_DKALp_WriteLastVlocRloc, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"write last local values of all DKALp contacts  \n"
		"\n"
		"The values written are relative velocity, forces and local frame  \n"
		"\n"
		"python usage : DKALp_WriteLastVlocRloc()  \n"
		"\n"
		""},
	 { (char *)"DKALp_WriteOutVlocRloc", _wrap_DKALp_WriteOutVlocRloc, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"write local values of all DKALp contacts  \n"
		"\n"
		"The values written are relative velocity, forces and local frame  \n"
		"\n"
		"python usage : DKALp_WriteOutVlocRloc()  \n"
		"\n"
		""},
	 { (char *)"DKALp_DisplayOutVlocRloc", _wrap_DKALp_DisplayOutVlocRloc, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"display local values of all DKALp contacts  \n"
		"\n"
		"The values displayed are relative velocity, forces and local frame  \n"
		"\n"
		"python usage : DKALp_DisplayOutVlocRloc()  \n"
		"\n"
		""},
	 { (char *)"DKALp_DisplayProxTactors", _wrap_DKALp_DisplayProxTactors, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"display contacts  \n"
		"\n"
		"python usage : DKALp_DisplayProxTactors()  \n"
		"\n"
		""},
	 { (char *)"DKALp_ReadIniVlocRloc", _wrap_DKALp_ReadIniVlocRloc, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"Read VlocRloc file.  \n"
		"\n"
		"*   If num <= 0 : DATBOX/VlocRloc.INI file is read  \n"
		"*   Else : OUTBOX/VlocRloc.OUT.num is read, num being +the parameter used in\n"
		"    TimeEvolution_ReadIniVlocRloc last call  \n"
		"\n"
		"python usage : DKALp_ReadIniVlocRloc(num=0)  \n"
		"\n"
		"Parameters\n"
		"----------\n"
		"num(integer) : which VlocRloc file to read  \n"
		"\n"
		""},
	 { (char *)"DKALp_CleanMemory", _wrap_DKALp_CleanMemory, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"Free all memory allocated within DKALp module.  \n"
		"\n"
		"python usage : DKALp_CleanMemory()  \n"
		"\n"
		""},
	 { (char *)"DKDKL_SelectProxTactors", _wrap_DKDKL_SelectProxTactors, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"contact detection between DISKx and DISKL tactors  \n"
		"\n"
		"First recup coordinate prediction, then proceed to a box selection to found\n"
		"rough contact list and finally compute the final contact list.  \n"
		"\n"
		"python usage : DKDKL_SelectProxTactors(reset=0)  \n"
		"\n"
		"Parameters\n"
		"----------\n"
		"reset(integer) : if not 0, detection is skipped but the boxes will be computed\n"
		"    anew at next call  \n"
		"\n"
		""},
	 { (char *)"DKDKL_SmoothForceComputation", _wrap_DKDKL_SmoothForceComputation, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"explicit computation of contact forces  \n"
		"\n"
		"python usage : DKDKL_SmoothForceComputation  \n"
		"\n"
		""},
	 { (char *)"DKDKL_WriteLastVlocRloc", _wrap_DKDKL_WriteLastVlocRloc, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"write last local values of all DKDKL contacts  \n"
		"\n"
		"The values written are relative velocity, forces and local frame  \n"
		"\n"
		"python usage : DKDKL_WriteLastVlocRloc()  \n"
		"\n"
		"The values written are relative velocity, forces and local frame  \n"
		"\n"
		""},
	 { (char *)"DKDKL_WriteOutVlocRloc", _wrap_DKDKL_WriteOutVlocRloc, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"write local values of all DKDKL contacts  \n"
		"\n"
		"The values written are relative velocity, forces and local frame  \n"
		"\n"
		"python usage : DKDKL_WriteOutVlocRloc()  \n"
		"\n"
		""},
	 { (char *)"DKDKL_DisplayOutVlocRloc", _wrap_DKDKL_DisplayOutVlocRloc, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"display local values of all DKDKL contacts  \n"
		"\n"
		"The values displayed are relative velocity, forces and local frame  \n"
		"\n"
		"python usage : DKDKL_DisplayOutVlocRloc()  \n"
		"\n"
		""},
	 { (char *)"DKDKL_DisplayProxTactors", _wrap_DKDKL_DisplayProxTactors, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"display contacts  \n"
		"\n"
		"python usage : DKDKL_DisplayProxTactors()  \n"
		"\n"
		""},
	 { (char *)"DKDKL_ReadIniVlocRloc", _wrap_DKDKL_ReadIniVlocRloc, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"Read VlocRloc file.  \n"
		"\n"
		"*   If num <= 0 : DATBOX/VlocRloc.INI file is read  \n"
		"*   Else : OUTBOX/VlocRloc.OUT.num is read, num being\n"
		"    -   the parameter used in TimeEvolution_ReadIniVlocRloc last call  \n"
		"\n"
		"python usage : DKDKL_ReadIniVlocRloc(num=0)  \n"
		"\n"
		"Parameters\n"
		"----------\n"
		"num(integer) : which VlocRloc file to read  \n"
		"\n"
		""},
	 { (char *)"DKDKL_SetPeriodicCondition", _wrap_DKDKL_SetPeriodicCondition, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"initialize data for simulation using periodic condition  \n"
		"\n"
		"python usage : DKDKL_SetPeriodicCondition(period)  \n"
		"\n"
		"Parameters\n"
		"----------\n"
		"period(double) : value of the period  \n"
		"\n"
		""},
	 { (char *)"DKDKL_CleanMemory", _wrap_DKDKL_CleanMemory, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"Free all memory allocated within DKDKL module.  \n"
		"\n"
		"python usage : DKDKL_CleanMemory()  \n"
		"\n"
		""},
	 { (char *)"DKDKx_SelectProxTactors", _wrap_DKDKx_SelectProxTactors, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"contact detection between CLxxx and JCxxx tactors  \n"
		"\n"
		"First recup coordinate prediction, then proceed to a box selection to found\n"
		"rough contact list and finally compute the final contact list.  \n"
		"\n"
		"python usage : DKDKx_SelectProxTactors(reset=0)  \n"
		"\n"
		"Parameters\n"
		"----------\n"
		"reset(integer) : if not 0, detection is skipped but the boxes will be computed\n"
		"    anew at next call  \n"
		"\n"
		""},
	 { (char *)"DKDKx_SmoothForceComputation", _wrap_DKDKx_SmoothForceComputation, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"explicit computation of contact forces  \n"
		"\n"
		"python usage : DKDKx_SmoothForceComputation()  \n"
		"\n"
		""},
	 { (char *)"DKDKx_UseVaVDetection", _wrap_DKDKx_UseVaVDetection, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"allow to increase the number of contact for a pair cd/an.  \n"
		"\n"
		"python usage : DKDKx_UseVaVDetection(nb)  \n"
		"\n"
		"Parameters\n"
		"----------\n"
		"nb(integer) : number of contact points for a couple (cd,an)  \n"
		"\n"
		""},
	 { (char *)"DKDKx_WriteLastVlocRloc", _wrap_DKDKx_WriteLastVlocRloc, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"write last local values of all DKDKx contacts  \n"
		"\n"
		"The values written are relative velocity, forces and local frame  \n"
		"\n"
		"python usage : DKDKx_WriteLastVlocRloc()  \n"
		"\n"
		""},
	 { (char *)"DKDKx_WriteOutVlocRloc", _wrap_DKDKx_WriteOutVlocRloc, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"write local values of all DKDKx contacts  \n"
		"\n"
		"The values written are relative velocity, forces and local frame  \n"
		"\n"
		"python usage : DKDKx_WriteOutVlocRloc()  \n"
		"\n"
		""},
	 { (char *)"DKDKx_DisplayOutVlocRloc", _wrap_DKDKx_DisplayOutVlocRloc, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"display local values of all DKDKx contacts  \n"
		"\n"
		"The values displayed are relative velocity, forces and local frame  \n"
		"\n"
		"python usage : DKDKx_DisplayOutVlocRloc()  \n"
		"\n"
		""},
	 { (char *)"DKDKx_DisplayProxTactors", _wrap_DKDKx_DisplayProxTactors, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"display contacts  \n"
		"\n"
		"python usage : DKDKx_DisplayProxTactors()  \n"
		"\n"
		""},
	 { (char *)"DKDKx_ReadIniVlocRloc", _wrap_DKDKx_ReadIniVlocRloc, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"Read VlocRloc file.  \n"
		"\n"
		"*   If num <= 0 : DATBOX/VlocRloc.INI file is read  \n"
		"*   Else : OUTBOX/VlocRloc.OUT.num is read, num being\n"
		"    -   the parameter used in TimeEvolution_ReadIniVlocRloc last call  \n"
		"\n"
		"python usage : DKDKx_ReadIniVlocRloc(num=0)  \n"
		"\n"
		"Parameters\n"
		"----------\n"
		"num(integer) : which VlocRloc file to read  \n"
		"\n"
		""},
	 { (char *)"DKDKx_SetPeriodicCondition", _wrap_DKDKx_SetPeriodicCondition, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"initialize data for simulation using periodic condition  \n"
		"\n"
		"python usage : DKDKx_SetPeriodicCondition(period)  \n"
		"\n"
		"Parameters\n"
		"----------\n"
		"period(double) : value of the period  \n"
		"\n"
		""},
	 { (char *)"DKDKx_SetFrictionModel", _wrap_DKDKx_SetFrictionModel, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"initialize data for simulation using evolutive local friction  \n"
		"\n"
		"python usage : DKDKx_SetFrictionModel(cflag)  \n"
		"\n"
		"Parameters\n"
		"----------\n"
		"cflag(char) : model to use ('min', 'max' or 'ave')  \n"
		"\n"
		""},
	 { (char *)"DKDKx_SetSurfaceSectors", _wrap_DKDKx_SetSurfaceSectors, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"Set the number of angular sectors of the surface of contactors.  \n"
		"\n"
		"python usage : DKDKx_SetSurfaceSectors(nbsect)  \n"
		"\n"
		"Parameters\n"
		"----------\n"
		"nbsect(integer) : number of sectors  \n"
		"\n"
		""},
	 { (char *)"DKDKx_UpdateSurfaceEnergySector", _wrap_DKDKx_UpdateSurfaceEnergySector, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"update surface energy sector  \n"
		"\n"
		"python usage : DKDKx_UpdateSurfaceEnergySector()  \n"
		"\n"
		""},
	 { (char *)"DKDKx_ComputeStress", _wrap_DKDKx_ComputeStress, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"update surface energy sector  \n"
		"\n"
		"python usage : DKDKx_ComputeStress()  \n"
		"\n"
		""},
	 { (char *)"DKDKx_ComputeBetai", _wrap_DKDKx_ComputeBetai, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"compute equivalent damage parameter  \n"
		"\n"
		"python usage : DKDKx_ComputeBetai()  \n"
		"\n"
		""},
	 { (char *)"DKDKx_ComputeCZMEnergy", _wrap_DKDKx_ComputeCZMEnergy, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"compute and decompose local contact energy with CZM law  \n"
		"\n"
		"python usage : DKDKx_ComputeCZMEnergy()  \n"
		"\n"
		""},
	 { (char *)"DKDKx_CleanMemory", _wrap_DKDKx_CleanMemory, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"Free all memory allocated within DKDKx module.  \n"
		"\n"
		"python usage : DKDKx_CleanMemory()  \n"
		"\n"
		""},
	 { (char *)"DKDKx_GetCZMEnergy", _wrap_DKDKx_GetCZMEnergy, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"Get the CZM energy of a given contact.  \n"
		"\n"
		"python usage : energy = DKDKx_GetCZMEnergy(icdan)  \n"
		"\n"
		"Parameters\n"
		"----------\n"
		"icdan(int): index of the DKDKx contact  \n"
		"\n"
		"Returns\n"
		"-------\n"
		"energy(double[4]) : energy value  \n"
		"\n"
		""},
	 { (char *)"DKJCx_SelectProxTactors", _wrap_DKJCx_SelectProxTactors, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"contact detection between DISKx and JONCx tactors  \n"
		"\n"
		"First recup coordinate prediction, then proceed to a box selection to found\n"
		"rough contact list and finally compute the final contact list.  \n"
		"\n"
		"python usage : DKJCx_SelectProxTactors(reset=0)  \n"
		"\n"
		"Parameters\n"
		"----------\n"
		"reset(integer) : if not 0, detection is skipped but the boxes will be computed\n"
		"    anew at next call  \n"
		"\n"
		""},
	 { (char *)"DKJCx_SmoothForceComputation", _wrap_DKJCx_SmoothForceComputation, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"explicit computation of contact forces  \n"
		"\n"
		"python usage : DKJCx_SmoothForceComputation()  \n"
		"\n"
		""},
	 { (char *)"DKJCx_WriteLastVlocRloc", _wrap_DKJCx_WriteLastVlocRloc, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"write last local values of all DKJCx contacts  \n"
		"\n"
		"The values written are relative velocity, forces and local frame  \n"
		"\n"
		"python usage : DKJCx_WriteLastVlocRloc()  \n"
		"\n"
		""},
	 { (char *)"DKJCx_WriteOutVlocRloc", _wrap_DKJCx_WriteOutVlocRloc, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"write local values of all DKJCx contacts  \n"
		"\n"
		"The values written are relative velocity, forces and local frame  \n"
		"\n"
		"python usage : DKJCx_WriteOutVlocRloc()  \n"
		"\n"
		""},
	 { (char *)"DKJCx_DisplayOutVlocRloc", _wrap_DKJCx_DisplayOutVlocRloc, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"display local values of all DKJCx contacts  \n"
		"\n"
		"The values displayed are relative velocity, forces and local frame  \n"
		"\n"
		"python usage : DKJCx_DisplayOutVlocRloc()  \n"
		"\n"
		""},
	 { (char *)"DKJCx_DisplayProxTactors", _wrap_DKJCx_DisplayProxTactors, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"display contacts  \n"
		"\n"
		"python usage : DKJCx_DisplayProxTactors()  \n"
		"\n"
		""},
	 { (char *)"DKJCx_ReadIniVlocRloc", _wrap_DKJCx_ReadIniVlocRloc, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"Read VlocRloc file.  \n"
		"\n"
		"*   If num <= 0 : DATBOX/VlocRloc.INI file is read  \n"
		"*   Else : OUTBOX/VlocRloc.OUT.num is read, num being\n"
		"    -   the parameter used in TimeEvolution_ReadIniVlocRloc last call  \n"
		"\n"
		"python usage : DKJCx_ReadIniVlocRloc(num=0)  \n"
		"\n"
		"Parameters\n"
		"----------\n"
		"num(integer) : which VlocRloc file to read  \n"
		"\n"
		""},
	 { (char *)"DKJCx_SetSurfaceSectors", _wrap_DKJCx_SetSurfaceSectors, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"Set the number of angular sectors of the surface of contactors.  \n"
		"\n"
		"python usage : DKJCx_SetSurfaceSectors(nbsect)  \n"
		"\n"
		"Parameters\n"
		"----------\n"
		"nbsect(integer) : number of sectors  \n"
		"\n"
		""},
	 { (char *)"DKJCx_ComputeStress", _wrap_DKJCx_ComputeStress, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"compute the DKJC contribution to the equivalent stress tensor  \n"
		"\n"
		"python usage : DKJCx_ComputeStress()  \n"
		"\n"
		""},
	 { (char *)"DKJCx_CleanMemory", _wrap_DKJCx_CleanMemory, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"Free all memory allocated within DKJCx module.  \n"
		"\n"
		"python usage : DKJCx_CleanMemory()  \n"
		"\n"
		""},
	 { (char *)"DKJCx_SetFrictionModel", _wrap_DKJCx_SetFrictionModel, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"initialize data for simulation using evolutive local friction  \n"
		"\n"
		"python usage : DKJCx_SetFrictionModel(cflag)  \n"
		"\n"
		"Parameters\n"
		"----------\n"
		"cflag(char) : model to use ('min', 'max' or 'ave')  \n"
		"\n"
		""},
	 { (char *)"DKKDx_SelectProxTactors", _wrap_DKKDx_SelectProxTactors, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"contact detection between DISKx and xKSID tactors  \n"
		"\n"
		"First recup coordinate prediction, then proceed to a box selection to found\n"
		"rough contact list and finally compute the final contact list.  \n"
		"\n"
		"python usage : DKKDx_SelectProxTactors(reset=0)  \n"
		"\n"
		"Parameters\n"
		"----------\n"
		"reset(integer) : if not 0, detection is skipped but the boxes will be computed\n"
		"    anew at next call  \n"
		"\n"
		""},
	 { (char *)"DKKDx_SmoothForceComputation", _wrap_DKKDx_SmoothForceComputation, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"explicit computation of contact forces  \n"
		"\n"
		"python usage : DKKDx_SmoothForceComputation()  \n"
		"\n"
		""},
	 { (char *)"DKKDx_WriteLastVlocRloc", _wrap_DKKDx_WriteLastVlocRloc, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"write last local values of all DKKDx contacts  \n"
		"\n"
		"The values written are relative velocity, forces and local frame  \n"
		"\n"
		"python usage : DKKDx_WriteLastVlocRloc()  \n"
		"\n"
		""},
	 { (char *)"DKKDx_WriteOutVlocRloc", _wrap_DKKDx_WriteOutVlocRloc, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"write local values of all DKKDx contacts  \n"
		"\n"
		"The values written are relative velocity, forces and local frame  \n"
		"\n"
		"python usage : DKKDx_WriteOutVlocRloc()  \n"
		"\n"
		""},
	 { (char *)"DKKDx_DisplayOutVlocRloc", _wrap_DKKDx_DisplayOutVlocRloc, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"display local values of all DKKDx contacts  \n"
		"\n"
		"The values displayed are relative velocity, forces and local frame  \n"
		"\n"
		"python usage : DKKDx_DisplayOutVlocRloc()  \n"
		"\n"
		""},
	 { (char *)"DKKDx_DisplayProxTactors", _wrap_DKKDx_DisplayProxTactors, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"display contacts  \n"
		"\n"
		"python usage : DKKDx_DisplayProxTactors()  \n"
		"\n"
		""},
	 { (char *)"DKKDx_ReadIniVlocRloc", _wrap_DKKDx_ReadIniVlocRloc, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"Read VlocRloc file.  \n"
		"\n"
		"*   If num <= 0 : DATBOX/VlocRloc.INI file is read  \n"
		"*   Else : OUTBOX/VlocRloc.OUT.num is read, num being\n"
		"    -   the parameter used in TimeEvolution_ReadIniVlocRloc last call  \n"
		"\n"
		"python usage : DKKDx_ReadIniVlocRloc(num=0)  \n"
		"\n"
		"Parameters\n"
		"----------\n"
		"num(integer) : which VlocRloc file to read  \n"
		"\n"
		""},
	 { (char *)"DKKDx_SetSurfaceSectors", _wrap_DKKDx_SetSurfaceSectors, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"Set the number of angular sectors of the surface of contactors.  \n"
		"\n"
		"python usage : DKKDx_SetSurfaceSectors(nbsect)  \n"
		"\n"
		"Parameters\n"
		"----------\n"
		"nbsect(integer) : number of sectors  \n"
		"\n"
		""},
	 { (char *)"DKKDx_CleanMemory", _wrap_DKKDx_CleanMemory, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"Free all memory allocated within DKKDx module.  \n"
		"\n"
		"python usage : DKKDx_CleanMemory()  \n"
		"\n"
		""},
	 { (char *)"DKPLx_SelectProxTactors", _wrap_DKPLx_SelectProxTactors, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"contact detection between DISKx and POLYG tactors  \n"
		"\n"
		"First recup coordinate prediction, then proceed to a box selection to found\n"
		"rough contact list and finally compute the final contact list.  \n"
		"\n"
		"python usage : DKPLx_SelectProxTactors(reset=0)  \n"
		"\n"
		"Parameters\n"
		"----------\n"
		"reset(integer) : if not 0, detection is skipped but the boxes will be computed\n"
		"    anew at next call  \n"
		"\n"
		""},
	 { (char *)"DKPLx_WriteLastVlocRloc", _wrap_DKPLx_WriteLastVlocRloc, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"write last local values of all DKPLx contacts  \n"
		"\n"
		"The values written are relative velocity, forces and local frame  \n"
		"\n"
		"python usage : DKPLx_WriteLastVlocRloc()  \n"
		"\n"
		""},
	 { (char *)"DKPLx_WriteOutVlocRloc", _wrap_DKPLx_WriteOutVlocRloc, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"write local values of all DKPLx contacts  \n"
		"\n"
		"The values written are relative velocity, forces and local frame  \n"
		"\n"
		"python usage : DKPLx_WriteOutVlocRloc()  \n"
		"\n"
		""},
	 { (char *)"DKPLx_DisplayOutVlocRloc", _wrap_DKPLx_DisplayOutVlocRloc, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"display local values of all DKPLx contacts  \n"
		"\n"
		"The values displayed are relative velocity, forces and local frame  \n"
		"\n"
		"python usage : DKPLx_DisplayOutVlocRloc()  \n"
		"\n"
		""},
	 { (char *)"DKPLx_DisplayProxTactors", _wrap_DKPLx_DisplayProxTactors, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"display contacts  \n"
		"\n"
		"python usage : DKPLx_DisplayProxTactors()  \n"
		"\n"
		""},
	 { (char *)"DKPLx_ReadIniVlocRloc", _wrap_DKPLx_ReadIniVlocRloc, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"Read VlocRloc file.  \n"
		"\n"
		"*   If num <= 0 : DATBOX/VlocRloc.INI file is read  \n"
		"*   Else : OUTBOX/VlocRloc.OUT.num is read, num being\n"
		"    -   the parameter used in TimeEvolution_ReadIniVlocRloc last call  \n"
		"\n"
		"python usage : DKPLx_ReadIniVlocRloc(num=0)  \n"
		"\n"
		"Parameters\n"
		"----------\n"
		"num(integer) : which VlocRloc file to read  \n"
		"\n"
		""},
	 { (char *)"DKPLx_SetPeriodicCondition", _wrap_DKPLx_SetPeriodicCondition, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"initialize data for simulation using periodic condition  \n"
		"\n"
		"python usage : DKPLx_SetPeriodicCondition(period)  \n"
		"\n"
		"Parameters\n"
		"----------\n"
		"period(double) : value of the period  \n"
		"\n"
		""},
	 { (char *)"DKPLx_CleanMemory", _wrap_DKPLx_CleanMemory, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"Free all memory allocated within DKPLx module.  \n"
		"\n"
		"python usage : DKPLx_CleanMemory()  \n"
		"\n"
		""},
	 { (char *)"P2P2L_SelectProxTactors", _wrap_P2P2L_SelectProxTactors, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"contact detection between PT2DL tactors  \n"
		"\n"
		"First recup coordinate prediction, then proceed to a box selection to found\n"
		"rough contact list and finally compute the final contact list.  \n"
		"\n"
		"python usage : P2P2L_SelectProxTactors(reset=0)  \n"
		"\n"
		"Parameters\n"
		"----------\n"
		"reset(integer) : if not 0, detection is skipped but the boxes will be computed\n"
		"    anew at next call  \n"
		"\n"
		""},
	 { (char *)"P2P2L_WriteLastVlocRloc", _wrap_P2P2L_WriteLastVlocRloc, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"write last local values of all P2P2L contacts  \n"
		"\n"
		"The values written are relative velocity, forces and local frame  \n"
		"\n"
		"python usage : P2P2L_WriteLastVlocRloc()  \n"
		"\n"
		""},
	 { (char *)"P2P2L_WriteOutVlocRloc", _wrap_P2P2L_WriteOutVlocRloc, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"write local values of all P2P2L contacts  \n"
		"\n"
		"The values written are relative velocity, forces and local frame  \n"
		"\n"
		"python usage : P2P2L_WriteOutVlocRloc()  \n"
		"\n"
		""},
	 { (char *)"P2P2L_DisplayOutVlocRloc", _wrap_P2P2L_DisplayOutVlocRloc, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"display local values of all P2P2L contacts  \n"
		"\n"
		"The values displayed are relative velocity, forces and local frame  \n"
		"\n"
		"python usage : P2P2L_DisplayOutVlocRloc()  \n"
		"\n"
		""},
	 { (char *)"P2P2L_DisplayProxTactors", _wrap_P2P2L_DisplayProxTactors, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"display contacts  \n"
		"\n"
		"python usage : P2P2L_DisplayProxTactors()  \n"
		"\n"
		""},
	 { (char *)"P2P2L_ReadIniVlocRloc", _wrap_P2P2L_ReadIniVlocRloc, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"Read VlocRloc file.  \n"
		"\n"
		"*   If num <= 0 : DATBOX/VlocRloc.INI file is read  \n"
		"*   Else : OUTBOX/VlocRloc.OUT.num is read, num being\n"
		"    -   the parameter used in TimeEvolution_ReadIniVlocRloc last call  \n"
		"\n"
		"python usage : P2P2L_ReadIniVlocRloc(num=0)  \n"
		"\n"
		"Parameters\n"
		"----------\n"
		"num(integer) : which VlocRloc file to read  \n"
		"\n"
		""},
	 { (char *)"P2P2L_CleanMemory", _wrap_P2P2L_CleanMemory, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"Free all memory allocated within P2P2L module.  \n"
		"\n"
		"python usage : P2P2L_CleanMemory()  \n"
		"\n"
		""},
	 { (char *)"PLALp_SelectProxTactors", _wrap_PLALp_SelectProxTactors, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"contact detection between POLYG and ALpxx tactors  \n"
		"\n"
		"First recup coordinate prediction, then proceed to a box selection to found\n"
		"rough contact list and finally compute the final contact list.  \n"
		"\n"
		"python usage : PLALp_SelectProxTactors(reset=0)  \n"
		"\n"
		"Parameters\n"
		"----------\n"
		"reset(integer) : if not 0, detection is skipped but the boxes will be computed\n"
		"    anew at next call  \n"
		"\n"
		""},
	 { (char *)"PLALp_WriteLastVlocRloc", _wrap_PLALp_WriteLastVlocRloc, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"write last local values of all PLALp contacts  \n"
		"\n"
		"The values written are relative velocity, forces and local frame  \n"
		"\n"
		"python usage : PLALp_WriteLastVlocRloc()  \n"
		"\n"
		""},
	 { (char *)"PLALp_WriteOutVlocRloc", _wrap_PLALp_WriteOutVlocRloc, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"write local values of all PLALp contacts  \n"
		"\n"
		"The values written are relative velocity, forces and local frame  \n"
		"\n"
		"python usage : PLALp_WriteOutVlocRloc()  \n"
		"\n"
		""},
	 { (char *)"PLALp_DisplayOutVlocRloc", _wrap_PLALp_DisplayOutVlocRloc, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"display local values of all PLALp contacts  \n"
		"\n"
		"The values displayed are relative velocity, forces and local frame  \n"
		"\n"
		"python usage : PLALp_DisplayOutVlocRloc()  \n"
		"\n"
		""},
	 { (char *)"PLALp_DisplayProxTactors", _wrap_PLALp_DisplayProxTactors, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"display contacts  \n"
		"\n"
		"python usage : PLALp_DisplayProxTactors()  \n"
		"\n"
		""},
	 { (char *)"PLALp_ReadIniVlocRloc", _wrap_PLALp_ReadIniVlocRloc, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"Read VlocRloc file.  \n"
		"\n"
		"-If num <= 0 : DATBOX/VlocRloc.INI file is read -Else : OUTBOX/VlocRloc.OUT.num\n"
		"is read, num being  \n"
		"\n"
		"*   the parameter used in TimeEvolution_ReadIniVlocRloc last call  \n"
		"\n"
		"python usage : PLALp_ReadIniVlocRloc(num=0)  \n"
		"\n"
		"Parameters\n"
		"----------\n"
		"num(integer) : which VlocRloc file to read  \n"
		"\n"
		""},
	 { (char *)"PLALp_CleanMemory", _wrap_PLALp_CleanMemory, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"Free all memory allocated within PLALp module.  \n"
		"\n"
		"python usage : PLALp_CleanMemory()  \n"
		"\n"
		""},
	 { (char *)"PLJCx_SelectProxTactors", _wrap_PLJCx_SelectProxTactors, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"contact detection between POLYG and JONCx tactors  \n"
		"\n"
		"First recup coordinate prediction, then proceed to a box selection to found\n"
		"rough contact list and finally compute the final contact list.  \n"
		"\n"
		"python usage : PLJCx_SelectProxTactors(reset=0)  \n"
		"\n"
		"Parameters\n"
		"----------\n"
		"reset(integer) : if not 0, detection is skipped but the boxes will be computed\n"
		"    anew at next call  \n"
		"\n"
		""},
	 { (char *)"PLJCx_WriteLastVlocRloc", _wrap_PLJCx_WriteLastVlocRloc, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"write last local values of all PLJCx contacts  \n"
		"\n"
		"The values written are relative velocity, forces and local frame  \n"
		"\n"
		"python usage : PLJCx_WriteLastVlocRloc()  \n"
		"\n"
		""},
	 { (char *)"PLJCx_WriteOutVlocRloc", _wrap_PLJCx_WriteOutVlocRloc, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"write local values of all PLJCx contacts  \n"
		"\n"
		"The values written are relative velocity, forces and local frame  \n"
		"\n"
		"python usage : PLJCx_WriteOutVlocRloc()  \n"
		"\n"
		""},
	 { (char *)"PLJCx_DisplayOutVlocRloc", _wrap_PLJCx_DisplayOutVlocRloc, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"display local values of all PLJCx contacts  \n"
		"\n"
		"The values displayed are relative velocity, forces and local frame  \n"
		"\n"
		"python usage : PLJCx_DisplayOutVlocRloc()  \n"
		"\n"
		""},
	 { (char *)"PLJCx_DisplayProxTactors", _wrap_PLJCx_DisplayProxTactors, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"display contacts  \n"
		"\n"
		"python usage : PLJCx_DisplayProxTactors()  \n"
		"\n"
		""},
	 { (char *)"PLJCx_ReadIniVlocRloc", _wrap_PLJCx_ReadIniVlocRloc, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"Read VlocRloc file.  \n"
		"\n"
		"*   If num <= 0 : DATBOX/VlocRloc.INI file is read  \n"
		"*   Else : OUTBOX/VlocRloc.OUT.num is read, num being\n"
		"    -   the parameter used in TimeEvolution_ReadIniVlocRloc last call  \n"
		"\n"
		"python usage : PLJCx_ReadIniVlocRloc(num=0)  \n"
		"\n"
		"Parameters\n"
		"----------\n"
		"num(integer) : which VlocRloc file to read  \n"
		"\n"
		""},
	 { (char *)"PLJCx_ComputeStress", _wrap_PLJCx_ComputeStress, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"compute the PLJC contribution to the equivalent stress tensor  \n"
		"\n"
		"python usage : PLJCx_ComputeStress()  \n"
		"\n"
		""},
	 { (char *)"PLJCx_CleanMemory", _wrap_PLJCx_CleanMemory, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"Free all memory allocated within PLJCx module.  \n"
		"\n"
		"python usage : PLJCx_CleanMemory()  \n"
		"\n"
		""},
	 { (char *)"PLJCx_SetFrictionModel", _wrap_PLJCx_SetFrictionModel, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"initialize data for simulation using evolutive local friction  \n"
		"\n"
		"python usage : PLJCx_SetFrictionModel(cflag)  \n"
		"\n"
		"Parameters\n"
		"----------\n"
		"cflag(char) : model to use ('min', 'max' or 'ave')  \n"
		"\n"
		""},
	 { (char *)"PLPLx_SelectProxTactors", _wrap_PLPLx_SelectProxTactors, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"contact detection between POLYG tactors  \n"
		"\n"
		"First recup coordinate prediction, then proceed to a box selection to found\n"
		"rough contact list and finally compute the final contact list.  \n"
		"\n"
		"python usage : PLPLx_SelectProxTactors(reset=0)  \n"
		"\n"
		"Parameters\n"
		"----------\n"
		"reset(integer) : if not 0, detection is skipped but the boxes will be computed\n"
		"    anew at next call  \n"
		"\n"
		""},
	 { (char *)"PLPLx_WriteLastVlocRloc", _wrap_PLPLx_WriteLastVlocRloc, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"write last local values of all PLPLx contacts  \n"
		"\n"
		"The values written are relative velocity, forces and local frame  \n"
		"\n"
		"python usage : PLPLx_WriteLastVlocRloc()  \n"
		"\n"
		""},
	 { (char *)"PLPLx_WriteOutVlocRloc", _wrap_PLPLx_WriteOutVlocRloc, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"write local values of all PLPLx contacts  \n"
		"\n"
		"The values written are relative velocity, forces and local frame  \n"
		"\n"
		"python usage : PLPLx_WriteOutVlocRloc()  \n"
		"\n"
		""},
	 { (char *)"PLPLx_DisplayOutVlocRloc", _wrap_PLPLx_DisplayOutVlocRloc, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"display local values of all PLPLx contacts  \n"
		"\n"
		"The values displayed are relative velocity, forces and local frame  \n"
		"\n"
		"python usage : PLPLx_DisplayOutVlocRloc()  \n"
		"\n"
		""},
	 { (char *)"PLPLx_DisplayProxTactors", _wrap_PLPLx_DisplayProxTactors, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"display contacts  \n"
		"\n"
		"python usage : PLPLx_DisplayProxTactors()  \n"
		"\n"
		""},
	 { (char *)"PLPLx_ReadIniVlocRloc", _wrap_PLPLx_ReadIniVlocRloc, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"Read VlocRloc file.  \n"
		"\n"
		"*   If num <= 0 : DATBOX/VlocRloc.INI file is read  \n"
		"*   Else : OUTBOX/VlocRloc.OUT.num is read, num being\n"
		"    -   the parameter used in TimeEvolution_ReadIniVlocRloc last call  \n"
		"\n"
		"python usage : PLPLx_ReadIniVlocRloc(num=0)  \n"
		"\n"
		"Parameters\n"
		"----------\n"
		"num(integer) : which VlocRloc file to read  \n"
		"\n"
		""},
	 { (char *)"PLPLx_SetPeriodicCondition", _wrap_PLPLx_SetPeriodicCondition, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"initialize data for simulation using periodic condition  \n"
		"\n"
		"python usage : PLPLx_SetPeriodicCondition(period)  \n"
		"\n"
		"Parameters\n"
		"----------\n"
		"period(double) : value of the period  \n"
		"\n"
		""},
	 { (char *)"PLPLx_SetFrictionModel", _wrap_PLPLx_SetFrictionModel, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"initialize data for simulation using evolutive local friction  \n"
		"\n"
		"python usage : PLPLx_SetFrictionModel(cflag)  \n"
		"\n"
		"Parameters\n"
		"----------\n"
		"cflag(char) : model to use ('min', 'max' or 'ave')  \n"
		"\n"
		""},
	 { (char *)"PLPLx_SetBigPolygTolerance", _wrap_PLPLx_SetBigPolygTolerance, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"python usage : PLPLx_SetBigPolygTolerance(tol)  \n"
		"\n"
		"Parameters\n"
		"----------\n"
		"period(double) : value of the tolerance  \n"
		"\n"
		""},
	 { (char *)"PLPLx_ComputeStress", _wrap_PLPLx_ComputeStress, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"compute stress  \n"
		"\n"
		"python usage : PLPLx_ComputeStress()  \n"
		"\n"
		""},
	 { (char *)"PLPLx_ComputeBetai", _wrap_PLPLx_ComputeBetai, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"compute equivalent damage parameter  \n"
		"\n"
		"python usage : PLPLx_ComputeBetai()  \n"
		"\n"
		""},
	 { (char *)"PLPLx_ComputeCZMEnergy", _wrap_PLPLx_ComputeCZMEnergy, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"compute and decompose local contact energy with CZM law  \n"
		"\n"
		"python usage : PLPLx_ComputeCZMEnergy()  \n"
		"\n"
		""},
	 { (char *)"PLPLx_CleanMemory", _wrap_PLPLx_CleanMemory, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"Free all memory allocated within PLPLx module.  \n"
		"\n"
		"python usage : PLPLx_CleanMemory()  \n"
		"\n"
		""},
	 { (char *)"PLPLx_GetCZMEnergy", _wrap_PLPLx_GetCZMEnergy, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"Get the CZM energy of a given contact.  \n"
		"\n"
		"python usage energy = PLPLx_GetCZMEnergy(icdan)  \n"
		"\n"
		"Parameters\n"
		"----------\n"
		"icdan(int): index of the PLPLx contact  \n"
		"\n"
		"Returns\n"
		"-------\n"
		"energy(double[4]) : energy value  \n"
		"\n"
		""},
	 { (char *)"PLPLx_UseNcDetection", _wrap_PLPLx_UseNcDetection, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"chooses contact detection methode between non-convex shapes  \n"
		"\n"
		"python usage : PLPLx_UseNcDetection()  \n"
		"\n"
		""},
	 { (char *)"PLPLx_ShrinkPolygFaces", _wrap_PLPLx_ShrinkPolygFaces, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"Shrink the face of the polygon for the detection.  \n"
		"\n"
		"python usage : PLPLx_ShrinkPolygFaces(shrink)  \n"
		"\n"
		"Parameters\n"
		"----------\n"
		"shrink(real) :  \n"
		"\n"
		""},
	 { (char *)"PTPT2_SelectProxTactors", _wrap_PTPT2_SelectProxTactors, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"contact detection between PT2Dx tactors  \n"
		"\n"
		"python usage : PTPT2_SelectProxTactors(reset=0) param[in] reset (integer) : if\n"
		"not 0, detection is skipped but the boxes will be computed anew at next call  \n"
		"\n"
		"First recup coordinate prediction, then proceed to a box selection to found\n"
		"rough contact list and finally compute the final contact list.  \n"
		"\n"
		""},
	 { (char *)"PTPT2_WriteLastVlocRloc", _wrap_PTPT2_WriteLastVlocRloc, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"write last local values of all PTPT2 contacts  \n"
		"\n"
		"python usage : PTPT2_WriteLastVlocRloc()  \n"
		"\n"
		"\n"
		" the values written are relative velocity, forces and local frame  \n"
		"\n"
		""},
	 { (char *)"PTPT2_WriteOutVlocRloc", _wrap_PTPT2_WriteOutVlocRloc, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"write local values of all PTPT2 contacts  \n"
		"\n"
		"python usage : PTPT2_WriteOutVlocRloc()  \n"
		"\n"
		"\n"
		" the values written are relative velocity, forces and local frame  \n"
		"\n"
		""},
	 { (char *)"PTPT2_DisplayOutVlocRloc", _wrap_PTPT2_DisplayOutVlocRloc, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"display local values of all PTPT2 contacts  \n"
		"\n"
		"python usage : PTPT2_DisplayOutVlocRloc()  \n"
		"\n"
		"\n"
		" the values displayed are relative velocity, forces and local frame  \n"
		"\n"
		""},
	 { (char *)"PTPT2_DisplayProxTactors", _wrap_PTPT2_DisplayProxTactors, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"display contacts  \n"
		"\n"
		"python usage : PTPT2_DisplayProxTactors()  \n"
		"\n"
		""},
	 { (char *)"PTPT2_ReadIniVlocRloc", _wrap_PTPT2_ReadIniVlocRloc, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"Read VlocRloc file.  \n"
		"\n"
		"If num <= 0 : DATBOX/VlocRloc.INI file is read Else : OUTBOX/VlocRloc.OUT.num is\n"
		"read, num being the parameter used in TimeEvolution_ReadIniVlocRloc last call  \n"
		"\n"
		"usage : PTPT2_ReadIniVlocRloc(num=0)  \n"
		"\n"
		"Parameters\n"
		"----------\n"
		"num(integer) : which VlocRloc file to read  \n"
		"\n"
		""},
	 { (char *)"PTPT2_LoadNetwork", _wrap_PTPT2_LoadNetwork, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"read a PTPT2 network from a file  \n"
		"\n"
		"python usage : PTPT2_LoadNetwork()  \n"
		"\n"
		""},
	 { (char *)"PTPT2_SetTolerance", _wrap_PTPT2_SetTolerance, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"set the maximum violation for a point to point link  \n"
		"\n"
		"python usage : PTPT2_SetTolerance(tol)  \n"
		"\n"
		""},
	 { (char *)"PTPT2_SetExplicitLocalFrame", _wrap_PTPT2_SetExplicitLocalFrame, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"local frame is computed only once at the first step  \n"
		"\n"
		"python usage : PTPT2_SetExplicitLocalFrame()  \n"
		"\n"
		""},
	 { (char *)"PTPT2_LoadParams", _wrap_PTPT2_LoadParams, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"read a PTPT2 surface and l0 from a file  \n"
		"\n"
		"python usage : PTPT2_LoadParams()  \n"
		"\n"
		""},
	 { (char *)"PTPT2_UseCurrentNonuc0", _wrap_PTPT2_UseCurrentNonuc0, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"Use GetCoor or value given from file insted of computing nonuc0 from reference\n"
		"coordinates.  \n"
		"\n"
		"python usage : PTPT2_UseCurrentNonuc0(to_use) param[in] to_use (integer) : 1 to\n"
		"activate, 0 to deactivate feature  \n"
		"\n"
		""},
	 { (char *)"PTPT2_CleanMemory", _wrap_PTPT2_CleanMemory, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"Free all memory allocated within PTPT2 module.  \n"
		"\n"
		"python usage : PTPT2_CleanMemory()  \n"
		"\n"
		""},
	 { (char *)"inter_handler_2D_tgetNb", _wrap_inter_handler_2D_tgetNb, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"return the number of interactions of the selected type stored in this data\n"
		"structure  \n"
		"\n"
		"python usage : nb_inter = inter_handler_2D_tgetNb(inter_id)  \n"
		"\n"
		"Parameters\n"
		"----------\n"
		"inter_id(integer) : type of interaction (lmgc90 parameter)  \n"
		"\n"
		"Returns\n"
		"-------\n"
		"nb_inter (integer) : number of interaction found of selected type  \n"
		"\n"
		""},
	 { (char *)"inter_handler_2D_tgetTactLawNb", _wrap_inter_handler_2D_tgetTactLawNb, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"return the contact law number of an interaction stored this data structure  \n"
		"\n"
		"python usage : tact_law = inter_handler_2D_tgetTactLawNb(inter_id, icdan)  \n"
		"\n"
		"Parameters\n"
		"----------\n"
		"inter_id(integer) : type of interaction (lmgc90 parameter)  \n"
		"icdan(integer) : index of the interaction of selected type  \n"
		"\n"
		"Returns\n"
		"-------\n"
		"tact_law (integer) : contact law number  \n"
		"\n"
		""},
	 { (char *)"inter_handler_2D_tgetIdBodies", _wrap_inter_handler_2D_tgetIdBodies, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"return the serial numbers of contacting objects for an interaction stored in\n"
		"this data structure  \n"
		"\n"
		"python usage : idBodies = inter_handler_2D_tgetIdBodies(inter_id, icdan)  \n"
		"\n"
		"Parameters\n"
		"----------\n"
		"inter_id(integer) : type of interaction (lmgc90 parameter)  \n"
		"icdan(integer) : index of the interaction of selected type  \n"
		"\n"
		"Returns\n"
		"-------\n"
		"idBodies (integer) : array with cd and an bodies serial number  \n"
		"\n"
		""},
	 { (char *)"inter_handler_2D_tgetIData", _wrap_inter_handler_2D_tgetIData, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"Get the integer data of an interaction stored in this data structure.  \n"
		"\n"
		"idata vector holds cd body type, an body type, cd body id, an body id, cd\n"
		"contactor type, an contactory type, cd contactor id, an contactor id, cd\n"
		"subcontactor id, an subcontactor id, tact law id, status, number of internals  \n"
		"\n"
		"usage : idata = inter_handler_2D_tgetIData(inter_id, icdan)  \n"
		"\n"
		"Parameters\n"
		"----------\n"
		"inter_id(integer) : type of interaction (lmgc90 parameter)  \n"
		"icdan(integer) : index of the interaction of selected type  \n"
		"\n"
		"Returns\n"
		"-------\n"
		"idata (integer array) : the values array  \n"
		"\n"
		""},
	 { (char *)"inter_handler_2D_tgetRData", _wrap_inter_handler_2D_tgetRData, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"return the real data associated with an interactions  \n"
		"\n"
		"Get an output array with, in this order, : coor, tuc, nuc, vlt, vln, rlt, rln,\n"
		"gapTT  \n"
		"\n"
		"python usage : rdata = inter_handler_2D_tgetRData(inter_id, icdan)  \n"
		"\n"
		"Parameters\n"
		"----------\n"
		"inter_id(integer) : type of interaction (lmgc90 parameter)  \n"
		"icdan(integer) : index of the interaction of selected type  \n"
		"\n"
		"Returns\n"
		"-------\n"
		"rdata (double array) : array with real data of the interaction  \n"
		"\n"
		""},
	 { (char *)"inter_handler_2D_tsetInternal", _wrap_inter_handler_2D_tsetInternal, METH_VARARGS, NULL},
	 { (char *)"inter_handler_2D_tgetInternal", _wrap_inter_handler_2D_tgetInternal, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"Get the internal of an interaction stored in this data structure.  \n"
		"\n"
		"usage : internal = inter_handler_2D_tgetInternal(inter_id, icdan)  \n"
		"\n"
		"Parameters\n"
		"----------\n"
		"inter_id(integer) : type of interaction (lmgc90 parameter)  \n"
		"icdan(integer) : index of the interaction of selected type  \n"
		"internal(double array) : the new values array  \n"
		"\n"
		""},
	 { (char *)"inter_handler_2D_getNbRecup", _wrap_inter_handler_2D_getNbRecup, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"return the number of recuped interactions of the selected type  \n"
		"\n"
		"python usage : nb_recup = inter_handler_2D_getNbRecup(inter_id)  \n"
		"\n"
		"Parameters\n"
		"----------\n"
		"inter_id(integer) : type of interaction (lmgc90 parameter)  \n"
		"\n"
		"Returns\n"
		"-------\n"
		"nb_inter (integer) : number of interaction recuped of selected type  \n"
		"\n"
		""},
	 { (char *)"inter_handler_2D_getNb", _wrap_inter_handler_2D_getNb, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"return the number of interactions of the selected type stored in verlet data\n"
		"structure  \n"
		"\n"
		"python usage : nb_inter = inter_handler_2D_getNb(inter_id)  \n"
		"\n"
		"Parameters\n"
		"----------\n"
		"inter_id(integer) : type of interaction (lmgc90 parameter)  \n"
		"\n"
		"Returns\n"
		"-------\n"
		"nb_inter (integer) : number of interaction found of selected type  \n"
		"\n"
		""},
	 { (char *)"inter_handler_2D_getAllTactLawNb", _wrap_inter_handler_2D_getAllTactLawNb, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"return the tact law number of all interactions stored in verlet data structure  \n"
		"\n"
		"python usage : vector = inter_handler_2D_getAllTactLawNb(inter_id)  \n"
		"\n"
		"Parameters\n"
		"----------\n"
		"inter_id(integer) : type of interaction (lmgc90 parameter)  \n"
		"\n"
		"Returns\n"
		"-------\n"
		"vector (int 1D-array) : mechanical data  \n"
		"\n"
		""},
	 { (char *)"inter_handler_2D_getAll", _wrap_inter_handler_2D_getAll, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"return coorx,coory,tx,ty,nx,ny,rlt,rln,vlt,vln,gaptt for all interactions stored\n"
		"in verlet data structure  \n"
		"\n"
		"python usage : array = inter_handler_2D_getAll(inter_id)  \n"
		"\n"
		"Parameters\n"
		"----------\n"
		"inter_id(integer) : type of interaction (lmgc90 parameter)  \n"
		"\n"
		"Returns\n"
		"-------\n"
		"array (double 2D-array) : mechanical data  \n"
		"\n"
		""},
	 { (char *)"inter_handler_2D_getAllInternal", _wrap_inter_handler_2D_getAllInternal, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"return internal variables for all interactions stored in verlet data structure  \n"
		"\n"
		"python usage : array = inter_handler_2D_getAllInternal(inter_id)  \n"
		"\n"
		"Parameters\n"
		"----------\n"
		"inter_id(integer) : type of interaction (lmgc90 parameter)  \n"
		"\n"
		"Returns\n"
		"-------\n"
		"array (double 2D-array) : mechanical data  \n"
		"\n"
		""},
	 { (char *)"inter_handler_2D_getAllIdata", _wrap_inter_handler_2D_getAllIdata, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"return all integer data of all 'verlet' interaction  \n"
		"\n"
		"Which are in order cd body type, an body type, cd body id, an body id, cd\n"
		"contactor type, an contactory type, cd contactor id, an contactor id, cd\n"
		"subcontactor id, an subcontactor id, tact law id, status, number of internals  \n"
		"\n"
		"python usage : array = inter_handler_2D_getAllIdata(inter_id)  \n"
		"\n"
		"Parameters\n"
		"----------\n"
		"inter_id(integer) : type of interaction (lmgc90 parameter)  \n"
		"\n"
		"Returns\n"
		"-------\n"
		"array (int 2D-array) : identification data  \n"
		"\n"
		""},
	 { (char *)"inter_handler_2D_getVerletAdjsz", _wrap_inter_handler_2D_getVerletAdjsz, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"return integer number of verlet interaction of a candidate  \n"
		"\n"
		"python usage : iantac = inter_handler_2D_getVerletAdjsz(inter_id, icdtac)  \n"
		"\n"
		"Parameters\n"
		"----------\n"
		"inter_id(integer) : type of interaction (lmgc90 parameter)  \n"
		"icdtac(integer) : candidate contactor id  \n"
		"\n"
		"Returns\n"
		"-------\n"
		"iantac (integer) : number of verlet interactions on candidate  \n"
		"\n"
		""},
	 { (char *)"inter_handler_2D_getVerletIantac", _wrap_inter_handler_2D_getVerletIantac, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"return integer antagonist contact of a verlet interaction  \n"
		"\n"
		"python usage : iantac = inter_handler_2D_getVerletIantac(inter_id, icdtac, iadj)  \n"
		"\n"
		"Parameters\n"
		"----------\n"
		"inter_id(integer) : type of interaction (lmgc90 parameter)  \n"
		"icdtac(integer) : candidate contactor id  \n"
		"iadj(integer) : id of adjacent of candidate  \n"
		"\n"
		"Returns\n"
		"-------\n"
		"iantac (integer) : id of antagonist contactor corresponding to verlet\n"
		"interaction  \n"
		"\n"
		""},
	 { (char *)"inter_handler_2D_computeRnod", _wrap_inter_handler_2D_computeRnod, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"Put back the reac value of bodies from (this) interactions.  \n"
		"\n"
		""},
	 { (char *)"inter_handler_2D_stockRloc", _wrap_inter_handler_2D_stockRloc, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"stock from this to verlet  \n"
		"\n"
		"python usage : inter_handler_2D_stockRloc(inter_id)  \n"
		"\n"
		"Parameters\n"
		"----------\n"
		"inter_id(integer) : type of interaction (lmgc90 parameter)  \n"
		"\n"
		""},
	 { (char *)"inter_handler_2D_recupRloc", _wrap_inter_handler_2D_recupRloc, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"recup from verlet to this  \n"
		"\n"
		"python usage : inter_handler_2D_recupRloc(inter_id)  \n"
		"\n"
		"Parameters\n"
		"----------\n"
		"inter_id(integer) : type of interaction (lmgc90 parameter)  \n"
		"\n"
		""},
	 { (char *)"inter_handler_2D_recupRlocByPos", _wrap_inter_handler_2D_recupRlocByPos, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"recup from verlet to this using position as criteria  \n"
		"\n"
		"Only available for CLALp and PLPLx inter_id  \n"
		"\n"
		"python usage : inter_handler_2D_recupRloc(inter_id, rtol)  \n"
		"\n"
		"Parameters\n"
		"----------\n"
		"inter_id(integer) : type of interaction (lmgc90 parameter)  \n"
		"rtol(real) : tolerance to decide if contact is recup  \n"
		"\n"
		""},
	 { (char *)"CDCDx_SelectProxTactors", _wrap_CDCDx_SelectProxTactors, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"contact detection between CYLND and CYLND tactors  \n"
		"\n"
		"First recup coordinate prediction, then proceed to a box selection to found\n"
		"rough contact list and finally compute the final contact list  \n"
		"\n"
		"python usage : CDCDx_SelectProxTactors(reset=0)  \n"
		"\n"
		"Parameters\n"
		"----------\n"
		"reset(integer) : if not 0, detection is skipped but the boxes will be computed\n"
		"    anew at next call  \n"
		"\n"
		""},
	 { (char *)"CDCDx_SmoothForceComputation", _wrap_CDCDx_SmoothForceComputation, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"computes smooth contact forces (if any)  \n"
		"\n"
		"python usage : CDCDx_SmoothForceComputation()  \n"
		"\n"
		""},
	 { (char *)"CDCDx_WriteLastVlocRloc", _wrap_CDCDx_WriteLastVlocRloc, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"write last local values of all CDCDx contacts  \n"
		"\n"
		"The values written are relative velocity, forces and local frame  \n"
		"\n"
		"python usage : CDCDx_WriteLastVlocRloc()  \n"
		"\n"
		""},
	 { (char *)"CDCDx_WriteOutVlocRloc", _wrap_CDCDx_WriteOutVlocRloc, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"write local values of all CDCDx contacts  \n"
		"\n"
		"The values written are relative velocity, forces and local frame  \n"
		"\n"
		"python usage : CDCDx_WriteOutVlocRloc()  \n"
		"\n"
		""},
	 { (char *)"CDCDx_DisplayOutVlocRloc", _wrap_CDCDx_DisplayOutVlocRloc, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"display local values of all CDCDx contacts  \n"
		"\n"
		"The values displayed are relative velocity, forces and local frame  \n"
		"\n"
		"python usage : CDCDx_DisplayOutVlocRloc()  \n"
		"\n"
		""},
	 { (char *)"CDCDx_DisplayProxTactors", _wrap_CDCDx_DisplayProxTactors, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"display detected contacts  \n"
		"\n"
		"python usage : CDCDx_DisplayProxTactors()  \n"
		"\n"
		""},
	 { (char *)"CDCDx_ReadIniVlocRloc", _wrap_CDCDx_ReadIniVlocRloc, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"Read VlocRloc file.  \n"
		"\n"
		"*   If num <= 0 : DATBOX/VlocRloc.INI file is read  \n"
		"*   Else : OUTBOX/VlocRloc.OUT.num is read,\n"
		"    -   num being the parameter used in TimeEvolution_ReadIniVlocRloc last call  \n"
		"\n"
		"python usage : CDCDx_ReadIniVlocRloc(num=0)  \n"
		"\n"
		"Parameters\n"
		"----------\n"
		"num(integer) : which VlocRloc file to read  \n"
		"\n"
		""},
	 { (char *)"CDCDx_SetXPeriodicCondition", _wrap_CDCDx_SetXPeriodicCondition, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"initialise data for simulation using periodic condition along X  \n"
		"\n"
		"python usage : CDCDx_SetXPeriodicCondition(xperiod)  \n"
		"\n"
		"Parameters\n"
		"----------\n"
		"xperiod(double) : period on x axis  \n"
		"\n"
		""},
	 { (char *)"CDCDx_SetYPeriodicCondition", _wrap_CDCDx_SetYPeriodicCondition, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"initialise data for simulation using periodic condition along Y  \n"
		"\n"
		"python usage : CDCDx_SetYPeriodicCondition(yperiod)  \n"
		"\n"
		"Parameters\n"
		"----------\n"
		"yperiod(double) : period on y axis  \n"
		"\n"
		""},
	 { (char *)"CDCDx_SetNumberInterByContact", _wrap_CDCDx_SetNumberInterByContact, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"define the number of interaction by contact (experimental)  \n"
		"\n"
		"python usage : CDCDx_SetNumberInterByContact(nb_interactions)  \n"
		"\n"
		"Parameters\n"
		"----------\n"
		"nb_interactions(integer) : number of interactions per contact  \n"
		"\n"
		""},
	 { (char *)"CDCDx_SetContactRadius", _wrap_CDCDx_SetContactRadius, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"define the contact radius (experimental)  \n"
		"\n"
		"python usage : CDCDx_SetContactRadius(radius)  \n"
		"\n"
		"Parameters\n"
		"----------\n"
		"radius(double) : contact radius  \n"
		"\n"
		""},
	 { (char *)"CDCDx_CleanMemory", _wrap_CDCDx_CleanMemory, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"Free all memory allocated within CDCDx module.  \n"
		"\n"
		"python usage : CDCDx_CleanMemory()  \n"
		"\n"
		""},
	 { (char *)"CDPLx_SelectProxTactors", _wrap_CDPLx_SelectProxTactors, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"contact detection between CYLND and PLANx tactors  \n"
		"\n"
		"First recup coordinate prediction, then proceed to a box selection to found\n"
		"rough contact list and finally compute the final contact list  \n"
		"\n"
		"python usage : CDPLx_SelectProxTactors(reset=0)  \n"
		"\n"
		"Parameters\n"
		"----------\n"
		"reset(integer) : if not 0, detection is skipped but the boxes will be computed\n"
		"    anew at next call  \n"
		"\n"
		""},
	 { (char *)"CDPLx_SmoothForceComputation", _wrap_CDPLx_SmoothForceComputation, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"computes smooth forces (if any)  \n"
		"\n"
		"python usage : CDPLx_SmoothForceComputation()  \n"
		"\n"
		""},
	 { (char *)"CDPLx_WriteLastVlocRloc", _wrap_CDPLx_WriteLastVlocRloc, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"write last local values of all CDPLx contacts  \n"
		"\n"
		"The values written are relative velocity, forces and local frame  \n"
		"\n"
		"python usage : CDPLx_WriteLastVlocRloc()  \n"
		"\n"
		""},
	 { (char *)"CDPLx_WriteOutVlocRloc", _wrap_CDPLx_WriteOutVlocRloc, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"write local values of all CDPLx contacts  \n"
		"\n"
		"The values written are relative velocity, forces and local frame  \n"
		"\n"
		"python usage : CDPLx_WriteOutVlocRloc()  \n"
		"\n"
		""},
	 { (char *)"CDPLx_DisplayOutVlocRloc", _wrap_CDPLx_DisplayOutVlocRloc, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"display local values of all CDPLx contacts  \n"
		"\n"
		"The values displayed are relative velocity, forces and local frame  \n"
		"\n"
		"python usage : CDPLx_DisplayOutVlocRloc()  \n"
		"\n"
		""},
	 { (char *)"CDPLx_DisplayProxTactors", _wrap_CDPLx_DisplayProxTactors, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"display contacts  \n"
		"\n"
		"python usage : CDPLx_DisplayProxTactors()  \n"
		"\n"
		""},
	 { (char *)"CDPLx_ReadIniVlocRloc", _wrap_CDPLx_ReadIniVlocRloc, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"Read VlocRloc file.  \n"
		"\n"
		"*   If num <= 0 : DATBOX/VlocRloc.INI file is read  \n"
		"*   Else : OUTBOX/VlocRloc.OUT.num is read, num being\n"
		"    -   the parameter used in TimeEvolution_ReadIniVlocRloc last call  \n"
		"\n"
		"python usage : CDPLx_ReadIniVlocRloc(num=0)  \n"
		"\n"
		"Parameters\n"
		"----------\n"
		"num(integer) : which VlocRloc file to read  \n"
		"\n"
		""},
	 { (char *)"CDPLx_CleanMemory", _wrap_CDPLx_CleanMemory, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"Free all memory allocated within CDPLx module.  \n"
		"\n"
		"python usage : CDPLx_CleanMemory()  \n"
		"\n"
		""},
	 { (char *)"CSASp_SelectProxTactors", _wrap_CSASp_SelectProxTactors, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"contact detection between CSxxx and ASpxx tactors  \n"
		"\n"
		"First recup coordinate prediction, then proceed to a box selection to found\n"
		"rough contact list and finally compute the final contact list.  \n"
		"\n"
		"If reset not equal to 0, the initialization flag is reset and detection skipped  \n"
		"\n"
		"python usage : CSASp_SelectProxTactors(reset=0,use_external=0)  \n"
		"\n"
		"Parameters\n"
		"----------\n"
		"reset(integer) : if not 0, detection is skipped but the boxes will be computed\n"
		"    anew at next call  \n"
		"use_external(integer) : if not 0, external detection is used  \n"
		"\n"
		""},
	 { (char *)"CSASp_WriteLastVlocRloc", _wrap_CSASp_WriteLastVlocRloc, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"write last local values of all CSASp contacts  \n"
		"\n"
		"The values written are relative velocity, forces and local frame  \n"
		"\n"
		"python usage : CSASp_WriteLastVlocRloc()  \n"
		"\n"
		""},
	 { (char *)"CSASp_WriteOutVlocRloc", _wrap_CSASp_WriteOutVlocRloc, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"write local values of all CSASp contacts  \n"
		"\n"
		"The values written are relative velocity, forces and local frame  \n"
		"\n"
		"python usage : CSASp_WriteOutVlocRloc()  \n"
		"\n"
		""},
	 { (char *)"CSASp_DisplayOutVlocRloc", _wrap_CSASp_DisplayOutVlocRloc, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"display local values of all CSASp contacts  \n"
		"\n"
		"The values displayed are relative velocity, forces and local frame  \n"
		"\n"
		"python usage : CSASp_DisplayOutVlocRloc()  \n"
		"\n"
		""},
	 { (char *)"CSASp_DisplayProxTactors", _wrap_CSASp_DisplayProxTactors, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"display contacts  \n"
		"\n"
		"python usage : CSASp_DisplayProxTactors()  \n"
		"\n"
		""},
	 { (char *)"CSASp_ReadIniVlocRloc", _wrap_CSASp_ReadIniVlocRloc, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"Read VlocRloc file.  \n"
		"\n"
		"*   If num <= 0 : DATBOX/VlocRloc.INI file is read  \n"
		"*   Else : OUTBOX/VlocRloc.OUT.num is read, num being +the parameter used in\n"
		"    TimeEvolution_ReadIniVlocRloc last call  \n"
		"\n"
		"usage : CSASp_ReadIniVlocRloc(num=0)  \n"
		"\n"
		"Parameters\n"
		"----------\n"
		"num(integer) : which VlocRloc file to read  \n"
		"\n"
		""},
	 { (char *)"CSASp_SkipAutoContact", _wrap_CSASp_SkipAutoContact, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"avoid CSxxx/ASpxx contact detection when they belong to the same entity  \n"
		"\n"
		"python usage : CSASp_SkipAutoContact()  \n"
		"\n"
		""},
	 { (char *)"CSASp_SetNonSymmetricDetection", _wrap_CSASp_SetNonSymmetricDetection, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"this function allows non symetric detection i.e. only one interaction is kept\n"
		"when two bodies with candidate and antagonist contactors see each other  \n"
		"\n"
		"python usage : CSASp_SetNonSymmetricDetection()  \n"
		"\n"
		""},
	 { (char *)"CSASp_Trim", _wrap_CSASp_Trim, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"trim contact (only contact within surface - not with extremities)  \n"
		"\n"
		"python usage : CSASp_Trim()  \n"
		"\n"
		""},
	 { (char *)"CSASp_SetTrimAngle", _wrap_CSASp_SetTrimAngle, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"set the trim angle (only contact within surface - not with extremities)  \n"
		"\n"
		"python usage : CSASp_SetTrimAngle(angle)  \n"
		"\n"
		"Parameters\n"
		"----------\n"
		"angle(real) : angle in degree - default 87 deg  \n"
		"\n"
		""},
	 { (char *)"CSASp_AddReac", _wrap_CSASp_AddReac, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"add contact force to body Reac  \n"
		"\n"
		"python usage : CSASp_AddReac()  \n"
		"\n"
		""},
	 { (char *)"CSASp_AssumeOldFiles", _wrap_CSASp_AssumeOldFiles, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"to read file with the CSpxx rank instead of CSxxx one  \n"
		"\n"
		"python usage : CSASp_AssumeOldFiles()  \n"
		"\n"
		""},
	 { (char *)"CSASp_CleanMemory", _wrap_CSASp_CleanMemory, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"Free all memory allocated within CSASp module.  \n"
		"\n"
		"python usage : CSASp_CleanMemory()  \n"
		"\n"
		""},
	 { (char *)"CSPRx_SelectProxTactors", _wrap_CSPRx_SelectProxTactors, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"contact detection between CSxxx and PRxxx tactors  \n"
		"\n"
		"First recup coordinate prediction, then proceed to a box selection to found\n"
		"rough contact list and finally compute the final contact list.  \n"
		"\n"
		"python usage : CSPRx_SelectProxTactors(int reset=0)  \n"
		"\n"
		"Parameters\n"
		"----------\n"
		"reset(integer) : if not 0, detection is skipped but the boxes will be computed\n"
		"    anew at next call  \n"
		"\n"
		""},
	 { (char *)"CSPRx_WriteLastVlocRloc", _wrap_CSPRx_WriteLastVlocRloc, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"write last local values of all CSPRx contacts  \n"
		"\n"
		"The values written are relative velocity, forces and local frame  \n"
		"\n"
		"python usage : CSPRx_WriteLastVlocRloc()  \n"
		"\n"
		"The values written are relative velocity, forces and local frame  \n"
		"\n"
		""},
	 { (char *)"CSPRx_WriteOutVlocRloc", _wrap_CSPRx_WriteOutVlocRloc, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"write local values of all CSPRx contacts  \n"
		"\n"
		"The values written are relative velocity, forces and local frame  \n"
		"\n"
		"python usage : CSPRx_WriteOutVlocRloc()  \n"
		"\n"
		""},
	 { (char *)"CSPRx_DisplayOutVlocRloc", _wrap_CSPRx_DisplayOutVlocRloc, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"display local values of all CSPRx contacts  \n"
		"\n"
		"The values displayed are relative velocity, forces and local frame  \n"
		"\n"
		"python usage : CSPRx_DisplayOutVlocRloc()  \n"
		"\n"
		""},
	 { (char *)"CSPRx_DisplayProxTactors", _wrap_CSPRx_DisplayProxTactors, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"display contacts  \n"
		"\n"
		"python usage : CSPRx_DisplayProxTactors()  \n"
		"\n"
		""},
	 { (char *)"CSPRx_ReadIniVlocRloc", _wrap_CSPRx_ReadIniVlocRloc, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"Read VlocRloc file.  \n"
		"\n"
		"*   If num <= 0 : DATBOX/VlocRloc.INI file is read  \n"
		"*   Else : OUTBOX/VlocRloc.OUT.num is read, num being +the parameter used in\n"
		"    TimeEvolution_ReadIniVlocRloc last call  \n"
		"\n"
		"usage : CSPRx_ReadIniVlocRloc(num=0)  \n"
		"\n"
		"Parameters\n"
		"----------\n"
		"num(integer) : which VlocRloc file to read  \n"
		"\n"
		""},
	 { (char *)"CSPRx_Trim", _wrap_CSPRx_Trim, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"trim contact (only node face contact)  \n"
		"\n"
		"python usage : CSPRx_Trim()  \n"
		"\n"
		""},
	 { (char *)"CSPRx_GetInfo", _wrap_CSPRx_GetInfo, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"return contact info for the icdan CSPRx contact  \n"
		"\n"
		"python usage : a = CSPRx_GetInfo(icdan)  \n"
		"\n"
		"Parameters\n"
		"----------\n"
		"icdan(integer) : contact identifiant  \n"
		"\n"
		"Returns\n"
		"-------\n"
		"a (array integer) : info array  \n"
		"\n"
		""},
	 { (char *)"CSPRx_Smoothing", _wrap_CSPRx_Smoothing, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"smooth contact reaction  \n"
		"\n"
		"python usage : CSPRx_Smmothing()  \n"
		"\n"
		""},
	 { (char *)"CSPRx_AddReac", _wrap_CSPRx_AddReac, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"add contact force to body Reac  \n"
		"\n"
		"python usage : CSPRx_AddReac()  \n"
		"\n"
		""},
	 { (char *)"CSPRx_CleanMemory", _wrap_CSPRx_CleanMemory, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"Free all memory allocated within CSPRx module.  \n"
		"\n"
		"python usage : CSPRx_CleanMemory()  \n"
		"\n"
		""},
	 { (char *)"PRASp_SelectProxTactors", _wrap_PRASp_SelectProxTactors, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"contact detection between PRxxx and ASpxx tactors  \n"
		"\n"
		"python usage : PRASp_SelectProxTactors(int reset=0) param[in] reset (integer) :\n"
		"if not 0, detection is skipped but the boxes will be computed anew at next call  \n"
		"\n"
		"First recup coordinate prediction, then proceed to a box selection to found\n"
		"rough contact list and finally compute the final contact list.  \n"
		"\n"
		""},
	 { (char *)"PRASp_WriteLastVlocRloc", _wrap_PRASp_WriteLastVlocRloc, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"write last local values of all PRASp contacts  \n"
		"\n"
		"python usage : PRASp_WriteLastVlocRloc()  \n"
		"\n"
		"\n"
		" the values written are relative velocity, forces and local frame  \n"
		"\n"
		""},
	 { (char *)"PRASp_WriteOutVlocRloc", _wrap_PRASp_WriteOutVlocRloc, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"write local values of all PRASp contacts  \n"
		"\n"
		"python usage : PRASp_WriteOutVlocRloc()  \n"
		"\n"
		"\n"
		" the values written are relative velocity, forces and local frame  \n"
		"\n"
		""},
	 { (char *)"PRASp_DisplayOutVlocRloc", _wrap_PRASp_DisplayOutVlocRloc, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"display local values of all PRASp contacts  \n"
		"\n"
		"python usage : PRASp_DisplayOutVlocRloc()  \n"
		"\n"
		"\n"
		" the values displayed are relative velocity, forces and local frame  \n"
		"\n"
		""},
	 { (char *)"PRASp_DisplayProxTactors", _wrap_PRASp_DisplayProxTactors, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"display contacts  \n"
		"\n"
		"python usage : PRASp_DisplayProxTactors()  \n"
		"\n"
		""},
	 { (char *)"PRASp_ReadIniVlocRloc", _wrap_PRASp_ReadIniVlocRloc, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"Read VlocRloc file.  \n"
		"\n"
		"If num <= 0 : DATBOX/VlocRloc.INI file is read Else : OUTBOX/VlocRloc.OUT.num is\n"
		"read, num being the parameter used in TimeEvolution_ReadIniVlocRloc last call  \n"
		"\n"
		"usage : PRASp_ReadIniVlocRloc(num=0)  \n"
		"\n"
		"Parameters\n"
		"----------\n"
		"num(integer) : which VlocRloc file to read  \n"
		"\n"
		""},
	 { (char *)"PRASp_CleanMemory", _wrap_PRASp_CleanMemory, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"Free all memory allocated within PRASp module.  \n"
		"\n"
		"python usage : PRASp_CleanMemory()  \n"
		"\n"
		""},
	 { (char *)"PRPLx_SelectProxTactors", _wrap_PRPLx_SelectProxTactors, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"contact detection between PRxxx and PLxxx tactors  \n"
		"\n"
		"python usage : PRPLx_SelectProxTactors(reset=0) param[in] reset (integer) : if\n"
		"not 0, detection is skipped but the boxes will be computed anew at next call  \n"
		"\n"
		"First recup coordinate prediction, then proceed to a box selection to found\n"
		"rough contact list and finally compute the final contact list.  \n"
		"\n"
		""},
	 { (char *)"PRPLx_WriteLastVlocRloc", _wrap_PRPLx_WriteLastVlocRloc, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"write last local values of all PRPLx contacts  \n"
		"\n"
		"python usage : PRPLx_WriteLastVlocRloc()  \n"
		"\n"
		"\n"
		" the values written are relative velocity, forces and local frame  \n"
		"\n"
		""},
	 { (char *)"PRPLx_WriteOutVlocRloc", _wrap_PRPLx_WriteOutVlocRloc, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"write local values of all PRPLx contacts  \n"
		"\n"
		"python usage : PRPLx_WriteOutVlocRloc()  \n"
		"\n"
		"\n"
		" the values written are relative velocity, forces and local frame  \n"
		"\n"
		""},
	 { (char *)"PRPLx_DisplayOutVlocRloc", _wrap_PRPLx_DisplayOutVlocRloc, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"display local values of all PRPLx contacts  \n"
		"\n"
		"python usage : PRPLx_DisplayOutVlocRloc()  \n"
		"\n"
		"\n"
		" the values displayed are relative velocity, forces and local frame  \n"
		"\n"
		""},
	 { (char *)"PRPLx_DisplayProxTactors", _wrap_PRPLx_DisplayProxTactors, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"display contacts  \n"
		"\n"
		"python usage : PRPLx_DisplayProxTactors()  \n"
		"\n"
		""},
	 { (char *)"PRPLx_ReadIniVlocRloc", _wrap_PRPLx_ReadIniVlocRloc, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"Read VlocRloc file.  \n"
		"\n"
		"If num <= 0 : DATBOX/VlocRloc.INI file is read Else : OUTBOX/VlocRloc.OUT.num is\n"
		"read, num being the parameter used in TimeEvolution_ReadIniVlocRloc last call  \n"
		"\n"
		"usage : PRPLx_ReadIniVlocRloc(num=0)  \n"
		"\n"
		"Parameters\n"
		"----------\n"
		"num(integer) : which VlocRloc file to read  \n"
		"\n"
		""},
	 { (char *)"PRPLx_CleanMemory", _wrap_PRPLx_CleanMemory, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"Free all memory allocated within PRPLx module.  \n"
		"\n"
		"python usage : PRPLx_CleanMemory()  \n"
		"\n"
		""},
	 { (char *)"PRPRx_SelectProxTactors", _wrap_PRPRx_SelectProxTactors, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"contact detection between PRxxx and PRxxx tactors  \n"
		"\n"
		"First recup coordinate prediction, then proceed to a box selection to found\n"
		"rough contact list and finally compute the final contact list.  \n"
		"\n"
		"python usage : PRPRx_SelectProxTactors(reset=0)  \n"
		"\n"
		"Parameters\n"
		"----------\n"
		"reset(integer) : if not 0, detection is skipped but the boxes will be computed\n"
		"    anew at next call  \n"
		"\n"
		""},
	 { (char *)"PRPRx_UseCpCundallDetection", _wrap_PRPRx_UseCpCundallDetection, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"chooses the Cundall iterative detection method  \n"
		"\n"
		"If shrink parameters are provided they may be conflicting with a call to\n"
		"PRPRx_ShrinkPolyrFaces function. Remind that that the shrink parameters provided\n"
		"here are lengths.  \n"
		"\n"
		"python usage : PRPRx_UseCpCundallDetection(nb_iter, cd_shrink=0., an_shrink=0.,\n"
		"delta=0.)  \n"
		"\n"
		"Parameters\n"
		"----------\n"
		"nb_iter(integer) : max number of iterations  \n"
		"cd_shrink(real) : shrink parameter (length) in clipper for candidate  \n"
		"an_shrink(real) : shrink parameter (length) in clipper for antagonist  \n"
		"delta(real) : intersection simplification parameter in clipper  \n"
		"\n"
		""},
	 { (char *)"PRPRx_UseCpF2fExplicitDetection", _wrap_PRPRx_UseCpF2fExplicitDetection, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"chooses the face 2 face combinatory detection method  \n"
		"\n"
		"If shrink parameters are provided they may be conflicting with a call to\n"
		"PRPRx_ShrinkPolyrFaces function. Remind that that the shrink parameters provided\n"
		"here are lengths.  \n"
		"\n"
		"python usage : PRPRx_UseCpF2fExplicitDetection(tol, cd_shrink=0., an_shrink=0.,\n"
		"delta=0.)  \n"
		"\n"
		"Parameters\n"
		"----------\n"
		"tol(real) : tolerance on normal orientations  \n"
		"cd_shrink(real) : shrink parameter (length) in clipper for candidate  \n"
		"an_shrink(real) : shrink parameter (length) in clipper for antagonist  \n"
		"delta(real) : intersection simplification parameter in clipper  \n"
		"\n"
		""},
	 { (char *)"PRPRx_UseCpF2fDetection", _wrap_PRPRx_UseCpF2fDetection, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"chooses a mix of the face 2 face and Cundall detection method  \n"
		"\n"
		"If shrink parameters are provided they may be conflicting with a call to\n"
		"PRPRx_ShrinkPolyrFaces function. Remind that that the shrink parameters provided\n"
		"here are lengths.  \n"
		"\n"
		"python usage : PRPRx_UseCpF2fDetection(tol, iter, cd_shrink=0., an_shrink=0.,\n"
		"delta=0.)  \n"
		"\n"
		"Parameters\n"
		"----------\n"
		"tol(real) : tolerance on normal orientations  \n"
		"iter(integer) : max number of iterations  \n"
		"cd_shrink(real) : shrink parameter (length) in clipper for candidate  \n"
		"an_shrink(real) : shrink parameter (length) in clipper for antagonist  \n"
		"delta(real) : intersection simplification parameter in clipper  \n"
		"\n"
		""},
	 { (char *)"PRPRx_UseNcDetection", _wrap_PRPRx_UseNcDetection, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"chooses contact detection methode between non-convex shapes  \n"
		"\n"
		"python usage : PRPRx_UseNcDetection(gdist)  \n"
		"\n"
		"Parameters\n"
		"----------\n"
		"gdist(real) : global distance  \n"
		"\n"
		""},
	 { (char *)"PRPRx_UseNcF2fDetection", _wrap_PRPRx_UseNcF2fDetection, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"chooses contact detection between between non-convex shapes using f2f strategy  \n"
		"\n"
		"python usage : PRPRx_UseNcF2fDetection(gdist,tol)  \n"
		"\n"
		"Parameters\n"
		"----------\n"
		"gdist(real) : global distance  \n"
		"tol(real) : tolerance on normal orientations  \n"
		"\n"
		""},
	 { (char *)"PRPRx_UseNcF2fExplicitDetection", _wrap_PRPRx_UseNcF2fExplicitDetection, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"chooses contact detection between between non-convex shapes using f2f strategy  \n"
		"\n"
		"python usage : PRPRx_UseNcF2fExplicitDetection(gdist,tol)  \n"
		"\n"
		"Parameters\n"
		"----------\n"
		"gdist(real) : global distance  \n"
		"tol(real) : tolerance on normal orientations  \n"
		"\n"
		""},
	 { (char *)"PRPRx_UseTrianglesIntersectionDetection", _wrap_PRPRx_UseTrianglesIntersectionDetection, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"chooses contact detection finding intersection in a soup of triangles.  \n"
		"\n"
		"The number of point provided is an internal parameter of the algorithm which\n"
		"control the maximum number of intersection points stored when looking for the\n"
		"triangles intersection before restricting it to only 4 of them. So it must be\n"
		"strictly superior to 4.  \n"
		"\n"
		"python usage : PRPRx_UseTrianglesIntersectionDetection(nb_max_pt=16)  \n"
		"\n"
		"Parameters\n"
		"----------\n"
		"nb_max_pt(integer): maximum contact points to store/check during detection  \n"
		"\n"
		""},
	 { (char *)"PRPRx_SetF2fMinimalSurfaceSize", _wrap_PRPRx_SetF2fMinimalSurfaceSize, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"set the minimum contact surface size with f2f algo otherwize contact is not\n"
		"computed  \n"
		"\n"
		"python usage : PRPRx_SetF2fMinimalSurfaceSize(tol)  \n"
		"\n"
		"Parameters\n"
		"----------\n"
		"tol(real) : minimum surface size  \n"
		"\n"
		""},
	 { (char *)"PRPRx_UseExternalDetection", _wrap_PRPRx_UseExternalDetection, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"chooses external contact detection (bindings)  \n"
		"\n"
		"python usage : PRPRx_UseExternalDetection()  \n"
		"\n"
		""},
	 { (char *)"PRPRx_WriteLastVlocRloc", _wrap_PRPRx_WriteLastVlocRloc, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"write last local values of all PRPRx contacts  \n"
		"\n"
		"The values written are relative velocity, forces and local frame  \n"
		"\n"
		"python usage : PRPRx_WriteLastVlocRloc()  \n"
		"\n"
		""},
	 { (char *)"PRPRx_WriteOutVlocRloc", _wrap_PRPRx_WriteOutVlocRloc, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"write local values of all PRPRx contacts  \n"
		"\n"
		"The values written are relative velocity, forces and local frame  \n"
		"\n"
		"python usage : PRPRx_WriteOutVlocRloc()  \n"
		"\n"
		""},
	 { (char *)"PRPRx_DisplayOutVlocRloc", _wrap_PRPRx_DisplayOutVlocRloc, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"display local values of all PRPRx contacts  \n"
		"\n"
		"The values displayed are relative velocity, forces and local frame  \n"
		"\n"
		"python usage : PRPRx_DisplayOutVlocRloc()  \n"
		"\n"
		""},
	 { (char *)"PRPRx_DisplayProxTactors", _wrap_PRPRx_DisplayProxTactors, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"display contacts  \n"
		"\n"
		"python usage : PRPRx_DisplayProxTactors()  \n"
		"\n"
		""},
	 { (char *)"PRPRx_ReadIniVlocRloc", _wrap_PRPRx_ReadIniVlocRloc, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"Read VlocRloc file.  \n"
		"\n"
		"*   If num <= 0 : DATBOX/VlocRloc.INI file is read  \n"
		"*   Else : OUTBOX/VlocRloc.OUT.num is read, num being\n"
		"    -   the parameter used in TimeEvolution_ReadIniVlocRloc last call  \n"
		"\n"
		"python usage : PRPRx_ReadIniVlocRloc(num=0)  \n"
		"\n"
		"Parameters\n"
		"----------\n"
		"num(integer) : which VlocRloc file to read  \n"
		"\n"
		""},
	 { (char *)"PRPRx_ShrinkPolyrFaces", _wrap_PRPRx_ShrinkPolyrFaces, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"Shrink the face of the candidate polyhedron for the detection.  \n"
		"\n"
		"May be conflicting with the shrink parameters of the detections functions used\n"
		"by clipper library. The difference is that clipper use a single length for all\n"
		"sample, whereas this function use a scale factor to retract the vertices of the\n"
		"candidate polyhedron inside the the surface.  \n"
		"\n"
		"python usage : PRPRx_ShrinkPolyrFaces(shrink)  \n"
		"\n"
		"Parameters\n"
		"----------\n"
		"shrink(real) : scale factor allowing to shrink candidate surface  \n"
		"\n"
		"    1.  no shrink, 1. no surface  \n"
		"\n"
		""},
	 { (char *)"PRPRx_LowSizeArrayPolyr", _wrap_PRPRx_LowSizeArrayPolyr, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"abscons parameter to manage memory allocation  \n"
		"\n"
		"python usage : PRPRx_LowSizeArrayPolyr(sfactor)  \n"
		"\n"
		"Parameters\n"
		"----------\n"
		"sfactor(integer) :  \n"
		"\n"
		""},
	 { (char *)"PRPRx_SaveProxTactorsToFile", _wrap_PRPRx_SaveProxTactorsToFile, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"write selected contacts to file  \n"
		"\n"
		"python usage : PRPRx_SaveProxTactorsToFile()  \n"
		"\n"
		""},
	 { (char *)"PRPRx_LoadProxTactorsFromFile", _wrap_PRPRx_LoadProxTactorsFromFile, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"load selected contact from files  \n"
		"\n"
		"python usage : PRPRx_LoadProxTactorsFromFile()  \n"
		"\n"
		""},
	 { (char *)"PRPRx_SetXPeriodicCondition", _wrap_PRPRx_SetXPeriodicCondition, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"initialise data for simulation using periodic condition  \n"
		"\n"
		"python usage : PRPRx_SetXPeriodicCondition(xperiod)  \n"
		"\n"
		"Parameters\n"
		"----------\n"
		"xperiod(real) : periode on x axis  \n"
		"\n"
		""},
	 { (char *)"PRPRx_SetYPeriodicCondition", _wrap_PRPRx_SetYPeriodicCondition, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"initialise data for simulation using periodic condition  \n"
		"\n"
		"python usage : PRPRx_SetYPeriodicCondition(yperiod)  \n"
		"\n"
		"Parameters\n"
		"----------\n"
		"yperiod(real) : period on y axis  \n"
		"yperiod(double) : period on y axis  \n"
		"\n"
		""},
	 { (char *)"PRPRx_VerboseF2F", _wrap_PRPRx_VerboseF2F, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"ask for verbose comment concerning contact detection between cd and an  \n"
		"\n"
		"python usage : PRPRx_VerboseF2F(cd,an)  \n"
		"\n"
		"Parameters\n"
		"----------\n"
		"cd(integer) : candidate  \n"
		"an(integer) : antagoniste  \n"
		"\n"
		""},
	 { (char *)"PRPRx_GetNbF2f", _wrap_PRPRx_GetNbF2f, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"Get the number of f2f structures stored This is the real size of the array, and\n"
		"not the number of active f2f structure.  \n"
		"\n"
		"python usage : nb_f2f = PRPRx_GetNbF2f()  \n"
		"\n"
		"Returns\n"
		"-------\n"
		"nb_f2f (integer) : the size of the f2f array  \n"
		"\n"
		""},
	 { (char *)"PRPRx_GetF2f2Inters", _wrap_PRPRx_GetF2f2Inters, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"Get the list of interactions for each face-to-face structure Array of integer\n"
		"with number of f2f, then for each f2f, the number of interactions then the list\n"
		"of interaction id.  \n"
		"\n"
		"python usage : f2f_inters = PRPRx_GetF2f2Inters()  \n"
		"\n"
		"Returns\n"
		"-------\n"
		"f2f_inters (integer array) : the integer array  \n"
		"\n"
		""},
	 { (char *)"PRPRx_GetF2fOutlines", _wrap_PRPRx_GetF2fOutlines, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"Get the connectivity of all intersection polytopes of all face2face and the\n"
		"corresponding coordinates.  \n"
		"\n"
		"The connectivity containes first the number of f2f, then for each, the number of\n"
		"polytope, then for each the number of vertices.  \n"
		"\n"
		"The coordinates must be counted from this ordering...  \n"
		"\n"
		"python usage : connec, points = PRPRx_GetF2fOutlines()  \n"
		"\n"
		"Returns\n"
		"-------\n"
		"\n"
		"*   connec (integer array) : the connectivities  \n"
		"*   points (double array) : the coordinates  \n"
		"\n"
		""},
	 { (char *)"PRPRx_GetF2fAllIdata", _wrap_PRPRx_GetF2fAllIdata, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"Get topological face id of cd/an for all F2f structure.  \n"
		"\n"
		"python usage : idata = PRPRx_GetF2fAllIdata()  \n"
		"\n"
		"Returns\n"
		"-------\n"
		"\n"
		"*   idata (integer array) : size [nb_f2fx2] with the face id  \n"
		"\n"
		""},
	 { (char *)"PRPRx_GetF2fCentralKernel", _wrap_PRPRx_GetF2fCentralKernel, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"Give the central kernel coordinates, the equivalent normal stress and if the\n"
		"center of pressure is inside.  \n"
		"\n"
		"python usage : ck_coor, sn, is_in = PRPRx_GetF2fStress(i_f2f)  \n"
		"\n"
		"Returns\n"
		"-------  \n"
		"\n"
		""},
	 { (char *)"PRPRx_GetF2fStress", _wrap_PRPRx_GetF2fStress, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"Give the polygons of the compressed and decompressed part and linear stress\n"
		"repartition.  \n"
		"\n"
		"In the case when the minimization algorithm failed, the decompression value is\n"
		"set to -99. so that when writing the vtk files, the 'ids' numbering is kept\n"
		"consistent.  \n"
		"\n"
		"python usage : coorC, sizeC, coorD, sizeD, sigma, decomp =\n"
		"PRPRx_GetF2fStress(i_f2f)  \n"
		"\n"
		"Returns\n"
		"-------  \n"
		"\n"
		""},
	 { (char *)"PRPRx_SetCundallNeighbor", _wrap_PRPRx_SetCundallNeighbor, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"set a neighbor distance around common plane to select projected nodes  \n"
		"\n"
		"python usage : PRPRx_SetCundallNeighbor(neighbor)  \n"
		"\n"
		"Parameters\n"
		"----------\n"
		"neighbor(real) : ratio of a reference size  \n"
		"\n"
		""},
	 { (char *)"PRPRx_CpUseOldCcpm", _wrap_PRPRx_CpUseOldCcpm, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"use the old method for computing contact point position  \n"
		"\n"
		"python usage : PRPRx_CpUseOldCcpm()  \n"
		"\n"
		""},
	 { (char *)"PRPRx_SetReactionTrackingLength", _wrap_PRPRx_SetReactionTrackingLength, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"function which makes possible to set the length of the hexaedra glyph\n"
		"representing the visavis reaction  \n"
		"\n"
		"python usage : PRPRx_SetReactionTrackingLength(length)  \n"
		"\n"
		"Parameters\n"
		"----------\n"
		"length(real) : length the hexaedra glyph  \n"
		"\n"
		""},
	 { (char *)"PRPRx_SetTolRecupRloc", _wrap_PRPRx_SetTolRecupRloc, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"set the distance tolerance used in PRPRx_RecupRloc  \n"
		"\n"
		"python usage : PRPRx_SetTolRecupRloc(tol)  \n"
		"\n"
		"Parameters\n"
		"----------\n"
		"tol(double) : tolerance  \n"
		"\n"
		""},
	 { (char *)"PRPRx_GetInteractionVector", _wrap_PRPRx_GetInteractionVector, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"Get a copy of a vector of a PRPRx.  \n"
		"\n"
		"possible values for datatype field are \"Coor_\", \"N____\"  \n"
		"\n"
		"python usage : vector = PRPRx_GetInteractionVector(datatype, icdan)  \n"
		"\n"
		"Parameters\n"
		"----------\n"
		"datatype(string [5]) : the vector to get  \n"
		"icdan(integer) : rank of the PRPRx  \n"
		"\n"
		"Returns\n"
		"-------\n"
		"vector (double array) : output vector  \n"
		"\n"
		""},
	 { (char *)"PRPRx_SetInteractionInternal", _wrap_PRPRx_SetInteractionInternal, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"Set a value of the internal vector of a PRPRx.  \n"
		"\n"
		"python usage : PRPRx_SetInteractionInternal(i, icdan, value)  \n"
		"\n"
		"Parameters\n"
		"----------\n"
		"i(integer) : rank of internal  \n"
		"icdan(integer) : rank of the PRPRx  \n"
		"value(double) : value to set  \n"
		"\n"
		""},
	 { (char *)"PRPRx_GetInteractionInternal", _wrap_PRPRx_GetInteractionInternal, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"Get a value from the internal vector of a PRPRx.  \n"
		"\n"
		"python usage : value = PRPRx_GetInteractionInternal(i, icdan)  \n"
		"\n"
		"Parameters\n"
		"----------\n"
		"i(integer) : rank of internal  \n"
		"icdan(integer) : rank of the PRPRx  \n"
		"value(double) : value to get  \n"
		"\n"
		""},
	 { (char *)"PRPRx_GetInteractionInternalComment", _wrap_PRPRx_GetInteractionInternalComment, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"Get internal comment of a given interaction.  \n"
		"\n"
		"python usage : comment=PRPRx_GetInteractionInternalComment(icdan)  \n"
		"\n"
		"Parameters\n"
		"----------\n"
		"icdan(integer) : rank of the PRPRx  \n"
		"\n"
		"Returns\n"
		"-------\n"
		"comment (char[100]) : the string to get  \n"
		"\n"
		""},
	 { (char *)"PRPRx_WithNodalContact", _wrap_PRPRx_WithNodalContact, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"use cd contact points at nodes instead at faces with NcDetection  \n"
		"\n"
		"python usage : PRPRx_WithNodalContact()  \n"
		"\n"
		""},
	 { (char *)"PRPRx_SetInternalSurface", _wrap_PRPRx_SetInternalSurface, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"Set the value of a surface type (point, line or surf) for wti detection.  \n"
		"\n"
		"For surface, if the value is left to 0., then the surface of the triangle is\n"
		"computed To select the type of surface : 1->point, 2->line, 3->surface  \n"
		"\n"
		"python usage : PRPRx_SetInternalSurface(itype, value)  \n"
		"\n"
		"Parameters\n"
		"----------\n"
		"itype(integer) : the type of surface to set  \n"
		"value(double) : value to set  \n"
		"\n"
		""},
	 { (char *)"PRPRx_UseStoDetection", _wrap_PRPRx_UseStoDetection, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"chooses contact detection between between non-convex shapes using f2f strategy  \n"
		"\n"
		"Face to face detection implemented by Stono which can mix between the standard\n"
		"f2f detection and the non convex one. Furthermor the decompression parameter can\n"
		"help with putting the contact points either near the  \n"
		"\n"
		"python usage : PRPRx_UseFCDetection(explicite, decompression, tol, kappa)  \n"
		"\n"
		"Parameters\n"
		"----------\n"
		"explicite(boolean) : use explicit detection  \n"
		"decompression(double) : surface decompression (value in [-1., 1.])  \n"
		"tol(real) : tolerance on normal orientations  \n"
		"kappa(boolean) : compute kappas coefficient  \n"
		"\n"
		""},
	 { (char *)"PRPRx_ForceF2fDetection", _wrap_PRPRx_ForceF2fDetection, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"force f2f detection method even for non-convex surfaces  \n"
		"\n"
		"python usage : PRPRx_ForceF2fDetection()  \n"
		"\n"
		""},
	 { (char *)"PRPRx_ForceNcDetection", _wrap_PRPRx_ForceNcDetection, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"force nc detection method even for flat surfaces  \n"
		"\n"
		"python usage : PRPRx_ForceNcDetection()  \n"
		"\n"
		""},
	 { (char *)"PRPRx_CleanMemory", _wrap_PRPRx_CleanMemory, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"Free all memory allocated within PRPRx module.  \n"
		"\n"
		"python usage : PRPRx_CleanMemory()  \n"
		"\n"
		""},
	 { (char *)"PTPT3_SelectProxTactors", _wrap_PTPT3_SelectProxTactors, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"contact detection between PTxxx and PTxxx tactors  \n"
		"\n"
		"python usage : PTPT3_SelectProxTactors(reset=0) param[in] reset (integer) : if\n"
		"not 0, detection is skipped but the boxes will be computed anew at next call  \n"
		"\n"
		"First recup coordinate prediction, then proceed to a box selection to found\n"
		"rough contact list and finally compute the final contact list.  \n"
		"\n"
		""},
	 { (char *)"PTPT3_SmoothForceComputation", _wrap_PTPT3_SmoothForceComputation, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"computes smooth forces (if any)  \n"
		"\n"
		"python usage : PTPT3_SmoothForceComputation()  \n"
		"\n"
		""},
	 { (char *)"PTPT3_WriteLastVlocRloc", _wrap_PTPT3_WriteLastVlocRloc, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"write last local values of all PTPT3 contacts  \n"
		"\n"
		"python usage : PTPT3_WriteLastVlocRloc()  \n"
		"\n"
		"\n"
		" the values written are relative velocity, forces and local frame  \n"
		"\n"
		""},
	 { (char *)"PTPT3_WriteOutVlocRloc", _wrap_PTPT3_WriteOutVlocRloc, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"write local values of all PTPT3 contacts  \n"
		"\n"
		"python usage : PTPT3_WriteOutVlocRloc()  \n"
		"\n"
		"\n"
		" the values written are relative velocity, forces and local frame  \n"
		"\n"
		""},
	 { (char *)"PTPT3_DisplayOutVlocRloc", _wrap_PTPT3_DisplayOutVlocRloc, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"display local values of all PTPT3 contacts  \n"
		"\n"
		"python usage : PTPT3_DisplayOutVlocRloc()  \n"
		"\n"
		"\n"
		" the values displayed are relative velocity, forces and local frame  \n"
		"\n"
		""},
	 { (char *)"PTPT3_DisplayProxTactors", _wrap_PTPT3_DisplayProxTactors, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"display contacts  \n"
		"\n"
		"python usage : PTPT3_DisplayProxTactors()  \n"
		"\n"
		""},
	 { (char *)"PTPT3_LoadNetwork", _wrap_PTPT3_LoadNetwork, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"read a PTPT3 network from a file  \n"
		"\n"
		"python usage : PTPT3_LoadNetwork()  \n"
		"\n"
		""},
	 { (char *)"PTPT3_ReadIniVlocRloc", _wrap_PTPT3_ReadIniVlocRloc, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"Read VlocRloc file.  \n"
		"\n"
		"If num <= 0 : DATBOX/VlocRloc.INI file is read Else : OUTBOX/VlocRloc.OUT.num is\n"
		"read, num being the parameter used in TimeEvolution_ReadIniVlocRloc last call  \n"
		"\n"
		"usage : PTPT3_ReadIniVlocRloc(num=0)  \n"
		"\n"
		"Parameters\n"
		"----------\n"
		"num(integer) : which VlocRloc file to read  \n"
		"\n"
		""},
	 { (char *)"PTPT3_SetXPeriodicCondition", _wrap_PTPT3_SetXPeriodicCondition, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"initialise data for simulation using periodic condition  \n"
		"\n"
		"python usage : PTPT3_SetXPeriodicCondition(xperiod)  \n"
		"\n"
		"Parameters\n"
		"----------\n"
		"xperiod(real) : period on x axis  \n"
		"\n"
		""},
	 { (char *)"PTPT3_SetYPeriodicCondition", _wrap_PTPT3_SetYPeriodicCondition, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"initialise data for simulation using periodic condition  \n"
		"\n"
		"python usage : PTPT3_SetYPeriodicCondition(yperiod)  \n"
		"\n"
		"Parameters\n"
		"----------\n"
		"yperiod(real) : period on y axis  \n"
		"\n"
		""},
	 { (char *)"PTPT3_SetExplicitLocalFrame", _wrap_PTPT3_SetExplicitLocalFrame, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"local frame is computed only once at the first step  \n"
		"\n"
		"python usage : PTPT3_SetExplicitLocalFrame()  \n"
		"\n"
		""},
	 { (char *)"PTPT3_LoadParams", _wrap_PTPT3_LoadParams, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"read a PTPT3 surface and l0 from a file  \n"
		"\n"
		"python usage : PTPT3_LoadParams()  \n"
		"\n"
		""},
	 { (char *)"PTPT3_UseCurrentNonuc0", _wrap_PTPT3_UseCurrentNonuc0, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"Use GetCoor or value given from file insted of computing nonuc0 from reference\n"
		"coordinates.  \n"
		"\n"
		"python usage : PTPT3_UseCurrentNonuc0(to_use) param[in] to_use (integer) : 1 to\n"
		"activate, 0 to deactivate feature  \n"
		"\n"
		""},
	 { (char *)"PTPT3_CleanMemory", _wrap_PTPT3_CleanMemory, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"Free all memory allocated within PTPT3 module.  \n"
		"\n"
		"python usage : PTPT3_CleanMemory()  \n"
		"\n"
		""},
	 { (char *)"SPCDx_SelectProxTactors", _wrap_SPCDx_SelectProxTactors, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"contact detection between SPxxx and CDxxx tactors  \n"
		"\n"
		"python usage : SPCDx_SelectProxTactors(reset=0) param[in] reset (integer) : if\n"
		"not 0, detection is skipped but the boxes will be computed anew at next call  \n"
		"\n"
		"First recup coordinate prediction, then proceed to a box selection to found\n"
		"rough contact list and finally compute the final contact list.  \n"
		"\n"
		""},
	 { (char *)"SPCDx_SmoothForceComputation", _wrap_SPCDx_SmoothForceComputation, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"computes smooth forces (if any)  \n"
		"\n"
		"python usage : SPCDx_SmoothForceComputation()  \n"
		"\n"
		""},
	 { (char *)"SPCDx_WriteLastVlocRloc", _wrap_SPCDx_WriteLastVlocRloc, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"write last local values of all SPCDx contacts  \n"
		"\n"
		"python usage : SPCDx_WriteLastVlocRloc()  \n"
		"\n"
		"\n"
		" the values written are relative velocity, forces and local frame  \n"
		"\n"
		""},
	 { (char *)"SPCDx_WriteOutVlocRloc", _wrap_SPCDx_WriteOutVlocRloc, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"write local values of all SPCDx contacts  \n"
		"\n"
		"python usage : SPCDx_WriteOutVlocRloc()  \n"
		"\n"
		"\n"
		" the values written are relative velocity, forces and local frame  \n"
		"\n"
		""},
	 { (char *)"SPCDx_DisplayOutVlocRloc", _wrap_SPCDx_DisplayOutVlocRloc, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"display local values of all SPCDx contacts  \n"
		"\n"
		"python usage : SPCDx_DisplayOutVlocRloc()  \n"
		"\n"
		"\n"
		" the values displayed are relative velocity, forces and local frame  \n"
		"\n"
		""},
	 { (char *)"SPCDx_DisplayProxTactors", _wrap_SPCDx_DisplayProxTactors, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"display contacts  \n"
		"\n"
		"python usage : SPCDx_DisplayProxTactors()  \n"
		"\n"
		""},
	 { (char *)"SPCDx_ReadIniVlocRloc", _wrap_SPCDx_ReadIniVlocRloc, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"Read VlocRloc file.  \n"
		"\n"
		"If num <= 0 : DATBOX/VlocRloc.INI file is read Else : OUTBOX/VlocRloc.OUT.num is\n"
		"read, num being the parameter used in TimeEvolution_ReadIniVlocRloc last call  \n"
		"\n"
		"usage : SPCDx_ReadIniVlocRloc(num=0)  \n"
		"\n"
		"Parameters\n"
		"----------\n"
		"num(integer) : which VlocRloc file to read  \n"
		"\n"
		""},
	 { (char *)"SPCDx_CleanMemory", _wrap_SPCDx_CleanMemory, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"Free all memory allocated within SPCDx module.  \n"
		"\n"
		"python usage : SPCDx_CleanMemory()  \n"
		"\n"
		""},
	 { (char *)"SPDCx_SelectProxTactors", _wrap_SPDCx_SelectProxTactors, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"contact detection between SPxxx and DCxxx tactors  \n"
		"\n"
		"python usage : SPDCx_SelectProxTactors(reset=0) param[in] reset (integer) : if\n"
		"not 0, detection is skipped but the boxes will be computed anew at next call  \n"
		"\n"
		"First recup coordinate prediction, then proceed to a box selection to found\n"
		"rough contact list and finally compute the final contact list.  \n"
		"\n"
		""},
	 { (char *)"SPDCx_SmoothForceComputation", _wrap_SPDCx_SmoothForceComputation, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"computes smooth forces (if any)  \n"
		"\n"
		"python usage : SPDCx_SmoothForceComputation()  \n"
		"\n"
		""},
	 { (char *)"SPDCx_WriteLastVlocRloc", _wrap_SPDCx_WriteLastVlocRloc, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"write last local values of all SPDCx contacts  \n"
		"\n"
		"python usage : SPDCx_WriteLastVlocRloc()  \n"
		"\n"
		"\n"
		" the values written are relative velocity, forces and local frame  \n"
		"\n"
		""},
	 { (char *)"SPDCx_WriteOutVlocRloc", _wrap_SPDCx_WriteOutVlocRloc, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"write local values of all SPDCx contacts  \n"
		"\n"
		"python usage : SPDCx_WriteOutVlocRloc()  \n"
		"\n"
		"\n"
		" the values written are relative velocity, forces and local frame  \n"
		"\n"
		""},
	 { (char *)"SPDCx_DisplayOutVlocRloc", _wrap_SPDCx_DisplayOutVlocRloc, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"display local values of all SPDCx contacts  \n"
		"\n"
		"python usage : SPDCx_DisplayOutVlocRloc()  \n"
		"\n"
		"\n"
		" the values displayed are relative velocity, forces and local frame  \n"
		"\n"
		""},
	 { (char *)"SPDCx_DisplayProxTactors", _wrap_SPDCx_DisplayProxTactors, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"display contacts  \n"
		"\n"
		"python usage : SPDCx_DisplayProxTactors()  \n"
		"\n"
		""},
	 { (char *)"SPDCx_ReadIniVlocRloc", _wrap_SPDCx_ReadIniVlocRloc, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"Read VlocRloc file.  \n"
		"\n"
		"If num <= 0 : DATBOX/VlocRloc.INI file is read Else : OUTBOX/VlocRloc.OUT.num is\n"
		"read, num being the parameter used in TimeEvolution_ReadIniVlocRloc last call  \n"
		"\n"
		"usage : SPDCx_ReadIniVlocRloc(num=0)  \n"
		"\n"
		"Parameters\n"
		"----------\n"
		"num(integer) : which VlocRloc file to read  \n"
		"\n"
		""},
	 { (char *)"SPDCx_CleanMemory", _wrap_SPDCx_CleanMemory, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"Free all memory allocated within SPDCx module.  \n"
		"\n"
		"python usage : SPDCx_CleanMemory()  \n"
		"\n"
		""},
	 { (char *)"SPPLx_SelectProxTactors", _wrap_SPPLx_SelectProxTactors, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"contact detection between SPxxx and PLxxx tactors  \n"
		"\n"
		"python usage : SPPLx_SelectProxTactors(reset=0) param[in] reset (integer) : if\n"
		"not 0, detection is skipped but the boxes will be computed anew at next call  \n"
		"\n"
		"First recup coordinate prediction, then proceed to a box selection to found\n"
		"rough contact list and finally compute the final contact list.  \n"
		"\n"
		""},
	 { (char *)"SPPLx_SmoothForceComputation", _wrap_SPPLx_SmoothForceComputation, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"compute smooth contact law (in any)  \n"
		"\n"
		"python usage : SPPLx_SmoothForceComputation()  \n"
		"\n"
		""},
	 { (char *)"SPPLx_WriteLastVlocRloc", _wrap_SPPLx_WriteLastVlocRloc, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"write last local values of all SPPLx contacts  \n"
		"\n"
		"python usage : SPPLx_WriteLastVlocRloc()  \n"
		"\n"
		"\n"
		" the values written are relative velocity, forces and local frame  \n"
		"\n"
		""},
	 { (char *)"SPPLx_WriteOutVlocRloc", _wrap_SPPLx_WriteOutVlocRloc, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"write local values of all SPPLx contacts  \n"
		"\n"
		"python usage : SPPLx_WriteOutVlocRloc()  \n"
		"\n"
		"\n"
		" the values written are relative velocity, forces and local frame  \n"
		"\n"
		""},
	 { (char *)"SPPLx_DisplayOutVlocRloc", _wrap_SPPLx_DisplayOutVlocRloc, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"display local values of all SPPLx contacts  \n"
		"\n"
		"python usage : SPPLx_DisplayOutVlocRloc()  \n"
		"\n"
		"\n"
		" the values displayed are relative velocity, forces and local frame  \n"
		"\n"
		""},
	 { (char *)"SPPLx_DisplayProxTactors", _wrap_SPPLx_DisplayProxTactors, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"display contacts  \n"
		"\n"
		"python usage : SPPLx_DisplayProxTactors()  \n"
		"\n"
		""},
	 { (char *)"SPPLx_ReadIniVlocRloc", _wrap_SPPLx_ReadIniVlocRloc, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"Read VlocRloc file.  \n"
		"\n"
		"If num <= 0 : DATBOX/VlocRloc.INI file is read Else : OUTBOX/VlocRloc.OUT.num is\n"
		"read, num being the parameter used in TimeEvolution_ReadIniVlocRloc last call  \n"
		"\n"
		"usage : SPPLx_ReadIniVlocRloc(num=0)  \n"
		"\n"
		"Parameters\n"
		"----------\n"
		"num(integer) : which VlocRloc file to read  \n"
		"\n"
		""},
	 { (char *)"SPPLx_CleanMemory", _wrap_SPPLx_CleanMemory, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"Free all memory allocated within SPPLx module.  \n"
		"\n"
		"python usage : SPPLx_CleanMemory()  \n"
		"\n"
		""},
	 { (char *)"SPPRx_SelectProxTactors", _wrap_SPPRx_SelectProxTactors, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"contact detection between SPxxx and PLxxx tactors  \n"
		"\n"
		"python usage : SPPRx_SelectProxTactors(reset=0) param[in] reset (integer) : if\n"
		"not 0, detection is skipped but the boxes will be computed anew at next call  \n"
		"\n"
		"First recup coordinate prediction, then proceed to a box selection to found\n"
		"rough contact list and finally compute the final contact list.  \n"
		"\n"
		""},
	 { (char *)"SPPRx_SmoothForceComputation", _wrap_SPPRx_SmoothForceComputation, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"compute smooth contact law (in any)  \n"
		"\n"
		"python usage : SPPRx_SmoothForceComputation()  \n"
		"\n"
		""},
	 { (char *)"SPPRx_WriteLastVlocRloc", _wrap_SPPRx_WriteLastVlocRloc, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"write last local values of all SPPRx contacts  \n"
		"\n"
		"python usage : SPPRx_WriteLastVlocRloc()  \n"
		"\n"
		"\n"
		" the values written are relative velocity, forces and local frame  \n"
		"\n"
		""},
	 { (char *)"SPPRx_WriteOutVlocRloc", _wrap_SPPRx_WriteOutVlocRloc, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"write local values of all SPPRx contacts  \n"
		"\n"
		"python usage : SPPRx_WriteOutVlocRloc()  \n"
		"\n"
		"\n"
		" the values written are relative velocity, forces and local frame  \n"
		"\n"
		""},
	 { (char *)"SPPRx_DisplayOutVlocRloc", _wrap_SPPRx_DisplayOutVlocRloc, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"display local values of all SPPRx contacts  \n"
		"\n"
		"python usage : SPPRx_DisplayOutVlocRloc()  \n"
		"\n"
		"\n"
		" the values displayed are relative velocity, forces and local frame  \n"
		"\n"
		""},
	 { (char *)"SPPRx_DisplayProxTactors", _wrap_SPPRx_DisplayProxTactors, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"display contacts  \n"
		"\n"
		"python usage : SPPRx_DisplayProxTactors()  \n"
		"\n"
		""},
	 { (char *)"SPPRx_ReadIniVlocRloc", _wrap_SPPRx_ReadIniVlocRloc, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"Read VlocRloc file.  \n"
		"\n"
		"If num <= 0 : DATBOX/VlocRloc.INI file is read Else : OUTBOX/VlocRloc.OUT.num is\n"
		"read, num being the parameter used in TimeEvolution_ReadIniVlocRloc last call  \n"
		"\n"
		"usage : SPPRx_ReadIniVlocRloc(num=0)  \n"
		"\n"
		"Parameters\n"
		"----------\n"
		"num(integer) : which VlocRloc file to read  \n"
		"\n"
		""},
	 { (char *)"SPPRx_SetXPeriodicCondition", _wrap_SPPRx_SetXPeriodicCondition, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"initialise data for simulation using periodic condition  \n"
		"\n"
		"python usage : SPPRx_SetXPeriodicCondition(xperiod)  \n"
		"\n"
		"Parameters\n"
		"----------\n"
		"xperiod(real) : period on x axis  \n"
		"\n"
		""},
	 { (char *)"SPPRx_SetYPeriodicCondition", _wrap_SPPRx_SetYPeriodicCondition, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"initialise data for simulation using periodic condition  \n"
		"\n"
		"python usage : SPPRx_SetYPeriodicCondition(yperiod)  \n"
		"\n"
		"Parameters\n"
		"----------\n"
		"yperiod(real) : period on y axis  \n"
		"\n"
		""},
	 { (char *)"SPPRx_CleanMemory", _wrap_SPPRx_CleanMemory, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"Free all memory allocated within SPPRx module.  \n"
		"\n"
		"python usage : SPPRx_CleanMemory()  \n"
		"\n"
		""},
	 { (char *)"SPSPx_SelectProxTactors", _wrap_SPSPx_SelectProxTactors, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"contact detection between SPxxx and SPxxx tactors  \n"
		"\n"
		"python usage : SPSPx_SelectProxTactors(reset=0) param[in] reset (integer) : if\n"
		"not 0, detection is skipped but the boxes will be computed anew at next call  \n"
		"\n"
		"First recup coordinate prediction, then proceed to a box selection to found\n"
		"rough contact list and finally compute the final contact list.  \n"
		"\n"
		""},
	 { (char *)"SPSPx_SmoothForceComputation", _wrap_SPSPx_SmoothForceComputation, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"recup values of local contact forces of the last time step  \n"
		"\n"
		"python usage : SPSPx_SmoothForceComputation()  \n"
		"\n"
		""},
	 { (char *)"SPSPx_WriteLastVlocRloc", _wrap_SPSPx_WriteLastVlocRloc, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"write last local values of all SPSPx contacts  \n"
		"\n"
		"python usage : SPSPx_WriteLastVlocRloc()  \n"
		"\n"
		"\n"
		" the values written are relative velocity, forces and local frame  \n"
		"\n"
		""},
	 { (char *)"SPSPx_WriteOutVlocRloc", _wrap_SPSPx_WriteOutVlocRloc, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"write local values of all SPSPx contacts  \n"
		"\n"
		"python usage : SPSPx_WriteOutVlocRloc()  \n"
		"\n"
		"\n"
		" the values written are relative velocity, forces and local frame  \n"
		"\n"
		""},
	 { (char *)"SPSPx_DisplayOutVlocRloc", _wrap_SPSPx_DisplayOutVlocRloc, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"display local values of all SPSPx contacts  \n"
		"\n"
		"python usage : SPSPx_DisplayOutVlocRloc()  \n"
		"\n"
		"\n"
		" the values displayed are relative velocity, forces and local frame  \n"
		"\n"
		""},
	 { (char *)"SPSPx_DisplayProxTactors", _wrap_SPSPx_DisplayProxTactors, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"display contacts  \n"
		"\n"
		"python usage : SPSPx_DisplayProxTactors()  \n"
		"\n"
		""},
	 { (char *)"SPSPx_ReadIniVlocRloc", _wrap_SPSPx_ReadIniVlocRloc, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"Read VlocRloc file.  \n"
		"\n"
		"If num <= 0 : DATBOX/VlocRloc.INI file is read Else : OUTBOX/VlocRloc.OUT.num is\n"
		"read, num being the parameter used in TimeEvolution_ReadIniVlocRloc last call  \n"
		"\n"
		"usage : SPSPx_ReadIniVlocRloc(num=0)  \n"
		"\n"
		"Parameters\n"
		"----------\n"
		"num(integer) : which VlocRloc file to read  \n"
		"\n"
		""},
	 { (char *)"SPSPx_SetXPeriodicCondition", _wrap_SPSPx_SetXPeriodicCondition, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"initialise data for simulation using periodic condition  \n"
		"\n"
		"python usage : SPSPx_SetXPeriodicCondition(xperiod)  \n"
		"\n"
		"Parameters\n"
		"----------\n"
		"xperiod(real) : period on x axis  \n"
		"\n"
		""},
	 { (char *)"SPSPx_SetYPeriodicCondition", _wrap_SPSPx_SetYPeriodicCondition, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"initialise data for simulation using periodic condition  \n"
		"\n"
		"python usage : SPSPx_SetYPeriodicCondition(yperiod)  \n"
		"\n"
		"Parameters\n"
		"----------\n"
		"yperiod(real) : period on y axis  \n"
		"\n"
		""},
	 { (char *)"SPSPx_SetNumberInterByContact", _wrap_SPSPx_SetNumberInterByContact, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"define the number of interaction by contact (experimental)  \n"
		"\n"
		"python usage : SPSPx_SetNumberInterByContact(nb_interactions)  \n"
		"\n"
		"Parameters\n"
		"----------\n"
		"nb_interactions(integer) : number of interactions per contact  \n"
		"\n"
		""},
	 { (char *)"SPSPx_SetContactRadius", _wrap_SPSPx_SetContactRadius, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"define the contact radius (experimental)  \n"
		"\n"
		"python usage : SPSPx_SetContactRadius(radius)  \n"
		"\n"
		"Parameters\n"
		"----------\n"
		"radius(real) : contact radius  \n"
		"\n"
		""},
	 { (char *)"SPSPx_FdSelectProxTactors", _wrap_SPSPx_FdSelectProxTactors, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"contact detection between SPHER and SPHER tactors  \n"
		"\n"
		"python usage : SPSPx_FdSelectProxTactors()  \n"
		"\n"
		"First recup coordinate prediction, then proceed to a box selection to found\n"
		"rough contact list and finally compute the final contact list.  \n"
		"\n"
		""},
	 { (char *)"SPSPx_CleanMemory", _wrap_SPSPx_CleanMemory, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"Free all memory allocated within SPSPx module.  \n"
		"\n"
		"python usage : SPSPx_CleanMemory()  \n"
		"\n"
		""},
	 { (char *)"inter_handler_3D_tgetNb", _wrap_inter_handler_3D_tgetNb, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"return the number of interactions of the selected type stored in this data\n"
		"structure  \n"
		"\n"
		"python usage : nb_inter = inter_handler_3D_tgetNb(inter_id)  \n"
		"\n"
		"Parameters\n"
		"----------\n"
		"inter_id(integer) : type of interaction (lmgc90 parameter)  \n"
		"\n"
		"Returns\n"
		"-------\n"
		"nb_inter (integer) : number of interaction found of selected type  \n"
		"\n"
		""},
	 { (char *)"inter_handler_3D_tgetTactLawNb", _wrap_inter_handler_3D_tgetTactLawNb, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"return the contact law number of an interaction stored in this data structure  \n"
		"\n"
		"python usage : tact_law = inter_handler_3D_tgetTactLawNb(inter_id, icdan)  \n"
		"\n"
		"Parameters\n"
		"----------\n"
		"inter_id(integer) : type of interaction (lmgc90 parameter)  \n"
		"icdan(integer) : index of the interaction of selected type  \n"
		"\n"
		"Returns\n"
		"-------\n"
		"tact_law (integer) : contact law number  \n"
		"\n"
		""},
	 { (char *)"inter_handler_3D_tgetIdBodies", _wrap_inter_handler_3D_tgetIdBodies, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"return the serial numbers of contacting objects of an interaction stored in this\n"
		"data structure  \n"
		"\n"
		"python usage : idBodies = inter_handler_3D_tgetIdBodies(inter_id, icdan)  \n"
		"\n"
		"Parameters\n"
		"----------\n"
		"inter_id(integer) : type of interaction (lmgc90 parameter)  \n"
		"icdan(integer) : index of the interaction of selected type  \n"
		"\n"
		"Returns\n"
		"-------\n"
		"idBodies (integer) : array with cd and an bodies serial number  \n"
		"\n"
		""},
	 { (char *)"inter_handler_3D_tgetIData", _wrap_inter_handler_3D_tgetIData, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"Get the integer data of an interaction stored in this data structure.  \n"
		"\n"
		"idata vector holds cd body type, an body type, cd body id, an body id, cd\n"
		"contactor type, an contactory type, cd contactor id, an contactor id, cd\n"
		"subcontactor id, an subcontactor id, tact law id, status, number of internals  \n"
		"\n"
		"usage : idata = inter_handler_3D_tgetIData(inter_id, icdan)  \n"
		"\n"
		"Parameters\n"
		"----------\n"
		"inter_id(integer) : type of interaction (lmgc90 parameter)  \n"
		"icdan(integer) : index of the interaction of selected type  \n"
		"\n"
		"Returns\n"
		"-------\n"
		"idata (integer array) : the values array  \n"
		"\n"
		""},
	 { (char *)"inter_handler_3D_tgetRData", _wrap_inter_handler_3D_tgetRData, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"return the real data associated with an interactions  \n"
		"\n"
		"Get an output array with, in this order, : coor, t/n/suc, rlt/n/s, vlt/n/s,\n"
		"gapTT  \n"
		"\n"
		"python usage : rdata = inter_handler_3D_tgetRData(inter_id, icdan)  \n"
		"\n"
		"Parameters\n"
		"----------\n"
		"inter_id(integer) : type of interaction (lmgc90 parameter)  \n"
		"icdan(integer) : index of the interaction of selected type  \n"
		"\n"
		"Returns\n"
		"-------\n"
		"rdata (double array) : array with real data of the interaction  \n"
		"\n"
		""},
	 { (char *)"inter_handler_3D_tsetInternal", _wrap_inter_handler_3D_tsetInternal, METH_VARARGS, NULL},
	 { (char *)"inter_handler_3D_tgetInternal", _wrap_inter_handler_3D_tgetInternal, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"Get the internal of an interaction stored in this data structure.  \n"
		"\n"
		"usage : internal = inter_handler_3D_tgetInternal(inter_id, icdan)  \n"
		"\n"
		"Parameters\n"
		"----------\n"
		"inter_id(integer) : type of interaction (lmgc90 parameter)  \n"
		"icdan(integer) : index of the interaction of selected type  \n"
		"internal(double array) : the new values array  \n"
		"\n"
		""},
	 { (char *)"inter_handler_3D_getNbRecup", _wrap_inter_handler_3D_getNbRecup, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"return the number of recup interactions of the selected type  \n"
		"\n"
		"python usage : nb_recup = inter_handler_3D_getNbRecup(inter_id)  \n"
		"\n"
		"Parameters\n"
		"----------\n"
		"inter_id(integer) : type of interaction (lmgc90 parameter)  \n"
		"\n"
		"Returns\n"
		"-------\n"
		"nb_recup (integer) : number of interaction recup of selected type  \n"
		"\n"
		""},
	 { (char *)"inter_handler_3D_getNb", _wrap_inter_handler_3D_getNb, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"return the number of interactions of the selected type stored in verlet data\n"
		"structure  \n"
		"\n"
		"python usage : nb_inter = inter_handler_3D_getNb(inter_id)  \n"
		"\n"
		"Parameters\n"
		"----------\n"
		"inter_id(integer) : type of interaction (lmgc90 parameter)  \n"
		"\n"
		"Returns\n"
		"-------\n"
		"nb_inter (integer) : number of interaction found of selected type  \n"
		"\n"
		""},
	 { (char *)"inter_handler_3D_getAllTactLawNb", _wrap_inter_handler_3D_getAllTactLawNb, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"return the tact law number of all interactions stored in verlet data structure  \n"
		"\n"
		"python usage : vector = inter_handler_3D_getAllTactLawNb(inter_id)  \n"
		"\n"
		"Parameters\n"
		"----------\n"
		"inter_id(integer) : type of interaction (lmgc90 parameter)  \n"
		"\n"
		"Returns\n"
		"-------\n"
		"vector (int 1D-array) : mechanical data  \n"
		"\n"
		""},
	 { (char *)"inter_handler_3D_getAll", _wrap_inter_handler_3D_getAll, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"return\n"
		"coorx,coory,coorz,tx,ty,tz,nx,ny,nz,sx,sy,sz,rlt,rln,rls,vlt,vln,vls,gaptt of\n"
		"all 'verlet' interactions  \n"
		"\n"
		"python usage : array = inter_handler_3D_getAll(inter_id)  \n"
		"\n"
		"Parameters\n"
		"----------\n"
		"inter_id(integer) : type of interaction (lmgc90 parameter)  \n"
		"\n"
		"Returns\n"
		"-------\n"
		"array (double 2D-array) : mechanical data  \n"
		"\n"
		""},
	 { (char *)"inter_handler_3D_getAllInternal", _wrap_inter_handler_3D_getAllInternal, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"return contact point internal variables of all 'verlet' interactions  \n"
		"\n"
		"python usage : array = inter_handler_3D_getAllInternal()  \n"
		"\n"
		"Parameters\n"
		"----------\n"
		"inter_id(integer) : type of interaction (lmgc90 parameter)  \n"
		"\n"
		"Returns\n"
		"-------\n"
		"array (double 2D-array) : mechanical data  \n"
		"\n"
		""},
	 { (char *)"inter_handler_3D_getAllIdata", _wrap_inter_handler_3D_getAllIdata, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"return all integer data of all 'verlet' interaction  \n"
		"\n"
		"Which are in order cd body type, an body type, cd body id, an body id, cd\n"
		"contactor type, an contactory type, cd contactor id, an contactor id, cd\n"
		"subcontactor id, an subcontactor id, tact law id, status, number of internals  \n"
		"\n"
		"python usage : array = inter_handler_3D_getAllIdata(inter_id)  \n"
		"\n"
		"Parameters\n"
		"----------\n"
		"inter_id(integer) : type of interaction (lmgc90 parameter)  \n"
		"\n"
		"Returns\n"
		"-------\n"
		"array (int 2D-array) : identification data  \n"
		"\n"
		""},
	 { (char *)"inter_handler_3D_getVerletAdjsz", _wrap_inter_handler_3D_getVerletAdjsz, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"return integer number of verlet interaction of a candidate  \n"
		"\n"
		"python usage : iantac = inter_handler_3D_getVerletAdjsz(inter_id, icdtac)  \n"
		"\n"
		"Parameters\n"
		"----------\n"
		"inter_id(integer) : type of interaction (lmgc90 parameter)  \n"
		"icdtac(integer) : candidate contactor id  \n"
		"\n"
		"Returns\n"
		"-------\n"
		"iantac (integer) : number of verlet interactions on candidate  \n"
		"\n"
		""},
	 { (char *)"inter_handler_3D_getVerletIantac", _wrap_inter_handler_3D_getVerletIantac, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"return integer antagonist contact of a verlet interaction  \n"
		"\n"
		"python usage : iantac = inter_handler_3D_getVerletIantac(inter_id, icdtac, iadj)  \n"
		"\n"
		"Parameters\n"
		"----------\n"
		"inter_id(integer) : type of interaction (lmgc90 parameter)  \n"
		"icdtac(integer) : candidate contactor id  \n"
		"iadj(integer) : id of adjacent of candidate  \n"
		"\n"
		"Returns\n"
		"-------\n"
		"iantac (integer) : id of antagonist contactor corresponding to verlet\n"
		"interaction  \n"
		"\n"
		""},
	 { (char *)"inter_handler_3D_computeRnod", _wrap_inter_handler_3D_computeRnod, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"Put back the Reac value of bodies from (this) interactions.  \n"
		"\n"
		""},
	 { (char *)"inter_handler_3D_stockRloc", _wrap_inter_handler_3D_stockRloc, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"stock from this to verlet  \n"
		"\n"
		"python usage : inter_handler_3D_stockRloc(inter_id)  \n"
		"\n"
		"Parameters\n"
		"----------\n"
		"inter_id(integer) : type of interaction (lmgc90 parameter)  \n"
		"\n"
		""},
	 { (char *)"inter_handler_3D_recupRloc", _wrap_inter_handler_3D_recupRloc, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"recup from verlet to this  \n"
		"\n"
		"python usage : inter_handler_3D_recupRloc(inter_id)  \n"
		"\n"
		"Parameters\n"
		"----------\n"
		"inter_id(integer) : type of interaction (lmgc90 parameter)  \n"
		"\n"
		""},
	 { (char *)"inter_handler_3D_recupRlocByPos", _wrap_inter_handler_3D_recupRlocByPos, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"recup from verlet to this using position as criteria  \n"
		"\n"
		"Only available for CSASp inter_id  \n"
		"\n"
		"python usage : inter_handler_3D_recupRloc(inter_id, rtol)  \n"
		"\n"
		"Parameters\n"
		"----------\n"
		"inter_id(integer) : type of interaction (lmgc90 parameter)  \n"
		"rtol(real) : tolerance to decide if contact is recup  \n"
		"\n"
		""},
	 { (char *)"cpg_ExIter", _wrap_cpg_ExIter, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"Execute one CPG iteration over the contact loop.  \n"
		"\n"
		"python usage cpg_ExIter()  \n"
		"\n"
		""},
	 { (char *)"cpg_AfterIterCheck", _wrap_cpg_AfterIterCheck, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"Control CPG convergence.  \n"
		"\n"
		"python usage cpg_AfterIterCheck()  \n"
		"\n"
		""},
	 { (char *)"cpg_ExPost", _wrap_cpg_ExPost, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"Transfer local solution.  \n"
		"\n"
		"python usage cpg_ExPost()  \n"
		"\n"
		""},
	 { (char *)"cpg_ExPrep", _wrap_cpg_ExPrep, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"prepare the matrix and the RHS of the contact problem  \n"
		"\n"
		"python usage cpg_ExPrep()  \n"
		"\n"
		""},
	 { (char *)"cpg_ScaleRloc", _wrap_cpg_ScaleRloc, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"scale all local contact forces of a factor equal to 0.9 < f < 1.1  \n"
		"\n"
		"python usage cpg_ScaleRloc()  \n"
		"\n"
		""},
	 { (char *)"cpg_SetDiagonalPrecond", _wrap_cpg_SetDiagonalPrecond, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"active diagonal preconditioner  \n"
		"\n"
		"python usage cpg_SetDiagonalPrecond()  \n"
		"\n"
		""},
	 { (char *)"cpg_SetFrictionless", _wrap_cpg_SetFrictionless, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"active frictionless solver  \n"
		"\n"
		"python usage cpg_SetFrictionless()  \n"
		"\n"
		""},
	 { (char *)"cpg_SetNoConjugaison", _wrap_cpg_SetNoConjugaison, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"desactive conjugaison  \n"
		"\n"
		"python usage cpg_SetNoConjugaison()  \n"
		"\n"
		""},
	 { (char *)"cpg_SetCheckType", _wrap_cpg_SetCheckType, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"define numerical convergence of the NLGS algorithm  \n"
		"\n"
		"python usage cpg_SetCheckType(checktype, tol)  \n"
		"\n"
		"Parameters\n"
		"----------\n"
		"chekctype(char[5]) : type of convergence check  \n"
		"tol(double) : norm tolerance  \n"
		"\n"
		" convergence check keywords:  \n"
		" Quad : quadratic norm (faulty contacts are redeemed by accurate contacts;\n"
		"laxist norm)  \n"
		" Maxm : maximum norm (faulty contacts must comply; severe norm)  \n"
		" QM/16 : maximum of Quad and Maxm/16 norms (a compromise). For large dense\n"
		"collections Quad ranges usually around 1/16 Maxm  \n"
		" where Quad,Maxm,QM/16 are keywords for the check test, and the following real\n"
		"number is the tolerance value.  \n"
		"\n"
		""},
	 { (char *)"cpg_NormCheck", _wrap_cpg_NormCheck, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"Active one step norm evolution.  \n"
		"\n"
		"python usage : cpg_norm_check()  \n"
		"\n"
		""},
	 { (char *)"cpg_ExSolver", _wrap_cpg_ExSolver, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"Solve fully the local contact problem.  \n"
		"\n"
		"python usage : cpg_ExSolver(checktype, tol, nb_iter_check, nb_block_iter)  \n"
		"\n"
		"Parameters\n"
		"----------\n"
		"checktype(char[5]) c : convergentce test keyword  \n"
		"tol(double) : tolerance value  \n"
		"nb_iter_check(integer) : number of iteration between convergence test  \n"
		"nb_block_iter(integer) : number of block iterations  \n"
		"\n"
		""},
	 { (char *)"cpg_3D_ExIter", _wrap_cpg_3D_ExIter, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"Execute one CPG iteration over the contact loop.  \n"
		"\n"
		"python usage cpg_3D_ExIter()  \n"
		"\n"
		""},
	 { (char *)"cpg_3D_AfterIterCheck", _wrap_cpg_3D_AfterIterCheck, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"Control CPG convergence.  \n"
		"\n"
		"python usage cpg_3D_AfterIterCheck()  \n"
		"\n"
		""},
	 { (char *)"cpg_3D_ExPost", _wrap_cpg_3D_ExPost, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"Transfer local solution.  \n"
		"\n"
		"python usage cpg_3D_ExPost()  \n"
		"\n"
		""},
	 { (char *)"cpg_3D_ExPrep", _wrap_cpg_3D_ExPrep, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"prepare the matrix and the RHS of the contact problem  \n"
		"\n"
		"python usage cpg_3D_ExPrep()  \n"
		"\n"
		""},
	 { (char *)"cpg_3D_ScaleRloc", _wrap_cpg_3D_ScaleRloc, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"scale all local contact forces of a factor equal to 0.9 < f < 1.1  \n"
		"\n"
		"python usage cpg_3D_ScaleRloc()  \n"
		"\n"
		""},
	 { (char *)"cpg_3D_SetDiagonalPrecond", _wrap_cpg_3D_SetDiagonalPrecond, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"active diagonal preconditioner  \n"
		"\n"
		"python usage cpg_3D_SetDiagonalPrecond()  \n"
		"\n"
		""},
	 { (char *)"cpg_3D_SetFrictionless", _wrap_cpg_3D_SetFrictionless, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"active frictionless solver  \n"
		"\n"
		"python usage cpg_3D_SetFrictionless()  \n"
		"\n"
		""},
	 { (char *)"cpg_3D_BimodalContactOrder", _wrap_cpg_3D_BimodalContactOrder, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"active bimodal list  \n"
		"\n"
		"python usage : cpg_3D_BimodalContactOrder()  \n"
		"\n"
		""},
	 { (char *)"cpg_3D_SetCheckType", _wrap_cpg_3D_SetCheckType, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"define numerical convergence of the NLGS algorithm  \n"
		"\n"
		"python usage cpg_3D_SetCheckType(checktype, tol, idproj)  \n"
		"\n"
		"Parameters\n"
		"----------\n"
		"chekctype(char[5]) : type of convergence check  \n"
		"tol(double) : norm tolerance  \n"
		"idproj(integer) :  \n"
		"\n"
		" convergence check keywords:  \n"
		" Quad : quadratic norm (faulty contacts are redeemed by accurate contacts;\n"
		"laxist norm)  \n"
		" Maxm : maximum norm (faulty contacts must comply; severe norm)  \n"
		" where Quad,Maxm,QM/16 are keywords for the check test, and the following real\n"
		"number is the tolerance value.  \n"
		" The identifiant projection parameter corrsponds to :  \n"
		" PYRAMIDAL APPROXIMATION (1)  \n"
		" Efficient but no more isotropic friction  \n"
		" NORMAL PROJECTION (2)  \n"
		" The basic projection but not really efficient  \n"
		" HYBRID CORRECTION (3)  \n"
		" Efficient for sphere but not really sense for other bodies.  \n"
		"\n"
		""},
	 { (char *)"cpg_3D_NormCheck", _wrap_cpg_3D_NormCheck, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"Active one step norm evolution.  \n"
		"\n"
		"python usage : cpg_3D_norm_check()  \n"
		"\n"
		""},
	 { (char *)"cpg_3D_ExSolver", _wrap_cpg_3D_ExSolver, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"Solve fully the local contact problem.  \n"
		"\n"
		"python usage : cpg_3D_ExSolver(checktype, tol, idpoj, nb_iter_check,\n"
		"nb_block_iter)  \n"
		"\n"
		"Parameters\n"
		"----------\n"
		"checktype(char[5]) : convergentce test keyword  \n"
		"tol(double) : tolerance value  \n"
		"idproj(integer) :  \n"
		"nb_iter_check(integer) : number of iteration between convergence test  \n"
		"nb_block_iter(integer) : number of block iterations  \n"
		"\n"
		""},
	 { (char *)"mp_solver_ReadMpBehaviour", _wrap_mp_solver_ReadMpBehaviour, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"python usage : mp_solver_ReadMpBehaviour()  \n"
		"\n"
		""},
	 { (char *)"mp_solver_WriteMpBehaviour", _wrap_mp_solver_WriteMpBehaviour, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"python usage : mp_solver_WriteMpBehaviour()  \n"
		"\n"
		""},
	 { (char *)"mp_solver_ReadIniMpValues", _wrap_mp_solver_ReadIniMpValues, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"Read MP_VALUES file.  \n"
		"\n"
		"If num <= 0 : DATBOX/MP_VALUES.INI file is read Else : OUTBOX/MP_VALUES.OUT.num\n"
		"is read, num being the parameter used in TimeEvolution_ReadIniDof last call  \n"
		"\n"
		"usage : mp_solver_ReadIniMpValues(num=0)  \n"
		"\n"
		"Parameters\n"
		"----------\n"
		"num(integer) : which file to read  \n"
		"\n"
		""},
	 { (char *)"mp_solver_WriteOutMpValues", _wrap_mp_solver_WriteOutMpValues, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"python usage : mp_solver_WriteOutMpValues()  \n"
		"\n"
		""},
	 { (char *)"mp_solver_WriteLastMpValues", _wrap_mp_solver_WriteLastMpValues, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"python usage : mp_solver_WriteLastMpValues()  \n"
		"\n"
		""},
	 { (char *)"mp_solver_SolveElectro1G", _wrap_mp_solver_SolveElectro1G, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"python usage : mp_solver_SolveElectro1G()  \n"
		"\n"
		""},
	 { (char *)"mp_solver_SolveNlElectro1G", _wrap_mp_solver_SolveNlElectro1G, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"python usage : mp_solver_SolveNlElectro1G()  \n"
		"\n"
		""},
	 { (char *)"mp_solver_SolveThermoProblem", _wrap_mp_solver_SolveThermoProblem, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"python usage : mp_solver_SolveThermoProblem()  \n"
		"\n"
		""},
	 { (char *)"mp_solver_UpdateThermoProblem", _wrap_mp_solver_UpdateThermoProblem, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"python usage : mp_solver_UpdateThermoProblem()  \n"
		"\n"
		""},
	 { (char *)"mp_solver_RecupTemperature", _wrap_mp_solver_RecupTemperature, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"python usage : mp_solver_RecupTemperature()  \n"
		"\n"
		""},
	 { (char *)"mp_solver_RecupPotential", _wrap_mp_solver_RecupPotential, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"python usage : mp_solver_RecupPotential()  \n"
		"\n"
		""},
	 { (char *)"mp_solver_UpdateConductivity", _wrap_mp_solver_UpdateConductivity, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"python usage : mp_solver_UpdateConductivity()  \n"
		"\n"
		""},
	 { (char *)"mp_solver_InitThermalConductivity", _wrap_mp_solver_InitThermalConductivity, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"python usage : mp_solver_InitThermalConductivity()  \n"
		"\n"
		""},
	 { (char *)"mp_solver_GetBrancheValues", _wrap_mp_solver_GetBrancheValues, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		""},
	 { (char *)"mp_solver_PutHeatGenerationFactor", _wrap_mp_solver_PutHeatGenerationFactor, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"python usage : value = mp_solver_PutHeatGenerationFactor(ivalue)  \n"
		"\n"
		""},
	 { (char *)"mp_solver_PutHeatConductionContinueFactor", _wrap_mp_solver_PutHeatConductionContinueFactor, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"python usage : value = mp_solver_PutHeatConductionContinueFactor(ivalue)  \n"
		"\n"
		""},
	 { (char *)"mp_solver_3D_ReadMpBehaviour", _wrap_mp_solver_3D_ReadMpBehaviour, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"python usage : mp_solver_3D_ReadMpBehaviour()  \n"
		"\n"
		""},
	 { (char *)"mp_solver_3D_WriteMpBehaviour", _wrap_mp_solver_3D_WriteMpBehaviour, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"python usage : mp_solver_3D_WriteMpBehaviour()  \n"
		"\n"
		""},
	 { (char *)"mp_solver_3D_ReadIniMpValues", _wrap_mp_solver_3D_ReadIniMpValues, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"Read MP_VALUES file.  \n"
		"\n"
		"If num <= 0 : DATBOX/MP_VALUES.INI file is read Else : OUTBOX/MP_VALUES.OUT.num\n"
		"is read, num being the parameter used in TimeEvolution_ReadIniDof last call  \n"
		"\n"
		"usage : mp_solver_3D_ReadIniMpValues(num=0)  \n"
		"\n"
		"Parameters\n"
		"----------\n"
		"num(integer) : which file to read  \n"
		"\n"
		""},
	 { (char *)"mp_solver_3D_WriteOutMpValues", _wrap_mp_solver_3D_WriteOutMpValues, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"python usage : mp_solver_3D_WriteOutMpValues()  \n"
		"\n"
		""},
	 { (char *)"mp_solver_3D_WriteLastMpValues", _wrap_mp_solver_3D_WriteLastMpValues, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"python usage : mp_solver_3D_WriteLastMpValues()  \n"
		"\n"
		""},
	 { (char *)"mp_solver_3D_SolveElectro1G", _wrap_mp_solver_3D_SolveElectro1G, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"python usage : mp_solver_3D_SolveElectro1G()  \n"
		"\n"
		""},
	 { (char *)"mp_solver_3D_SolveNlElectro1G", _wrap_mp_solver_3D_SolveNlElectro1G, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"python usage : mp_solver_3D_SolveNlElectro1G()  \n"
		"\n"
		""},
	 { (char *)"mp_solver_3D_SolveThermoProblem", _wrap_mp_solver_3D_SolveThermoProblem, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"python usage : mp_solver_3D_SolveThermoProblem()  \n"
		"\n"
		""},
	 { (char *)"mp_solver_3D_UpdateThermoProblem", _wrap_mp_solver_3D_UpdateThermoProblem, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"python usage : mp_solver_3D_UpdateThermoProblem()  \n"
		"\n"
		""},
	 { (char *)"mp_solver_3D_RecupTemperature", _wrap_mp_solver_3D_RecupTemperature, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"python usage : mp_solver_3D_RecupTemperature()  \n"
		"\n"
		""},
	 { (char *)"mp_solver_3D_RecupPotential", _wrap_mp_solver_3D_RecupPotential, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"python usage : mp_solver_3D_RecupPotential()  \n"
		"\n"
		""},
	 { (char *)"mp_solver_3D_UpdateConductivity", _wrap_mp_solver_3D_UpdateConductivity, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"python usage : mp_solver_3D_UpdateConductivity()  \n"
		"\n"
		""},
	 { (char *)"nlgs_ExPrep", _wrap_nlgs_ExPrep, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"Prepare matrix storage.  \n"
		"\n"
		"python usage : nlgs_ExPrep(storage)  \n"
		"\n"
		"Parameters\n"
		"----------\n"
		"sotrage(char[30]) : matrix storage  \n"
		"\n"
		" prepare the matrix and the RHS of the contact problem in regards of the\n"
		"selected matrix storage:  \n"
		"\n"
		"*   Exchange_Local_Global (the standard case) only the diagonal blocks are\n"
		"    computed and stored.  \n"
		"*   Stored_Delassus_Loops (faster but memory expensive) the complete Delassus\n"
		"    matrix is computed.  \n"
		"\n"
		""},
	 { (char *)"nlgs_ExIter", _wrap_nlgs_ExIter, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"Execute NLGS iterations over the contact loop.  \n"
		"\n"
		"python usage : nlgs_ExIter(nb_iter) param[in] nb_iter (integer) : number of\n"
		"iterations to do  \n"
		"\n"
		""},
	 { (char *)"nlgs_ExPost", _wrap_nlgs_ExPost, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"Run a jacobi iteration with the solution obtained with the NLGS algorithm.  \n"
		"\n"
		"python usage : nlgs_ExPost()  \n"
		"\n"
		""},
	 { (char *)"nlgs_AfterIterCheck", _wrap_nlgs_AfterIterCheck, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"Control NLGS convergence.  \n"
		"\n"
		"python usage : convergence = nlgs_AfterIterCheck()  \n"
		"\n"
		"Returns\n"
		"-------\n"
		"convergence (integer) :  \n"
		"\n"
		""},
	 { (char *)"nlgs_DisplayAfterIterCheck", _wrap_nlgs_DisplayAfterIterCheck, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"Display NLGS convergence results.  \n"
		"\n"
		"python usage : nlgs_DisplayAfterIterCheck()  \n"
		"\n"
		""},
	 { (char *)"nlgs_NormCheck", _wrap_nlgs_NormCheck, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"Active one step norm evolution.  \n"
		"\n"
		"python usage : nlgs_NormCheck()  \n"
		"\n"
		""},
	 { (char *)"nlgs_UpdateTactBehav", _wrap_nlgs_UpdateTactBehav, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"Update internal parameters of contact lawz for each contact.  \n"
		"\n"
		"python usage : nlgs_UpdateTactBehav()  \n"
		"\n"
		""},
	 { (char *)"nlgs_SetCheckType", _wrap_nlgs_SetCheckType, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"Define numerical convergence of the NLGS algorithm.  \n"
		"\n"
		"python usage : nlgs_SetCheckType(check_type, tolerance, relaxation)  \n"
		"\n"
		"Parameters\n"
		"----------\n"
		"check_type(char[5]) : type of convergence check  \n"
		"tolerance(double) : norm tolerance  \n"
		"relaxation(double) : relaxation factor  \n"
		"\n"
		" convergence check keywords:  \n"
		" Quad : quadratic norm (faulty contacts are redeemed by accurate contacts;\n"
		"laxist norm)  \n"
		" Maxm : maximum norm (faulty contacts must comply; severe norm)  \n"
		" QM/16 : maximum of Quad and Maxm/16 norms (a compromise). For large dense\n"
		"collections Quad ranges usually around 1/16 Maxm  \n"
		" where Quad,Maxm,QM/16 are keywords for the check test, and the following real\n"
		"number is the tolerance value.  \n"
		"\n"
		""},
	 { (char *)"nlgs_ScrambleContactOrder", _wrap_nlgs_ScrambleContactOrder, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"Random renumbering of the contact list.  \n"
		"\n"
		"python usage : nlgs_ScrambleContactOrder()  \n"
		"\n"
		""},
	 { (char *)"nlgs_QuickScrambleContactOrder", _wrap_nlgs_QuickScrambleContactOrder, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"Random renumbering of the contact list.  \n"
		"\n"
		"python usage : nlgs_QuickScrambleContactOrder()  \n"
		"\n"
		""},
	 { (char *)"nlgs_SetWithQuickScramble", _wrap_nlgs_SetWithQuickScramble, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"active quick scramble in macro function ExSolver  \n"
		"\n"
		"python usage : nlgs_SetWithQuickScramble()  \n"
		"\n"
		""},
	 { (char *)"nlgs_ReverseContactOrder", _wrap_nlgs_ReverseContactOrder, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"Reverse the numbering of the contact list.  \n"
		"\n"
		"python usage : nlgs_ReverseContactOrder()  \n"
		"\n"
		""},
	 { (char *)"nlgs_BimodalContactOrder", _wrap_nlgs_BimodalContactOrder, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"Renumbering of the contact list using the definition of weak and strong network\n"
		"in granular assemblies.  \n"
		"\n"
		"python usage : nlgs_BimodalContactOrder()  \n"
		"\n"
		""},
	 { (char *)"nlgs_ScaleRloc", _wrap_nlgs_ScaleRloc, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"Scale all local contact forces of a factor equal to * 0.9 < f < 1.1.  \n"
		"\n"
		"python usage : nlgs_ScaleRloc()  \n"
		"\n"
		""},
	 { (char *)"nlgs_ComputeRnod", _wrap_nlgs_ComputeRnod, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"mapping from local contact forces to global ones  \n"
		"\n"
		"python usage : nlgs_ComputeRnod()  \n"
		"\n"
		""},
	 { (char *)"nlgs_DisplayRlocNSum", _wrap_nlgs_DisplayRlocNSum, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"Display the sum of normal contact forces.  \n"
		"\n"
		"python usage : nlgs_DisplayRlocNSum()  \n"
		"\n"
		""},
	 { (char *)"nlgs_ExSolver", _wrap_nlgs_ExSolver, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"Solve fully the local contact problem.  \n"
		"\n"
		"python usage : nlgs_ExSolver(storage, checktype, tol, relax, nb_iter_check,\n"
		"nb_block_iter)  \n"
		"\n"
		"Parameters\n"
		"----------\n"
		"storage(char[30]) : matrix storage (cf nlgs_ExPrep)  \n"
		"checktype(char[5]) : convergentce test keyword  \n"
		"tolerance(double) : tolerance value  \n"
		"relaxation(double) : relaxation number  \n"
		"nb_iter_check(integer) : number of iteration between convergence test  \n"
		"nb_block_iter(integer) : number of block iterations  \n"
		"\n"
		""},
	 { (char *)"nlgs_UpdateCohesiveBehav", _wrap_nlgs_UpdateCohesiveBehav, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"update internal parameters of contact laws for each contact  \n"
		"\n"
		"python usage : nlgs_UpdateCohesiveBehav(void)  \n"
		"\n"
		""},
	 { (char *)"nlgs_UpdateFrictionalBehav", _wrap_nlgs_UpdateFrictionalBehav, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"update internal parameters of contact laws for each contact  \n"
		"\n"
		"python usage : nlgs_UpdateFrictionalBehav(void)  \n"
		"\n"
		""},
	 { (char *)"nlgs_GetAllThis", _wrap_nlgs_GetAllThis, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"Get all interactions in \"this\" array.  \n"
		"\n"
		"Each interaction has (in this order): coor, tuc, nuc, rlt, rln, vlt, vln  \n"
		"\n"
		"usage : interactions = nlgs_GetAllThis()  \n"
		"\n"
		"Returns\n"
		"-------\n"
		"interactions (double 2D-array) : the interactions  \n"
		"\n"
		""},
	 { (char *)"nlgs_UseJacobiSolver", _wrap_nlgs_UseJacobiSolver, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"Use a Jacobi solver instead of Gauss Seidel solver.  \n"
		"\n"
		"usage : nlgs_UseJacobiSolver(True) or nlgs_UseJacobiSolver(False)  \n"
		"\n"
		""},
	 { (char *)"nlgs_UseRegularization", _wrap_nlgs_UseRegularization, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"use some regularization heuristics on interaction laws  \n"
		"\n"
		"python usage : nlgs_UseRegularization(krn, krt)  \n"
		"\n"
		"Parameters\n"
		"----------\n"
		"krn(double) : normal penality (default 1e14)  \n"
		"krt(double) : tangential penality (default 1e14)  \n"
		"\n"
		""},
	 { (char *)"nlgs_SetTemporaryVariable", _wrap_nlgs_SetTemporaryVariable, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"set temporary variables used in nlgs ; ivalue2 == 3 gives access to post crack\n"
		"pressure  \n"
		"\n"
		"python usage : nlgs_SetTemporaryVariable(icdan,id,val)  \n"
		"\n"
		"Parameters\n"
		"----------\n"
		"icdan(int) : interaction rank  \n"
		"id(int) : value rank  \n"
		"val(double) : value  \n"
		"\n"
		""},
	 { (char *)"nlgs_GetTemporaryVariable", _wrap_nlgs_GetTemporaryVariable, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"get temporary variables used in nlgs ; ivalue2 == 3 gives access to post crack\n"
		"pressure  \n"
		"\n"
		"python usage : val = nlgs_GetTemporaryVariable(icdan,id)  \n"
		"\n"
		"Parameters\n"
		"----------\n"
		"icdan(int) : interaction rank  \n"
		"id(int) : value rank  \n"
		"val(double) : value  \n"
		"\n"
		""},
	 { (char *)"nlgs_IsInitialized", _wrap_nlgs_IsInitialized, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"In case of restart say that nlgs is initialized or reset it.  \n"
		"\n"
		"python usage : nlgs_IsInitialized(is_init=1)  \n"
		"\n"
		""},
	 { (char *)"nlgs_3D_ExIter", _wrap_nlgs_3D_ExIter, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"Executes nb_iter NLGS iterations.  \n"
		"\n"
		"python usage : nlgs_3D_ExIter(nb_iter) param[in] nb_iter (integer) : number of\n"
		"iterations to do  \n"
		"\n"
		""},
	 { (char *)"nlgs_3D_ExIterJacobi", _wrap_nlgs_3D_ExIterJacobi, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"Executes nb_iter NLJacobi iterations.  \n"
		"\n"
		"python usage : nlgs_3D_ExIterJacobi(nb_iter) param[in] nb_iter (integer) :\n"
		"number of iterations to do  \n"
		"\n"
		""},
	 { (char *)"nlgs_3D_AfterIterCheck", _wrap_nlgs_3D_AfterIterCheck, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"Control NLGS convergence.  \n"
		"\n"
		"python usage : convergence = nlgs_3D_AfterIterCheck()  \n"
		"\n"
		"Returns\n"
		"-------\n"
		"convergence (integer) :  \n"
		"\n"
		""},
	 { (char *)"nlgs_3D_AfterIterCheckJacobi", _wrap_nlgs_3D_AfterIterCheckJacobi, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"Control NLGS convergence.  \n"
		"\n"
		"python usage : convergence = nlgs_3D_AfterIterCheckJacobi()  \n"
		"\n"
		"Returns\n"
		"-------\n"
		"convergence (integer) :  \n"
		"\n"
		""},
	 { (char *)"nlgs_3D_ScrambleContactOrder", _wrap_nlgs_3D_ScrambleContactOrder, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"Random renumbering of the contact list.  \n"
		"\n"
		"python usage : nlgs_3D_ScrambleContactOrder()  \n"
		"\n"
		""},
	 { (char *)"nlgs_3D_QuickScrambleContactOrder", _wrap_nlgs_3D_QuickScrambleContactOrder, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"Random renumbering of the contact list.  \n"
		"\n"
		"python usage : nlgs_3D_QuickScrambleContactOrder()  \n"
		"\n"
		""},
	 { (char *)"nlgs_3D_ReverseContactOrder", _wrap_nlgs_3D_ReverseContactOrder, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"reverse the numbering of the contact list  \n"
		"\n"
		"python usage : nlgs_3D_ReverseContactOrder()  \n"
		"\n"
		""},
	 { (char *)"nlgs_3D_DisplayAfterIterCheck", _wrap_nlgs_3D_DisplayAfterIterCheck, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"display NLGS convergence results  \n"
		"\n"
		"python usage : nlgs_3D_DisplayAfterIterCheck()  \n"
		"\n"
		""},
	 { (char *)"nlgs_3D_ScaleRloc", _wrap_nlgs_3D_ScaleRloc, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"scale all local contact forces of a factor equal to 0.9 < f < 1.1  \n"
		"\n"
		"python usage : nlgs_3D_ScaleRloc()  \n"
		"\n"
		""},
	 { (char *)"nlgs_3D_ComputeRnod", _wrap_nlgs_3D_ComputeRnod, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"mapping from local contact forces to global ones  \n"
		"\n"
		"python usage : nlgs_3D_ComputeRnod()  \n"
		"\n"
		""},
	 { (char *)"nlgs_3D_ExPost", _wrap_nlgs_3D_ExPost, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"run a jacobi iteration with the solution obtain with the NLGS algorithm  \n"
		"\n"
		"python usage : nlgs_3D_ExPost()  \n"
		"\n"
		""},
	 { (char *)"nlgs_3D_ExPostJacobi", _wrap_nlgs_3D_ExPostJacobi, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"run a jacobi iteration with the solution obtain with the NLGS algorithm  \n"
		"\n"
		"python usage : nlgs_3D_ExPostJacobi()  \n"
		"\n"
		""},
	 { (char *)"nlgs_3D_SetCheckType", _wrap_nlgs_3D_SetCheckType, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"define numerical convergence of the NLGS algorithm  \n"
		"\n"
		"python usage : nlgs_SetCheckType(check_type, tolerance, relaxation)  \n"
		"\n"
		"Parameters\n"
		"----------\n"
		"chekctype_c(char[5]) : type of convergence check  \n"
		"tol(double) : norm tolerance  \n"
		"relax(double) : relaxation factor  \n"
		"\n"
		" convergence check keywords:  \n"
		" Quad : quadratic norm (faulty contacts are redeemed by accurate contacts;\n"
		"laxist norm)  \n"
		" Maxm : maximum norm (faulty contacts must comply; severe norm)  \n"
		" QM/16 : maximum of Quad and Maxm/16 norms (a compromise). For large dense\n"
		"collections Quad ranges usually around 1/16 Maxm  \n"
		" where Quad,Maxm,QM/16 are keywords for the check test, and the following real\n"
		"number is the tolerance value.  \n"
		"\n"
		""},
	 { (char *)"nlgs_3D_ExPrep", _wrap_nlgs_3D_ExPrep, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"Prepare matrix storage.  \n"
		"\n"
		"python usage : nlgs_ExPrep(storage)  \n"
		"\n"
		"Parameters\n"
		"----------\n"
		"storage_c(char[30]): matrix storage  \n"
		"\n"
		" prepare the matrix and the RHS of the contact problem in regards of the\n"
		"selected matrix storage:  \n"
		"\n"
		"*   Exchange_Local_Global (the standard case) only the diagonal blocks are\n"
		"    computed and stored.  \n"
		"*   Stored_Delassus_Loops (faster but memory expensive) the complete Delassus\n"
		"    matrix is computed.  \n"
		"\n"
		""},
	 { (char *)"nlgs_3D_WriteNormCheck", _wrap_nlgs_3D_WriteNormCheck, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"write norm to file  \n"
		"\n"
		"python usage : nlgs_3D_WriteNormCheck()  \n"
		"\n"
		""},
	 { (char *)"nlgs_3D_DiagonalResolution", _wrap_nlgs_3D_DiagonalResolution, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"python usage : nlgs_3D_DiagonalResolution()  \n"
		"\n"
		""},
	 { (char *)"nlgs_3D_SetWithQuickScramble", _wrap_nlgs_3D_SetWithQuickScramble, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"Activate quick scramble in macro function ExSolver.  \n"
		"\n"
		"python usage : nlgs_3D_SetWithQuickScramble()  \n"
		"\n"
		""},
	 { (char *)"nlgs_3D_SetWithReverseContactOrder", _wrap_nlgs_3D_SetWithReverseContactOrder, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"Activate reverse order in macro function ExSolver.  \n"
		"\n"
		"python usage : nlgs_3D_SetWithReverseContactOrder()  \n"
		"\n"
		""},
	 { (char *)"nlgs_3D_UseJacobiSolver", _wrap_nlgs_3D_UseJacobiSolver, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"Use a Jacobi solver instead of Gauss Seidel solver.  \n"
		"\n"
		"usage : nlgs_3D_UseJacobiSolver(True) or nlgs_UseJacobiSolver(False)  \n"
		"\n"
		""},
	 { (char *)"nlgs_3D_ExSolver", _wrap_nlgs_3D_ExSolver, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"Solve fully the local contact problem.  \n"
		"\n"
		"python usage : nlgs_3D_ExSolver(storage, checktype, tol, relax, nb_iter_check,\n"
		"nb_block_iter)  \n"
		"\n"
		"Parameters\n"
		"----------\n"
		"storage(char[30]) : matrix storage (cf nlgs_ExPrep)  \n"
		"checktype(char[5]) : convergentce test keyword  \n"
		"tolerance(double) : tolerance value  \n"
		"relaxation(double) : relaxation number  \n"
		"nb_iter_check(integer) : number of iteration between convergence test  \n"
		"nb_block_iter(integer) : number of block iterations  \n"
		"\n"
		""},
	 { (char *)"nlgs_3D_UpdateTactBehav", _wrap_nlgs_3D_UpdateTactBehav, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"update internal parameters of contact laws for each contact  \n"
		"\n"
		"python usage : nlgs_3D_UpdateTactBehav()  \n"
		"\n"
		""},
	 { (char *)"nlgs_3D_IsInitialized", _wrap_nlgs_3D_IsInitialized, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"In case of restart say that nlgs is initialized.  \n"
		"\n"
		"python usage : nlgs_3D_IsInitialized(is_init=1)  \n"
		"\n"
		""},
	 { (char *)"nlgs_3D_DisplayTacInfo", _wrap_nlgs_3D_DisplayTacInfo, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"Display information concerning one contact.  \n"
		"\n"
		"python usage : nlgs_3D_DsplayTacInfo(itac) param[in] itac (integer) : contact\n"
		"rank  \n"
		"\n"
		""},
	 { (char *)"nlgs_3D_UseRegularization", _wrap_nlgs_3D_UseRegularization, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"use some regularization heuristics on interaction laws  \n"
		"\n"
		"python usage : nlgs_3D_UseRegularization(krn, krt)  \n"
		"\n"
		"Parameters\n"
		"----------\n"
		"krn(double) : normal penality (default 1e14)  \n"
		"krt(double) : tangential penality (default 1e14)  \n"
		"\n"
		""},
	 { (char *)"nlgs_3D_CutOpenCZM", _wrap_nlgs_3D_CutOpenCZM, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"If some czm contact have a gap greater than the given they are considered as\n"
		"broken ; works only with EXPO_CZM or IQS_EXPO_CZM.  \n"
		"\n"
		"python usage : nlgs_3D_CutOpenCZM(tol)  \n"
		"\n"
		"Parameters\n"
		"----------\n"
		"tol(double) : threshold on positive distance (default 1e-6)  \n"
		"\n"
		""},
	 { (char *)"nlgs_3D_ManageInterpenetratedCZM", _wrap_nlgs_3D_ManageInterpenetratedCZM, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"Apply a g0 strategy if gap is negative and if gap is positive (without using\n"
		"nlgs_3D_CutOpenCZM) ; works only with EXPO_CZM or IQS_EXPO_CZM.  \n"
		"\n"
		"python usage : nlgs_3D_ManageInterpenetratedCZM()  \n"
		"\n"
		""},
	 { (char *)"gts_Initialize", _wrap_gts_Initialize, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"Initialize global solver module.  \n"
		"\n"
		"python usage : gts_Initialize()  \n"
		"\n"
		""},
	 { (char *)"gts_AssembleSystem", _wrap_gts_AssembleSystem, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"Assembling of the global system.  \n"
		"\n"
		"python usage : gts_AssembleSystem()  \n"
		"\n"
		""},
	 { (char *)"gts_PrepSystem", _wrap_gts_PrepSystem, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"Preparing the global system.  \n"
		"\n"
		"python usage gts_PrepSystem()  \n"
		"\n"
		""},
	 { (char *)"gts_AssembleLHS", _wrap_gts_AssembleLHS, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"Assembling the lhs of the global system.  \n"
		"\n"
		"python usage : gts_AssemblerLHS()  \n"
		"\n"
		""},
	 { (char *)"gts_AssembleRHS", _wrap_gts_AssembleRHS, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"Assembling the rhs of the global system.  \n"
		"\n"
		"i  \n"
		"\n"
		"python usage : gts_AssembleRHS()  \n"
		"\n"
		""},
	 { (char *)"gts_Solve", _wrap_gts_Solve, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"Solving of the global system.  \n"
		"\n"
		"i  \n"
		"\n"
		"python usage : gts_Solve()  \n"
		"\n"
		""},
	 { (char *)"gts_Finalize", _wrap_gts_Finalize, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"Clean memory of global solver module.  \n"
		"\n"
		"python usage : gts_Finalize()  \n"
		"\n"
		""},
	 { (char *)"postpro_PostproDuringComputation", _wrap_postpro_PostproDuringComputation, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"Scan postprocessing function which should be call during the computation\n"
		"process.  \n"
		"\n"
		"python usage : postpro_PostproDuringComputation()  \n"
		"\n"
		""},
	 { (char *)"postpro_ReadCommands", _wrap_postpro_ReadCommands, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"Scan postprocessing function which should be call during the computation\n"
		"process.  \n"
		"\n"
		"python usage : postpro_ReadCommands()  \n"
		"\n"
		""},
	 { (char *)"postpro_PostproBeforeComputation", _wrap_postpro_PostproBeforeComputation, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"Data initialization and scan postprocessing function which should be called\n"
		"before the computation process.  \n"
		"\n"
		"python usage : postpro_PostproBeforeComputation(restart=0) param[in] restart\n"
		"(integer) : if the Postpro file must append to existing ones and starting index\n"
		"of CONTACT_FORCE_DISTRIBUTION files  \n"
		"\n"
		""},
	 { (char *)"postpro_FlushDuringComputation", _wrap_postpro_FlushDuringComputation, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"Flush all postpro files.  \n"
		"\n"
		"python usage : postpro_FlushDuringComputation()  \n"
		"\n"
		""},
	 { (char *)"postpro_ClosePostproFiles", _wrap_postpro_ClosePostproFiles, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"Close all postpro files.  \n"
		"\n"
		"python usage : postpro_ClosePostproFiles()  \n"
		"\n"
		""},
	 { (char *)"postpro_SetCircularSelectionZone", _wrap_postpro_SetCircularSelectionZone, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"Initialize data for postreatment using a circular selection.  \n"
		"\n"
		"python usage : postpro_SetCircularSelectionZone(rvalue1, rvalu2, rvalue3)  \n"
		"\n"
		"Parameters\n"
		"----------\n"
		"rvalue1(double) : X coordinate  \n"
		"rvalue2(double) : Y coordinate  \n"
		"rvalue3(double) : radius selection  \n"
		"\n"
		""},
	 { (char *)"postpro_MoveCircularSelectionZone", _wrap_postpro_MoveCircularSelectionZone, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"Increment the position of the circular selection defined with\n"
		"CIRCULAR_SELECTION.  \n"
		"\n"
		"python usage : postpro_MoveCircularSelectionZone(rvalue1, rvalu2)  \n"
		"\n"
		"Parameters\n"
		"----------\n"
		"rvalue1(double) : X translational velocity  \n"
		"rvalue2(double) : Y translational velocity  \n"
		"\n"
		""},
	 { (char *)"postpro_CleanMemory", _wrap_postpro_CleanMemory, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"Free all memory allocated within postpro module.  \n"
		"\n"
		"python usage : postpro_CleanMemory()  \n"
		"\n"
		""},
	 { (char *)"postpro_2D_GetKineticEnergy", _wrap_postpro_2D_GetKineticEnergy, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"Compute Kinetic Energy for all bodies (rigids and defo)  \n"
		"\n"
		"python usage : KE = postpro_2D_GetKineticEnergy()  \n"
		"\n"
		""},
	 { (char *)"postpro_3D_PostproDuringComputation", _wrap_postpro_3D_PostproDuringComputation, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"Scan postprocessing function which should be call during the computation\n"
		"process.  \n"
		"\n"
		"python usage : postpro_3D_PostproDuringComputation()  \n"
		"\n"
		""},
	 { (char *)"postpro_3D_FlushDuringComputation", _wrap_postpro_3D_FlushDuringComputation, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"Flush all postpro files.  \n"
		"\n"
		"python usage : postpro_3D_FlushDuringComputation()  \n"
		"\n"
		""},
	 { (char *)"postpro_3D_ReadCommands", _wrap_postpro_3D_ReadCommands, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"Scan postprocessing functions which should be call during the computation\n"
		"process.  \n"
		"\n"
		"python usage : postpro_3D_ReadCommands()  \n"
		"\n"
		""},
	 { (char *)"postpro_3D_PostproBeforeComputation", _wrap_postpro_3D_PostproBeforeComputation, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"Data initialization.  \n"
		"\n"
		"python usage : postpro_3D_PostproBeforeComputation(restart=False) param[in]\n"
		"restart (integer) : if the Postpro file must append to existing ones and\n"
		"starting index of CONTACT_FORCE_DISTRIBUTION files  \n"
		"\n"
		""},
	 { (char *)"postpro_3D_ClosePostproFiles", _wrap_postpro_3D_ClosePostproFiles, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"Close all postpro files.  \n"
		"\n"
		"python usage : postpro_3D_ClosePostproFiles()  \n"
		"\n"
		""},
	 { (char *)"postpro_3D_GetKineticEnergy", _wrap_postpro_3D_GetKineticEnergy, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"Compute Kinetic Energy for all bodies (rigids and defo)  \n"
		"\n"
		"python usage : KE = postpro_3D_GetKineticEnergy()  \n"
		"\n"
		""},
	 { (char *)"postpro_3D_GetRBDY3PrincStress", _wrap_postpro_3D_GetRBDY3PrincStress, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"Return the principal stresses on each RBDY3.  \n"
		"\n"
		"python usage : pstress = postpro_3D_GetRBDY3PrincStress()  \n"
		"\n"
		"Returns\n"
		"-------\n"
		"pstress (double 2D-array) : the interactions  \n"
		"\n"
		""},
	 { (char *)"postpro_3D_CleanMemory", _wrap_postpro_3D_CleanMemory, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"Free all memory allocated within postpro_3D module.  \n"
		"\n"
		"python usage : postpro_3D_CleanMemory()  \n"
		"\n"
		""},
	 { (char *)"user_getWoodFrame", _wrap_user_getWoodFrame, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		""},
	 { (char *)"cut2D_Cut", _wrap_cut2D_Cut, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		""},
	 { (char *)"deposit2D_Potential", _wrap_deposit2D_Potential, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"Computes a new deposit under potential with or without big particles.  \n"
		"\n"
		"python call: coor = deposit2D_Potential(in_radii, lx, potential[, dradii,\n"
		"dcoor])  \n"
		"\n"
		"Parameters\n"
		"----------\n"
		"in_radii(double array): given radii list (i.e. granulometry)  \n"
		"lx(double): width of the box in which to deposit  \n"
		"potential(integer): for deposit (1->gravity, 2->wall, 3->big_particles)  \n"
		"dradii(double array) (optional) : a list of already deposited radii  \n"
		"dcoor(double array) (optional) : a list of already deposited coor (must be of\n"
		"    size [nb_dradii,3])  \n"
		"\n"
		"Returns\n"
		"-------\n"
		"coor (double array): coordinates of deposited radii (shape [nb_radii,2]) PYDOC  \n"
		"\n"
		""},
	 { (char *)"deposit3D_InContainer", _wrap_deposit3D_InContainer, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"Computes a new deposit under gravity in a container.  \n"
		"\n"
		"i_shape = 0 : box  \n"
		"\n"
		"*   a point (x, y, z) is in the box iff x is in [-lx/2, lx/2], y is in [-ly/2,\n"
		"    ly/2] and z is in [0, lz] i_shape = 1 : cylinder  \n"
		"*   a point (x, y, z) is in the cylinder iff x^2 + y^2 is in [0, R^2] and z is\n"
		"    in [0, lz] i_shape = 2 : sphere  \n"
		"*   a point (x, y, z) is in the sphere iff x^2 + y^2 + z^2 is in [0, R^2]  \n"
		"\n"
		"python call: radii, coor = deposit3D_InContaier(in_radii, shape, p1, p2, p3[,\n"
		"dradii, dcoor, seed, with_log])  \n"
		"\n"
		"Parameters\n"
		"----------\n"
		"in_radii(double array): given radii list (i.e. granulometry)  \n"
		"shape(integer)of container (0->box, 1->cylinder, 2->sphere)  \n"
		"p1(double): box-> lx, cylinder->R, sphere->R  \n"
		"p2(double): box-> ly, cylinder->lz, sphere->ignored  \n"
		"p3(double): box-> lz, cylinder->ignored, sphere->ignored  \n"
		"dradii(double array) (optional) : a list of already deposited radii  \n"
		"dcoor(double array) (optional) : a list of already deposited coor (must be of\n"
		"    size [nb_dradii,3])  \n"
		"seed(integer array) (optional) : an input seed to control randomness  \n"
		"with_log(integer)de/activate log message  \n"
		"\n"
		"Returns\n"
		"-------\n"
		"radii (double array): list of deposited radii coor (double array): coordinates\n"
		"of deposited radii (shape [nb_radii,3]) PYDOC  \n"
		"\n"
		""},
	 { (char *)"mesh2D_GetIndicesMeshQ4", _wrap_mesh2D_GetIndicesMeshQ4, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"this function gives the couple (i, j) of indices coresponding to a given node n  \n"
		"\n"
		"**Warning**: python call: [i, j]=mesh2D_GetIndicesMeshQ4(n)  \n"
		"\n"
		"Parameters\n"
		"----------\n"
		"n(int): the given node  \n"
		"i(int *): index in the u direction  \n"
		"j(int *): index in the v direction  \n"
		"\n"
		""},
	 { (char *)"mesh2D_SizeMeshQ4", _wrap_mesh2D_SizeMeshQ4, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"this function computes the sizes of vectors used to store a mesh made of Q4 in\n"
		"the following generic format:  \n"
		"\n"
		"*   coor: vector of coordinates of the nodes [x1, y1, x2, y2, ...]  \n"
		"*   nb_node_per_ele: nb_node_per_ele(i) contains the number of nodes for element\n"
		"    i, i in [1, number of elements]  \n"
		"*   conn: vector storing the connectivity of the elements [n11, n12n n13, n21,\n"
		"    n22, n23, n24, ...] consider the following little mesh:  \n"
		"     2 4 6  *---*---*  \n"
		"     | 1 | 2 |  *---*---*  \n"
		"     1 3 5  \n"
		"    the vectors for this mesh read:  \n"
		"*   coor = [x1, y1, x2, y2, x3, y3, x4, y4, x5, y5, x6, y6]  \n"
		"*   nb_node_per_ele = [4, 4]  \n"
		"*   conn = [1, 3, 4, 2, 3, 5, 6, 4]  \n"
		"\n"
		"    **Warning**: python call: [size_coor, size_nb_node_per_ele,\n"
		"        size_conn]=mesh2D_SizeMeshQ4(nb_elem_x, nb_elem_y)  \n"
		"\n"
		"    Parameters:  \n"
		"    nb_elem_x(int): number of elements in the horizontal direction  \n"
		"    nb_elem_y(int): number of elements in the vertical direction  \n"
		"    size_coor(int *): size of coor  \n"
		"    size_nb_node_per_ele(int *): size of nb_node_per_ele  \n"
		"    size_conn(int *): size of conn  \n"
		"\n"
		""},
	 { (char *)"mesh2D_SizeMesh2T3", _wrap_mesh2D_SizeMesh2T3, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"this function computes the sizes of vectors used to store a mesh made of T3 ---\n"
		"obtained by splitting a Q4 in two T3 --- in the following generic format:  \n"
		"\n"
		"*   coor: vector of coordinates of the nodes [x1, y1, x2, y2, ...]  \n"
		"*   nb_node_per_ele: nb_node_per_ele(i) contains the number of nodes for element\n"
		"    i, i in [1, number of elements]  \n"
		"*   conn: vector storing the connectivity of the elements [n11, n12n n13, n21,\n"
		"    n22, n23, n24, ...] consider the following little mesh:  \n"
		"     2 4  *----*  \n"
		"     | 1 /|  \n"
		"     | / |  \n"
		"     | / |  \n"
		"     |/ 2 |  *----*  \n"
		"     1 3  \n"
		"    the vectors for this mesh read:  \n"
		"*   coor = [x1, y1, x2, y2, x3, y3, x4, y4]  \n"
		"*   nb_node_per_ele = [3, 3]  \n"
		"*   conn = [1, 3, 4, 2, 1, 4]  \n"
		"\n"
		"    **Warning**: python call: [size_coor, size_nb_node_per_ele,\n"
		"        size_conn]=mesh2D_SizeMesh2T3(nb_elem_x, nb_elem_y)  \n"
		"\n"
		"    Parameters:  \n"
		"    nb_elem_x(int): number of elements Q4 in the horizontal direction  \n"
		"    nb_elem_y(int): number of elements Q4 in the vertical direction  \n"
		"    size_coor(int *): size of coor  \n"
		"    size_nb_node_per_ele(int *): size of nb_node_per_ele  \n"
		"    size_conn(int *): size of conn  \n"
		"\n"
		""},
	 { (char *)"mesh2D_SizeMesh4T3", _wrap_mesh2D_SizeMesh4T3, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"this function computes the sizes of vectors used to store a mesh made of T3 ---\n"
		"obtained by splitting a Q4 in four T3 --- in the following generic format:  \n"
		"\n"
		"*   coor: vector of coordinates of the nodes [x1, y1, x2, y2, ...]  \n"
		"*   nb_node_per_ele: nb_node_per_ele(i) contains the number of nodes for element\n"
		"    i, i in [1, number of elements]  \n"
		"*   conn: vector storing the connectivity of the elements [n11, n12n n13, n21,\n"
		"    n22, n23, n24, ...] consider the following little mesh:  \n"
		"     2 4  *-----*  \n"
		"     |\\ 4 /|  \n"
		"     | \\ / |  \n"
		"     |1 5 3|  \n"
		"     | / \\ |  \n"
		"     |/ 2 |  *-----*  \n"
		"     1 3  \n"
		"    the vectors for this mesh read:  \n"
		"*   coor = [x1, y1, x2, y2, x3, y3, x4, y4, x5, y5]  \n"
		"*   nb_node_per_ele = [3, 3, 3, 3]  \n"
		"*   conn = [1, 5, 2, 1, 3, 5, 3, 4, 5, 2, 5, 4]  \n"
		"\n"
		"    **Warning**: python call: [size_coor, size_nb_node_per_ele,\n"
		"        size_conn]=mesh2D_SizeMesh4T3(nb_elem_x, nb_elem_y)  \n"
		"\n"
		"    Parameters:  \n"
		"    nb_elem_x(int): number of elements Q4 in the horizontal direction  \n"
		"    nb_elem_y(int): number of elements Q4 in the vertical direction  \n"
		"    size_coor(int *): size of coor  \n"
		"    size_nb_node_per_ele(int *): size of nb_node_per_ele  \n"
		"    size_conn(int *): size of conn  \n"
		"\n"
		""},
	 { (char *)"mesh2D_SizeMeshQ8", _wrap_mesh2D_SizeMeshQ8, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"this function computes the sizes of vectors used to store a mesh made of Q8\n"
		"following generic format:  \n"
		"\n"
		"*   coor: vector of coordinates of the nodes [x1, y1, x2, y2, ...]  \n"
		"*   nb_node_per_ele: nb_node_per_ele(i) contains the number of nodes for element\n"
		"    i, i in [1, number of elements]  \n"
		"*   conn: vector storing the connectivity of the elements [n11, n12n n13, n21,\n"
		"    n22, n23, n24, ...] consider the following little mesh:  \n"
		"     3 7 3  *---*---*  \n"
		"     | |  \n"
		"     | |  \n"
		"     8 * 1 * 6  \n"
		"     | |  \n"
		"     | |  *---*---*  \n"
		"     1 5 2  \n"
		"    the vectors for this mesh read:  \n"
		"*   coor = [x1, y1, x2, y2, x3, y3, x4, y4, x5, y5, x6, y6, x7, y7, x8, y8]  \n"
		"*   nb_node_per_ele = [8]  \n"
		"*   conn = [1, 2, 3, 4, 5, 6, 7, 8]  \n"
		"\n"
		"    **Warning**: python call: [size_coor, size_nb_node_per_ele,\n"
		"        size_conn]=mesh2D_SizeMesh4T3(nb_elem_x, nb_elem_y)  \n"
		"\n"
		"    Parameters:  \n"
		"    nb_elem_x(int): number of elements Q4 in the horizontal direction  \n"
		"    nb_elem_y(int): number of elements Q4 in the vertical direction  \n"
		"    size_coor(int *): size of coor  \n"
		"    size_nb_node_per_ele(int *): size of nb_node_per_ele  \n"
		"    size_conn(int *): size of conn  \n"
		"\n"
		""},
	 { (char *)"mesh2D_MeshQ4", _wrap_mesh2D_MeshQ4, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"this function computes and returns a mesh made of Q4 in the following generic\n"
		"format:  \n"
		"\n"
		"*   coor: vector of coordinates of the nodes [x1, y1, x2, y2, ...]  \n"
		"*   nb_node_per_ele: nb_node_per_ele(i) contains the number of nodes for element\n"
		"    i, i in [1, number of elements]  \n"
		"*   conn: vector storing the connectivity of the elements [n11, n12n n13, n21,\n"
		"    n22, n23, n24, ...] consider the following little mesh:  \n"
		"     2 4 6  *---*---*  \n"
		"     | 1 | 2 |  *---*---*  \n"
		"     1 3 5  \n"
		"    the vectors for this mesh read:  \n"
		"*   coor = [x1, y1, x2, y2, x3, y3, x4, y4, x5, y5, x6, y6]  \n"
		"*   nb_node_per_ele = [4, 4]  \n"
		"*   conn = [1, 3, 4, 2, 3, 5, 6, 4]  \n"
		"\n"
		"    **Warning**: python call: [coor, nb_node_per_ele, conn]=mesh2D_MeshQ4(x0,\n"
		"        y0, lx, ly,\n"
		"           nb_elem_x, nb_elem_y, size_coor, size_nb_node_per_ele, size_conn)  \n"
		"\n"
		"    Parameters:  \n"
		"    x0(double): abscissa of the lower left corner of the rectangle  \n"
		"    y0(double): ordinate of the lower left corner of the rectangle  \n"
		"    lx(double): length of the mesh, following the axis (Ox)  \n"
		"    ly(double): length of the mesh, following the axis (Oy)  \n"
		"    nb_elem_x(int): number of elements in the horizontal direction  \n"
		"    nb_elem_y(int): number of elements in the vertical direction  \n"
		"    size_coor(int): size of coor  \n"
		"    size_nb_node_per_ele(int): size of nb_node_per_ele  \n"
		"    size_conn(int): size of conn  \n"
		"    coor(double *): vector of coordinates of the nodes [x1, y1, x2, y2, ...]  \n"
		"    nb_node_per_ele(int *): nb_node_per_ele(i) contains the number of nodes for element i,\n"
		"        i in [1, number of elements]  \n"
		"    conn(int *): vector storing the connectivity of the elements [n11, n12n n13,\n"
		"        n21, n22, n23, n24, ...]  \n"
		"\n"
		""},
	 { (char *)"mesh2D_Mesh2T3", _wrap_mesh2D_Mesh2T3, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"this function computes an returns a mesh made of T3 --- obtained by splitting a\n"
		"Q4 in two T3 --- in the following generic format:  \n"
		"\n"
		"*   coor: vector of coordinates of the nodes [x1, y1, x2, y2, ...]  \n"
		"*   nb_node_per_ele: nb_node_per_ele(i) contains the number of nodes for element\n"
		"    i, i in [1, number of elements]  \n"
		"*   conn: vector storing the connectivity of the elements [n11, n12n n13, n21,\n"
		"    n22, n23, n24, ...] consider the following little mesh:  \n"
		"     2 4  *----*  \n"
		"     | 1 /|  \n"
		"     | / |  \n"
		"     | / |  \n"
		"     |/ 2 |  *----*  \n"
		"     1 3  \n"
		"    the vectors for this mesh read:  \n"
		"*   coor = [x1, y1, x2, y2, x3, y3, x4, y4]  \n"
		"*   nb_node_per_ele = [3, 3]  \n"
		"*   conn = [1, 3, 4, 2, 1, 4]  \n"
		"*   coor: vector of coordinates of the nodes [x1, y1, x2, y2, ...]  \n"
		"*   nb_node_per_ele: nb_node_per_ele(i) contains the number of nodes for element\n"
		"    i, i in [1, number of elements]  \n"
		"*   conn: vector storing the connectivity of the elements [n11, n12n n13, n21,\n"
		"    n22, n23, n24, ...]  \n"
		"\n"
		"    **Warning**: python call: [coor, nb_node_per_ele, conn]=mesh2D_Mesh2T3(x0,\n"
		"        y0, lx, ly,\n"
		"           nb_elem_x, nb_elem_y, size_coor, size_nb_node_per_ele, size_conn)  \n"
		"\n"
		"    Parameters:  \n"
		"    x0(double): abscissa of the lower left corner of the rectangle  \n"
		"    y0(double): ordinate of the lower left corner of the rectangle  \n"
		"    lx(double): length of the mesh, following the axis (Ox)  \n"
		"    ly(double): length of the mesh, following the axis (Oy)  \n"
		"    nb_elem_x(int): number of elements Q4 in the horizontal direction  \n"
		"    nb_elem_y(int): number of elements Q4 in the vertical direction  \n"
		"    size_coor(int): size of coor  \n"
		"    size_nb_node_per_ele(int): size of nb_node_per_ele  \n"
		"    size_conn(int): size of conn  \n"
		"    coor(double *): vector of coordinates of the nodes [x1, y1, x2, y2, ...]  \n"
		"    nb_node_per_ele(int *): nb_node_per_ele(i) contains the number of nodes for element i,\n"
		"        i in [1, number of elements]  \n"
		"    conn(int *): vector storing the connectivity of the elements [n11, n12n n13,\n"
		"        n21, n22, n23, n24, ...]  \n"
		"\n"
		""},
	 { (char *)"mesh2D_Mesh4T3", _wrap_mesh2D_Mesh4T3, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"this function computes and return a mesh made of T3 --- obtained by splitting a\n"
		"Q4 in four T3 --- in the following generic format:  \n"
		"\n"
		"*   coor: vector of coordinates of the nodes [x1, y1, x2, y2, ...]  \n"
		"*   nb_node_per_ele: nb_node_per_ele(i) contains the number of nodes for element\n"
		"    i, i in [1, number of elements]  \n"
		"*   conn: vector storing the connectivity of the elements [n11, n12n n13, n21,\n"
		"    n22, n23, n24, ...] consider the following little mesh:  \n"
		"     2 4  *-----*  \n"
		"     |\\ 4 /|  \n"
		"     | \\ / |  \n"
		"     |1 5 3|  \n"
		"     | / \\ |  \n"
		"     |/ 2 |  *-----*  \n"
		"     1 3  \n"
		"    the vectors for this mesh read:  \n"
		"*   coor = [x1, y1, x2, y2, x3, y3, x4, y4, x5, y5]  \n"
		"*   nb_node_per_ele = [3, 3, 3, 3]  \n"
		"*   conn = [1, 5, 2, 1, 3, 5, 3, 4, 5, 2, 5, 4]  \n"
		"\n"
		"    **Warning**: python call: [coor, nb_node_per_ele, conn]=mesh2D_Mesh4T3(x0,\n"
		"        y0, lx, ly,\n"
		"           nb_elem_x, nb_elem_y, size_coor, size_nb_node_per_ele, size_conn)  \n"
		"\n"
		"    Parameters:  \n"
		"    x0(double): abscissa of the lower left corner of the rectangle  \n"
		"    y0(double): ordinate of the lower left corner of the rectangle  \n"
		"    lx(double): length of the mesh, following the axis (Ox)  \n"
		"    ly(double): length of the mesh, following the axis (Oy)  \n"
		"    nb_elem_x(int): number of elements Q4 in the horizontal direction  \n"
		"    nb_elem_y(int): number of elements Q4 in the vertical direction  \n"
		"    size_coor(int): size of coor  \n"
		"    size_nb_node_per_ele(int): size of nb_node_per_ele  \n"
		"    size_conn(int): size of conn  \n"
		"    coor(double *): vector of coordinates of the nodes [x1, y1, x2, y2, ...]  \n"
		"    nb_node_per_ele(int *): nb_node_per_ele(i) contains the number of nodes for element i,\n"
		"        i in [1, number of elements]  \n"
		"    conn(int *): vector storing the connectivity of the elements [n11, n12n n13,\n"
		"        n21, n22, n23, n24, ...]  \n"
		"\n"
		""},
	 { (char *)"mesh2D_MeshQ8", _wrap_mesh2D_MeshQ8, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"this function computes and returns a mesh made of Q8 in the following generic\n"
		"format:  \n"
		"\n"
		"*   coor: vector of coordinates of the nodes [x1, y1, x2, y2, ...]  \n"
		"*   nb_node_per_ele: nb_node_per_ele(i) contains the number of nodes for element\n"
		"    i, i in [1, number of elements]  \n"
		"*   conn: vector storing the connectivity of the elements [n11, n12n n13, n21,\n"
		"    n22, n23, n24, ...] consider the following little mesh:  \n"
		"     3 7 3  *---*---*  \n"
		"     | |  \n"
		"     | |  \n"
		"     8 * 1 * 6  \n"
		"     | |  \n"
		"     | |  *---*---*  \n"
		"     1 5 2  \n"
		"    the vectors for this mesh read:  \n"
		"*   coor = [x1, y1, x2, y2, x3, y3, x4, y4, x5, y5, x6, y6, x7, y7, x8, y8]  \n"
		"*   nb_node_per_ele = [8]  \n"
		"*   conn = [1, 2, 3, 4, 5, 6, 7, 8]  \n"
		"\n"
		"    **Warning**: python call: [coor, nb_node_per_ele, conn]=mesh2D_MeshQ8(x0,\n"
		"        y0, lx, ly,\n"
		"           nb_elem_x, nb_elem_y, size_coor, size_nb_node_per_ele, size_conn)  \n"
		"\n"
		"    Parameters:  \n"
		"    x0(double): abscissa of the lower left corner of the rectangle  \n"
		"    y0(double): ordinate of the lower left corner of the rectangle  \n"
		"    lx(double): length of the mesh, following the axis (Ox)  \n"
		"    ly(double): length of the mesh, following the axis (Oy)  \n"
		"    nb_elem_x(int): number of elements Q4 in the horizontal direction  \n"
		"    nb_elem_y(int): number of elements Q4 in the vertical direction  \n"
		"    size_coor(int): size of coor  \n"
		"    size_nb_node_per_ele(int): size of nb_node_per_ele  \n"
		"    size_conn(int): size of conn  \n"
		"    coor(double *): vector of coordinates of the nodes [x1, y1, x2, y2, ...]  \n"
		"    nb_node_per_ele(int *): nb_node_per_ele(i) contains the number of nodes for element i,\n"
		"        i in [1, number of elements]  \n"
		"    conn(int *): vector storing the connectivity of the elements [n11, n12n n13,\n"
		"        n21, n22, n23, n24, ...]  \n"
		"\n"
		""},
	 { (char *)"surface_T3_compute_volume_inertia", _wrap_surface_T3_compute_volume_inertia, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"Computes the volume of an object described by a triangulated surface.  \n"
		"\n"
		"**Warning**: 1) we assume size_coor is three times the number of nodes and\n"
		"    size_connec is three times the number of elements python call: x_G, I,\n"
		"    vol=surface_T3_compute_volume_inertia(coor, connec, 3, 9)  \n"
		"\n"
		"Parameters\n"
		"----------\n"
		"coor_size(int): size of coor  \n"
		"coor(double *): node coordinates  \n"
		"connec_size(int): size of connec  \n"
		"vol(double *): computed volume  \n"
		"x_G(double *): mass center coordinates  \n"
		"x_G_size(int): size of x_G  \n"
		"I(double *): inertia matrix, stored a a vector  \n"
		"I_size(int): size of I  \n"
		"\n"
		""},
	 { (char *)"surface_T3_identify_entities", _wrap_surface_T3_identify_entities, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"Attributes an entity number to triangles, by computing connected components.  \n"
		"\n"
		"**Warning**: 1) we assume size_connec is three times the number of elements and\n"
		"    size_ele2entity is the number of elements python call:\n"
		"    ele2entity=surface_T3_identify_entities(nbnode, max_adj_ele_2_node, connec,\n"
		"    nbele)  \n"
		"\n"
		"Parameters\n"
		"----------\n"
		"nbnode(int): the number of nodes  \n"
		"max_adj_ele_2_node(int): the maximal number of adjacent elements per node  \n"
		"connec(int *): connecivity of elements  \n"
		"connec_size(int): size of connec  \n"
		"ele2entity(double *): entity number for each element  \n"
		"ele2entity_size(int): size of ele2entity  \n"
		"\n"
		""},
	 { (char *)"io_hdf5_initOutFile", _wrap_io_hdf5_initOutFile, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"Init HDF5 file in which to write results.  \n"
		"\n"
		"python usage : io_hdf5_initOutFile(filename)  \n"
		"\n"
		"Parameters\n"
		"----------\n"
		"filename(string) : file in which to write  \n"
		"\n"
		""},
	 { (char *)"io_hdf5_write", _wrap_io_hdf5_write, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"write output data in HDF5 file (GPV, DOF and VlocRloc).  \n"
		"\n"
		"python usage : io_hdf5_write()  \n"
		"\n"
		""},
	 { (char *)"io_hdf5_write_last", _wrap_io_hdf5_write_last, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"write output data in HDF5 file (GPV, DOF and VlocRloc) in file  \n"
		"\n"
		"python usage : io_hdf5_write_last(filename)  \n"
		"\n"
		"Parameters\n"
		"----------\n"
		"filename(string) : file in which to write  \n"
		"\n"
		""},
	 { (char *)"io_hdf5_read", _wrap_io_hdf5_read, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"read output data from HDF5 file (DOF and VlocRloc).  \n"
		"\n"
		"python usage : io_hdf5_read(filename, step)  \n"
		"\n"
		"Parameters\n"
		"----------\n"
		"filename(string) : file to read  \n"
		"step(integer) : step number to read  \n"
		"\n"
		""},
	 { (char *)"io_hdf5_cleanMemory", _wrap_io_hdf5_cleanMemory, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"cleanMemory of io_hdf5 module  \n"
		"\n"
		"python usage : io_hdf5_cleanMemory()  \n"
		"\n"
		""},
	 { (char *)"io_hdf5_fixVersion", _wrap_io_hdf5_fixVersion, METH_VARARGS, (char *)"\n"
		"\n"
		"\n"
		"Will try to fix the file when reading it.  \n"
		"\n"
		"Because the parameters changed within version 0, this flag is needed to fix the\n"
		"file whend reading it.  \n"
		"\n"
		"python usage : io_hdf5_fixVersion(version)  \n"
		"\n"
		""},
	 { NULL, NULL, 0, NULL }
};


/* -------- TYPE CONVERSION AND EQUIVALENCE RULES (BEGIN) -------- */

static swig_type_info _swigt__p_char = {"_p_char", "char *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_double = {"_p_double", "double *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_int = {"_p_int", "int *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_p_char = {"_p_p_char", "char **", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_p_double = {"_p_p_double", "double **", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_p_int = {"_p_p_int", "int **", 0, 0, (void*)0, 0};

static swig_type_info *swig_type_initial[] = {
  &_swigt__p_char,
  &_swigt__p_double,
  &_swigt__p_int,
  &_swigt__p_p_char,
  &_swigt__p_p_double,
  &_swigt__p_p_int,
};

static swig_cast_info _swigc__p_char[] = {  {&_swigt__p_char, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_double[] = {  {&_swigt__p_double, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_int[] = {  {&_swigt__p_int, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_p_char[] = {  {&_swigt__p_p_char, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_p_double[] = {  {&_swigt__p_p_double, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_p_int[] = {  {&_swigt__p_p_int, 0, 0, 0},{0, 0, 0, 0}};

static swig_cast_info *swig_cast_initial[] = {
  _swigc__p_char,
  _swigc__p_double,
  _swigc__p_int,
  _swigc__p_p_char,
  _swigc__p_p_double,
  _swigc__p_p_int,
};


/* -------- TYPE CONVERSION AND EQUIVALENCE RULES (END) -------- */

static swig_const_info swig_const_table[] = {
{0, 0, 0, 0.0, 0, 0}};

#ifdef __cplusplus
}
#endif
/* -----------------------------------------------------------------------------
 * Type initialization:
 * This problem is tough by the requirement that no dynamic
 * memory is used. Also, since swig_type_info structures store pointers to
 * swig_cast_info structures and swig_cast_info structures store pointers back
 * to swig_type_info structures, we need some lookup code at initialization.
 * The idea is that swig generates all the structures that are needed.
 * The runtime then collects these partially filled structures.
 * The SWIG_InitializeModule function takes these initial arrays out of
 * swig_module, and does all the lookup, filling in the swig_module.types
 * array with the correct data and linking the correct swig_cast_info
 * structures together.
 *
 * The generated swig_type_info structures are assigned statically to an initial
 * array. We just loop through that array, and handle each type individually.
 * First we lookup if this type has been already loaded, and if so, use the
 * loaded structure instead of the generated one. Then we have to fill in the
 * cast linked list. The cast data is initially stored in something like a
 * two-dimensional array. Each row corresponds to a type (there are the same
 * number of rows as there are in the swig_type_initial array). Each entry in
 * a column is one of the swig_cast_info structures for that type.
 * The cast_initial array is actually an array of arrays, because each row has
 * a variable number of columns. So to actually build the cast linked list,
 * we find the array of casts associated with the type, and loop through it
 * adding the casts to the list. The one last trick we need to do is making
 * sure the type pointer in the swig_cast_info struct is correct.
 *
 * First off, we lookup the cast->type name to see if it is already loaded.
 * There are three cases to handle:
 *  1) If the cast->type has already been loaded AND the type we are adding
 *     casting info to has not been loaded (it is in this module), THEN we
 *     replace the cast->type pointer with the type pointer that has already
 *     been loaded.
 *  2) If BOTH types (the one we are adding casting info to, and the
 *     cast->type) are loaded, THEN the cast info has already been loaded by
 *     the previous module so we just ignore it.
 *  3) Finally, if cast->type has not already been loaded, then we add that
 *     swig_cast_info to the linked list (because the cast->type) pointer will
 *     be correct.
 * ----------------------------------------------------------------------------- */

#ifdef __cplusplus
extern "C" {
#if 0
} /* c-mode */
#endif
#endif

#if 0
#define SWIGRUNTIME_DEBUG
#endif


SWIGRUNTIME void
SWIG_InitializeModule(void *clientdata) {
  size_t i;
  swig_module_info *module_head, *iter;
  int init;
  
  /* check to see if the circular list has been setup, if not, set it up */
  if (swig_module.next==0) {
    /* Initialize the swig_module */
    swig_module.type_initial = swig_type_initial;
    swig_module.cast_initial = swig_cast_initial;
    swig_module.next = &swig_module;
    init = 1;
  } else {
    init = 0;
  }
  
  /* Try and load any already created modules */
  module_head = SWIG_GetModule(clientdata);
  if (!module_head) {
    /* This is the first module loaded for this interpreter */
    /* so set the swig module into the interpreter */
    SWIG_SetModule(clientdata, &swig_module);
  } else {
    /* the interpreter has loaded a SWIG module, but has it loaded this one? */
    iter=module_head;
    do {
      if (iter==&swig_module) {
        /* Our module is already in the list, so there's nothing more to do. */
        return;
      }
      iter=iter->next;
    } while (iter!= module_head);
    
    /* otherwise we must add our module into the list */
    swig_module.next = module_head->next;
    module_head->next = &swig_module;
  }
  
  /* When multiple interpreters are used, a module could have already been initialized in
       a different interpreter, but not yet have a pointer in this interpreter.
       In this case, we do not want to continue adding types... everything should be
       set up already */
  if (init == 0) return;
  
  /* Now work on filling in swig_module.types */
#ifdef SWIGRUNTIME_DEBUG
  printf("SWIG_InitializeModule: size %d\n", swig_module.size);
#endif
  for (i = 0; i < swig_module.size; ++i) {
    swig_type_info *type = 0;
    swig_type_info *ret;
    swig_cast_info *cast;
    
#ifdef SWIGRUNTIME_DEBUG
    printf("SWIG_InitializeModule: type %d %s\n", i, swig_module.type_initial[i]->name);
#endif
    
    /* if there is another module already loaded */
    if (swig_module.next != &swig_module) {
      type = SWIG_MangledTypeQueryModule(swig_module.next, &swig_module, swig_module.type_initial[i]->name);
    }
    if (type) {
      /* Overwrite clientdata field */
#ifdef SWIGRUNTIME_DEBUG
      printf("SWIG_InitializeModule: found type %s\n", type->name);
#endif
      if (swig_module.type_initial[i]->clientdata) {
        type->clientdata = swig_module.type_initial[i]->clientdata;
#ifdef SWIGRUNTIME_DEBUG
        printf("SWIG_InitializeModule: found and overwrite type %s \n", type->name);
#endif
      }
    } else {
      type = swig_module.type_initial[i];
    }
    
    /* Insert casting types */
    cast = swig_module.cast_initial[i];
    while (cast->type) {
      /* Don't need to add information already in the list */
      ret = 0;
#ifdef SWIGRUNTIME_DEBUG
      printf("SWIG_InitializeModule: look cast %s\n", cast->type->name);
#endif
      if (swig_module.next != &swig_module) {
        ret = SWIG_MangledTypeQueryModule(swig_module.next, &swig_module, cast->type->name);
#ifdef SWIGRUNTIME_DEBUG
        if (ret) printf("SWIG_InitializeModule: found cast %s\n", ret->name);
#endif
      }
      if (ret) {
        if (type == swig_module.type_initial[i]) {
#ifdef SWIGRUNTIME_DEBUG
          printf("SWIG_InitializeModule: skip old type %s\n", ret->name);
#endif
          cast->type = ret;
          ret = 0;
        } else {
          /* Check for casting already in the list */
          swig_cast_info *ocast = SWIG_TypeCheck(ret->name, type);
#ifdef SWIGRUNTIME_DEBUG
          if (ocast) printf("SWIG_InitializeModule: skip old cast %s\n", ret->name);
#endif
          if (!ocast) ret = 0;
        }
      }
      
      if (!ret) {
#ifdef SWIGRUNTIME_DEBUG
        printf("SWIG_InitializeModule: adding cast %s\n", cast->type->name);
#endif
        if (type->cast) {
          type->cast->prev = cast;
          cast->next = type->cast;
        }
        type->cast = cast;
      }
      cast++;
    }
    /* Set entry in modules->types array equal to the type */
    swig_module.types[i] = type;
  }
  swig_module.types[i] = 0;
  
#ifdef SWIGRUNTIME_DEBUG
  printf("**** SWIG_InitializeModule: Cast List ******\n");
  for (i = 0; i < swig_module.size; ++i) {
    int j = 0;
    swig_cast_info *cast = swig_module.cast_initial[i];
    printf("SWIG_InitializeModule: type %d %s\n", i, swig_module.type_initial[i]->name);
    while (cast->type) {
      printf("SWIG_InitializeModule: cast type %s\n", cast->type->name);
      cast++;
      ++j;
    }
    printf("---- Total casts: %d\n",j);
  }
  printf("**** SWIG_InitializeModule: Cast List ******\n");
#endif
}

/* This function will propagate the clientdata field of type to
* any new swig_type_info structures that have been added into the list
* of equivalent types.  It is like calling
* SWIG_TypeClientData(type, clientdata) a second time.
*/
SWIGRUNTIME void
SWIG_PropagateClientData(void) {
  size_t i;
  swig_cast_info *equiv;
  static int init_run = 0;
  
  if (init_run) return;
  init_run = 1;
  
  for (i = 0; i < swig_module.size; i++) {
    if (swig_module.types[i]->clientdata) {
      equiv = swig_module.types[i]->cast;
      while (equiv) {
        if (!equiv->converter) {
          if (equiv->type && !equiv->type->clientdata)
          SWIG_TypeClientData(equiv->type, swig_module.types[i]->clientdata);
        }
        equiv = equiv->next;
      }
    }
  }
}

#ifdef __cplusplus
#if 0
{
  /* c-mode */
#endif
}
#endif



#ifdef __cplusplus
extern "C" {
#endif
  
  /* Python-specific SWIG API */
#define SWIG_newvarlink()                             SWIG_Python_newvarlink()
#define SWIG_addvarlink(p, name, get_attr, set_attr)  SWIG_Python_addvarlink(p, name, get_attr, set_attr)
#define SWIG_InstallConstants(d, constants)           SWIG_Python_InstallConstants(d, constants)
  
  /* -----------------------------------------------------------------------------
   * global variable support code.
   * ----------------------------------------------------------------------------- */
  
  typedef struct swig_globalvar {
    char       *name;                  /* Name of global variable */
    PyObject *(*get_attr)(void);       /* Return the current value */
    int       (*set_attr)(PyObject *); /* Set the value */
    struct swig_globalvar *next;
  } swig_globalvar;
  
  typedef struct swig_varlinkobject {
    PyObject_HEAD
    swig_globalvar *vars;
  } swig_varlinkobject;
  
  SWIGINTERN PyObject *
  swig_varlink_repr(swig_varlinkobject *SWIGUNUSEDPARM(v)) {
#if PY_VERSION_HEX >= 0x03000000
    return PyUnicode_InternFromString("<Swig global variables>");
#else
    return PyString_FromString("<Swig global variables>");
#endif
  }
  
  SWIGINTERN PyObject *
  swig_varlink_str(swig_varlinkobject *v) {
#if PY_VERSION_HEX >= 0x03000000
    PyObject *str = PyUnicode_InternFromString("(");
    PyObject *tail;
    PyObject *joined;
    swig_globalvar *var;
    for (var = v->vars; var; var=var->next) {
      tail = PyUnicode_FromString(var->name);
      joined = PyUnicode_Concat(str, tail);
      Py_DecRef(str);
      Py_DecRef(tail);
      str = joined;
      if (var->next) {
        tail = PyUnicode_InternFromString(", ");
        joined = PyUnicode_Concat(str, tail);
        Py_DecRef(str);
        Py_DecRef(tail);
        str = joined;
      }
    }
    tail = PyUnicode_InternFromString(")");
    joined = PyUnicode_Concat(str, tail);
    Py_DecRef(str);
    Py_DecRef(tail);
    str = joined;
#else
    PyObject *str = PyString_FromString("(");
    swig_globalvar *var;
    for (var = v->vars; var; var=var->next) {
      PyString_ConcatAndDel(&str,PyString_FromString(var->name));
      if (var->next) PyString_ConcatAndDel(&str,PyString_FromString(", "));
    }
    PyString_ConcatAndDel(&str,PyString_FromString(")"));
#endif
    return str;
  }
  
  SWIGINTERN int
  swig_varlink_print(swig_varlinkobject *v, FILE *fp, int SWIGUNUSEDPARM(flags)) {
    char *tmp;
    PyObject *str = swig_varlink_str(v);
    fprintf(fp,"Swig global variables ");
    fprintf(fp,"%s\n", tmp = SWIG_Python_str_AsChar(str));
    SWIG_Python_str_DelForPy3(tmp);
    Py_DECREF(str);
    return 0;
  }
  
  SWIGINTERN void
  swig_varlink_dealloc(swig_varlinkobject *v) {
    swig_globalvar *var = v->vars;
    while (var) {
      swig_globalvar *n = var->next;
      free(var->name);
      free(var);
      var = n;
    }
  }
  
  SWIGINTERN PyObject *
  swig_varlink_getattr(swig_varlinkobject *v, char *n) {
    PyObject *res = NULL;
    swig_globalvar *var = v->vars;
    while (var) {
      if (strcmp(var->name,n) == 0) {
        res = (*var->get_attr)();
        break;
      }
      var = var->next;
    }
    if (res == NULL && !PyErr_Occurred()) {
      PyErr_Format(PyExc_AttributeError, "Unknown C global variable '%s'", n);
    }
    return res;
  }
  
  SWIGINTERN int
  swig_varlink_setattr(swig_varlinkobject *v, char *n, PyObject *p) {
    int res = 1;
    swig_globalvar *var = v->vars;
    while (var) {
      if (strcmp(var->name,n) == 0) {
        res = (*var->set_attr)(p);
        break;
      }
      var = var->next;
    }
    if (res == 1 && !PyErr_Occurred()) {
      PyErr_Format(PyExc_AttributeError, "Unknown C global variable '%s'", n);
    }
    return res;
  }
  
  SWIGINTERN PyTypeObject*
  swig_varlink_type(void) {
    static char varlink__doc__[] = "Swig var link object";
    static PyTypeObject varlink_type;
    static int type_init = 0;
    if (!type_init) {
      const PyTypeObject tmp = {
#if PY_VERSION_HEX >= 0x03000000
        PyVarObject_HEAD_INIT(NULL, 0)
#else
        PyObject_HEAD_INIT(NULL)
        0,                                  /* ob_size */
#endif
        (char *)"swigvarlink",              /* tp_name */
        sizeof(swig_varlinkobject),         /* tp_basicsize */
        0,                                  /* tp_itemsize */
        (destructor) swig_varlink_dealloc,  /* tp_dealloc */
        (printfunc) swig_varlink_print,     /* tp_print */
        (getattrfunc) swig_varlink_getattr, /* tp_getattr */
        (setattrfunc) swig_varlink_setattr, /* tp_setattr */
        0,                                  /* tp_compare */
        (reprfunc) swig_varlink_repr,       /* tp_repr */
        0,                                  /* tp_as_number */
        0,                                  /* tp_as_sequence */
        0,                                  /* tp_as_mapping */
        0,                                  /* tp_hash */
        0,                                  /* tp_call */
        (reprfunc) swig_varlink_str,        /* tp_str */
        0,                                  /* tp_getattro */
        0,                                  /* tp_setattro */
        0,                                  /* tp_as_buffer */
        0,                                  /* tp_flags */
        varlink__doc__,                     /* tp_doc */
        0,                                  /* tp_traverse */
        0,                                  /* tp_clear */
        0,                                  /* tp_richcompare */
        0,                                  /* tp_weaklistoffset */
#if PY_VERSION_HEX >= 0x02020000
        0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0, /* tp_iter -> tp_weaklist */
#endif
#if PY_VERSION_HEX >= 0x02030000
        0,                                  /* tp_del */
#endif
#if PY_VERSION_HEX >= 0x02060000
        0,                                  /* tp_version_tag */
#endif
#if PY_VERSION_HEX >= 0x03040000
        0,                                  /* tp_finalize */
#endif
#ifdef COUNT_ALLOCS
        0,                                  /* tp_allocs */
        0,                                  /* tp_frees */
        0,                                  /* tp_maxalloc */
#if PY_VERSION_HEX >= 0x02050000
        0,                                  /* tp_prev */
#endif
        0                                   /* tp_next */
#endif
      };
      varlink_type = tmp;
      type_init = 1;
#if PY_VERSION_HEX < 0x02020000
      varlink_type.ob_type = &PyType_Type;
#else
      if (PyType_Ready(&varlink_type) < 0)
      return NULL;
#endif
    }
    return &varlink_type;
  }
  
  /* Create a variable linking object for use later */
  SWIGINTERN PyObject *
  SWIG_Python_newvarlink(void) {
    swig_varlinkobject *result = PyObject_NEW(swig_varlinkobject, swig_varlink_type());
    if (result) {
      result->vars = 0;
    }
    return ((PyObject*) result);
  }
  
  SWIGINTERN void 
  SWIG_Python_addvarlink(PyObject *p, char *name, PyObject *(*get_attr)(void), int (*set_attr)(PyObject *p)) {
    swig_varlinkobject *v = (swig_varlinkobject *) p;
    swig_globalvar *gv = (swig_globalvar *) malloc(sizeof(swig_globalvar));
    if (gv) {
      size_t size = strlen(name)+1;
      gv->name = (char *)malloc(size);
      if (gv->name) {
        strncpy(gv->name,name,size);
        gv->get_attr = get_attr;
        gv->set_attr = set_attr;
        gv->next = v->vars;
      }
    }
    v->vars = gv;
  }
  
  SWIGINTERN PyObject *
  SWIG_globals(void) {
    static PyObject *_SWIG_globals = 0; 
    if (!_SWIG_globals) _SWIG_globals = SWIG_newvarlink();  
    return _SWIG_globals;
  }
  
  /* -----------------------------------------------------------------------------
   * constants/methods manipulation
   * ----------------------------------------------------------------------------- */
  
  /* Install Constants */
  SWIGINTERN void
  SWIG_Python_InstallConstants(PyObject *d, swig_const_info constants[]) {
    PyObject *obj = 0;
    size_t i;
    for (i = 0; constants[i].type; ++i) {
      switch(constants[i].type) {
      case SWIG_PY_POINTER:
        obj = SWIG_InternalNewPointerObj(constants[i].pvalue, *(constants[i]).ptype,0);
        break;
      case SWIG_PY_BINARY:
        obj = SWIG_NewPackedObj(constants[i].pvalue, constants[i].lvalue, *(constants[i].ptype));
        break;
      default:
        obj = 0;
        break;
      }
      if (obj) {
        PyDict_SetItemString(d, constants[i].name, obj);
        Py_DECREF(obj);
      }
    }
  }
  
  /* -----------------------------------------------------------------------------*/
  /* Fix SwigMethods to carry the callback ptrs when needed */
  /* -----------------------------------------------------------------------------*/
  
  SWIGINTERN void
  SWIG_Python_FixMethods(PyMethodDef *methods,
    swig_const_info *const_table,
    swig_type_info **types,
    swig_type_info **types_initial) {
    size_t i;
    for (i = 0; methods[i].ml_name; ++i) {
      const char *c = methods[i].ml_doc;
      if (!c) continue;
      c = strstr(c, "swig_ptr: ");
      if (c) {
        int j;
        swig_const_info *ci = 0;
        const char *name = c + 10;
        for (j = 0; const_table[j].type; ++j) {
          if (strncmp(const_table[j].name, name, 
              strlen(const_table[j].name)) == 0) {
            ci = &(const_table[j]);
            break;
          }
        }
        if (ci) {
          void *ptr = (ci->type == SWIG_PY_POINTER) ? ci->pvalue : 0;
          if (ptr) {
            size_t shift = (ci->ptype) - types;
            swig_type_info *ty = types_initial[shift];
            size_t ldoc = (c - methods[i].ml_doc);
            size_t lptr = strlen(ty->name)+2*sizeof(void*)+2;
            char *ndoc = (char*)malloc(ldoc + lptr + 10);
            if (ndoc) {
              char *buff = ndoc;
              strncpy(buff, methods[i].ml_doc, ldoc);
              buff += ldoc;
              strncpy(buff, "swig_ptr: ", 10);
              buff += 10;
              SWIG_PackVoidPtr(buff, ptr, ty->name, lptr);
              methods[i].ml_doc = ndoc;
            }
          }
        }
      }
    }
  } 
  
#ifdef __cplusplus
}
#endif

/* -----------------------------------------------------------------------------*
 *  Partial Init method
 * -----------------------------------------------------------------------------*/

#ifdef __cplusplus
extern "C"
#endif

SWIGEXPORT 
#if PY_VERSION_HEX >= 0x03000000
PyObject*
#else
void
#endif
SWIG_init(void) {
  PyObject *m, *d, *md;
#if PY_VERSION_HEX >= 0x03000000
  static struct PyModuleDef SWIG_module = {
# if PY_VERSION_HEX >= 0x03020000
    PyModuleDef_HEAD_INIT,
# else
    {
      PyObject_HEAD_INIT(NULL)
      NULL, /* m_init */
      0,    /* m_index */
      NULL, /* m_copy */
    },
# endif
    (char *) SWIG_name,
    NULL,
    -1,
    SwigMethods,
    NULL,
    NULL,
    NULL,
    NULL
  };
#endif
  
#if defined(SWIGPYTHON_BUILTIN)
  static SwigPyClientData SwigPyObject_clientdata = {
    0, 0, 0, 0, 0, 0, 0
  };
  static PyGetSetDef this_getset_def = {
    (char *)"this", &SwigPyBuiltin_ThisClosure, NULL, NULL, NULL
  };
  static SwigPyGetSet thisown_getset_closure = {
    (PyCFunction) SwigPyObject_own,
    (PyCFunction) SwigPyObject_own
  };
  static PyGetSetDef thisown_getset_def = {
    (char *)"thisown", SwigPyBuiltin_GetterClosure, SwigPyBuiltin_SetterClosure, NULL, &thisown_getset_closure
  };
  PyTypeObject *builtin_pytype;
  int builtin_base_count;
  swig_type_info *builtin_basetype;
  PyObject *tuple;
  PyGetSetDescrObject *static_getset;
  PyTypeObject *metatype;
  PyTypeObject *swigpyobject;
  SwigPyClientData *cd;
  PyObject *public_interface, *public_symbol;
  PyObject *this_descr;
  PyObject *thisown_descr;
  PyObject *self = 0;
  int i;
  
  (void)builtin_pytype;
  (void)builtin_base_count;
  (void)builtin_basetype;
  (void)tuple;
  (void)static_getset;
  (void)self;
  
  /* Metaclass is used to implement static member variables */
  metatype = SwigPyObjectType();
  assert(metatype);
#endif
  
  /* Fix SwigMethods to carry the callback ptrs when needed */
  SWIG_Python_FixMethods(SwigMethods, swig_const_table, swig_types, swig_type_initial);
  
#if PY_VERSION_HEX >= 0x03000000
  m = PyModule_Create(&SWIG_module);
#else
  m = Py_InitModule((char *) SWIG_name, SwigMethods);
#endif
  
  md = d = PyModule_GetDict(m);
  (void)md;
  
  SWIG_InitializeModule(0);
  
#ifdef SWIGPYTHON_BUILTIN
  swigpyobject = SwigPyObject_TypeOnce();
  
  SwigPyObject_stype = SWIG_MangledTypeQuery("_p_SwigPyObject");
  assert(SwigPyObject_stype);
  cd = (SwigPyClientData*) SwigPyObject_stype->clientdata;
  if (!cd) {
    SwigPyObject_stype->clientdata = &SwigPyObject_clientdata;
    SwigPyObject_clientdata.pytype = swigpyobject;
  } else if (swigpyobject->tp_basicsize != cd->pytype->tp_basicsize) {
    PyErr_SetString(PyExc_RuntimeError, "Import error: attempted to load two incompatible swig-generated modules.");
# if PY_VERSION_HEX >= 0x03000000
    return NULL;
# else
    return;
# endif
  }
  
  /* All objects have a 'this' attribute */
  this_descr = PyDescr_NewGetSet(SwigPyObject_type(), &this_getset_def);
  (void)this_descr;
  
  /* All objects have a 'thisown' attribute */
  thisown_descr = PyDescr_NewGetSet(SwigPyObject_type(), &thisown_getset_def);
  (void)thisown_descr;
  
  public_interface = PyList_New(0);
  public_symbol = 0;
  (void)public_symbol;
  
  PyDict_SetItemString(md, "__all__", public_interface);
  Py_DECREF(public_interface);
  for (i = 0; SwigMethods[i].ml_name != NULL; ++i)
  SwigPyBuiltin_AddPublicSymbol(public_interface, SwigMethods[i].ml_name);
  for (i = 0; swig_const_table[i].name != 0; ++i)
  SwigPyBuiltin_AddPublicSymbol(public_interface, swig_const_table[i].name);
#endif
  
  SWIG_InstallConstants(d,swig_const_table);
  
  
  import_array();
  
#if PY_VERSION_HEX >= 0x03000000
  return m;
#else
  return;
#endif
}

