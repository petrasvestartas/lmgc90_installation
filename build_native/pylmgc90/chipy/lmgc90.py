# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.12
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    def swig_import_helper():
        import importlib
        pkg = __name__.rpartition('.')[0]
        mname = '.'.join((pkg, '_lmgc90')).lstrip('.')
        try:
            return importlib.import_module(mname)
        except ImportError:
            return importlib.import_module('_lmgc90')
    _lmgc90 = swig_import_helper()
    del swig_import_helper
elif _swig_python_version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_lmgc90', [dirname(__file__)])
        except ImportError:
            import _lmgc90
            return _lmgc90
        try:
            _mod = imp.load_module('_lmgc90', fp, pathname, description)
        finally:
            if fp is not None:
                fp.close()
        return _mod
    _lmgc90 = swig_import_helper()
    del swig_import_helper
else:
    import _lmgc90
del _swig_python_version_info

try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        if _newclass:
            object.__setattr__(self, name, value)
        else:
            self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr(self, class_type, name):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    raise AttributeError("'%s' object has no attribute '%s'" % (class_type.__name__, name))


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except __builtin__.Exception:
    class _object:
        pass
    _newclass = 0


def DISKx_LoadTactors(*args):
    """


    load DISKx from RBDY2 file and initialize existing_entites  

    python usage : DISKx_LoadTactors()  

    """
    return _lmgc90.DISKx_LoadTactors(*args)

def DISKx_GetNbDISKx(*args):
    """


    Get the number of DISKx in the container.  

    python usage : nb_diskx = DISKx_GetNbDISKx()  

    Returns
    -------
    nb_DISKx (integer) : the number of DISKx in container  

    """
    return _lmgc90.DISKx_GetNbDISKx(*args)

def DISKx_GetDISKx2BDYTY(*args):
    """


    Get a copy of map DISKx2bdyty.  

    usage : polyr2bdyty = DISKx_GetDISKx2BDYTY()  

    Returns
    -------
    polyr2bdyty (integer 2D-array) : the polyr2bdyty map  

    """
    return _lmgc90.DISKx_GetDISKx2BDYTY(*args)

def DISKx_GetPtrDISKx2BDYTY(*args):
    """


    return a pointer onto the map diskx2rbdy2  

    python usage : diskx2bdyty = DISKx_GetPtrDISKx2BDYTY()  

    Returns
    -------
    diskx2bdyty (integer array) : reference on map between diskx rank and body rank  

    """
    return _lmgc90.DISKx_GetPtrDISKx2BDYTY(*args)

def DISKx_IsVisible(*args):
    """


    return if a body visible  

    python usage : visible = DISKx_IsVisible(itact)  

    Parameters
    ----------
    itact(integer) : rank of DISKx  
    visible(integer) : 1 if body is visible, 0 else  

    """
    return _lmgc90.DISKx_IsVisible(*args)

def DISKx_GetContactorRadius(*args):
    """


    Get the radius of a given DISKx.  

    python usage : radius = DISKx_GetContactorRadius(itact)  

    Parameters
    ----------
    itact(integer) : rank of a DISKx (in the list of all the DISKx)  

    Returns
    -------
    radius (double) : the radius of the DISKx of rank itact  

    """
    return _lmgc90.DISKx_GetContactorRadius(*args)

def DISKx_GetMeanRadius(*args):
    """


    Get the mean radius of DISKx in the container.  

    python usage : radius = DISKx_GetMeanRadius()  

    Returns
    -------
    radius (double) : the mean radius of DISKx in the container  

    """
    return _lmgc90.DISKx_GetMeanRadius(*args)

def DISKx_GetMaxRadius(*args):
    """


    Get the max radius of DISKx in the container.  

    python usage : radius = DISKx_GetMaxRadius()  

    Returns
    -------
    radius (double) : the max radius of DISKx in the contactor  

    """
    return _lmgc90.DISKx_GetMaxRadius(*args)

def DISKx_GetMinRadius(*args):
    """


    Get the min radius of DISKx in the container.  

    python usage : radius = DISKx_GetMinRadius()  

    Returns
    -------
    radius (double) : the min radius of DISKx in the container  

    """
    return _lmgc90.DISKx_GetMinRadius(*args)

def DISKx_GetContactorColor(*args):
    """


    Get the color of a given DISKx.  

    python usage : color = DISKx_GetContactorColor(itact)  

    Parameters
    ----------
    itact(integer) : rank of a DISKx  

    Returns
    -------
    color (string) : the color of the DISKx itact  

    """
    return _lmgc90.DISKx_GetContactorColor(*args)

def DISKx_GetRadius(*args):
    """


    get radius of a DISKx  

    python usage : radius = DISKx_GetRadius(itacty)  

    Parameters
    ----------
    itacty(integer) : rank of DISKx  

    Returns
    -------
    radius (double) : the radius of DISKx of body ibdyty  

    """
    return _lmgc90.DISKx_GetRadius(*args)

def DISKx_GetContactorCoor(*args):
    """


    get coordinates of the center of a given DISKx  

    python usage : vector = DISKx_GetContactorCoor(itacty)  

    Parameters
    ----------
    itacty(integer) : rank of considered contactor  

    Returns
    -------
    vector (double array) : the desired vector  

    """
    return _lmgc90.DISKx_GetContactorCoor(*args)

def DISKx_InitOutlines(*args):
    """


    Get a reference on the outlines of all DISKx.  

    python usage : outlines = DISKx_InitOutlines()  

    Returns
    -------
    outlines (double array) : a reference on outlines_DISKx  

    """
    return _lmgc90.DISKx_InitOutlines(*args)

def DISKx_InitScalarFields(*args):
    """


    Get a reference on the scalar fields of all DISKx.  

    python usage : scalarfields = DISKx_InitScalarfields()  

    Returns
    -------
    scalarfields (double array) : reference on scalarfields_DISKx array  

    """
    return _lmgc90.DISKx_InitScalarFields(*args)

def DISKx_UpdatePostdata(*args):
    """


    Update values of outlines_DISKx and scalarfields_DISKx pointers.  

    python usage : DISKx_UpdatePostdata()  

    """
    return _lmgc90.DISKx_UpdatePostdata(*args)

def DISKx_GetNbPointOutlines(*args):
    """


    Get the list of cumulated outline points number.  

    python usage : nb_pointOutlines = DISKx_GetNbPointOutlines()  

    Returns
    -------
    nb_pointOutlines (integer array) : the cumulated number of outline points of the
    DISKx  

    """
    return _lmgc90.DISKx_GetNbPointOutlines(*args)

def DISKx_GetNbScalarFields(*args):
    """


    Get the number of scalar fields of a DISKx.  

    python usage : nb_scalarfields = DISKx_GetNbScalarFields()  

    Returns
    -------
    nb_scalarfields (integer) : the number of scalar fields of a DISKx  

    """
    return _lmgc90.DISKx_GetNbScalarFields(*args)

def DISKx_CleanMemory(*args):
    """


    Free all memory allocated within DISKx module.  

    python usage : DISKx_CleanMemory()  

    """
    return _lmgc90.DISKx_CleanMemory(*args)

def DISKx_SetXdilation(*args):
    """


    set increase of radius of a DISKx due to expansion  

    python usage : DISKx_SetXdilation(itacty,x)  

    Parameters
    ----------
    itacty(integer) : rank of considered contactor  
    x(float) : increase of radius  

    """
    return _lmgc90.DISKx_SetXdilation(*args)

def DISKx_SetVdilation(*args):
    """


    set increase rate of radius of a DISKx due to expansion  

    python usage : DISKx_SetVdilation(itacty, v)  

    Parameters
    ----------
    itacty(integer) : rank of contactor  
    v(float) : radius increase rate  

    """
    return _lmgc90.DISKx_SetVdilation(*args)

def JONCx_LoadTactors(*args):
    """


    load JONCx from RBDY2 and initialize existing_entites  

    python usage : JONCx_LoadTactors()  

    """
    return _lmgc90.JONCx_LoadTactors(*args)

def JONCx_GetNbJONCx(*args):
    """


    Get the number of JONCx in container.  

    python usage : nb_joncx = JONCx_GetNbJONCx()  

    Returns
    -------
    nb_joncx (integer) : the number of JONCx in container  

    """
    return _lmgc90.JONCx_GetNbJONCx(*args)

def JONCx_GetBodyId(*args):
    """


    Get the body rank of a given JONCx.  

    python usage : ibdyty = JONCx_GetBodyId(itacty)  

    Parameters
    ----------
    itacty(integer) : JONCx rank  

    Returns
    -------
    ibdyty (integer) : body rank  

    """
    return _lmgc90.JONCx_GetBodyId(*args)

def JONCx_GetShape(*args):
    """


    Get the shape of a JONCx.  

    usage : shape = JONCx_GetShape(itacty)  

    Parameters
    ----------
    itacty(integer) : rank of JONCx  

    Returns
    -------
    shape (double array) : axis length of the JONCx  

    """
    return _lmgc90.JONCx_GetShape(*args)

def JONCx_GetCoor(*args):
    """


    Get the coor of a JONCx.  

    usage : coor = JONCx_GetCoor(itacty)  

    Parameters
    ----------
    itacty(integer) : rank of JONCx  

    Returns
    -------
    coor (double array) : coordinates of the JONCx  

    """
    return _lmgc90.JONCx_GetCoor(*args)

def JONCx_GetPtrJONCx2BDYTY(*args):
    """


    return a pointer onto the map joncx2rbdy2  

    python usage : joncx2rbdy2 = JONCx_GetPtrJONCx2BDYTY()  

    Returns
    -------
    joncx2rbdy2 (integer array) : reference on map between joncx rank and body/tact
    rank  

    """
    return _lmgc90.JONCx_GetPtrJONCx2BDYTY(*args)

def JONCx_IsVisible(*args):
    """


    return if a body visible  

    usage : visible = JONCx_IsVisible(itact)  

    Parameters
    ----------
    itact(integer) : rank of JONCx  
    visible(integer) : 1 if body is visible, 0 else  

    """
    return _lmgc90.JONCx_IsVisible(*args)

def JONCx_InitOutlines(*args):
    """


    Get a reference on the outlines of all JONCx.  

    usage : outlines = JONCx_InitOutlines()  

    Returns
    -------
    outlines (double array) : a reference on outlines_JONCx  

    """
    return _lmgc90.JONCx_InitOutlines(*args)

def JONCx_InitScalarFields(*args):
    """


    Get a reference on the scalar fields of all JONCx.  

    usage : scalarfields = JONCx_InitScalarfields()  

    Returns
    -------
    scalarfields (double array) : reference on scalarfields_JONCx array  

    """
    return _lmgc90.JONCx_InitScalarFields(*args)

def JONCx_UpdatePostdata(*args):
    """


    Update values of outlines_JONCx and scalarfields_JONCx pointers.  

    usage : JONCx_UpdatePostdata()  

    """
    return _lmgc90.JONCx_UpdatePostdata(*args)

def JONCx_GetNbPointOutlines(*args):
    """


    Get the list of cumulated outline points number.  

    python usage : nb_pointOutlines = JONCx_GetNbPointOutlines()  

    Returns
    -------
    nb_pointOutlines (integer array) : the cumulated number of outline points of the
    JONCx  

    """
    return _lmgc90.JONCx_GetNbPointOutlines(*args)

def JONCx_GetNbScalarFields(*args):
    """


    Get the number of scalar fields of a JONCx.  

    python usage : nb_scalarfields = JONCx_GetNbScalarFields()  

    Returns
    -------
    nb_scalarfields (integer) : the number of scalar fields of a JONCx  

    """
    return _lmgc90.JONCx_GetNbScalarFields(*args)

def JONCx_CleanMemory(*args):
    """


    Free all memory allocated within JONCx module.  

    python usage : JONCx_CleanMemory()  

    """
    return _lmgc90.JONCx_CleanMemory(*args)

def POLYG_LoadTactors(*args):
    """


    load POLYG from RBDY2 and initialize existing_entites  

    python usage : POLYG_LoadTactors()  

    """
    return _lmgc90.POLYG_LoadTactors(*args)

def POLYG_GetMinRadius(*args):
    """


    give min radius used during detection  

    python usage : POLYG_GetMinRadius()  

    """
    return _lmgc90.POLYG_GetMinRadius(*args)

def POLYG_GetMaxRadius(*args):
    """


    give max radius used during detection  

    python usage : POLYG_GetMaxRadius()  

    """
    return _lmgc90.POLYG_GetMaxRadius(*args)

def POLYG_GetNbPOLYG(*args):
    """


    Get the number of POLYG in container.  

    python usage : nb_polyg = POLYG_GetNbPOLYG()  

    Returns
    -------
    nb_polyg (integer) : the number of POLYG in container  

    """
    return _lmgc90.POLYG_GetNbPOLYG(*args)

def POLYG_GetPOLYG2BDYTY(*args):
    """


    Get a copy of map POLYG2bdyty.  

    usage : polyr2bdyty = POLYG_GetPOLYG2BDYTY()  

    Returns
    -------
    polyr2bdyty (integer 2D-array) : the polyr2bdyty map  

    """
    return _lmgc90.POLYG_GetPOLYG2BDYTY(*args)

def POLYG_GetPtrPOLYG2BDYTY(*args):
    """


    return a pointer onto the map polyg2rbdy2  

    python usage : polyg2rbdy2 = POLYG_GetPtrPOLYG2BDYTY()  

    Returns
    -------
    polyg2rbdy2 (integer array) : reference on map between polyg rank and
    body/tactor rank  

    """
    return _lmgc90.POLYG_GetPtrPOLYG2BDYTY(*args)

def POLYG_IsVisible(*args):
    """


    return if a body visible  

    usage : visible = POLYG_IsVisible(itact)  

    Parameters
    ----------
    itact(integer) : rank of POLYG  
    visible(integer) : 1 if body is visible, 0 else  

    """
    return _lmgc90.POLYG_IsVisible(*args)

def POLYG_GetContactorRadius(*args):
    """


    Get the radius of a given POLYG.  

    python usage : radius = POLYG_GetContactorRadius(itact)  

    Parameters
    ----------
    itact(integer) : rank of a POLYG  

    Returns
    -------
    radius (double) : the radius of the POLYG of rank itact  

    """
    return _lmgc90.POLYG_GetContactorRadius(*args)

def POLYG_GetNbVertices(*args):
    """


    Get the number of vertices of the first POLYG of a body.  

    python usage : nb_vertices = POLYG_GetNbVertices(ibdyty)  

    Parameters
    ----------
    ibdyty(integer) : rank of a body  

    Returns
    -------
    nb_vertices (integer) : the number of vertices of the first POLYG of the body  

    """
    return _lmgc90.POLYG_GetNbVertices(*args)

def POLYG_GetVertices(*args):
    """


    Get the coordinates of the vertices of the first POLYG of a body.  

    usage : vertices = POLYG_GetVertices(ibdyty)  

    Parameters
    ----------
    ibdyty(integer) : rank of considered body  
    vertices(double 2D-array) : the coordinates of the vertices  

    """
    return _lmgc90.POLYG_GetVertices(*args)

def POLYG_GetNbVertex(*args):
    """


    Get the number of vertices of a POLYG.  

    usage : nb_vertex = POLYG_GetNpVertex(itacty)  

    Parameters
    ----------
    itacty(integer) : id of the POLYG contactor  

    Returns
    -------
    nb_vertex (int) : the number of vertices of the POLYG  

    """
    return _lmgc90.POLYG_GetNbVertex(*args)

def POLYG_GetVertex(*args):
    """


    Get the outline of a POLYG.  

    usage : vertex = POLYG_GetVertex(itacty, length)  

    Parameters
    ----------
    ibdyty(integer) : rank of considered body  
    length(integer) : 2 * number of vertices  
    vertex(double array) : the coordinates of the vertices  

    """
    return _lmgc90.POLYG_GetVertex(*args)

def POLYG_GetBodyId(*args):
    """


    Get the id of the body which the tactor belongs.  

    python usage : id = POLYG_GetBodyId(itacty)  

    Parameters
    ----------
    itacty(integer) : rank of a POLYG contactor  

    Returns
    -------
    id (integer) : the id of the body  

    """
    return _lmgc90.POLYG_GetBodyId(*args)

def POLYG_InitOutlines(*args):
    """


    Get a reference on the outlines of all POLYG.  

    usage : outlines = POLYG_InitOutlines()  

    Returns
    -------
    outlines (double array) : a reference on outlines_POLYG  

    """
    return _lmgc90.POLYG_InitOutlines(*args)

def POLYG_InitScalarFields(*args):
    """


    Get a reference on the scalar fields of all POLYG.  

    usage : scalarfields = POLYG_InitScalarfields()  

    Returns
    -------
    scalarfields (double array) : reference on scalarfields_POLYG array  

    """
    return _lmgc90.POLYG_InitScalarFields(*args)

def POLYG_UpdatePostdata(*args):
    """


    Update values of outlines_POLYG and scalarfields_POLYG pointers.  

    usage : POLYG_UpdatePostdata  

    """
    return _lmgc90.POLYG_UpdatePostdata(*args)

def POLYG_GetNbPointOutlines(*args):
    """


    Get the list of cumulated outline points number.  

    python usage : nb_pointOutlines = POLYG_GetNbPointOutlines()  

    Returns
    -------
    nb_pointOutlines (integer array) : the cumulated number of outline points of the
    POLYG  

    """
    return _lmgc90.POLYG_GetNbPointOutlines(*args)

def POLYG_GetNbScalarFields(*args):
    """


    Get the number of scalar fields of a POLYG.  

    python usage : nb_scalarfields = POLYG_GetNbScalarFields()  

    Returns
    -------
    nb_scalarfields (integer) : the number of scalar fields of a POLYG  

    """
    return _lmgc90.POLYG_GetNbScalarFields(*args)

def POLYG_SetXdilation(*args):
    """


    """
    return _lmgc90.POLYG_SetXdilation(*args)

def POLYG_SetVdilation(*args):
    """


    """
    return _lmgc90.POLYG_SetVdilation(*args)

def POLYG_CleanMemory(*args):
    """


    Free all memory allocated within POLYG module.  

    python usage : POLYG_CleanMemory()  

    """
    return _lmgc90.POLYG_CleanMemory(*args)

def PT2Dx_LoadTactors(*args):
    """


    load PT2Dx from RBDY2 and initialize existing_entites  

    python usage : PT2Dx_LoadTactors()  

    """
    return _lmgc90.PT2Dx_LoadTactors(*args)

def PT2Dx_GetNbPT2Dx(*args):
    """


    Get the number of PT2Dx in the container.  

    python usage : nb_pt2d = PT2Dx_GetNbPT2Dx()  

    Returns
    -------
    nb_pt2d (integer) : the number of PT2Dx in container  

    """
    return _lmgc90.PT2Dx_GetNbPT2Dx(*args)

def PT2Dx_SetDisplayRadius(*args):
    """


    Set a radius to display a pt2dx.  

    python usage : PT2Dx_SetDisplayRadius(radius)  

    Parameters
    ----------
    radius(double) : value of the radius which should be used for display  

    """
    return _lmgc90.PT2Dx_SetDisplayRadius(*args)

def PT2Dx_GetPtrPT2Dx2BDYTY(*args):
    """


    return a pointer onto the map pt2dx2rbdy2  

    python usage : ptd2x2rbdy2 = PT2Dx_GetPtrPT2Dx2BDYTY()  

    Returns
    -------
    pt2dx2rbdy2 (integer array) : reference on map between pt2dx rank and body/tact
    rank  

    """
    return _lmgc90.PT2Dx_GetPtrPT2Dx2BDYTY(*args)

def PT2Dx_IsVisible(*args):
    """


    return if a body visible  

    usage : visible = PT2Dx_IsVisible(itact)  

    Parameters
    ----------
    itact(integer) : rank of PT2Dx  
    visible(integer) : 1 if body is visible, 0 else  

    """
    return _lmgc90.PT2Dx_IsVisible(*args)

def PT2Dx_InitOutlines(*args):
    """


    Get a reference on the outlines of all PT2Dx.  

    usage : outlines = PT2Dx_InitOutlines()  

    Returns
    -------
    outlines (double array) : a reference on outlines_PT2Dx  

    """
    return _lmgc90.PT2Dx_InitOutlines(*args)

def PT2Dx_InitScalarFields(*args):
    """


    Get a reference on the scalar fields of all PT2Dx.  

    usage : scalarfields = PT2Dx_InitScalarfields()  

    Returns
    -------
    scalarfields (double array) : reference on scalarfields_PT2Dx array  

    """
    return _lmgc90.PT2Dx_InitScalarFields(*args)

def PT2Dx_UpdatePostdata(*args):
    """


    Update values of outlines_PT2Dx and scalarfields_PT2Dx pointers.  

    usage : PT2Dx_UpdatePostdata  

    """
    return _lmgc90.PT2Dx_UpdatePostdata(*args)

def PT2Dx_GetNbPointOutlines(*args):
    """


    Get the list of cumulated outline points number.  

    python usage : nb_pointOutlines = PT2Dx_GetNbPointOutlines()  

    Returns
    -------
    nb_pointOutlines (integer array) : the cumulated number of outline points of the
    PT2Dx  

    """
    return _lmgc90.PT2Dx_GetNbPointOutlines(*args)

def PT2Dx_GetNbScalarFields(*args):
    """


    Get the number of scalar fields of a PT2Dx.  

    python usage : nb_scalarfields = PT2Dx_GetNbScalarFields()  

    Returns
    -------
    nb_scalarfields (integer) : the number of scalar fields of a PT2Dx  

    """
    return _lmgc90.PT2Dx_GetNbScalarFields(*args)

def PT2Dx_CleanMemory(*args):
    """


    Free all memory allocated within PT2Dx module.  

    python usage : PT2Dx_CleanMemory()  

    """
    return _lmgc90.PT2Dx_CleanMemory(*args)

def RBDY2_PutBodyInvMass(*args):
    """


    Set inv mass diagonal matrix of a given body. Overwrites the computed values.  

    usage : RBDY2_PutBodyInvMass(ibdyty, inv_mass)  

    Parameters
    ----------
    ibdyty(integer) : rank of RBDY2  
    inv_mass(double array) : inv_mass of RBDY2 (size 3)  

    """
    return _lmgc90.RBDY2_PutBodyInvMass(*args)

def RBDY2_PutBodyPreconW(*args):
    """


    Put preconW of a given body.  

    usage : RBDY2_PutBodyPreconW(ibdyty, idof, W)  

    Parameters
    ----------
    ibdyty(integer) : rank of RBDY2  
    idof(integer) : corresponding dof to set  
    W(double array) :  

    """
    return _lmgc90.RBDY2_PutBodyPreconW(*args)

def RBDY2_PutBodyVector(*args):
    """


    Set a vector of a given body.  

    Possible values for datatype field are:  

    *   "Coor0": reference coordinates  
    *   "Coorb": coordinates at beginning of time step  
    *   "Coor_": coordinates in computed configuration  
    *   "X____": cumulated displacements over time in computed configuration  
    *   "Xbeg_": cumulated displacements over time at beginning of time step  
    *   "V____": velocity in computed configuration  
    *   "Vbeg_": velocity at beginning of time step  
    *   "Vaux_": working array for velocity  
    *   "Vfree": velocity free of contacts  
    *   "Reac_": contact reaction force  
    *   "Raux_": working array for reaction force  
    *   "Ireac": contact impulse  
    *   "Iaux_": working array for impulste  
    *   "Fext_": external forces  

    Uses copy, and in case fo Fext, the operation is not just setting but adding  

    usage : RBDY2_PutBodyVector(datatype, ibdyty, vector)  

    Parameters
    ----------
    datatype(string of size 5) : the vector to set  
    ibdyty(integer) : rank of body  
    vector(double array) : the new value  

    """
    return _lmgc90.RBDY2_PutBodyVector(*args)

def RBDY2_PutAllBodyVector(*args):
    """


    Put an array of a vector of all RBDY2 bodies (visible and invisible)  

    Possible values for datatype field are: ... see RBDY2_PutBodyVector  

    python usage : RBDY2_PutAllBodyVector(datatype, matrix)  

    Parameters
    ----------
    datatype(string [5]) : the vector to set  
    matrix(double array) : input matrix  

    """
    return _lmgc90.RBDY2_PutAllBodyVector(*args)

def RBDY2_GetBodyVector(*args):
    """


    Get a copy of a vector of a given RBDY2 body.  

    Possible values for datatype field are:  

    *   "Coor0": reference coordinates  
    *   "Coorb": coordinates at beginning of time step  
    *   "Coorm": coordinates in detection configuration  
    *   "Coor_": coordinates in computed configuration  
    *   "X____": cumulated displacements over time in computed configuration  
    *   "Xbeg_": cumulated displacements over time at beginning of time step  
    *   "V____": velocity in computed configuration  
    *   "Vbeg_": velocity at beginning of time step  
    *   "Vaux_": working array for velocity  
    *   "Vfree": velocity free of contacts  
    *   "Reac_": contact reaction force  
    *   "Raux_": working array for reaction force  
    *   "Ireac": contact impulse  
    *   "Iaux_": working array for impulste  
    *   "Fext_": external forces  
    *   "Fint_": internal forces  

    usage : vector = RBDY2_GetBodyVector(datatype, ibdyty)  

    Parameters
    ----------
    datatype(string of size 5) : the vector to get  
    ibdyty(integer) : rank of considered body  
    vector(double array) : the desired vector  

    """
    return _lmgc90.RBDY2_GetBodyVector(*args)

def RBDY2_GetAllBodyVector(*args):
    """


    Get an array of a vector of all RBDY2 bodies (visible and invisible)  

    Possible values for datatype field are: ... see RBDY2_GetBodyVector  

    python usage : matrix = RBDY2_GetBodyVector(datatype, ibdyty)  

    Parameters
    ----------
    datatype(string [5]) : the vector to get  

    Returns
    -------
    matrix (double array) : output matrix  

    """
    return _lmgc90.RBDY2_GetAllBodyVector(*args)

def RBDY2_GetPtrBodyVector(*args):
    """


    Get a pointer on a vector of a given RBDY2 body.  

    Possible values for datatype field are:  

    *   "Coor0": reference coordinates  
    *   "Xbeg_": cumulated displacements over time at beginning of time step  
    *   "X____": cumulated displacements over time in computed configuration  
    *   "Vbeg_": velocity at beginning of time step  
    *   "V____": velocity in computed configuration  
    *   "Vaux_": working array for velocity  
    *   "Ireac": contact impulse  
    *   "Iaux_": working array for impulste  
    *   "Fext_": external forces  

    usage : vector_ptr = RBDY2_GetPtrVector(datatype, ibdyty)  

    Parameters
    ----------
    datatype(string of size 5) : the vector to get  
    ibdyty(integer) : rank of considered body  
    vector_ptr(double array) : reference on the desired vector viewed as a numpy array  

    """
    return _lmgc90.RBDY2_GetPtrBodyVector(*args)

def RBDY2_GetBodyInertia(*args):
    """


    Get the inertia of a given RBDY2 body.  

    usage : inertia = RBDY2_GetBodyInertia(ibdyty)  

    Parameters
    ----------
    ibdyty(integer) : rank of considered body  
    inertia(double) : the inertia of desired body  

    """
    return _lmgc90.RBDY2_GetBodyInertia(*args)

def RBDY2_GetAllInertia(*args):
    """


    Get the inertia of a all RBDY2 body.  

    usage : inertia = RBDY2_GetAllInertia()  

    Parameters
    ----------
    inertia(double array): the inertia of all bodies  

    """
    return _lmgc90.RBDY2_GetAllInertia(*args)

def RBDY2_IncrementStep(*args):
    """


    increment values at the current time step (prediction)  

    usage : RBDY2_IncrementStep()  

    """
    return _lmgc90.RBDY2_IncrementStep(*args)

def RBDY2_SetVlocyDrivenDof(*args):
    """


    Override the value of an existing velocity driven dof ; use after IncrementStep.  

    usage : RBDY2_SetVlocyDrivenDof(ibdyty, idrvdof, value)  

    Parameters
    ----------
    ibdyty(integer) : rank of considered  
    idrvdof(integer) : index of velocity driven dof to set  
    value(real) : new value of the velocity driven dof  

    """
    return _lmgc90.RBDY2_SetVlocyDrivenDof(*args)

def RBDY2_ComputeDof(*args):
    """


    Compute current DOF of bodies in container.  

    usage : RBDY2_ComputeDof()  

    """
    return _lmgc90.RBDY2_ComputeDof(*args)

def RBDY2_UpdateDof(*args):
    """


    set current DOF as initial DOF of bodies in container  

    usage : RBDY2_UpdateDof()  

    """
    return _lmgc90.RBDY2_UpdateDof(*args)

def RBDY2_ComputeFreeVelocity(*args):
    """


    Compute free velocity of bodies in container.  

    usage : RBDY2_ComputeFreeVelocity()  

    """
    return _lmgc90.RBDY2_ComputeFreeVelocity(*args)

def RBDY2_ComputeFext(*args):
    """


    Compute impulse of external forces of bodies in container.  

    usage : RBDY2_ComputeFext()  

    """
    return _lmgc90.RBDY2_ComputeFext(*args)

def RBDY2_ComputeBulk(*args):
    """


    Compute impulse of internal forces of bodies in container.  

    usage : RBDY2_ComputeBulk()  

    """
    return _lmgc90.RBDY2_ComputeBulk(*args)

def RBDY2_CheckEquilibriumState(*args):
    """


    check if all the RBDY2 rich an equilibrium state (velocity is almost equal to
    zero)  

    usage : isBalanced = RBDY2_CheckEquilibriumState()  

    Returns
    -------
    isBalanced (boolean) : True if in equilibrium state  

    """
    return _lmgc90.RBDY2_CheckEquilibriumState(*args)

def RBDY2_GhostToInvisible(*args):
    """


    set bodies with ghost behaviour nickname as invisible  

    usage : RBDY2_GhostToInvisible()  

    """
    return _lmgc90.RBDY2_GhostToInvisible(*args)

def RBDY2_FatalDamping(*args):
    """


    Nullify body current and initial velocities of a list of bodies.  

    This keyword must be between the ComputeDof and UpdateDof ones.  

    usage : RBDY2_FatalDamping(i_list)  

    Parameters
    ----------
    i_list(list of integer) : list of bodies to reset current velocity if omitted
        works on all objetcs  

    """
    return _lmgc90.RBDY2_FatalDamping(*args)

def RBDY2_PartialDamping(*args):
    """


    Limit body velocity to Vmax value.  

    usage : RBDY2_PartialDamping(nb_steps, Vmax)  

    Parameters
    ----------
    nb_steps(integer) : periodicity @parma[in] Vmax (double) : Vmax  

    """
    return _lmgc90.RBDY2_PartialDamping(*args)

def RBDY2_WriteLastDof(*args):
    """


    Write ascii DOF.LAST file.  

    usage : RBDY2_WriteLastDof()  

    """
    return _lmgc90.RBDY2_WriteLastDof(*args)

def RBDY2_WriteOutDof(*args):
    """


    Write ascii DOF.OUT file. Can be activated only each N steps.  

    If 0 for ivalue1 and ivalue2, dofs of all bodies are written.  

    usage : RBDY2_WriteOutDof(ivalue1=0, ivalue2=0)  

    Parameters
    ----------
    ivalue1(integer) : first body  
    ivalue2(integer) : last body  

    """
    return _lmgc90.RBDY2_WriteOutDof(*args)

def RBDY2_DisplayOutDof(*args):
    """


    Display bodies degrees of freedom.  

    usage : RBDY2_DisplayOutDof()  

    """
    return _lmgc90.RBDY2_DisplayOutDof(*args)

def RBDY2_WriteLastRnod(*args):
    """


    Write ascii Rnod.LAST file.  

    usage : RBDY2_WriteLastRnod()  

    """
    return _lmgc90.RBDY2_WriteLastRnod(*args)

def RBDY2_WriteOutRnod(*args):
    """


    Write ascii Rnod.OUT file. Can be activated only each N steps.  

    usage : RBDY2_WriteOutRnod()  

    """
    return _lmgc90.RBDY2_WriteOutRnod(*args)

def RBDY2_DisplayOutRnod(*args):
    """


    display body forces  

    usage : RBDY2_DisplayOutRnod()  

    """
    return _lmgc90.RBDY2_DisplayOutRnod(*args)

def RBDY2_WriteBodies(*args):
    """


    Write BODIES.OUT file.  

    Write DRV_DOF.OUT file.  

    usage : RBDY2_WriteBodies()  

    """
    return _lmgc90.RBDY2_WriteBodies(*args)

def RBDY2_ClearedWriteBodies(*args):
    """


    ...  

    usage : RBDY2_ClearedWriteBodies()  

    """
    return _lmgc90.RBDY2_ClearedWriteBodies(*args)

def RBDY2_WriteDrivenDof(*args):
    """


    """
    return _lmgc90.RBDY2_WriteDrivenDof(*args)

def RBDY2_ReadBodies(*args):
    """


    Read BODIES.DAT file.  

    usage : RBDY2_ReadBodies()  


     Initialize existing_entities variable in RBDY2  
     Adds the number of found bodies to entity  

    """
    return _lmgc90.RBDY2_ReadBodies(*args)

def RBDY2_ReadIniDof(*args):
    """


    Read DOF file.  

    If num <= 0 : DATBOX/DOF.INI file is read Else : OUTBOX/DOF.OUT.num is read, num
    being the parameter used in TimeEvolution_ReadIniDof last call  

    usage : RBDY2_ReadIniDof(num=0)  

    Parameters
    ----------
    num(integer) : which DOF file to read  

    """
    return _lmgc90.RBDY2_ReadIniDof(*args)

def RBDY2_ReadDrivenDof(*args):
    """


    Read DRV_DOF.DAT file.  

    usage : RBDY2_ReadDrivenDof()  

    """
    return _lmgc90.RBDY2_ReadDrivenDof(*args)

def RBDY2_LoadBehaviours(*args):
    """


    Load bulk behaviour id from bulk_behav module.  

    usage : RBDY2_LoadBehaviours()  

    """
    return _lmgc90.RBDY2_LoadBehaviours(*args)

def RBDY2_MP_LoadBehaviours(*args):
    """


    Load extra physical behaviour read in BULK_BEHAV.DAT file.  

    Must be used with THERMO_RIGID ELECTRO_RIGID THERMO_ELECTRO_RIGID behaviours  

    usage : RBDY2_MP_LoadBehaviours(disper)  

    Parameters
    ----------
    disper(double) : dispersion variable  

    """
    return _lmgc90.RBDY2_MP_LoadBehaviours(*args)

def RBDY2_UpdateWSvsT(*args):
    """


    update surface energy with temperature  

    Must be used with THERMO_RIGID ELECTRO_RIGID THERMO_ELECTRO_RIGID behaviours  

    usage : RBDY2_UpdateWSvsT()  

    """
    return _lmgc90.RBDY2_UpdateWSvsT(*args)

def RBDY2_UpdateWSvsTime(*args):
    """


    update surface energy with time  

    Must be used with THERMO_RIGID ELECTRO_RIGID THERMO_ELECTRO_RIGID behaviours  

    usage : RBDY2_UpdateWSvsTime()  

    """
    return _lmgc90.RBDY2_UpdateWSvsTime(*args)

def RBDY2_ComputeMass(*args):
    """


    Compute mass and inertia of bodies.  

    usage : RBDY2_ComputeMass()  

    """
    return _lmgc90.RBDY2_ComputeMass(*args)

def RBDY2_SetPeriodicCondition(*args):
    """


    define the space is X periodic [0,periode]  

    The X variable reaches a value between 0 and periode  

    usage : RBDY2_SetPeriodicCondition(periode)  

    Parameters
    ----------
    period(double) : periode  

    """
    return _lmgc90.RBDY2_SetPeriodicCondition(*args)

def RBDY2_ResizeBodies(*args):
    """


    resize body radius by a factor  

    usage : RBDY2_ResizeBodies(homo)  

    Parameters
    ----------
    homo(double) : resize factor  

    """
    return _lmgc90.RBDY2_ResizeBodies(*args)

def RBDY2_NullifyDisplacements(*args):
    """


    Set displacements equal to 0.  

    usage : RBDY2_NullifyDisplacements()  

    """
    return _lmgc90.RBDY2_NullifyDisplacements(*args)

def RBDY2_NullifyVelocities(*args):
    """


    Set velocity to 0.  

    usage : RBDY2_NullifyVelocities()  

    """
    return _lmgc90.RBDY2_NullifyVelocities(*args)

def RBDY2_SetSourcePoint(*args):
    """


    Create an assembly by source point deposit.  

    usage : RBDY2_SetSourcePoint(ibdyty, radius, x_coor, y_coor)  

    Parameters
    ----------
    ibdyty(integer): rank of first invisible body  
    radius(double) : radius of source point area  
    x_coor(double) : X translation from the set of grains  
    y_coor(double) : Y translation from the set of grains  

    """
    return _lmgc90.RBDY2_SetSourcePoint(*args)

def RBDY2_CheckSourcePoint(*args):
    """


    check if it possible to deposit a new particle  

    usage : RBDY2_CheckSourcePoint()  

    """
    return _lmgc90.RBDY2_CheckSourcePoint(*args)

def RBDY2_MembraneBiaxialLoading(*args):
    """


    Biaxial load of a sample using pseudo membrane.  

    usage : RBDY2_MembraneBiaxialLoading(down, up, thickness, stress)  

    Parameters
    ----------
    down(integer) : rank of the lower body  
    up(integer) : rank of the upper body  
    thickness(double) : thickness of the membrane  
    stress(double) : pressure on the membrane  

    """
    return _lmgc90.RBDY2_MembraneBiaxialLoading(*args)

def RBDY2_BiaxialLoading(*args):
    """


    Biaxial load of a sample using a rigid box.  

    usage : RBDY2_BiaxialLoading(down,f_down,right,f_right,up,f_up,left,f_left)  

    Parameters
    ----------
    down(integer) : rank of the lower body  
    f_down(double) : pressure on the lower body  
    right(integer) : rank of the right body  
    f_right(double) : pressure on the right body  
    up(integer) : rank of the upper body  
    f_up(double) : pressure on the upper body  
    left(integer) : rank of the left body  
    f_left(double) : pressure on the left body  

    """
    return _lmgc90.RBDY2_BiaxialLoading(*args)

def RBDY2_SetYminBoundary(*args):
    """


    define the boundary of command CHECK_OUT_OF_BOUNDS  

    usage : RBDY2_SetYminBoundary(inf_boundary)  

    Parameters
    ----------
    inf_boundary(double) : inferior boundary value  

    """
    return _lmgc90.RBDY2_SetYminBoundary(*args)

def RBDY2_SetYmaxBoundary(*args):
    """


    define the boundary of command CHECK_OUT_OF_BOUNDS  

    usage : RBDY2_SetYmaxBoundary(up_boundary)  

    Parameters
    ----------
    up_boundary(double) : superior boundary value  

    """
    return _lmgc90.RBDY2_SetYmaxBoundary(*args)

def RBDY2_SetXminBoundary(*args):
    """


    define the boundary of command CHECK_OUT_OF_BOUNDS  

    usage : RBDY2_SetXminBoundary(left_boundary)  

    Parameters
    ----------
    left_boundary(double) : left boundary value  

    """
    return _lmgc90.RBDY2_SetXminBoundary(*args)

def RBDY2_SetXmaxBoundary(*args):
    """


    define the boundary of command CHECK_OUT_OF_BOUNDS  

    usage : RBDY2_SetXmaxBoundary(right_boundary)  

    Parameters
    ----------
    right_boundary(double) : right boundary value  

    """
    return _lmgc90.RBDY2_SetXmaxBoundary(*args)

def RBDY2_SetEquilibriumNorm(*args):
    """


    Initialization of data for the equilibrium state check.  

    You must precise the type of check test :  

    *   Qvlcy : quadratic norm velocy  
    *   Mvlcy : maximum norm velocy  

    usage : RBDY2_CheckEquilibrium(norm_type , tolerance)  

    Parameters
    ----------
    norm_type(string of size 5) : norm type use for the equilibrium check  
    tolerance(double) : norm tolerance  

    """
    return _lmgc90.RBDY2_SetEquilibriumNorm(*args)

def RBDY2_AddDof2InBodies(*args):
    """


    Create a new BODIES.OUT file as combination of the last one and of the last
    DOF.OUT file.  

    usage : RBDY2_AddDof2InBodies()  

    """
    return _lmgc90.RBDY2_AddDof2InBodies(*args)

def RBDY2_InitFreeBoundary(*args):
    """


    usage : RBDY2_InitFreeBoundary(xmin, xmax, radius)  

    Parameters
    ----------
    xmin(double) :  
    xmax(double) :  
    radius(double) :  

    """
    return _lmgc90.RBDY2_InitFreeBoundary(*args)

def RBDY2_UpdateThermalStrain(*args):
    """


    usage : RBDY2_UpdateThermalStrain()  

    """
    return _lmgc90.RBDY2_UpdateThermalStrain(*args)

def RBDY2_GetNbRBDY2(*args):
    """


    Get the number of RBDY2.  

    usage : nb_rbdy2 = RBDY2_GetNbRBDY2()  

    Parameters
    ----------
    nb_rbdy2(integer) : number of RBDY2 in container  

    """
    return _lmgc90.RBDY2_GetNbRBDY2(*args)

def RBDY2_GetBodyArea(*args):
    """


    Get the area (2D volume equivalent) of a given body.  

    usage : area = GetBodyArea(ibdyty)  

    Parameters
    ----------
    ibdyty(integer) : rank of the body  
    area(double) : area  

    """
    return _lmgc90.RBDY2_GetBodyArea(*args)

def RBDY2_GetAllArea(*args):
    """


    Get the area of a all body (visible and invisible)  

    python usage : area = RBDY2_GetAllArea()  

    Returns
    -------
    area (double array) : masses of all RBDY2  

    """
    return _lmgc90.RBDY2_GetAllArea(*args)

def RBDY2_ComputePartialEquilibriumState(*args):
    """


    Compute norms used to check if a part of the sample is in a equilibrium state.  

    Compute norms used to test if there is an equilibrium state between abs_min and
    abs_max  

    Usefull in case of silos to access norms used to decide if the arch research
    must be activated  

    usage : Qnorm, Mnorm = RBDY2_CheckPartialEquilibriumState(abs_min, abs_max)  

    Parameters
    ----------
    abs_min(double) : min abscisse of sub domaine tested  
    abs_max(double) : max abscisse of sub domaine tested  
    Qnorm(double) : quadratric norm of the velocities of the grains  
    Mnorm(double) : quadratric norm of the velocities of the grains  

    """
    return _lmgc90.RBDY2_ComputePartialEquilibriumState(*args)

def RBDY2_CheckPartialEquilibriumState(*args):
    """


    Check if a part of the sample is in a equilibrium state.  

    Test if there is an equilibrium state between abs_min and abs_max  

    Usefull in case of silos to decide if the arch research must be activated  

    usage : isPartiallyEquilibriumed = RBDY2_CheckPartialEquilibriumState(abs_min,
    abs_max)  

    Parameters
    ----------
    abs_min(double) : min abscisse of sub domaine tested  
    abs_max(double) : max abscisse of sub domaine tested  
    isPartiallyEquilibriumed(boolean) : true if at partial equlibrium state, else false  

    """
    return _lmgc90.RBDY2_CheckPartialEquilibriumState(*args)

def RBDY2_SetBodiesInvisible(*args):
    """


    Set a list of body to invisible state.  

    usage : RBDY2_SetBodiesInvisible(list_bdy)  

    Parameters
    ----------
    list_bdy(integer array) : list of rank of bodies of the container  

    """
    return _lmgc90.RBDY2_SetBodiesInvisible(*args)

def RBDY2_IsVisible(*args):
    """


    return if a body visible  

    usage : visible = RBDY2_IsVisible(ibdyty)  

    Parameters
    ----------
    ibdyty(integer) : rank of body  
    visible(integer) : 1 if body is visible, 0 else  

    """
    return _lmgc90.RBDY2_IsVisible(*args)

def RBDY2_GetBodyMass(*args):
    """


    Get the mass of a body.  

    usage : mass = RBDY2_GetBodyMass(ibdyty)  

    Parameters
    ----------
    ibdyty(integer) : rank of desired body  
    mass(double) : mass of body  

    """
    return _lmgc90.RBDY2_GetBodyMass(*args)

def RBDY2_GetAllMass(*args):
    """


    Get the mass of a all body (visible and invisible)  

    python usage : masses = RBDY2_GetAllMass()  

    Returns
    -------
    masses (double array) : masses of all RBDY2  

    """
    return _lmgc90.RBDY2_GetAllMass(*args)

def RBDY2_CompCoor(*args):
    """


    Compute the position of bodies.  

    usage : RBDY2_CompCoor()  

    """
    return _lmgc90.RBDY2_CompCoor(*args)

def RBDY2_GetBodyDensity(*args):
    """


    Get the density of a body.  

    usage density = RBDY2_GetBodyDensity(ibdyty)  

    Parameters
    ----------
    ibdyty(integer) : rank of the RBDY2 in container  
    density(double) : density of the RBDY2  

    """
    return _lmgc90.RBDY2_GetBodyDensity(*args)

def RBDY2_GetNbContactor(*args):
    """


    get the number of contactor of RBDY2  

    python usage : nb = RBDY2_GetNbContactor(ibdyty)  

    Parameters
    ----------
    ibdyty(integer) : rank of the RBDY2 in container  

    Returns
    -------
    nb (integer) : number of contactor attached to a RBDY2  

    """
    return _lmgc90.RBDY2_GetNbContactor(*args)

def RBDY2_GetContactorType(*args):
    """


    Get the type of the first contactor of a body.  

    usage type = RBDY2_GetContactorType(ibdyty)  

    Parameters
    ----------
    ibdyty(integer) : rank of the RBDY2 in container  

    Returns
    -------
    type (string) : type of the first contactor of the body  

    """
    return _lmgc90.RBDY2_GetContactorType(*args)

def RBDY2_GetContactorColor(*args):
    """


    Get the color of the itacty contactor of a body ibdyty.  

    usage color = RBDY2_GetContactorColor(ibdyty,itacty)  

    Parameters
    ----------
    ibdyty(integer) : rank of the RBDY2 in container  
    itacty(integer) : rank of the contactor in the RBDY2  

    Returns
    -------
    color (string) : color of the contactor of the body  

    """
    return _lmgc90.RBDY2_GetContactorColor(*args)

def RBDY2_SetContactorColor(*args):
    """


    Set the color of a given contactor of a body.  

    usage : RBDY2_SetContactorColor(ibdyty, itacty, color)  

    Parameters
    ----------
    ibdyty(integer) : rank of the RBDY2  
    itacty(integer) : rank of the contactor in the RBDY2  
    color(string of size 5) : the color  

    """
    return _lmgc90.RBDY2_SetContactorColor(*args)

def RBDY2_GetPtrMass(*args):
    """


    Get a pointer onto the mass matrix of a body.  

    Parameters
    ----------
    ibdyty(int): index of the RBDY2  
    mass(double**): mass matrix of the RBDY2  

    """
    return _lmgc90.RBDY2_GetPtrMass(*args)

def RBDY2_GetVelocity(*args):
    """


    Get the velocity of a body.  

    Parameters
    ----------
    ibdyty(int): index of the RBDY2  
    velocity(double[6]): velocity of the RBDY2  

    """
    return _lmgc90.RBDY2_GetVelocity(*args)

def RBDY2_getDrvVlocy(*args):
    """


    Get the driven dof of a body.  

    python usage : [drvdof_indices, drvdof_values] = RBDY2_getDrvVlocy(ibdyty)  

    Parameters
    ----------
    ibdyty(integer) : index of the RBDY2  
    drvdof_indices(integer array) : indices list of driven dof  
    drvdof_values(real array) : values of the driven dof  

    """
    return _lmgc90.RBDY2_getDrvVlocy(*args)

def RBDY2_computeDrvVlocy(*args):
    """


    Compute the value of the driven velocity of a body a current time.  

    In place replacement in the input array of the new value(s) of the driven
    velocity  

    python usage : RBDY2_computeDrvVlocy(ibdyty, values)  

    Parameters
    ----------
    ibdyty(integer) : index of the RBDY2  
    values(double array) : numpy array, input old values of imposed velocity, output
        new ones  

    """
    return _lmgc90.RBDY2_computeDrvVlocy(*args)

def RBDY2_SetVisible(*args):
    """


    Set a given body as visible.  

    python usage : RBDY2_SetVisible(ibdyt)  

    Parameters
    ----------
    ibdyty(integer) : index of the RBDY2  

    """
    return _lmgc90.RBDY2_SetVisible(*args)

def RBDY2_SetInvisible(*args):
    """


    Set a given body as invisible.  

    python usage : RBDY2_SetInvisible(ibdyty)  

    Parameters
    ----------
    ibdyty(integer) : index of the RBDY2  

    """
    return _lmgc90.RBDY2_SetInvisible(*args)

def RBDY2_SetVisibleVlocyDrivenDof(*args):
    """


    allows to (re)activate a given vlocydrivendof (i.e. which has been declared in
    preprocessing)  

    python usage : RBDY2_SetVisibleVlocyDrivenDof(ibdyty, iccdof)  

    Parameters
    ----------
    ibdyty(integer): index of the RBDY2  
    iccdof(integer): index of the DOF to set visible  

    """
    return _lmgc90.RBDY2_SetVisibleVlocyDrivenDof(*args)

def RBDY2_SetInvisibleVlocyDrivenDof(*args):
    """


    allows to deactivate a given vlocydrivendof (i.e. which has been declared in
    preprocessing)  

    python usage : RBDY2_SetInvisibleVlocyDrivenDof(ibdyty, iccdof)  

    Parameters
    ----------
    ibdyty(integer): index of the RBDY2  
    iccdof(integer): index of the DOF to set invisible  

    """
    return _lmgc90.RBDY2_SetInvisibleVlocyDrivenDof(*args)

def RBDY2_GetBulkBehavID(*args):
    """


    return the ID of a given bulk of a given body  

    python usage : blmID = DISKx_GetBulkBehavID(ibdyty, iblmty)  

    Parameters
    ----------
    ibdyty(integer) : rank of a RBDY2  
    iblmty(integer) : rank of a bulk of the giben RBDY2 (typically 1!)  

    Returns
    -------
    blmID (string) : the bulk behav ID  

    """
    return _lmgc90.RBDY2_GetBulkBehavID(*args)

def RBDY2_GetBulkBehavNumber(*args):
    """


    return the bulk ID of a given RBDY2  

    python usage : ibehav = RBDY2_GetBulkBehavNumber(ibdyty)  

    Parameters
    ----------
    ibdyty(integer) : rank of a RBDY2  

    Returns
    -------
    ibehav (integer) : the bulk behav number  

    """
    return _lmgc90.RBDY2_GetBulkBehavNumber(*args)

def RBDY2_SetSurfaceSectors(*args):
    """


    Set the number of angular sectors of the surface of contactors.  

    python usage : RBDY2_SetSurfaceSectors(nbsect)  

    Parameters
    ----------
    nbsect(integer) : number of sectors  

    """
    return _lmgc90.RBDY2_SetSurfaceSectors(*args)

def RBDY2_GetStress(*args):
    """


    Get the mean stress field of a rigid object.  

    python usage : matrix = RBDY2_GetStress(ibdyty)  

    Parameters
    ----------
    ibdyty(integer) : body to get stress of  
    matrix(double array) : stress matrix  

    """
    return _lmgc90.RBDY2_GetStress(*args)

def RBDY2_ModifyBody(*args):
    """


    Modify a body tactor.  

    usage : RBDY2_ModifyBody(ibdyty, itacty, vector)  

    Parameters
    ----------
    ibdyty(integer) : rank of body  
    itacty(integer) : rank of tacty  
    vector(double array) : the new value  

    """
    return _lmgc90.RBDY2_ModifyBody(*args)

def RBDY2_SkipInvisible(*args):
    """


    skip invisible objects when writing BODIES.OUT  

    usage : RBDY2_SkipInvisible()  

    """
    return _lmgc90.RBDY2_SkipInvisible(*args)

def RBDY2_InitializeStresses(*args):
    """


    initialize stress for rigid bodies  

    usage : RBDY2_InitializeStresses()  

    """
    return _lmgc90.RBDY2_InitializeStresses(*args)

def RBDY2_InitializeWS(*args):
    """


    initialize WS for rigid bodies with a value between wsmin and wsmax ponderate by
    rvalue1  

    python usage : RBDY2_InitializeWS(double rvalue1)  

    """
    return _lmgc90.RBDY2_InitializeWS(*args)

def RBDY2_CleanMemory(*args):
    """


    Free all memory allocated within RBDY2 module.  

    python usage : RBDY2_CleanMemory()  

    """
    return _lmgc90.RBDY2_CleanMemory(*args)

def RBDY2_GetThermalValue(*args):
    """


    Get temperature of rigid particle.  

    usage : T = RBDY2_GetThermalValu(ibdyty, itacty)  

    Parameters
    ----------
    ibdyty(integer) : rank of body  
    itacty(integer) : rank of tacty  

    """
    return _lmgc90.RBDY2_GetThermalValue(*args)

def RBDY2_GetElectricalPotential(*args):
    """


    Get electrical potential of rigid particle.  

    usage : ep = RBDY2_GetElectricalPotential(ibdyty, itacty)  

    Parameters
    ----------
    ibdyty(integer) : rank of body  

    Returns
    -------
    ep (double) : electrical potential  

    """
    return _lmgc90.RBDY2_GetElectricalPotential(*args)

def RBDY2_GetElectricalCurrent(*args):
    """


    Get electrical potential of rigid particle.  

    usage : ep = RBDY2_GetElectricalCurrent(ibdyty, itacty)  

    Parameters
    ----------
    ibdyty(integer) : rank of body  

    Returns
    -------
    ep (double) : electrical current  

    """
    return _lmgc90.RBDY2_GetElectricalCurrent(*args)

def RBDY2_GetBetai(*args):
    """


    Get equivalent damage related to CZM interaction for rigid particle.  

    usage : betai = RBDY2_GetBetai(ibdyty, itacty)  

    Parameters
    ----------
    ibdyty(integer) : rank of body  
    itacty(integer) : rank of tacty  

    Returns
    -------
    betai (double) : equivalent damage  

    """
    return _lmgc90.RBDY2_GetBetai(*args)

def RBDY2_GetPeriode(*args):
    """


    Get the periode id (0, 1 or -1) for rigid particles.  

    usage : iper = RBDY2_GetPeriode(ibdyty)  

    Parameters
    ----------
    ibdyty(integer) : rank of body  

    Returns
    -------
    iper (integer) : periode id  

    """
    return _lmgc90.RBDY2_GetPeriode(*args)

def RBDY2_GetAverageSurfaceEnergy(*args):
    """


    """
    return _lmgc90.RBDY2_GetAverageSurfaceEnergy(*args)

def xKSID_LoadTactors(*args):
    """


    load xKSID from RBDY2 and initialize existing_entites  

    python usage : xKSID_LoadTactors()  

    """
    return _lmgc90.xKSID_LoadTactors(*args)

def xKSID_GetNbxKSID(*args):
    """


    Get the number of xKSID in the container.  

    python usage : nb_diskx = xKSID_GetNbxKSID()  

    Returns
    -------
    nb_xKSID (integer) : the number of xKSID in container  

    """
    return _lmgc90.xKSID_GetNbxKSID(*args)

def xKSID_GetPtrxKSID2BDYTY(*args):
    """


    return a pointer onto the map xksid2rbdy2  

    python usage : xksid2rbdy2 = xKSID_GetPtrxKSID2BDYTY()  

    Returns
    -------
    xksid2rbdy2 (integer array) : reference on map between xksid rank and body/tact
    rank  

    """
    return _lmgc90.xKSID_GetPtrxKSID2BDYTY(*args)

def xKSID_IsVisible(*args):
    """


    return if a body visible  

    usage : visible = xKSID_IsVisible(itact)  

    Parameters
    ----------
    itact(integer) : rank of xKSID  
    visible(integer) : 1 if body is visible, 0 else  

    """
    return _lmgc90.xKSID_IsVisible(*args)

def xKSID_GetContactorRadius(*args):
    """


    Get the radius of a given xKSID.  

    python usage : radius = xKSID_GetContactorRadius(itact)  

    Parameters
    ----------
    itact(integer) : rank of a xKSID (in the list of all the xKSID)  

    Returns
    -------
    radius (double) : the radius of the xKSID of rank itact  

    """
    return _lmgc90.xKSID_GetContactorRadius(*args)

def xKSID_GetContactorCoor(*args):
    """


    get coordinates of the center of a given xKSID  

    usage : vector = xKSID_GetContactorCoor(itacty)  

    Parameters
    ----------
    itacty(integer) : rank of considered contactor  

    Returns
    -------
    vector (double array) : the desired vector  

    """
    return _lmgc90.xKSID_GetContactorCoor(*args)

def xKSID_InitOutlines(*args):
    """


    Get a reference on the outlines of all xKSID.  

    usage : outlines = xKSID_InitOutlines()  

    Returns
    -------
    outlines (double array) : a reference on outlines_xKSID  

    """
    return _lmgc90.xKSID_InitOutlines(*args)

def xKSID_InitScalarFields(*args):
    """


    Get a reference on the scalar fields of all xKSID.  

    usage : scalarfields = xKSID_InitScalarfields()  

    Returns
    -------
    scalarfields (double array) : reference on scalarfields_xKSID array  

    """
    return _lmgc90.xKSID_InitScalarFields(*args)

def xKSID_UpdatePostdata(*args):
    """


    Update values of outlines_xKSID and scalarfields_xKSID pointers.  

    usage : xKSID_UpdatePostdata  

    """
    return _lmgc90.xKSID_UpdatePostdata(*args)

def xKSID_GetNbPointOutlines(*args):
    """


    Get the list of cumulated outline points number.  

    python usage : nb_pointOutlines = xKSID_GetNbPointOutlines()  

    Returns
    -------
    nb_pointOutlines (integer array) : the cumulated number of outline points of the
    xKSID  

    """
    return _lmgc90.xKSID_GetNbPointOutlines(*args)

def xKSID_GetNbScalarFields(*args):
    """


    Get the number of scalar fields of a xKSID.  

    python usage : nb_scalarfields = xKSID_GetNbScalarFields()  

    Returns
    -------
    nb_scalarfields (integer) : the number of scalar fields of a xKSID  

    """
    return _lmgc90.xKSID_GetNbScalarFields(*args)

def xKSID_CleanMemory(*args):
    """


    Free all memory allocated within xKSID module.  

    python usage : xKSID_CleanMemory()  

    """
    return _lmgc90.xKSID_CleanMemory(*args)

def xKSID_SetXdilation(*args):
    """


    set increase of radius of a xKSID due to expansion  

    python usage : xKSID_SetXdilation(itacty,x)  

    Parameters
    ----------
    itacty(integer) : rank of considered contactor  
    x(float) : increase of radius  

    """
    return _lmgc90.xKSID_SetXdilation(*args)

def xKSID_SetVdilation(*args):
    """


    set increase rate of radius of a xKSID due to expansion  

    python usage : xKSID_SetVdilation(itacty, v)  

    Parameters
    ----------
    itacty(integer) : rank of contactor  
    v(float) : radius increase rate  

    """
    return _lmgc90.xKSID_SetVdilation(*args)

def CYLND_LoadTactors(*args):
    """


    load CYLND from RBDY3 and initialize existing_entites  

    python usage : CYLND_LoadTactors()  

    """
    return _lmgc90.CYLND_LoadTactors(*args)

def CYLND_IsVisible(*args):
    """


    return if a given contactor is attached to a visible body  

    python usage : visible = CYLND_IsVisible(itacty)  

    Parameters
    ----------
    itacty(integer) : id of the contactor we want visibility  

    Returns
    -------
    visible (integer) : 1 if body is visible, 0 else  

    """
    return _lmgc90.CYLND_IsVisible(*args)

def CYLND_GetNbCYLND(*args):
    """


    Get the number of CYLND.  

    python usage : nb_CYLND = CYLND_GetNbCYLND()  

    Returns
    -------
    nb_CYLND (integer) : the number of CYLND  

    """
    return _lmgc90.CYLND_GetNbCYLND(*args)

def CYLND_GetShape(*args):
    """


    Get the shape of a CYLND.  

    usage : shape = CYLND_GetShape(itacty)  

    Parameters
    ----------
    itacty(integer) : rank of CYLND  

    Returns
    -------
    shape (double array) : axis length of the CYLND  

    """
    return _lmgc90.CYLND_GetShape(*args)

def CYLND_GetPtrCYLND2BDYTY(*args):
    """


    return a pointer onto the map cylnd2bdyty  

    python usage : cylnd2bdyty = CYLND_GetPtrCYLND2BDYTY()  

    Returns
    -------
    cylnd2bdyty (integer array) : reference on map between cylnd rank and body rank  

    """
    return _lmgc90.CYLND_GetPtrCYLND2BDYTY(*args)

def CYLND_InitOutlines(*args):
    """


    Get a reference on the outlines of all CYLND.  

    python usage : outlines = CYLND_InitOutlines()  

    Returns
    -------
    outlines (double array) : a reference on outlines_CYLND  

    """
    return _lmgc90.CYLND_InitOutlines(*args)

def CYLND_InitScalarFields(*args):
    """


    Get a reference on the scalar fields of all CYLND.  

    python usage : scalarfields = CYLND_InitScalarfields()  

    Returns
    -------
    scalarfields (double array) : reference on scalarfields_CYLND array  

    """
    return _lmgc90.CYLND_InitScalarFields(*args)

def CYLND_UpdatePostdata(*args):
    """


    Update values of outlines_CYLND and scalarfields_CYLND pointers.  

    python usage : CYLND_UpdatePostdata  

    """
    return _lmgc90.CYLND_UpdatePostdata(*args)

def CYLND_GetNbPointOutlines(*args):
    """


    Get the list of cumulated outline points number.  

    python usage : nb_pointOutlines = CYLND_GetNbPointOutlines()  

    Returns
    -------
    nb_pointOutlines (integer array) : the cumulated number of outline points of the
    CYLND  

    """
    return _lmgc90.CYLND_GetNbPointOutlines(*args)

def CYLND_GetNbScalarFields(*args):
    """


    Get the number of scalar fields of a CYLND.  

    python usage : nb_scalarfields = CYLND_GetNbScalarFields()  

    Returns
    -------
    nb_scalarfields (integer) : the number of scalar fields of a CYLND  

    """
    return _lmgc90.CYLND_GetNbScalarFields(*args)

def CYLND_GetPtrAllConnectivities(*args):
    """


    Get a reference on the connectivities of all CYLND.  

    python usage : connec = CYLND_GetPtrAllConnectivities()  

    Returns
    -------
    connec (integer array) : a reference on all_connectivities  

    """
    return _lmgc90.CYLND_GetPtrAllConnectivities(*args)

def CYLND_CleanMemory(*args):
    """


    Free all memory allocated within CYLND module.  

    python usage : CYLND_CleanMemory()  

    """
    return _lmgc90.CYLND_CleanMemory(*args)

def DNLYC_LoadTactors(*args):
    """


    load DNLYC from RBDY3 and initialize existing_entites  

    python usage : DNLYC_LoadTactors()  

    """
    return _lmgc90.DNLYC_LoadTactors(*args)

def DNLYC_IsVisible(*args):
    """


    return if a given contactor is attached to a visible body  

    python usage : visible = DNLYC_IsVisible(itacty)  

    Parameters
    ----------
    itacty(integer) : id of the contactor we want visibility  

    Returns
    -------
    visible (integer) : 1 if body is visible, 0 else  

    """
    return _lmgc90.DNLYC_IsVisible(*args)

def DNLYC_GetNbDNLYC(*args):
    """


    Get the number of DNLYC.  

    python usage : nb_DNLYC = DNLYC_GetNbDNLYC()  

    Returns
    -------
    nb_DNLYC (integer) : the number of DNLYC  

    """
    return _lmgc90.DNLYC_GetNbDNLYC(*args)

def DNLYC_GetPtrDNLYC2BDYTY(*args):
    """


    return a pointer onto the map dnlyc2bdyty  

    python usage : dnlyc2bdyty = DNLYC_GetPtrDNLYC2BDYTY()  

    Returns
    -------
    dnlyc2bdyty (integer array) : reference on map between dnlyc rank and body rank  

    """
    return _lmgc90.DNLYC_GetPtrDNLYC2BDYTY(*args)

def DNLYC_InitOutlines(*args):
    """


    Get a reference on the outlines of all DNLYC.  

    usage : outlines = DNLYC_InitOutlines()  

    Returns
    -------
    outlines (double array) : a reference on outlines_DNLYC  

    """
    return _lmgc90.DNLYC_InitOutlines(*args)

def DNLYC_InitScalarFields(*args):
    """


    Get a reference on the scalar fields of all DNLYC.  

    usage : scalarfields = DNLYC_InitScalarfields()  

    Returns
    -------
    scalarfields (double array) : reference on scalarfields_DNLYC array  

    """
    return _lmgc90.DNLYC_InitScalarFields(*args)

def DNLYC_UpdatePostdata(*args):
    """


    Update values of outlines_DNLYC and scalarfields_DNLYC pointers.  

    usage : DNLYC_UpdatePostdata  

    """
    return _lmgc90.DNLYC_UpdatePostdata(*args)

def DNLYC_GetNbPointOutlines(*args):
    """


    Get the list of cumulated outline points number.  

    python usage : nb_pointOutlines = DNLYC_GetNbPointOutlines()  

    Returns
    -------
    nb_pointOutlines (integer array) : the cumulated number of outline points of the
    DNLYC  

    """
    return _lmgc90.DNLYC_GetNbPointOutlines(*args)

def DNLYC_GetNbScalarFields(*args):
    """


    Get the number of scalar fields of a DNLYC.  

    python usage : nb_scalarfields = DNLYC_GetNbScalarFields()  

    Returns
    -------
    nb_scalarfields (integer) : the number of scalar fields of a DNLYC  

    """
    return _lmgc90.DNLYC_GetNbScalarFields(*args)

def DNLYC_GetPtrAllConnectivities(*args):
    """


    Get a reference on the connectivities of all DNLYC.  

    usage : connec = DNLYC_GetPtrAllConnectivities()  

    Returns
    -------
    connec (integer array) : a reference on all_connectivities  

    """
    return _lmgc90.DNLYC_GetPtrAllConnectivities(*args)

def DNLYC_CleanMemory(*args):
    """


    Free all memory allocated within DNLYC module.  

    python usage : DNLYC_CleanMemory()  

    """
    return _lmgc90.DNLYC_CleanMemory(*args)

def PLANx_LoadTactors(*args):
    """


    load PLANx from RBDY3 and initialize existing_entites  

    python usage : PLANx_LoadTactors()  

    """
    return _lmgc90.PLANx_LoadTactors(*args)

def PLANx_GetNbPLANx(*args):
    """


    Get the number of PLANx.  

    python usage : nb_PLANx = PLANx_GetNbPLANx()  

    Returns
    -------
    nb_PLANx (integer) : the number of PLANx  

    """
    return _lmgc90.PLANx_GetNbPLANx(*args)

def PLANx_IsVisible(*args):
    """


    return if a given contactor is attached to a visible body  

    python usage : visible = PLANx_IsVisible(itacty)  

    Parameters
    ----------
    itacty(integer) : id of the contactor we want visibility  

    Returns
    -------
    visible (integer) : 1 if body is visible, 0 else  

    """
    return _lmgc90.PLANx_IsVisible(*args)

def PLANx_GetPtrPLANx2BDYTY(*args):
    """


    return a pointer onto the map planx2bdyty  

    python usage : planx2bdyty = PLANx_GetPtrPLANx2BDYTY()  

    Returns
    -------
    planx2bdyty (integer array) : reference on map between planx rank and body rank  

    """
    return _lmgc90.PLANx_GetPtrPLANx2BDYTY(*args)

def PLANx_InitOutlines(*args):
    """


    Get a reference on the outlines of all PLANx.  

    usage : outlines = PLANx_InitOutlines()  

    Returns
    -------
    outlines (double array) : a reference on outlines_PLANx  

    """
    return _lmgc90.PLANx_InitOutlines(*args)

def PLANx_InitScalarFields(*args):
    """


    Get a reference on the scalar fields of all PLANx.  

    usage : scalarfields = PLANx_InitScalarfields()  

    Returns
    -------
    scalarfields (double array) : reference on scalarfields_PLANx array  

    """
    return _lmgc90.PLANx_InitScalarFields(*args)

def PLANx_UpdatePostdata(*args):
    """


    Update values of outlines_PLANx and scalarfields_PLANx pointers.  

    usage : PLANx_UpdatePostdata  

    """
    return _lmgc90.PLANx_UpdatePostdata(*args)

def PLANx_GetNbPointOutlines(*args):
    """


    Get the list of cumulated outline points number.  

    python usage : nb_pointOutlines = PLANx_GetNbPointOutlines()  

    Returns
    -------
    nb_pointOutlines (integer array) : the cumulated number of outline points of the
    PLANx  

    """
    return _lmgc90.PLANx_GetNbPointOutlines(*args)

def PLANx_GetNbScalarFields(*args):
    """


    Get the number of scalar fields of a PLANx.  

    python usage : nb_scalarfields = PLANx_GetNbScalarFields()  

    Returns
    -------
    nb_scalarfields (integer) : the number of scalar fields of a PLANx  

    """
    return _lmgc90.PLANx_GetNbScalarFields(*args)

def PLANx_GetPtrAllConnectivities(*args):
    """


    Get a reference on the connectivities of all PLANx.  

    usage : connec = PLANx_GetPtrAllConnectivities()  

    Returns
    -------
    connec (integer array) : a reference on all_connectivities  

    """
    return _lmgc90.PLANx_GetPtrAllConnectivities(*args)

def PLANx_CleanMemory(*args):
    """


    Free all memory allocated within PLANx module.  

    python usage : PLANx_CleanMemory()  

    """
    return _lmgc90.PLANx_CleanMemory(*args)

def POLYR_LoadTactors(*args):
    """


    load POLYR from RBDY3 or MAILx and initialize existing_entites  

    python usage : POLYR_LoadTactors()  

    """
    return _lmgc90.POLYR_LoadTactors(*args)

def POLYR_GetContactorColor(*args):
    """


    Get the color of a given POLYR.  

    python usage : color = POLYR_GetContactorColor(itacty)  

    Parameters
    ----------
    itacty(integer) : rank of POLYR  

    Returns
    -------
    color (string) : the color of the POLYR itact  

    """
    return _lmgc90.POLYR_GetContactorColor(*args)

def POLYR_SaveVertex(*args):
    """


    write position of vertex in a file  

    python usage : POLYR_SaveVertex()  

    """
    return _lmgc90.POLYR_SaveVertex(*args)

def POLYR_ModifyRadius(*args):
    """


    apply an amplification/reduction size factor  

    python usage : POLYR_ModifyRadius(ratio)  

    Parameters
    ----------
    ratio(real) : ratio factor  
    ratio(double) : ratio factor  

    """
    return _lmgc90.POLYR_ModifyRadius(*args)

def POLYR_SetThresholdBigPolyr(*args):
    """


    define the threshold between a plain and a big polyr. big polyr are such that
    radius > threshold*mean_radius. default threshold = 4. Must be defined before
    the load of tactors.  

    python usage : POLYR_SetThresholdBigPolyr(ratio)  

    Parameters
    ----------
    ratio(real) : ratio factor  
    ratio(double) : ratio factor  

    """
    return _lmgc90.POLYR_SetThresholdBigPolyr(*args)

def POLYR_SetBigPolyr(*args):
    """


    impose explicitly that an object is big. Must be set after the load of tactors.  

    python usage : POLYR_SetBigPolyr(itacty)  

    Parameters
    ----------
    itacty(integer) : rank of the polyr  
    itacty(int) : rank of the polyr  

    """
    return _lmgc90.POLYR_SetBigPolyr(*args)

def POLYR_SetNbBigPolyr(*args):
    """


    impose explicitly the number of big POLYR. Must be set after the load of
    tactors.  

    python usage : POLYR_SetNbBigPolyr(nb)  

    Parameters
    ----------
    nb(integer) : number of polyr  
    number(int) : number of polyr  

    """
    return _lmgc90.POLYR_SetNbBigPolyr(*args)

def POLYR_SkipTopoBigPolyr(*args):
    """


    skip the topological decomposition of a big POLYR. its surface is considered as
    a soup of triangle. usefull with complicated surface using Cundall CP detection  

    python usage : POLYR_SkipTopoBigPolyr()  

    """
    return _lmgc90.POLYR_SkipTopoBigPolyr(*args)

def POLYR_SkipAutomaticReorientation(*args):
    """


    disable automatic reorientation (which works only with convex POLYR).  

    python usage : POLYR_SkipAutomaticReorientation()  


     Disable the automatic reorientation of normals performed by lmgc90.  
     This is necessary when using non-convex objects.  

    """
    return _lmgc90.POLYR_SkipAutomaticReorientation(*args)

def POLYR_SkipHEBuild(*args):
    """


    disable Half-Edge structure generation (HE is necessary for non convex contact
    detection)  

    python usage : POLYR_SkipHEBuild()  


     Disable the Half-Edge structure generation performed by lmgc90.  
     This is necessary when testing the import of strange object.  

    """
    return _lmgc90.POLYR_SkipHEBuild(*args)

def POLYR_TopologyAngle(*args):
    """


    set the maximum angle (between 0 and 180 degree) threshold between 2 elements to
    declare them as belonging to the same topological face  

    python usage : POLYR_TopologyAngle(angle)  

    """
    return _lmgc90.POLYR_TopologyAngle(*args)

def POLYR_FlatnessAngle(*args):
    """


    set the maximum angle (between 0 and 180 degree) variation between elements of a
    topological face to declare it as flat  

    python usage : POLYR_FlatnessAngle(angle)  

    """
    return _lmgc90.POLYR_FlatnessAngle(*args)

def POLYR_GetWireframe(*args):
    """


    Get wireframe of a POLYR.  

    python usage : coor,connectivity = POLYR_GetWireframe(itacty, angle)  

    Parameters
    ----------
    itacty(integer) : rank of the POLYR  
    angle(double) : threshold angle to skip some nodes on boundary of faces of the
        POLYR  

    Returns
    -------
    coor (double array) : reference on the coor vector seen as a numpy array of size
    [nb_point,3] connectivity (integer array) : reference on the connectivity vector
    seen as a numpy array  

    """
    return _lmgc90.POLYR_GetWireframe(*args)

def POLYR_GetVertex(*args):
    """


    Get the outline of a POLYR in almost current configuration.  

    If the POLYR is a real POLYR the current position of the center of the POLYR is
    used but the local frame for the orientation is the on in detection
    configuration.  

    If the POLYR is in fact a POLYD the current position of nodes of the mesh are
    used.  

    usage : vertex = POLYR_GetVertex(itacty)  

    Parameters
    ----------
    itacty(integer) : rank of considered POLYR  

    Returns
    -------
    vertex (double 2D-array) : the coordinates of the vertices  

    """
    return _lmgc90.POLYR_GetVertex(*args)

def POLYR_GetPtrVertexTT(*args):
    """


    Get a pointer on the outline of a POLYR in detection configuration.  

    usage : vertex = POLYR_GetPtrVertexTT(itacty)  

    Parameters
    ----------
    itacty(integer) : rank of considered POLYR  

    Returns
    -------
    vertex (double 2D-array) : the coordinates of the vertices  

    """
    return _lmgc90.POLYR_GetPtrVertexTT(*args)

def POLYR_GetPtrNormalTT(*args):
    """


    Get a pointer on the outline of a POLYR in detection configuration - be carefull
    to move polyr.  

    usage : normal = POLYR_GetPtrNormalTT(itacty)  

    Parameters
    ----------
    itacty(integer) : rank of considered POLYR  

    Returns
    -------
    normal (double 2D-array) : the coordinates of the vertices  

    """
    return _lmgc90.POLYR_GetPtrNormalTT(*args)

def POLYR_MoveToConfigurationTT(*args):
    """


    move the polyr in the configuration TT ; mandatory to get the wireframe in
    deformed configuration  

    python usage : POLYR_MoveToConfigurationTT()  

    """
    return _lmgc90.POLYR_MoveToConfigurationTT(*args)

def POLYR_GetPOLYR2BDYTY(*args):
    """


    Get a copy of map POLYR2bdyty.  

    usage : polyr2bdyty = POLYR_GetPOLYR2BDYTY()  

    Returns
    -------
    polyr2bdyty (integer 2D-array) : the polyr2bdyty map  

    """
    return _lmgc90.POLYR_GetPOLYR2BDYTY(*args)

def POLYR_GetPtrPOLYR2BDYTY(*args):
    """


    Get a pointer on map POLYR2bdyty.  

    usage : polyr2bdyty = POLYR_GetPtrPOLYR2BDYTY()  

    Returns
    -------
    polyr2bdyty (integer 2D-array) : a pointer in the polyr2bdyty map  

    """
    return _lmgc90.POLYR_GetPtrPOLYR2BDYTY(*args)

def POLYR_IsVisible(*args):
    """


    return if a given contactor is attached to a visible body  

    python usage : visible = POLYR_IsVisible(itacty)  

    Parameters
    ----------
    itacty(integer) : id of the contactor we want visibility  

    Returns
    -------
    visible (integer) : 1 if body is visible, 0 else  

    """
    return _lmgc90.POLYR_IsVisible(*args)

def POLYR_GetNbPOLYR(*args):
    """


    Get the number of POLYR.  

    python usage : nb_POLYR = POLYR_GetNbPOLYR()  

    Returns
    -------
    nb_POLYR (integer) : the number of POLYR  

    """
    return _lmgc90.POLYR_GetNbPOLYR(*args)

def POLYR_InitOutlines(*args):
    """


    Get a reference on the outlines of all POLYR.  

    usage : outlines = POLYR_InitOutlines()  

    Returns
    -------
    outlines (double array) : a reference on outlines_POLYR  

    """
    return _lmgc90.POLYR_InitOutlines(*args)

def POLYR_InitScalarFields(*args):
    """


    Get a reference on the scalar fields of all POLYR.  

    usage : scalarfields = POLYR_InitScalarfields()  

    Returns
    -------
    scalarfields (double array) : reference on scalarfields_POLYR array  

    """
    return _lmgc90.POLYR_InitScalarFields(*args)

def POLYR_UpdatePostdata(*args):
    """


    Update values of outlines_POLYR and scalarfields_POLYR pointers.  

    usage : POLYR_UpdatePostdata()  

    """
    return _lmgc90.POLYR_UpdatePostdata(*args)

def POLYR_GetNbPointOutlines(*args):
    """


    Get the list of cumulated outline points number.  

    python usage : nb_pointOutlines = POLYR_GetNbPointOutlines()  

    Returns
    -------
    nb_pointOutlines (integer array) : the cumulated number of outline points of the
    POLYR  

    """
    return _lmgc90.POLYR_GetNbPointOutlines(*args)

def POLYR_GetNbScalarFields(*args):
    """


    Get the number of scalar fields of a POLYR.  

    python usage : nb_scalarfields = POLYR_GetNbScalarFields()  

    Returns
    -------
    nb_scalarfields (integer) : the number of scalar fields of a POLYR  

    """
    return _lmgc90.POLYR_GetNbScalarFields(*args)

def POLYR_GetPtrAllConnectivities(*args):
    """


    Get a reference on the connectivities of all POLYR.  

    usage : connec = POLYR_GetPtrAllConnectivities()  

    Returns
    -------
    connec (integer array) : a reference on all_connectivities  

    """
    return _lmgc90.POLYR_GetPtrAllConnectivities(*args)

def POLYR_GetPtrConnectivity(*args):
    """


    Get a reference on the connectivity of one POLYR.  

    usage : connec = POLYR_GetPtrConnectivity(itacty)  

    Parameters
    ----------
    itacty(integer) : POLYR number  

    Returns
    -------
    connec (integer 2D-array) : reference on connectivity  

    """
    return _lmgc90.POLYR_GetPtrConnectivity(*args)

def POLYR_GetPtrVertexRef(*args):
    """


    Get the position of the vertices of a POLYR in its inertia frame.  

    usage : vertex = POLYR_GetPtrVertexRef(itacty)  

    Parameters
    ----------
    itacty(integer) : rank of considered POLYR  

    Returns
    -------
    vertex (double 2D-array) : the coordinates of the vertices  

    """
    return _lmgc90.POLYR_GetPtrVertexRef(*args)

def POLYR_GetTopoData(*args):
    """


    Get for each face of all POLYR : contactor id, topo id, face id and face status.  

    usage : topo_data = POLYR_GetTopoData()  

    Returns
    -------
    topt_data (int 2D-array) : topology data of all faces of all POLYR  

    """
    return _lmgc90.POLYR_GetTopoData(*args)

def POLYR_CleanMemory(*args):
    """


    Free all memory allocated within POLYR module.  

    python usage : POLYR_CleanMemory()  

    """
    return _lmgc90.POLYR_CleanMemory(*args)

def PT3Dx_LoadTactors(*args):
    """


    load PT3Dx from RBDY3 and initialize existing_entites  

    python usage : PT3Dx_LoadTactors()  

    """
    return _lmgc90.PT3Dx_LoadTactors(*args)

def PT3Dx_IsVisible(*args):
    """


    return if a given contactor is attached to a visible body  

    python usage : visible = PT3Dx_IsVisible(itacty)  

    Parameters
    ----------
    itacty(integer) : id of the contactor we want visibility  

    Returns
    -------
    visible (integer) : 1 if body is visible, 0 else  

    """
    return _lmgc90.PT3Dx_IsVisible(*args)

def PT3Dx_GetNbPT3Dx(*args):
    """


    Get the number of PT3Dx.  

    python usage : nb_PT3Dx = PT3Dx_GetNbPT3Dx()  

    Returns
    -------
    nb_PT3Dx (integer) : the number of PT3Dx  

    """
    return _lmgc90.PT3Dx_GetNbPT3Dx(*args)

def PT3Dx_SetDisplayRadius(*args):
    """


    set the size of the glyph representing the PT3Dx  

    python usage : PT3Dx_SetDisplayRadius(radius)  

    Parameters
    ----------
    radius(double): radius of the PT3Dx contactors  

    """
    return _lmgc90.PT3Dx_SetDisplayRadius(*args)

def PT3Dx_GetPtrPT3Dx2BDYTY(*args):
    """


    return a pointer onto the map pt3dx2bdyty  

    python usage : pt3dx2bdyty = PT3Dx_GetPtrPT3Dx2BDYTY()  

    Returns
    -------
    pt3dx2bdyty (integer array) : reference on map between pt3dx rank and body rank  

    """
    return _lmgc90.PT3Dx_GetPtrPT3Dx2BDYTY(*args)

def PT3Dx_InitOutlines(*args):
    """


    Get a reference on the outlines of all PT3Dx.  

    usage : outlines = PT3Dx_InitOutlines()  

    Returns
    -------
    outlines (double array) : a reference on outlines_PT3Dx  

    """
    return _lmgc90.PT3Dx_InitOutlines(*args)

def PT3Dx_InitScalarFields(*args):
    """


    Get a reference on the scalar fields of all PT3Dx.  

    usage : scalarfields = PT3Dx_InitScalarfields()  

    Returns
    -------
    scalarfields (double array) : reference on scalarfields_PT3Dx array  

    """
    return _lmgc90.PT3Dx_InitScalarFields(*args)

def PT3Dx_UpdatePostdata(*args):
    """


    Update values of outlines_PT3Dx and scalarfields_PT3Dx pointers.  

    usage : PT3Dx_UpdatePostdata  

    """
    return _lmgc90.PT3Dx_UpdatePostdata(*args)

def PT3Dx_GetNbPointOutlines(*args):
    """


    Get the list of cumulated outline points number.  

    python usage : nb_pointOutlines = PT3Dx_GetNbPointOutlines()  

    Returns
    -------
    nb_pointOutlines (integer array) : the cumulated number of outline points of the
    PT3Dx  

    """
    return _lmgc90.PT3Dx_GetNbPointOutlines(*args)

def PT3Dx_GetNbScalarFields(*args):
    """


    Get the number of scalar fields of a PT3Dx.  

    python usage : nb_scalarfields = PT3Dx_GetNbScalarFields()  

    Returns
    -------
    nb_scalarfields (integer) : the number of scalar fields of a PT3Dx  

    """
    return _lmgc90.PT3Dx_GetNbScalarFields(*args)

def PT3Dx_GetPtrAllConnectivities(*args):
    """


    Get a reference on the connectivities of all PT3Dx.  

    usage : connec = PT3Dx_GetPtrAllConnectivities()  

    Returns
    -------
    connec (integer array) : a reference on all_connectivities  

    """
    return _lmgc90.PT3Dx_GetPtrAllConnectivities(*args)

def PT3Dx_CleanMemory(*args):
    """


    Free all memory allocated within PT3Dx module.  

    python usage : PT3Dx_CleanMemory()  

    """
    return _lmgc90.PT3Dx_CleanMemory(*args)

def RBDY3_IncrementStep(*args):
    """


    compute the current velocity and displacement  

    python usage : RBDY3_IncrementStep()  

    """
    return _lmgc90.RBDY3_IncrementStep(*args)

def RBDY3_SetVlocyDrivenDof(*args):
    """


    Override the value of an existing velocity driven dof.  

    usage : RBDY3_SetVlocyDrivenDof(ibdyty, idrvdof, value)  

    Parameters
    ----------
    ibdyty(integer) : rank of considered  
    idrvdof(integer) : index of velocity driven dof to set  
    value(real) : new value of the velocity driven dof  

    """
    return _lmgc90.RBDY3_SetVlocyDrivenDof(*args)

def RBDY3_FatalDamping(*args):
    """


    Nullify body velocities (current and initial) of a list of bodies.  

    python usage : RBDY3_FatalDamping(i_list)  

    Parameters
    ----------
    i_list(list of integer) : list of bodies to reset current velocity if omitted
        works on all objetcs  

    """
    return _lmgc90.RBDY3_FatalDamping(*args)

def RBDY3_ComputeFext(*args):
    """


    compute external forces  

    python usage : RBDY3_ComputeFext()  

    """
    return _lmgc90.RBDY3_ComputeFext(*args)

def RBDY3_ComputeBulk(*args):
    """


    compute internal forces  

    python usage : RBDY3_ComputeBulk()  

    """
    return _lmgc90.RBDY3_ComputeBulk(*args)

def RBDY3_ComputeFreeVelocity(*args):
    """


    compute free velocity  

    python usage : RBDY3_ComputeFreeVelocity()  

    """
    return _lmgc90.RBDY3_ComputeFreeVelocity(*args)

def RBDY3_ComputeDof(*args):
    """


    update current position and velocity  

    python usage : RBDY3_ComputeDof()  

    """
    return _lmgc90.RBDY3_ComputeDof(*args)

def RBDY3_UpdateDof(*args):
    """


    save d.o.f. of the end of the time step to d.o.f. of the begining of the next
    one  

    python usage : RBDY3_UpdateDof()  

    """
    return _lmgc90.RBDY3_UpdateDof(*args)

def RBDY3_ComputeContactDetectionConfiguration(*args):
    """


    compute the contact detection configuration  

    python usage : RBDY3_ComputeContactDetectionConfiguration()  

    """
    return _lmgc90.RBDY3_ComputeContactDetectionConfiguration(*args)

def RBDY3_WriteLastDof(*args):
    """


    write ascii DOF.LAST file  

    python usage : RBDY3_WriteLastDof()  

    """
    return _lmgc90.RBDY3_WriteLastDof(*args)

def RBDY3_WriteOutDof(*args):
    """


    write ascii DOF.OUT file. Can be activate only each N step  

    If 0 for ifrom and ito, dofs of all bodies are written.  

    python usage : RBDY3_WriteOutDof(ifrom=0, ito=0)  

    Parameters
    ----------
    ifrom(integer) : begining of bodys' index that will be written  
    ito(integer) : end of bodys'index that will be written  

    """
    return _lmgc90.RBDY3_WriteOutDof(*args)

def RBDY3_DisplayOutDof(*args):
    """


    display bodies degrees of freedom  

    python usage : RBDY3_DisplayOutDof()  

    """
    return _lmgc90.RBDY3_DisplayOutDof(*args)

def RBDY3_WriteLastRnod(*args):
    """


    write ascii Rnod.LAST file  

    python usage : RBDY3_WriteLastRnod()  

    """
    return _lmgc90.RBDY3_WriteLastRnod(*args)

def RBDY3_WriteOutRnod(*args):
    """


    write ascii Rnod.OUT file. Can be activate only each N step.  

    python usage : RBDY3_WriteOutRnod()  

    """
    return _lmgc90.RBDY3_WriteOutRnod(*args)

def RBDY3_DisplayOutRnod(*args):
    """


    display body forces.  

    python usage : RBDY3_DisplayOutRnod()  

    """
    return _lmgc90.RBDY3_DisplayOutRnod(*args)

def RBDY3_WriteBodies(*args):
    """


    write BODIES.OUT file  

    python usage : RBDY3_WriteBodies()  

    """
    return _lmgc90.RBDY3_WriteBodies(*args)

def RBDY3_WriteDrivenDof(*args):
    """


    write DRV_DOF.OUT file  

    python usage : RBDY3_WriteDrivenDof()  

    """
    return _lmgc90.RBDY3_WriteDrivenDof(*args)

def RBDY3_ReadBodies(*args):
    """


    read BODIES.DAT file  

    Initializes existing_entities variable in RBDY3  

    Adds the number of found bodies to entity  

    python usage : RBDY3_ReadBodies()  

    """
    return _lmgc90.RBDY3_ReadBodies(*args)

def RBDY3_ReadCompressedBodies(*args):
    """


    read BODIES.DAT file without any comment  

    Initializes existing_entities variable in RBDY3  

    Adds the number of found bodies to entity  

    python usage : RBDY3_ReadCompressedBodies()  

    """
    return _lmgc90.RBDY3_ReadCompressedBodies(*args)

def RBDY3_ReadIniDof(*args):
    """


    Read DOF file.  

    If num <= 0 : DATBOX/DOF.INI file is read  

    Else : OUTBOX/DOF.OUT.num is read, num being the parameter used in
    TimeEvolution_ReadIniDof last call  

    usage : RBDY3_ReadIniDof(num=0)  

    Parameters
    ----------
    num(integer) : which DOF file to read  

    """
    return _lmgc90.RBDY3_ReadIniDof(*args)

def RBDY3_ReadDrivenDof(*args):
    """


    read DRV_DOF.DAT file  

    python usage : RBDY3_ReadDrivenDof()  

    """
    return _lmgc90.RBDY3_ReadDrivenDof(*args)

def RBDY3_LoadBehaviours(*args):
    """


    Load bulk behaviour id from bulk_behav module.  

    python usage : RBDY3_LoadBehaviours()  

    """
    return _lmgc90.RBDY3_LoadBehaviours(*args)

def RBDY3_ComputeMass(*args):
    """


    compute mass and inertia of bodies  

    python usage : RBDY3_ComputeMass()  

    """
    return _lmgc90.RBDY3_ComputeMass(*args)

def RBDY3_NewRotationScheme(*args):
    """


    active new rotation scheme FLAG  

    python usage : RBDY3_NewRotationScheme()  

    """
    return _lmgc90.RBDY3_NewRotationScheme(*args)

def RBDY3_SetZminBoundary(*args):
    """


    define the boundary of command CHECK_OUT_OF_BOUNDS  

    python usage : RBDY3_SetZminBoundary(Zmin)  

    Parameters
    ----------
    Zmin(real) : inferior boundary value  

    """
    return _lmgc90.RBDY3_SetZminBoundary(*args)

def RBDY3_SetZmaxBoundary(*args):
    """


    define the boundary of command CHECK_OUT_OF_BOUNDS  

    python usage : RBDY3_SetZmaxBoundary(Zmax)  

    Parameters
    ----------
    Zmax(real) : superior boundary value  

    """
    return _lmgc90.RBDY3_SetZmaxBoundary(*args)

def RBDY3_SetYminBoundary(*args):
    """


    define the boundary of command CHECK_OUT_OF_BOUNDS  

    python usage : RBDY3_SetYminBoundary(Ymin)  

    Parameters
    ----------
    Ymin(real) : left boundary value  

    """
    return _lmgc90.RBDY3_SetYminBoundary(*args)

def RBDY3_SetYmaxBoundary(*args):
    """


    define the boundary of command CHECK_OUT_OF_BOUNDS  

    python usage : RBDY3_SetYmaxBoundary(Ymax)  

    Parameters
    ----------
    Ymax(real) : right boundary value  

    """
    return _lmgc90.RBDY3_SetYmaxBoundary(*args)

def RBDY3_SetXminBoundary(*args):
    """


    define the boundary of command CHECK_OUT_OF_BOUNDS  

    python usage : RBDY3_SetXminBoundary(Xmin)  

    Parameters
    ----------
    Xmin(real) : inferior boundary value  

    """
    return _lmgc90.RBDY3_SetXminBoundary(*args)

def RBDY3_SetXmaxBoundary(*args):
    """


    define the boundary of command CHECK_OUT_OF_BOUNDS  

    python usage : RBDY3_SetXmaxBoundary(Xmax)  

    Parameters
    ----------
    Xmax(real) : front boundary value  

    """
    return _lmgc90.RBDY3_SetXmaxBoundary(*args)

def RBDY3_SetXPeriodicCondition(*args):
    """


    set the period on X axis  

    python usage : RBDY3_SetXPeriodicCondition(xperiod)  

    Parameters
    ----------
    xperiod(real) : period on x axis  

    """
    return _lmgc90.RBDY3_SetXPeriodicCondition(*args)

def RBDY3_SetYPeriodicCondition(*args):
    """


    set the periode on Y axis  

    python usage : RBDY3_SetYPeriodicCondition(yperiod)  

    Parameters
    ----------
    yperiod(real) : period on y axis  

    """
    return _lmgc90.RBDY3_SetYPeriodicCondition(*args)

def RBDY3_AvoidBodyRotation(*args):
    """


    kill rotation effect for RBDY3  

    python usage : RBDY3_AvoidBodyRotation()  

    """
    return _lmgc90.RBDY3_AvoidBodyRotation(*args)

def RBDY3_SkipInvisible(*args):
    """


    if a body is invisible, il will not be written in bodies.out and dof.out  

    python usage : RBDY3_SkipInvisible()  

    """
    return _lmgc90.RBDY3_SkipInvisible(*args)

def RBDY3_KeepIniDofOrder(*args):
    """


    numbering information as they are read  

    python usage : RBDY3_KeepIniDofOrder()  

    """
    return _lmgc90.RBDY3_KeepIniDofOrder(*args)

def RBDY3_SetVisible(*args):
    """


    rended a given RBDY3 visible  

    python usage : RBDY3_SetVisible(ibdyty)  

    Parameters
    ----------
    ibdyty(integer): index of the RBDY3  

    """
    return _lmgc90.RBDY3_SetVisible(*args)

def RBDY3_SetInvisible(*args):
    """


    rended a given RBDY3 invisible  

    python usage : RBDY3_SetInvisible(ibdyty)  

    Parameters
    ----------
    ibdyty(integer): index of the RBDY3  

    """
    return _lmgc90.RBDY3_SetInvisible(*args)

def RBDY3_IsVisible(*args):
    """


    return if a given body visible  

    python usage : visible = RBDY3_IsVisible(ibdyty)  

    Parameters
    ----------
    idbdy(integer): id of the body we want visibility  

    Returns
    -------
    visible (integer) : 1 if body is visible, 0 else  

    """
    return _lmgc90.RBDY3_IsVisible(*args)

def RBDY3_CompCoor(*args):
    """


    Compute the position of bodies.  

    python usage : RBDY3_CompCoor()  

    """
    return _lmgc90.RBDY3_CompCoor(*args)

def RBDY3_GetBodyDensity(*args):
    """


    Get the density of a given body.  

    python usage : density = RBDY3_GetBodyDensity(ibdyty)  

    Parameters
    ----------
    ibdyty(integer): rank of the RBDY3  

    Returns
    -------
    density(double) : density of the RBDY3  

    """
    return _lmgc90.RBDY3_GetBodyDensity(*args)

def RBDY3_GetBodyInertia(*args):
    """


    Get the principal inertia of a given RBDY3.  

    python usage : inertia = RBDY3_GetBodyInertia(ibdyty)  

    Parameters
    ----------
    ibdyty(integer) : rank of the RBDY3  

    Returns
    -------
    inertia (double array) : inertia vector of the desired RBDY3  

    """
    return _lmgc90.RBDY3_GetBodyInertia(*args)

def RBDY3_GetAllInertia(*args):
    """


    Get the inertia of a all RBDY3 body.  

    usage : inertia = RBDY3_GetAllInertia()  

    Parameters
    ----------
    inertia(double array): the inertia of all bodies  

    """
    return _lmgc90.RBDY3_GetAllInertia(*args)

def RBDY3_CollectBodiesDotOUT(*args):
    """


    python usage : RBDY3_CollectBodiesDotOUT()  

    """
    return _lmgc90.RBDY3_CollectBodiesDotOUT(*args)

def RBDY3_AppendToBodiesDotOUT(*args):
    """


    python usage : RBDY3_AppendToBodiesDotOUT()  

    """
    return _lmgc90.RBDY3_AppendToBodiesDotOUT(*args)

def RBDY3_RebuildBodiesDotDAT(*args):
    """


    python usage : RBDY3_RebuildBodiesDotDAT()  

    """
    return _lmgc90.RBDY3_RebuildBodiesDotDAT(*args)

def RBDY3_PutBodyVector(*args):
    """


    Set a vector of a RBDY3 body.  

    Possible values for datatype field are:  

    *   "Coor0": reference coordinates  
    *   "X____": cumulated displacements over time in computed configuration  
    *   "Xbeg_": cumulated displacements over time at beginning of time step  
    *   "V____": velocity in computed configuration  
    *   "Vbeg_": velocity at beginning of time step  
    *   "Vfree": velocity free of contacts  
    *   "Reac_": contact reaction force  
    *   "Raux_": working array for reaction force  
    *   "Ireac": contact impulse  
    *   "Iaux_": working array for impulste  
    *   "Fext_": external forces  

    uses copy, and in case of Fext, the operation is not just setting but adding  

    python usage : RBDY3_PutBodyVector(datatype, ibdyty, vector)  

    Parameters
    ----------
    datatype(string [5]) : the vector to set  
    ibdyty(integer) : rank of the RBDY3  
    vector(double array) : the new value of the vector  

    """
    return _lmgc90.RBDY3_PutBodyVector(*args)

def RBDY3_PutAllBodyVector(*args):
    """


    Put an array of a vector of all RBDY3 bodies (visible and invisible)  

    Possible values for datatype field are: ... see RBDY3_PutBodyVector  

    python usage : RBDY3_PutAllBodyVector(datatype, matrix)  

    Parameters
    ----------
    datatype(string [5]) : the vector to set  
    matrix(double array) : input matrix  

    """
    return _lmgc90.RBDY3_PutAllBodyVector(*args)

def RBDY3_GetBodyVector(*args):
    """


    Get a copy of a vector of a RBDY3 body.  

    Possible values for datatype field are:  

    *   "Coor0": reference coordinates  
    *   "Coor_": coordinates in computed configuration  
    *   "Coorb": coordinates at beginning of time step  
    *   "Coorm": coordinates in detection configuration  
    *   "X____": cumulated displacements over time in computed configuration  
    *   "Xbeg_": cumulated displacements over time at beginning of time step  
    *   "V____": velocity in computed configuration  
    *   "Vbeg_": velocity at beginning of time step  
    *   "Vaux_": working array for velocity  
    *   "Vfree": velocity free of contacts  
    *   "Reac_": contact reaction force  
    *   "Raux_": working array for reaction force  
    *   "Ireac": contact impulse  
    *   "Iaux_": working array for impulste  
    *   "Fext_": external forces  
    *   "Fint_": internal forces  

    python usage : vector = RBDY3_GetBodyVector(datatype, ibdyty)  

    Parameters
    ----------
    datatype(string [5]) : the vector to get  
    ibdyty(integer) : rank of the RBDY3  

    Returns
    -------
    vector (double array) : output vector  

    """
    return _lmgc90.RBDY3_GetBodyVector(*args)

def RBDY3_GetAllBodyVector(*args):
    """


    Get an array of a vector of all RBDY3 bodies (visible and invisible)  

    Possible values for datatype field are: ... see RBDY3_GetBodyVector  

    python usage : matrix = RBDY3_GetBodyVector(datatype, ibdyty)  

    Parameters
    ----------
    datatype(string [5]) : the vector to get  

    Returns
    -------
    matrix (double array) : output matrix  

    """
    return _lmgc90.RBDY3_GetAllBodyVector(*args)

def RBDY3_GetPtrBodyVector(*args):
    """


    Get a pointer on a vector of a RBDY3 body.  

    Possible values for datatype field are:  

    *   "Coor0": reference coordinates  
    *   "X____": cumulated displacements over time in computed configuration  
    *   "Xbeg_": cumulated displacements over time at beginning of time step  
    *   "V____": velocity in computed configuration  
    *   "Vbeg_": velocity at beginning of time step  
    *   "Vaux_": working array for velocity  
    *   "Ireac": contact impulse  
    *   "Iaux_": working array for impulste  
    *   "Fext_": external forces  

    python usage : vector_ptr = RBDY3_GetPtrBodyVector(datatype, ibdyty)  

    Parameters
    ----------
    datatype(string [5]) : the vector to set  
    ibdyty(integer) : rank of the RBDY3  

    Returns
    -------
    vector_ptr (double array) : reference on the desired vector seen as a numpy
    array  

    """
    return _lmgc90.RBDY3_GetPtrBodyVector(*args)

def RBDY3_PutBodyMatrix(*args):
    """


    Set a matrix of a RBDY3 body.  

    Possible values for datatype field are:  

    *   "IFbeg": inertia frame at beginning of time step  
    *   "IFTT_": inertia frame in detection configuration  
    *   "IF___": inertia frame in computed configuration  

    Uses copy  

    python usage : RBDY3_PutBodyMatrix(datatype, ibdyty, matrix)  

    Parameters
    ----------
    datatype(string [5]) : the vector to set  
    ibdyty(integer) : rank of the RBDY3  
    matrix(double array) : a matrix  

    """
    return _lmgc90.RBDY3_PutBodyMatrix(*args)

def RBDY3_GetBodyMatrix(*args):
    """


    Get a copy of a matrix of a RBDY3 body.  

    Possible values for datatype field are:  

    *   "IFref": inertia frame in reference configuration  
    *   "IFbeg": inertia frame at beginning of time step  
    *   "IFTT_": inertia frame in detection configuration  
    *   "IF___": inertia frame in computed configuration  

    Uses copy  

    python usage : matrix = RBDY3_GetBodyMatrix(datatype, ibdyty)  

    Parameters
    ----------
    datatype(string [5]) : the vector to get  
    ibdyty(integer) : rank of the RBDY3  

    Returns
    -------
    matrix (double array) : output matrix  

    """
    return _lmgc90.RBDY3_GetBodyMatrix(*args)

def RBDY3_GetAllRData(*args):
    """


    Get a copy of a real data of all rbdy3.  

    In this order : coor, frame, vlocy, spin, fext, reac  

    python usage : rdata = RBDY3_GetAllRData()  

    Returns
    -------
    rdata (double array) : output matrix  

    """
    return _lmgc90.RBDY3_GetAllRData(*args)

def RBDY3_GetNbRBDY3(*args):
    """


    get the number of RBDY3  

    python usage : nb_RBDY3 = RBDY3_GetNbRBDY3()  

    Returns
    -------
    nb_RBDY3 (integer) : number of RBDY3 in container  

    """
    return _lmgc90.RBDY3_GetNbRBDY3(*args)

def RBDY3_GetMass(*args):
    """


    Get the mass of a body.  

    python usage : mass = RBDY3_GetMass(ibdyty)  

    Parameters
    ----------
    ibdyty(integer) : rank of the RBDY3  

    Returns
    -------
    mass (double) : mass of the RBDY3  

    """
    return _lmgc90.RBDY3_GetMass(*args)

def RBDY3_GetAllMass(*args):
    """


    Get the mass of a all body (visible and invisible)  

    python usage : masses = RBDY3_GetAllMass()  

    Returns
    -------
    masses (double array) : masses of all RBDY3  

    """
    return _lmgc90.RBDY3_GetAllMass(*args)

def RBDY3_GetPtrMass(*args):
    """


    Get a pointer onto the mass matrix of a body.  

    Parameters
    ----------
    ibdyty(int): index of the RBDY3  
    mass(double**): mass matrix of the RBDY3  

    """
    return _lmgc90.RBDY3_GetPtrMass(*args)

def RBDY3_GetVelocity(*args):
    """


    Get the velocity of a body.  

    Parameters
    ----------
    ibdyty(int): index of the RBDY3  
    velocity(double[6]): velocity of the RBDY3  

    """
    return _lmgc90.RBDY3_GetVelocity(*args)

def RBDY3_GetGlobInertia(*args):
    """


    Get the global inertia.  

    usage : inertia = RBDY3_GetGlobInertia(ibdyty)  

    Parameters
    ----------
    ibdyty(integer) : id of desired RBDY3  

    Returns
    -------
    inertia (double 2D array) : the inertia matrix  

    """
    return _lmgc90.RBDY3_GetGlobInertia(*args)

def RBDY3_GetBehavior(*args):
    """


    Get the type of the nickname of the behavior.  

    usage name = RBDY3_GetBehavior(ibdyty)  

    Parameters
    ----------
    ibdyty(integer) : rank of the RBDY3 in container  

    Returns
    -------
    type (string) : nickname  

    """
    return _lmgc90.RBDY3_GetBehavior(*args)

def RBDY3_GetNbContactor(*args):
    """


    get the number of contactor of RBDY3  

    python usage : nb = RBDY3_GetNbContactor(ibdyty)  

    Parameters
    ----------
    ibdyty(integer) : rank of the RBDY3 in container  

    Returns
    -------
    nb (integer) : number of contactor attached to a RBDY3  

    """
    return _lmgc90.RBDY3_GetNbContactor(*args)

def RBDY3_GetContactorType(*args):
    """


    Get the type of the itacty contactor of a body ibdyty.  

    usage type = RBDY3_GetContactorType(ibdyty,itacty)  

    Parameters
    ----------
    ibdyty(integer) : rank of the RBDY3 in container  
    itacty(integer) : rank of the contactor in the RBDY3  

    Returns
    -------
    type (string) : type of the contactor of the body  

    """
    return _lmgc90.RBDY3_GetContactorType(*args)

def RBDY3_SetContactorColor(*args):
    """


    Set the color of a given contactor of a body.  

    usage : RBDY3_SetContactorColor(ibdyty, itacty, color)  

    Parameters
    ----------
    ibdyty(integer) : rank of the RBDY3  
    itacty(integer) : rank of the contactor in the RBDY3  
    color(string of size 5) : the color  

    """
    return _lmgc90.RBDY3_SetContactorColor(*args)

def RBDY3_GetContactorColor(*args):
    """


    Get the color of the itacty contactor of a body ibdyty.  

    usage color = RBDY3_GetContactorColor(ibdyty,itacty)  

    Parameters
    ----------
    ibdyty(integer) : rank of the RBDY3 in container  
    itacty(integer) : rank of the contactor in the RBDY3  

    Returns
    -------
    color (string) : color of the contactor of the body  

    """
    return _lmgc90.RBDY3_GetContactorColor(*args)

def RBDY3_getDrvVlocy(*args):
    """


    Get the driven dof of a body.  

    python usage : [drvdof_indices, drvdof_values] = RBDY3_getDrvVlocy(ibdyty)  

    Parameters
    ----------
    ibdyty(integer) : index of the RBDY3  
    drvdof_indices(integer array) : indices list of driven dof  
    drvdof_values(real array) : values of the driven dof  

    """
    return _lmgc90.RBDY3_getDrvVlocy(*args)

def RBDY3_computeDrvVlocy(*args):
    """


    Compute the value of the driven velocity of a body at current time.  

    In place replacement in the input array of the new value(s) of the driven
    velocity  

    python usage : RBDY3_computeDrvVlocy(ibdyty, values)  

    Parameters
    ----------
    ibdyty(integer) : index of the RBDY3  
    values(double array) : numpy array, input old values of imposed velocity, output
        new ones  

    """
    return _lmgc90.RBDY3_computeDrvVlocy(*args)

def RBDY3_WriteOutOneBody(*args):
    """


    write a bdyty to BODIES.OUT with a given rank  

    python usage : RBDY3_WriteOutOneBody(ibdyty, new_ibdyty)  

    Parameters
    ----------
    ibdyty(integer) : index of the RBDY3  
    new_ibdyty(integer): new index of the RBDY3  

    """
    return _lmgc90.RBDY3_WriteOutOneBody(*args)

def RBDY3_WriteOutDofOneBody(*args):
    """


    write a bdyty dof to DOF.OUT with a given rank  

    python usage : RBDY3_WriteOutDofOneBody(ibdyty, new_ibdyty)  

    Parameters
    ----------
    ibdyty(integer) : index of the RBDY3  
    new_ibdyty(integer): new index of the RBDY3  

    """
    return _lmgc90.RBDY3_WriteOutDofOneBody(*args)

def RBDY3_LoadThreadNetwork(*args):
    """


    read thread structure for textile structure  

    python usage : RBDY3_LoadThreadNetwork(void);  

    """
    return _lmgc90.RBDY3_LoadThreadNetwork(*args)

def RBDY3_SetInvisibleSmallObjects(*args):
    """


    Set the objects to invisible if their average radius is less than radius.  

    python usage : RBDY3_SetInvisibleSmallObjects(radius)  

    Parameters
    ----------
    radius(double) : radius threshold  

    """
    return _lmgc90.RBDY3_SetInvisibleSmallObjects(*args)

def RBDY3_SetVisibleVlocyDrivenDof(*args):
    """


    rended a given Velocy DOF visible  

    python usage : RBDY3_SetVisibleVlocyDrivenDof(ibdyty, iccdof)  

    Parameters
    ----------
    ibdyty(integer): index of the RBDY3  
    iccdof(integer): index of the DOF to set visible  

    """
    return _lmgc90.RBDY3_SetVisibleVlocyDrivenDof(*args)

def RBDY3_SetInvisibleVlocyDrivenDof(*args):
    """


    rended a given Velocy DOF invisible  

    python usage : RBDY3_SetInvisibleVlocyDrivenDof(ibdyty, iccdof)  

    Parameters
    ----------
    ibdyty(integer): index of the RBDY3  
    iccdof(integer): index of the DOF to set invisible  

    """
    return _lmgc90.RBDY3_SetInvisibleVlocyDrivenDof(*args)

def RBDY3_PartialDamping(*args):
    """


    Limit body velocity to Vmax value.  

    usage : RBDY3_PartialDamping(nb_steps, Vmax)  

    Parameters
    ----------
    nb_steps(integer) : periodicity @parma[in] Vmax (double) : Vmax  

    """
    return _lmgc90.RBDY3_PartialDamping(*args)

def RBDY3_GetVolume(*args):
    """


    Get volume of a body.  

    usage : volume = RBDY3_GetVolume(ibdyty)  

    Parameters
    ----------
    ibdyty(integer) : RBDY3 id  

    Returns
    -------
    volume (double) : volume  

    """
    return _lmgc90.RBDY3_GetVolume(*args)

def RBDY3_GetAllVolume(*args):
    """


    Get the area of a all body (visible and invisible)  

    python usage : area = RBDY3_GetAllVolume()  

    Returns
    -------
    area (double array) : masses of all RBDY2  

    """
    return _lmgc90.RBDY3_GetAllVolume(*args)

def RBDY3_RenumVisibleBodies(*args):
    """


    give a new numerotation of visible bodies  

    python usage : RBDY3_RenumVisibleBodies()  

    """
    return _lmgc90.RBDY3_RenumVisibleBodies(*args)

def RBDY3_GetBulkBehavNumber(*args):
    """


    return the bulk number of a given RBDY3  

    python usage : ibehav = RBDY3_GetBulkBehavNumber(ibdyty)  

    Parameters
    ----------
    ibdyty(integer) : rank of a RBDY3  

    Returns
    -------
    ibehav (integer) : the bulk behav number  

    """
    return _lmgc90.RBDY3_GetBulkBehavNumber(*args)

def RBDY3_CleanMemory(*args):
    """


    Free all memory allocated within RBDY3 module.  

    python usage : RBDY3_CleanMemory()  

    """
    return _lmgc90.RBDY3_CleanMemory(*args)

def RBDY3_LoadMpBehaviours(*args):
    """


    read extra physical behaviour in BULK_BEHAV.DAT file.  

    Must be used for THERMO_RIGID ELECTRO_RIGID and THERMO_ELECTRO_RIGID behaviour  

    python usage : RBDY3_LoadMpBehaviours(disper)  

    Parameters
    ----------
    disper(double): some dispersion coefficient  

    """
    return _lmgc90.RBDY3_LoadMpBehaviours(*args)

def RBDY3_IncrementWSvsT(*args):
    """


    python usage : RBDY3_IncrementWSvsT()  

    """
    return _lmgc90.RBDY3_IncrementWSvsT(*args)

def RBDY3_UpdateGAMMAvsT(*args):
    """


    python usage : RBDY3_UpdateGAMMAvsT()  

    """
    return _lmgc90.RBDY3_UpdateGAMMAvsT(*args)

def RBDY3_GetThermalValue(*args):
    """


    Get temperature of rigid particle.  

    usage : T = RBDY3_GetThermalValu(ibdyty, itacty)  

    Parameters
    ----------
    ibdyty(integer) : rank of body  
    itacty(integer) : rank of tacty "  

    """
    return _lmgc90.RBDY3_GetThermalValue(*args)

def RBDY3_SetEquilibriumNorm(*args):
    """


    Initialization of data for the equilibrium state check.  

    You must precise the type of check test :  

    *   Qvlcy : quadratic norm velocy  
    *   Mvlcy : maximum norm velocy  

    usage : RBDY3_CheckEquilibrium(norm_type , tolerance)  

    Parameters
    ----------
    norm_type(string of size 5) : norm type use for the equilibrium check  
    tolerance(double) : norm tolerance  

    """
    return _lmgc90.RBDY3_SetEquilibriumNorm(*args)

def RBDY3_CheckEquilibriumState(*args):
    """


    check if all the RBDY3 rich an equilibrium state (velocity is almost equal to
    zero)  

    usage : isBalanced = RBDY3_CheckEquilibriumState()  

    Returns
    -------
    isBalanced (boolean) : True if in equilibrium state  

    """
    return _lmgc90.RBDY3_CheckEquilibriumState(*args)

def RBDY3_SetSourcePoint(*args):
    """


    create an assembly by source point deposit  

    python usage : RBDY3_SetSourcePoint(first_RBDY3, radius, Xshift, Yshift, Zshift)  

    Parameters
    ----------
    first_RBDY3(int): number of first invisible body  
    radius: source point area radius  
    Xshift: X translation of deposited object from reference coordinate  
    Yshift: Y translation of deposited object from reference coordinate  
    Zshift: Z translation of deposited object from reference coordinate  

    """
    return _lmgc90.RBDY3_SetSourcePoint(*args)

def RBDY3_SetSourcePointWithIni(*args):
    """


    create an assembly by source point deposit  

    python usage : RBDY3_SetSourcePointWithIni(first_RBDY3, radius, Xshift, Yshift,
    Zshift)  

    Parameters
    ----------
    first_RBDY3(int): number of first invisible body  
    radius: source point area radius  
    Xshift: X coordinate of deposited object  
    Yshift: Y coordinate of deposited object  
    Zshift: Z coordinate of deposited object  

    """
    return _lmgc90.RBDY3_SetSourcePointWithIni(*args)

def RBDY3_InitializeProgressiveActivation(*args):
    """


    set the progression of altitude  

    python usage : RBDY3_InitializeProgressiveActivation(zini, dz)  

    Parameters
    ----------
    zini(real) : initial altitude  
    dz(real) : increment of altitude  

    """
    return _lmgc90.RBDY3_InitializeProgressiveActivation(*args)

def RBDY3_ApplyProgressiveActivation(*args):
    """


    set occurence of activation  

    python usage : RBDY3_ApplyProgressiveActivation(freq)  

    Parameters
    ----------
    freq(integer) : activation frequence of progression  

    """
    return _lmgc90.RBDY3_ApplyProgressiveActivation(*args)

def RBDY3_InitFreeBoundary(*args):
    """


    python usage : RBDY3_InitFreeBoundary(xmin, xmax, ymin, ymax, radius)  

    Parameters
    ----------
    xmin(real) :  
    xmax(real) :  
    ymin(real) :  
    ymax(real) :  
    radius(real) :  

    """
    return _lmgc90.RBDY3_InitFreeBoundary(*args)

def RBDY3_TriaxialLoading(*args):
    """


    Triaxial load of a sample using a rigid box.  

    python usage : TriaxialLoading(num_down, num_right, num_up, num_left, num_front,
    num_rear, nb_loads, loads)  

    Parameters
    ----------
    num_down(integer) :  
    num_right(integer) :  
    num_up(integer) :  
    num_left(integer) :  
    num_front(integer) :  
    num_rear(integer) :  
    nb_loads(integer) : the number of walls you want to load with a pressure (1 to 6)  
    loads(array) : loads(2,nb_loads): load(1,i) contains which wall is loaded
        (1==down, 2==right, 3==up, 4==left, 5==front, 6==rear) and load(2,i)
        contains the amplitude of the stress (a positive value means compression).  

    """
    return _lmgc90.RBDY3_TriaxialLoading(*args)

def RBDY3_GetDofStatus(*args):
    """


    Get dof status.  

    python usage : status = RBDY3_GetDofStatus(ibdyty)  

    Parameters
    ----------
    ibdyty(integer): rank of the RBDY3  

    Returns
    -------
    status(integer) : dof status of the RBDY3  

    """
    return _lmgc90.RBDY3_GetDofStatus(*args)

def SPHER_LoadTactors(*args):
    """


    load SPHER from RBDY3 and initialize existing_entites  

    python usage : SPHER_LoadTactors()  

    """
    return _lmgc90.SPHER_LoadTactors(*args)

def SPHER_SetRadiusCorrection(*args):
    """


    set a radius correction  

    python usage : SPHER_SetRadiusCorrection(corr)  

    Parameters
    ----------
    corr(real) :  

    """
    return _lmgc90.SPHER_SetRadiusCorrection(*args)

def SPHER_GetNbSPHER(*args):
    """


    Get the number of SPHER.  

    python usage : nb_SPHER = SPHER_GetNbSPHER()  

    Returns
    -------
    nb_SPHER (integer) : the number of SPHER  

    """
    return _lmgc90.SPHER_GetNbSPHER(*args)

def SPHER_GetSPHER2BDYTY(*args):
    """


    Get a copy of map SPHER2bdyty.  

    usage : polyr2bdyty = SPHER_GetSPHER2BDYTY()  

    Returns
    -------
    polyr2bdyty (integer 2D-array) : the polyr2bdyty map  

    """
    return _lmgc90.SPHER_GetSPHER2BDYTY(*args)

def SPHER_GetPtrSPHER2BDYTY(*args):
    """


    return a pointer onto the map spher2bdyty  

    python usage : spher2bdyty = SPHER_GetPtrSPHER2BDYTY()  

    Returns
    -------
    spher2bdyty (integer array) : reference on map between spher rank and body rank  

    """
    return _lmgc90.SPHER_GetPtrSPHER2BDYTY(*args)

def SPHER_GetContactorRadius(*args):
    """


    Get the radius of a SPHER contactor.  

    python usage : radius = SPHER_GetContactorRadius(itact)  

    Parameters
    ----------
    itact(integer) : id of a SPHER  

    Returns
    -------
    radius (double) : the radius of the SPHER number itact  

    """
    return _lmgc90.SPHER_GetContactorRadius(*args)

def SPHER_GetContactorCoor(*args):
    """


    get coordinates of the center of a given SPHER  

    usage : vector = SPHER_GetContactorCoor(itacty)  

    Parameters
    ----------
    itacty(integer) : rank of considered contactor  

    Returns
    -------
    vector (double array) : the desired vector  

    """
    return _lmgc90.SPHER_GetContactorCoor(*args)

def SPHER_GetContactorCoorb(*args):
    """


    get coordinates at the begin of the time step of the center of a given SPHER  

    usage : vector = SPHER_GetContactorCoorb(itacty)  

    Parameters
    ----------
    itacty(integer) : rank of considered contactor  

    Returns
    -------
    vector (double array) : the desired vector  

    """
    return _lmgc90.SPHER_GetContactorCoorb(*args)

def SPHER_IsVisible(*args):
    """


    return if a given contactor is attached to a visible body  

    python usage : visible = SPHER_IsVisible(itacty)  

    Parameters
    ----------
    itacty(integer) : id of the contactor we want visibility  

    Returns
    -------
    visible (integer) : 1 if body is visible, 0 else  

    """
    return _lmgc90.SPHER_IsVisible(*args)

def SPHER_InitOutlines(*args):
    """


    Get a reference on the outlines of all SPHER.  

    usage : outlines = SPHER_InitOutlines()  

    Returns
    -------
    outlines (double array) : a reference on outlines_SPHER  

    """
    return _lmgc90.SPHER_InitOutlines(*args)

def SPHER_InitScalarFields(*args):
    """


    Get a reference on the scalar fields of all SPHER.  

    usage : scalarfields = SPHER_InitScalarfields()  

    Returns
    -------
    scalarfields (double array) : reference on scalarfields_SPHER array  

    """
    return _lmgc90.SPHER_InitScalarFields(*args)

def SPHER_UpdatePostdata(*args):
    """


    Update values of outlines_SPHER and scalarfields_SPHER pointers.  

    usage : SPHER_UpdatePostdata  

    """
    return _lmgc90.SPHER_UpdatePostdata(*args)

def SPHER_GetNbPointOutlines(*args):
    """


    Get the list of cumulated outline points number.  

    python usage : nb_pointOutlines = SPHER_GetNbPointOutlines()  

    Returns
    -------
    nb_pointOutlines (integer array) : the cumulated number of outline points of the
    SPHER  

    """
    return _lmgc90.SPHER_GetNbPointOutlines(*args)

def SPHER_GetNbScalarFields(*args):
    """


    Get the number of scalar fields of a SPHER.  

    python usage : nb_scalarfields = SPHER_GetNbScalarFields()  

    Returns
    -------
    nb_scalarfields (integer) : the number of scalar fields of a SPHER  

    """
    return _lmgc90.SPHER_GetNbScalarFields(*args)

def SPHER_GetPtrAllConnectivities(*args):
    """


    Get a reference on the connectivities of all SPHER.  

    usage : connec = SPHER_GetPtrAllConnectivities()  

    Returns
    -------
    connec (integer array) : a reference on all_connectivities  

    """
    return _lmgc90.SPHER_GetPtrAllConnectivities(*args)

def SPHER_CleanMemory(*args):
    """


    Free all memory allocated within SPHER module.  

    python usage : SPHER_CleanMemory()  

    """
    return _lmgc90.SPHER_CleanMemory(*args)

def MBS2D_setNb(*args):
    """


    Set the number of MBS.  

    python usage : MBS2D_setNb(nb)  

    Parameters
    ----------
    nb(integer) : set the number of MBS  

    """
    return _lmgc90.MBS2D_setNb(*args)

def MBS2D_getNb(*args):
    """


    Get the number of MBS.  

    python usage : nb = MBS2D_getNb()  

    Returns
    -------
    nb (integer) : the number of MBS  

    """
    return _lmgc90.MBS2D_getNb(*args)

def MBS2D_setNbNodes(*args):
    """


    Set the number of nodes of a MBS.  

    python usage : MBS2D_setNbNodes(ibdyty, nb)  

    Parameters
    ----------
    ibdyty(integer): id of the MBS  
    nb(integer) : the number of nodes of the MBS  

    """
    return _lmgc90.MBS2D_setNbNodes(*args)

def MBS2D_setNbTactors(*args):
    """


    Set the number contactors of a MBS.  

    python usage : MBS2D_setNbTactors(ibdyty, nb)  

    Parameters
    ----------
    ibdyty(integer): id of the MBS  
    nb(integer) : the number of contactor of the MBS  

    """
    return _lmgc90.MBS2D_setNbTactors(*args)

def MBS2D_getPtrCoor(*args):
    """


    Get a pointer on the coor of a MBS.  

    python usage : coor = MBS2D_getPtrCoor(ibdyty)  

    Parameters
    ----------
    ibdyty(integer) : rank of considered MBS  

    Returns
    -------
    coor (double 2D-array) : reference on the coordinates of the nodes  

    """
    return _lmgc90.MBS2D_getPtrCoor(*args)

def MBS2D_getPtrCoorTT(*args):
    """


    Set the array of coordinates of nodes of a MBS.  

    python usage : coorTT = MBS2D_GetPtrCoorTT(ibdyty)  

    Parameters
    ----------
    ibdyty(integer): id of the MBS  

    Returns
    -------
    coorTT (double array) : coordinates of nodes of a MBS  

    """
    return _lmgc90.MBS2D_getPtrCoorTT(*args)

def MBS2D_addContactor(*args):
    """


    Add a new contactor to a MBS.  

    Available contactor types are :  

    *   JONCx: inputs are:
        -   rdata must hold [axe_x, axe_y]  
    *   POLYR: inputs are:
        -   rdata must hold the coordinates of the vertices [x_1, y_1, ... x_n, y_n]  
        -   idata must hold the number of vertices  

    python usage : MBS2D_addContactor(ibdyty, inodty, itacty, tacttype, color,
    rdata, idata=None)  

    Parameters
    ----------
    ibdyty(integer) : rank of the MBS  
    inodty(integer) : rank of the node of the MBS the contactor is tied to  
    itacty(integer) : rank of the contactor of MBS  
    tactype(string [5]) : the type of contactor  
    color(string [5]) : the color of the contactor  
    rdata(double array) : the new value of the vector  
    idata(integer array) : the new value of the vector  

    """
    return _lmgc90.MBS2D_addContactor(*args)

def MBS2D_initialize(*args):
    """


    Initialize MBS module once loading is done.  

    python usage : MBS2D_initialize()  

    """
    return _lmgc90.MBS2D_initialize(*args)

def MBS2D_finalize(*args):
    """


    Finalize MBS module.  

    python usage : MBS2D_finalize()  

    """
    return _lmgc90.MBS2D_finalize(*args)

def MBS2D_IncrementStep(*args):
    """


    compute the current velocity and displacement  

    python usage : MBS2D_IncrementStep()  

    """
    return _lmgc90.MBS2D_IncrementStep(*args)

def MBS2D_ComputeFreeVelocity(*args):
    """


    compute free velocity  

    python usage : MBS2D_ComputeFreeVelocity()  

    """
    return _lmgc90.MBS2D_ComputeFreeVelocity(*args)

def MBS2D_ComputeDof(*args):
    """


    update current position and velocity  

    python usage : MBS2D_ComputeDof()  

    """
    return _lmgc90.MBS2D_ComputeDof(*args)

def MBS2D_UpdateDof(*args):
    """


    save d.o.f. of the end of the time step to d.o.f. of the begining of the next
    one  

    python usage : MBS2D_UpdateDof()  

    """
    return _lmgc90.MBS2D_UpdateDof(*args)

def MBS3D_setNb(*args):
    """


    Set the number of MBS.  

    python usage : MBS3D_setNb(nb)  

    Parameters
    ----------
    nb(integer) : set the number of MBS  

    """
    return _lmgc90.MBS3D_setNb(*args)

def MBS3D_getNb(*args):
    """


    Get the number of MBS.  

    python usage : nb = MBS3D_getNb()  

    Returns
    -------
    nb (integer) : the number of MBS  

    """
    return _lmgc90.MBS3D_getNb(*args)

def MBS3D_setNbNodes(*args):
    """


    Set the number of nodes of a MBS.  

    python usage : MBS3D_setNbNodes(ibdyty, nb)  

    Parameters
    ----------
    ibdyty(integer): id of the MBS  
    nb(integer) : the number of nodes of the MBS  

    """
    return _lmgc90.MBS3D_setNbNodes(*args)

def MBS3D_setNbTactors(*args):
    """


    Set the number contactors of a MBS.  

    python usage : MBS3D_setNbTactors(ibdyty, nb)  

    Parameters
    ----------
    ibdyty(integer): id of the MBS  
    nb(integer) : the number of contactor of the MBS  

    """
    return _lmgc90.MBS3D_setNbTactors(*args)

def MBS3D_getPtrCoor(*args):
    """


    Get a pointer on the coor of a MBS.  

    usage : coor = MBS3D_GetPtrCoor(ibdyty)  

    Parameters
    ----------
    ibdyty(integer) : rank of considered MBS  

    Returns
    -------
    coor (double 2D-array) : reference on the coordinates of the nodes  

    """
    return _lmgc90.MBS3D_getPtrCoor(*args)

def MBS3D_getPtrCoorTT(*args):
    """


    Set the array of coordinates of nodes of a MBS.  

    python usage : coor = MBS3D_getPtrCoorTT(ibdyty)  

    Parameters
    ----------
    ibdyty(integer): id of the MBS  

    Returns
    -------
    coor (double array) : coordinates of nodes of a MBS (in contact configuration)  

    """
    return _lmgc90.MBS3D_getPtrCoorTT(*args)

def MBS3D_getPtrLocalFrame(*args):
    """


    Get a pointer on the coor of a MBS.  

    usage : frame = MBS3D_GetPtrLocalFrame(ibdyty)  

    Parameters
    ----------
    ibdyty(integer) : rank of considered MBS  

    Returns
    -------
    frame (double 2D-array) : local frame  

    """
    return _lmgc90.MBS3D_getPtrLocalFrame(*args)

def MBS3D_getPtrLocalFrameTT(*args):
    """


    Set the array of coordinates of nodes of a MBS.  

    python usage : frameTT = MBS3D_GetPtrLocalFrameTT(ibdyty)  

    Parameters
    ----------
    ibdyty(integer): id of the MBS  

    Returns
    -------
    frameTT (double array) : local frame (in contact configuration)  

    """
    return _lmgc90.MBS3D_getPtrLocalFrameTT(*args)

def MBS3D_addContactor(*args):
    """


    Add a new contactor to a MBS.  

    Available contactor types are :  

    *   PLANx: inputs are:
        -   rdata must hold [axe_x, axe_y, axe_z]  
    *   POLYR: inputs are:
        -   rdata must hold the coordinates of the vertices [x_1, y_1, z_1, ... x_n,
            y_n, z_n]  
        -   idata must hold the connecivity of each triangle defining the surface  

    python usage : MBS3D_addContactor(ibdyty, inodty, itacty, tacttype, color,
    rdata, idata=None)  

    Parameters
    ----------
    ibdyty(integer) : rank of the MBS  
    inodty(integer) : rank of the node of the MBS the contactor is tied to  
    itacty(integer) : rank of the contactor of MBS  
    tactype(string [5]) : the type of contactor  
    color(string [5]) : the color of the contactor  
    rdata(double array) : the new value of the vector  
    idata(integer array) : the new value of the vector  

    """
    return _lmgc90.MBS3D_addContactor(*args)

def MBS3D_initialize(*args):
    """


    Initialize MBS module once loading is done.  

    python usage : MBS3D_initialize()  

    """
    return _lmgc90.MBS3D_initialize(*args)

def MBS3D_finalize(*args):
    """


    Finalize MBS module.  

    python usage : MBS3D_finalize()  

    """
    return _lmgc90.MBS3D_finalize(*args)

def MBS3D_IncrementStep(*args):
    """


    compute the current velocity and displacement  

    python usage : MBS3D_IncrementStep()  

    """
    return _lmgc90.MBS3D_IncrementStep(*args)

def MBS3D_ComputeFreeVelocity(*args):
    """


    compute free velocity  

    python usage : MBS3D_ComputeFreeVelocity()  

    """
    return _lmgc90.MBS3D_ComputeFreeVelocity(*args)

def MBS3D_ComputeDof(*args):
    """


    update current position and velocity  

    python usage : MBS3D_ComputeDof()  

    """
    return _lmgc90.MBS3D_ComputeDof(*args)

def MBS3D_UpdateDof(*args):
    """


    save d.o.f. of the end of the time step to d.o.f. of the begining of the next
    one  

    python usage : MBS3D_UpdateDof()  

    """
    return _lmgc90.MBS3D_UpdateDof(*args)

def ALpxx_LoadTactors(*args):
    """


    load ALpxx from MAILx and initialize existing_entities  

    python usage : ALpxx_LoadTactors()  

    """
    return _lmgc90.ALpxx_LoadTactors(*args)

def ALpxx_PushPreconNodes(*args):
    """


    set ALpxx supporting nodes as precon  

    python usage : ALpxx_PushPreconNodes()  

    """
    return _lmgc90.ALpxx_PushPreconNodes(*args)

def ALpxx_GetAllConnec(*args):
    """


    return connectivity of all AL in a single vector using gloab node numbering of
    mecaMAILx  

    python usage : connec = ALxxx_getAllConnec()  

    Returns
    -------
    connec (integer 1D-array) : connectiviy of ALxxx elements  

    """
    return _lmgc90.ALpxx_GetAllConnec(*args)

def ALpxx_GetAllData(*args):
    """


    return integer (ibdyty, itacty, i_as) and real data (normal) of all ALxxx  

    python usage : idata, rdata = ALxxx_getAllData()  

    Returns
    -------
    idata (integer 2D-array) : integer data array  

    Returns
    -------
    rdata (real 2D-array) : real data array  

    """
    return _lmgc90.ALpxx_GetAllData(*args)

def ALpxx_CleanMemory(*args):
    """


    Free all memory allocated within ALpxx module.  

    python usage : ALpxx_CleanMemory()  

    """
    return _lmgc90.ALpxx_CleanMemory(*args)

def ASpxx_LoadTactors(*args):
    """


    Load ASpxx from MAILx and Initialize existing_entities.  

    python usage : ASpxx_LoadTactors()  

    """
    return _lmgc90.ASpxx_LoadTactors(*args)

def ASpxx_PushPreconNodes(*args):
    """


    set ASpxx supporting nodes as precon  

    python usage : ASpxx_PushPreconNodes()  

    """
    return _lmgc90.ASpxx_PushPreconNodes(*args)

def ASpxx_GetAllConnec(*args):
    """


    return connectivity of all AS in a single vector using gloab node numbering of
    mecaMAILx  

    python usage : connec = ASxxx_getAllConnec()  

    Returns
    -------
    connec (integer 1D-array) : connectiviy of ASxxx elements  

    """
    return _lmgc90.ASpxx_GetAllConnec(*args)

def ASpxx_GetAllData(*args):
    """


    return integer (ibdyty, itacty, i_as) and real data (normal) of all ASxxx  

    python usage : idata, rdata = ASxxx_getAllData()  

    Returns
    -------
    idata (integer 2D-array) : integer data array  

    Returns
    -------
    rdata (real 2D-array) : real data array  

    """
    return _lmgc90.ASpxx_GetAllData(*args)

def ASpxx_CleanMemory(*args):
    """


    Free all memory allocated within ASpxx module.  

    python usage : ASpxx_CleanMemory()  

    """
    return _lmgc90.ASpxx_CleanMemory(*args)

def ASpxx_ExplodePatch(*args):
    """


    Explode ASpxx patch in singleton.  

    python usage : ASpxx_ExplodePatch()  

    """
    return _lmgc90.ASpxx_ExplodePatch(*args)

def CLxxx_LoadTactors(*args):
    """


    load CLxxx from MAILx and Initialize existing_entities  

    python usage : CLxxx_LoadTactors()  

    """
    return _lmgc90.CLxxx_LoadTactors(*args)

def CLxxx_SetNbNodesByCLxxx(*args):
    """


    Set the number of CL nodes by edges. It helps to compute the length associated
    to a contact node. Default is 2.  

    python usage : CLxxx_SetNbNodesByCLxxx(nb_nodes)  

    Parameters
    ----------
    nb_nodes(integer) : number of CLxxx contactors by edges  

    """
    return _lmgc90.CLxxx_SetNbNodesByCLxxx(*args)

def CLxxx_PushPreconNodes(*args):
    """


    set CLxxx supporting nodes as precon  

    python usage : CLxxx_PushPreconNodes()  

    """
    return _lmgc90.CLxxx_PushPreconNodes(*args)

def CLxxx_GetNbCLxxx(*args):
    """


    Get the number of CLxxx.  

    usage : nb_CLxxx = CLxxx_GetNbCLxxx()  

    Parameters
    ----------
    nb_CLxxx(integer) : number of CLxxx in container  

    """
    return _lmgc90.CLxxx_GetNbCLxxx(*args)

def CLpxx_GetAllConnec(*args):
    """


    return connectivity of all CL in a single vector using gloab node numbering of
    mecaMAILx  

    python usage : connec = CLxxx_getAllConnec()  

    Returns
    -------
    connec (integer 1D-array) : connectiviy of CLxxx elements  

    """
    return _lmgc90.CLpxx_GetAllConnec(*args)

def CLpxx_GetAllData(*args):
    """


    return integer (ibdyty, itacty, i_as) and real data (normal) of all CLxxx  

    python usage : idata, rdata = CLxxx_getAllData()  

    Returns
    -------
    idata (integer 2D-array) : integer data array  

    Returns
    -------
    rdata (real 2D-array) : real data array  

    """
    return _lmgc90.CLpxx_GetAllData(*args)

def CLxxx_CleanMemory(*args):
    """


    Free all memory allocated within CLxxx module.  

    python usage : CLxxx_CleanMemory()  

    """
    return _lmgc90.CLxxx_CleanMemory(*args)

def CSxxx_LoadTactors(*args):
    """


    Load CSxxx from MAILx and Initialize existing_entities.  

    python usage : CSxxx_LoadTactors()  

    """
    return _lmgc90.CSxxx_LoadTactors(*args)

def CSxxx_PushPreconNodes(*args):
    """


    set CSxxx supporting nodes as precon  

    python usage : CSxxx_PushPreconNodes()  

    """
    return _lmgc90.CSxxx_PushPreconNodes(*args)

def CSxxx_FlipOrientation(*args):
    """


    Flip normal of all CSxxx of a given MAILx body.  

    python usage : CSxxx_FlipOrientation(ibdyty)  

    Parameters
    ----------
    ibdyty(integer) : rank of desired body  

    """
    return _lmgc90.CSxxx_FlipOrientation(*args)

def CSxxx_FlipOrientationOnePatch(*args):
    """


    Flip normal of CSxxx belonging to given patch of a given MAILx body.  

    python usage : CSxxx_FlipOrientationOnePatch(ibdyty,icspxx)  

    Parameters
    ----------
    ibdyty(integer) : rank of desired body  
    icspxx(integer) : rank of desired patch  

    """
    return _lmgc90.CSxxx_FlipOrientationOnePatch(*args)

def CSxxx_SetShrink(*args):
    """


    shrink position of nodes in CSxxx contactors  

    python usage : CSxxx_SetShrink(shrink)  

    Parameters
    ----------
    shrink(real) : shrink value  

    """
    return _lmgc90.CSxxx_SetShrink(*args)

def CSxxx_SetQuadrature(*args):
    """


    Set the contact quadrature rule of a CSxxx face. OBSOLETE FUNCTION !!!! To
    remove in the future.  

    python usage : CSxxx_SetQuadrature(ivalue)  

    Parameters
    ----------
    ivalue(integer) : degree on CSxxx contactor  

    """
    return _lmgc90.CSxxx_SetQuadrature(*args)

def CSxxx_AddReac(*args):
    """


    Apply an external reaction on a CSxxx.  

    python usage : CSxxx_AddReac(datatype, iCSxxx, reac)  

    Parameters
    ----------
    datatype(string of size 5) : the vector to set  
    iCSxxx(integer) : id of the CSpxx  
    reac(double array) : the value to add  

    """
    return _lmgc90.CSxxx_AddReac(*args)

def CSpxx_ApplySurfaceLoad(*args):
    """


    """
    return _lmgc90.CSpxx_ApplySurfaceLoad(*args)

def CSpxx_ApplyPressure(*args):
    """


    Apply an external pressure on a CSpxx.  

    python usage : CSpxx_ApplyPressure(ivalue,rvalue)  

    Parameters
    ----------
    ivalue(integer) : id of the CSpxx  
    rvalue(real) : pressure  

    """
    return _lmgc90.CSpxx_ApplyPressure(*args)

def CSxxx_GetNbCSxxx(*args):
    """


    Get the number of CSxxx.  

    usage : nb_CSxxx = CSxxx_GetNbCSxxx()  

    Parameters
    ----------
    nb_CSxxx(integer) : number of CSxxx in container  

    """
    return _lmgc90.CSxxx_GetNbCSxxx(*args)

def CSpxx_GetAllConnec(*args):
    """


    return connectivity of all CS in a single vector using gloab node numbering of
    mecaMAILx  

    python usage : connec = CSxxx_getAllConnec()  

    Returns
    -------
    connec (integer 1D-array) : connectiviy of CSxxx elements  

    """
    return _lmgc90.CSpxx_GetAllConnec(*args)

def CSpxx_GetAllData(*args):
    """


    return integer (ibdyty, itacty, i_as) and real data (normal) of all CSxxx  

    python usage : idata, rdata = CSxxx_getAllData()  

    Returns
    -------
    idata (integer 2D-array) : integer data array  

    Returns
    -------
    rdata (real 2D-array) : real data array  

    """
    return _lmgc90.CSpxx_GetAllData(*args)

def CSxxx_CleanMemory(*args):
    """


    Free all memory allocated within CSxxx module.  

    python usage : CSxxx_CleanMemory()  

    """
    return _lmgc90.CSxxx_CleanMemory(*args)

def DISKL_LoadTactors(*args):
    """


    Load DISKL from MAILx and Initialize existing_entities.  

    python usage : DISKL_LoadTactors()  

    """
    return _lmgc90.DISKL_LoadTactors(*args)

def DISKL_PushPreconNodes(*args):
    """


    declare the DISKL supporting nodes as precon  

    python usage : DISKL_PushPreconNodes()  

    """
    return _lmgc90.DISKL_PushPreconNodes(*args)

def DISKL_CleanMemory(*args):
    """


    Free all memory allocated within DISKL module.  

    python usage : DISKL_CleanMemory()  

    """
    return _lmgc90.DISKL_CleanMemory(*args)

def MAILx_ReadBodies(*args):
    """


    read MAILx from DATBOX/BODIES.DAT  

    Input string is of form vX.Y where X is major version number and Y is minor one.  
     If not specified, last available version is used.  

    python usage : MAILx_ReadBodies(version)  

    param[in] version (string) : file format version to use  

    """
    return _lmgc90.MAILx_ReadBodies(*args)

def MAILx_WriteBodies(*args):
    """


    write MAILx to OUTBOX/BODIES.OUT  

    Input string is of form vX.Y where X is major version number and Y is minor one.  
     If not specified, last available version is used.  

    python usage : MAILx_WriteBodies(version)  

    param[in] version (string) : file format version to use  

    """
    return _lmgc90.MAILx_WriteBodies(*args)

def MAILx_WriteLastGPV(*args):
    """


    write OUTBOX/GPV.LAST  

    python usage : MAILx_WriteLastGPV()  

    """
    return _lmgc90.MAILx_WriteLastGPV(*args)

def MAILx_WriteOutGPV(*args):
    """


    write OUTBOX/GPV.OUT.x  

    python usage : MAILx_WriteOutGPV()  

    """
    return _lmgc90.MAILx_WriteOutGPV(*args)

def MAILx_DisplayOutGPV(*args):
    """


    display GPV values  

    python usage : MAILx_DisplayOutGPV()  

    """
    return _lmgc90.MAILx_DisplayOutGPV(*args)

def MAILx_AddDof2InBodies(*args):
    """


    set cooref = cooref + X  

    python usage : MAILx_AddDof2InBodies()  

    """
    return _lmgc90.MAILx_AddDof2InBodies(*args)

def MAILx_GetNbMAILx(*args):
    """


    Get the number of MAILx.  

    python usage : nb_MAILx = GetNbMAILx()  

    Returns
    -------
    nb_MAILx (integer) : number of MAILx  

    """
    return _lmgc90.MAILx_GetNbMAILx(*args)

def MAILx_GetNbCell(*args):
    """


    Get the number of Cells of a given MAILx.  

    python usage : nb_MAILx = GetNbCell(IdBody)  

    Parameters
    ----------
    IdBody(integer) : id of the concern body  

    Returns
    -------
    nb_cell (integer) : number of cell  

    """
    return _lmgc90.MAILx_GetNbCell(*args)

def MAILx_SetCoorRef(*args):
    """


    set reference coordinates on a given body  

    python usage : MAILx_SetCoorRef(IdBody, f, length)  

    Parameters
    ----------
    IdBody(integer) : id of the concern body  
    f(double array) : value of the vitesse  
    length(integer) : length of vector  

    """
    return _lmgc90.MAILx_SetCoorRef(*args)

def MAILx_GetCoordNodty(*args):
    """


    Get one coordinate of a node of a body.  

    python usage : x = MAILx_GetCoordNodty(int ibdty,int inodty,int icomp)  

    Parameters
    ----------
    ibdyty(integer) : rank of considered body  
    inodty(integer) : the node  
    icomp(integer) : the component  

    Returns
    -------
    x (double) : coordinate of node  

    """
    return _lmgc90.MAILx_GetCoordNodty(*args)

def MAILx_GetCoordsNodty(*args):
    """


    Get the coordinates of a node of a body.  

    python usage : x = MAILx_GetCoordsNodty(int ibdty, int inodty, int length)  

    Parameters
    ----------
    ibdyty(integer) : rank of considered body  
    inodty(integer) : the node  
    length(integer) : the number of component  

    Returns
    -------
    x (double array) : the desired vector  

    """
    return _lmgc90.MAILx_GetCoordsNodty(*args)

def MAILx_GetNbNodes(*args):
    """


    Get the number of nodes of a given MAILx.  

    python usage : nb_nodes = MAILx_GetNbNodes(ibdyty)  

    Parameters
    ----------
    ibdyty(integer) : body id  

    Returns
    -------
    nb_nodes (integer) : number of nodes of the body  

    """
    return _lmgc90.MAILx_GetNbNodes(*args)

def MAILx_InitNodalFields(*args):
    """


    Set the number of nodal_fields for a given body.  

    python usage : MAILx_InitNodalFields(ibdyty,nb_nodal_fields)  

    Parameters
    ----------
    ibdyty(integer) : body id  
    nb_nodal_fields(integer) : number of nodal fields required  

    """
    return _lmgc90.MAILx_InitNodalFields(*args)

def MAILx_InitNodalField(*args):
    """


    Set name and size of a nodal_field of a given body.  

    python usage : MAILx_InitNodalField(ibdyty,name,rank,sz)  

    Parameters
    ----------
    ibdyty(integer) : body id  
    name(string) : field name  
    rank(integer) : field rank  
    sz(integer) : size of the field  

    """
    return _lmgc90.MAILx_InitNodalField(*args)

def MAILx_SetNodalField(*args):
    """


    Set a nodal_field of a given body.  

    python usage : MAILx_SetNodalField(ibdyty,rank,field)  

    Parameters
    ----------
    ibdyty(integer) : body id  
    rank(integer) : field rank  
    field(double vector) : field  

    """
    return _lmgc90.MAILx_SetNodalField(*args)

def MAILx_CleanMemory(*args):
    """


    Free all memory allocated within MAILx module.  

    python usage : MAILx_CleanMemory()  

    """
    return _lmgc90.MAILx_CleanMemory(*args)

def PT2DL_LoadTactors(*args):
    """


    Initialize existing_entities variable for PT2DL contactors.  

    python usage : PT2DL_LoadTactors()  

    """
    return _lmgc90.PT2DL_LoadTactors(*args)

def PT2DL_PushPreconNodes(*args):
    """


    python usage : PT2DL_PushPreconNodes()  

    """
    return _lmgc90.PT2DL_PushPreconNodes(*args)

def PT2DL_GetNbPT2DL(*args):
    """


    Get the number of PT2DL.  

    usage : nb_PT2DL = PT2DL_GetNbPT2DL()  

    Parameters
    ----------
    nb_PT2DL(integer) : number of PT2DL in container  

    """
    return _lmgc90.PT2DL_GetNbPT2DL(*args)

def PT2DL_GetNbPT2TL(*args):
    """


    Get the number of PT2TL of a body.  

    usage : nb_PT2DL = PT2DL_GetNbPT2TL(ibdyty)  

    Parameters
    ----------
    nb_PT2TL(integer) : number of PT2TL in container  

    """
    return _lmgc90.PT2DL_GetNbPT2TL(*args)

def PT2DL_ComputeConvectiveFlux(*args):
    """


    python usage : PT2DL_ComputeConvectiveFlux()  

    """
    return _lmgc90.PT2DL_ComputeConvectiveFlux(*args)

def PT2DL_AssembThermKT(*args):
    """


    python usage : PT2DL_AssembThermKT()  

    """
    return _lmgc90.PT2DL_AssembThermKT(*args)

def PT2DL_AssembThermRHS(*args):
    """


    python usage : PT2DL_AssembThermRHS()  

    """
    return _lmgc90.PT2DL_AssembThermRHS(*args)

def PT2DL_GetBody(*args):
    """


    return corresponding body  

    python usage : ibdy = PT2DL_GetBody(itacty)  

    """
    return _lmgc90.PT2DL_GetBody(*args)

def PT2DL_CleanMemory(*args):
    """


    Free all memory allocated within PT2DL module.  

    python usage : PT2DL_CleanMemory()  

    """
    return _lmgc90.PT2DL_CleanMemory(*args)

def mecaMAILx_WithoutRenumbering(*args):
    """


    skip renumbering of the unknowns using a rcc method  

    python usage : mecaMAILx_WithoutRenumbering()  

    """
    return _lmgc90.mecaMAILx_WithoutRenumbering(*args)

def mecaMAILx_BandStorage(*args):
    """


    use band matrix  

    python usage : mecaMAILx_BandStorage()  

    """
    return _lmgc90.mecaMAILx_BandStorage(*args)

def mecaMAILx_SparseStorage(*args):
    """


    use sparse matrix  

    python usage : mecaMAILx_SparseStorage()  

    """
    return _lmgc90.mecaMAILx_SparseStorage(*args)

def mecaMAILx_ExplodedStorage(*args):
    """


    use element by element matrix  

    python usage : mecaMAILx_ExplodedStorage()  

    """
    return _lmgc90.mecaMAILx_ExplodedStorage(*args)

def mecaMAILx_DiagonalStorage(*args):
    """


    use diagonal matrix  

    python usage : mecaMAILx_DiagonalStorage()  

    """
    return _lmgc90.mecaMAILx_DiagonalStorage(*args)

def mecaMAILx_SkylineStorage(*args):
    """


    use skyline matrix  

    python usage : mecaMAILx_SkylineStorage()  

    """
    return _lmgc90.mecaMAILx_SkylineStorage(*args)

def mecaMAILx_FullStorage(*args):
    """


    use full matrix  

    python usage : mecaMAILx_FullStorage()  

    """
    return _lmgc90.mecaMAILx_FullStorage(*args)

def mecaMAILx_SymmetricShape(*args):
    """


    assume matrix is symmetrical  

    python usage : mecaMAILx_SymmetricShape()  

    """
    return _lmgc90.mecaMAILx_SymmetricShape(*args)

def mecaMAILx_UnspecifiedShape(*args):
    """


    does not assume any thing on matrix shape  

    python usage : mecaMAILx_UnspecifiedShape()  

    """
    return _lmgc90.mecaMAILx_UnspecifiedShape(*args)

def mecaMAILx_GetNbMecaMAILx(*args):
    """


    Get the number of mecaMAILx.  

    python usage : nb_mecaMAILx = mecaMAILx_GetNbMecaMAILx()  

    Returns
    -------
    nb_mecaMAILx (integer) : number of mecaMAILx  

    """
    return _lmgc90.mecaMAILx_GetNbMecaMAILx(*args)

def mecaMAILx_GetNbNodes(*args):
    """


    Get the number of nodes of a mecaMAILx.  

    python usage : nb_nodes = mecaMAILx_GetNbNodes(ibdyty)  

    Parameters
    ----------
    ivalue(integer) : id of the mecaMAILx  

    Returns
    -------
    nb_nodes (integer) : number of nodes of a mecaMAILx  

    """
    return _lmgc90.mecaMAILx_GetNbNodes(*args)

def mecaMAILx_GetNbElements(*args):
    """


    Get the number of elements of a mecaMAILx.  

    python usage : nb_elements = mecaMAILx_GetNbElements(ibdyty)  

    Parameters
    ----------
    ivalue(integer) : id of the mecaMAILx  

    Returns
    -------
    nb_nodes (integer) : number of elements of a mecaMAILx  

    """
    return _lmgc90.mecaMAILx_GetNbElements(*args)

def mecaMAILx_GetNbGp(*args):
    """


    Get the number of Gauss points of an element of a mecaMAILx.  

    python usage : nb_gp = mecaMAILx_GetNbElements(ibdyty, iblmty)  

    Parameters
    ----------
    ibdyty(integer) : id of the mecaMAILx  
    iblmty(integer) : id of the element  

    Returns
    -------
    nb_gp (integer) : number of Gauss point of an element of a mecaMAILx  

    """
    return _lmgc90.mecaMAILx_GetNbGp(*args)

def mecaMAILx_SetPreconBody(*args):
    """


    ask for precomputation of the W matrix on support node dofs of contactors for
    one body. Assumes bulk behaviour is linear.  

    python usage : mecaMAILx_SetPreconBody(ivalue)  

    Parameters
    ----------
    ivalue(integer) : id of body to set precon  

    """
    return _lmgc90.mecaMAILx_SetPreconBody(*args)

def mecaMAILx_SetPreconAllBodies(*args):
    """


    ask for precomputation of the W matrix on support node dofs of contactors for
    all bodies. Assumes bulk behaviour is linear.  

    python usage : mecaMAILx_SetPreconAllBodies()  

    """
    return _lmgc90.mecaMAILx_SetPreconAllBodies(*args)

def mecaMAILx_ComputePreconW(*args):
    """


    compute the precon W on precon bodies  

    python usage : mecaMAILx_ComputePreconW()  

    """
    return _lmgc90.mecaMAILx_ComputePreconW(*args)

def mecaMAILx_InitPreconW(*args):
    """


    initialize an empty precon W  

    python usage : mecaMAILx_InitPreconW()  

    """
    return _lmgc90.mecaMAILx_InitPreconW(*args)

def mecaMAILx_PutPreconW(*args):
    """


    push a column of precon W  

    python usage : mecaMAILx_PutPreconW(ivalue1, ivalue2, ivalue3, vect)  

    Parameters
    ----------
    ivalue1(integer) : body number  
    ivalue2(integer) : node number  
    ivalue3(integer) : dof number  
    vect(double) : column  

    """
    return _lmgc90.mecaMAILx_PutPreconW(*args)

def mecaMAILx_GetNodesPrecon(*args):
    """


    Get the list of preconditionned nodes of a mecaMAILx body.  

    Here memory is allocated within lmgc90 so that the pointer can be freely
    modified by third parties without nasty effect on lmgc90 functioning.  

    python usage : precon_list = mecaMAILx_GetNodesPrecon(ibdyty)  

    Parameters
    ----------
    ibdyty(integer) : index of the desired mecaMAILx  

    Returns
    -------
    precon_list (integer list) : list of the preconditionned nodes  

    """
    return _lmgc90.mecaMAILx_GetNodesPrecon(*args)

def mecaMAILx_SetCoroAllBodies(*args):
    """


    ask for corotationnal computation of the W matrix. Assumes bulk behaviour is
    linear.  

    python usage : mecaMAILx_SetCoroAllBodies()  

    """
    return _lmgc90.mecaMAILx_SetCoroAllBodies(*args)

def mecaMAILx_SetCoroBody(*args):
    """


    ask for corotationnal computation of the W matrix of a given body. Assumes bulk
    behaviour is linear.  

    python usage : mecaMAILx_SetCoroBody(ivalue)  

    Parameters
    ----------
    ivalue(integer) : id of body to set coro  

    """
    return _lmgc90.mecaMAILx_SetCoroBody(*args)

def mecaMAILx_SetTolCoro(*args):
    """


    set the admssible tolerance on rigid body velocity computed by deformable model  

    python usage : mecaMAILx_SetTolCoro(tol)  

    Parameters
    ----------
    tol(double) : tolerance  

    """
    return _lmgc90.mecaMAILx_SetTolCoro(*args)

def mecaMAILx_SetRigidAllBodies(*args):
    """


    ask for rigid computation of the W matrix. Assumes bulk behaviour is linear.  

    python usage : mecaMAILx_SetRigidAllBodies()  

    """
    return _lmgc90.mecaMAILx_SetRigidAllBodies(*args)

def mecaMAILx_SetRigidBody(*args):
    """


    ask for rigid computation of the W matrix of a given body. Assumes bulk
    behaviour is linear.  

    python usage : mecaMAILx_SetRigidBody(ivalue)  

    Parameters
    ----------
    ivalue(integer) : id of body to compute as a rigid  

    """
    return _lmgc90.mecaMAILx_SetRigidBody(*args)

def mecaMAILx_SkipDeformableComputationAllBodies(*args):
    """


    avoid deformable part computation of a deformable body declared as rigid  

    python usage : mecaMAILx_SkipDeformableComputationAllBodies()  

    """
    return _lmgc90.mecaMAILx_SkipDeformableComputationAllBodies(*args)

def mecaMAILx_SkipDeformableComputationBody(*args):
    """


    avoid deformable part computation of a given deformable body declared as rigid  

    python usage : mecaMAILx_SkipDeformableComputationBody(ivalue)  

    Parameters
    ----------
    ivalue(integer) : id of body to compute without deformation  

    """
    return _lmgc90.mecaMAILx_SkipDeformableComputationBody(*args)

def mecaMAILx_BuildRigidBodies(*args):
    """


    computes internal matrices for rigid description  

    python usage : mecaMAILx_BuildRigidBodies()  

    """
    return _lmgc90.mecaMAILx_BuildRigidBodies(*args)

def mecaMAILx_IsRigid(*args):
    """


    return 1 if a given body is rigid/coro, 0 otherwize  

    python usage : rigid = mecaMAILx_IsRigid(ibdyty)  

    Parameters
    ----------
    idbdy(integer): id of the body we want visibility  

    Returns
    -------
    rigid (integer) : 1 if body is visible, 0 otherwize  

    """
    return _lmgc90.mecaMAILx_IsRigid(*args)

def mecaMAILx_GetRigidFrame(*args):
    """


    return an inertia frame matrix  

    Possible values for datatype field are "RFbeg", "RF___", "RFTT_ (stands for
    Rigid Frame)  

    python usage : mat = mecaMAILx_GetRigidFrame(datatype, ibdyty)  

    Parameters
    ----------
    idbdy(integer): id of the body  

    Returns
    -------
    vec (float matrix) : frame matrix (beg, current or TT)  

    """
    return _lmgc90.mecaMAILx_GetRigidFrame(*args)

def mecaMAILx_GetRigidCoorTT(*args):
    """


    return TT center of inertia coordinates  

    python usage : vec = mecaMAILx_GetRigidCoorTT(ibdyty)  

    Parameters
    ----------
    idbdy(integer): id of the body  

    Returns
    -------
    vec (float vector) : TT center of inertia coordinates  

    """
    return _lmgc90.mecaMAILx_GetRigidCoorTT(*args)

def mecaMAILx_GetRigidCooref(*args):
    """


    return ref center of inertia coordinates  

    python usage : vec = mecaMAILx_GetRigidCooref(ibdyty)  

    Parameters
    ----------
    idbdy(integer): id of the body  

    Returns
    -------
    vec (float vector) : ref center of inertia coordinates  

    """
    return _lmgc90.mecaMAILx_GetRigidCooref(*args)

def mecaMAILx_SetRVDrivenDofs(*args):
    """


    declares rigid velocity dof as driven  

    python usage : mecaMAILx_SetRVDrivenDofs(idbody,vector_in)  

    Parameters
    ----------
    idbody(integer) : id of the body  
    vector(integer) : list of driven dofs  

    """
    return _lmgc90.mecaMAILx_SetRVDrivenDofs(*args)

def mecaMAILx_SetRVDrivenDofValue(*args):
    """


    set the value of rigid velocity dof value  

    python usage : mecaMAILx_SetRVDrivenDofValue(idbody,iddof,rv)  

    Parameters
    ----------
    idbody(integer) : id of the body  
    iddof(integer) : id of dof  
    rv(float) : value  

    """
    return _lmgc90.mecaMAILx_SetRVDrivenDofValue(*args)

def mecaMAILx_PutBodyRVector(*args):
    """


    Set a vector of a coro or rigid mecaMAILx body.  

    Possible values for datatype field are:  

    *   "Coor0": reference coordinates  
    *   "Xbeg_": cumulated displacements over time at beginning of time step  
    *   "X____": cumulated displacements over time in computed configuration  
    *   "Vbeg_": velocity at beginning of time step  
    *   "V____": velocity in computed configuration  
    *   "Vfree": velocity free of contacts  
    *   "Reac_": contact reaction force  
    *   "Raux_": working array for reaction force  
    *   "Ireac": contact impulse  
    *   "Iaux_": working array for impulste  
    *   "Fext_": external forces  

    uses copy, and in case fo Fext, the operation is not just setting but adding  

    python usage : mecaMAILx_PutBodyRVector(datatype, ibdyty, vector)  

    Parameters
    ----------
    datatype(string [5]) : the vector to set  
    ibdyty(integer) : rank of the RBDY3  
    vector(double array) : the new value of the vector  

    """
    return _lmgc90.mecaMAILx_PutBodyRVector(*args)

def mecaMAILx_GetBodyRVector(*args):
    """


    Get a copy of a vector of a mecaMAILx body.  

    Possible values for datatype field are:  

    *   "Coor0": reference coordinates  
    *   "Coorb": coordinates at beginning of time step  
    *   "Xbeg_": cumulated displacements over time at beginning of time step  
    *   "XTT__": cumulated displacements over time in detection configuration  
    *   "X____": cumulated displacements over time in computed configuration  
    *   "V____": velocity in computed configuration  
    *   "Vbeg_": velocity at beginning of time step  
    *   "Vfree": velocity free of contacts  
    *   "Reac_": contact reaction force  
    *   "Raux_": working array for reaction force  
    *   "Ireac": contact impulse  
    *   "Iaux_": working array for impulste  
    *   "Fext_": external forces  
    *   "Fint_": internal forces  

    python usage : vector = mecaMAILx_GetBodyRVector(datatype, ibdyty)  

    Parameters
    ----------
    datatype(string [5]) : the vector to get  
    ibdyty(integer) : rank of the RBDY3  

    Returns
    -------
    vector (double array) : output vector  

    """
    return _lmgc90.mecaMAILx_GetBodyRVector(*args)

def mecaMAILx_PutBodyVector(*args):
    """


    Set a vector of a given body.  

    Possible values for datatype field are:  

    *   "Coor0": reference coordinates  
    *   "Coor_": coordinates in computed configuration  
    *   "Coorb": coordinates at beginning of time step  
    *   "X____": cumulated displacements over time in computed configuration  
    *   "Xbeg_": cumulated displacements over time at beginning of time step  
    *   "V____": velocity in computed configuration  
    *   "Vbeg_": velocity at beginning of time step  
    *   "Vfree": velocity free of contacts  
    *   "Reac_": contact reaction force  
    *   "Raux_": working array for reaction force  
    *   "Ireac": contact impulse  
    *   "Iaux_": working array for impulste  
    *   "Fext_": external forces  
    *   "Fint_": internal forces  

    python usage : mecaMAILx_PutBodyVector(datatype, ibdyty, matrix)  

    Parameters
    ----------
    datatype(string of size 5) : the vector to set  
    ibdyty(integer) : rank of body  
    matrix(double array) : the new value  

    """
    return _lmgc90.mecaMAILx_PutBodyVector(*args)

def mecaMAILx_GetBodyVector(*args):
    """


    Get a copy of a vector of a given body.  

    Possible values for datatype field are:  

    *   "Coor0": reference coordinates  
    *   "Coor_": coordinates in computed configuration  
    *   "Coorb": coordinates at beginning of time step  
    *   "X____": cumulated displacements over time in computed configuration  
    *   "Xbeg_": cumulated displacements over time at beginning of time step  
    *   "V____": velocity in computed configuration  
    *   "Vbeg_": velocity at beginning of time step  
    *   "Vaux_": working array for velocity  
    *   "Vfree": velocity free of contacts  
    *   "Reac_": contact reaction force  
    *   "Raux_": working array for reaction force  
    *   "Ireac": contact impulse  
    *   "Iaux_": working array for impulste  
    *   "Fext_": external forces  
    *   "Fint_": internal forces  

    Python usage : vector = mecaMAILx_GetBodyVector(datatype, ibdyty)  

    Parameters
    ----------
    datatype(string of size 5) : the vector to get  
    ibdyty(integer) : rank of considered body  

    Returns
    -------
    vector (double 2D-array) : the desired data  

    """
    return _lmgc90.mecaMAILx_GetBodyVector(*args)

def mecaMAILx_GetMaterials(*args):
    """


    Get a copy of a the elements' material vector of a given body.  

    Python usage : materials = mecaMAILx_GetMaterials(ibdyty)  

    Parameters
    ----------
    ibdyty(integer) : rank of considered body  

    Returns
    -------
    vector (double 1D-array) : the material index of elements  

    """
    return _lmgc90.mecaMAILx_GetMaterials(*args)

def mecaMAILx_GetStress(*args):
    """


    Get a copy of the smoothed nodal stress (Cauchy) of a given body: 2D
    Sxx,Syy,Sxy,Szz,Svm | 3D Sxx,Sxy,Syy,Sxz,Syz,Szz,Svm.  

    Python usage : stress = mecaMAILx_GetStress(ibdyty)  

    Parameters
    ----------
    ibdyty(integer) : rank of considered body  

    Returns
    -------
    stress (double 2D-array) : nodal stress of the desired body  

    """
    return _lmgc90.mecaMAILx_GetStress(*args)

def mecaMAILx_GetStrain(*args):
    """


    Get a copy of the smoothed nodal strain (Almansi) of a given body: 2D
    Exx,Eyy,Exy,Ezz,J | 3D Exx,Exy,Eyy,Exz,Eyz,Ezz,J.  

    Python usage : strain = mecaMAILx_GetStrain(ibdyty)  

    Parameters
    ----------
    ibdyty(integer) : rank of considered body  

    Returns
    -------
    strain (double 2D-array) : nodal strain of the desired body  

    """
    return _lmgc90.mecaMAILx_GetStrain(*args)

def mecaMAILx_GetInternalVariables(*args):
    """


    Get a copy of the smoothed nodal internal variables (2D:10 ; 3D:57)  

    Python usage : strain = mecaMAILx_GetInternalVariables(ibdyty)  

    Parameters
    ----------
    ibdyty(integer) : rank of considered body  

    Returns
    -------
    strain (double 2D-array) : nodal internal variables of the desired body  

    """
    return _lmgc90.mecaMAILx_GetInternalVariables(*args)

def mecaMAILx_GetElementStress(*args):
    """


    Get a copy of the mean stress (Cauchy) of a given body: 2D Sxx,Syy,Sxy,Szz,Svm |
    3D Sxx,Sxy,Syy,Sxz,Syz,Szz,Svm.  

    Python usage : stress = mecaMAILx_GetElementStress(ibdyty)  

    Parameters
    ----------
    ibdyty(integer) : rank of considered body  

    Returns
    -------
    stress (double 2D-array) : nodal stress of the desired body  

    """
    return _lmgc90.mecaMAILx_GetElementStress(*args)

def mecaMAILx_PushProperties(*args):
    """


    gives to model the couple of model,behavior used at gauss point  

    python usage : mecaMAILx_PushProperties()  

    """
    return _lmgc90.mecaMAILx_PushProperties(*args)

def mecaMAILx_UseNewPPSet(*args):
    """


    each gauss point will have its own property set (necessary in multi physics)  

    python usage : mecaMAILx_UseNewPPSet()  

    """
    return _lmgc90.mecaMAILx_UseNewPPSet(*args)

def mecaMAILx_ComputeFreeVelocity(*args):
    """


    computes free velocity of a list of bodies  

    python usage : mecaMAILx_ComputeFreeVelocity(i_list)  

    Parameters
    ----------
    i_list(list of integer) : list of bodies to compute free velocity if omitted works
        on all objects  

    """
    return _lmgc90.mecaMAILx_ComputeFreeVelocity(*args)

def mecaMAILx_AssembKT(*args):
    """


    assemble pseudo mass matrix and apply drvdof of a list of bodies  

    python usage : mecaMAILx_AssembKT(i_list)  

    Parameters
    ----------
    i_list(list of integer) : list of bodies to assemble pseudo mass matrix and apply
        drvdof if omitted works on all objects  

    """
    return _lmgc90.mecaMAILx_AssembKT(*args)

def mecaMAILx_OnlyAssembKT(*args):
    """


    assemble pseudo mass matrix of a list of bodies  

    python usage : mecaMAILx_OnlyAssembKT(i_list)  

    Parameters
    ----------
    i_list(list of integer) : list of bodies to assemble pseudo mass matrix if omitted
        works on all objects  

    """
    return _lmgc90.mecaMAILx_OnlyAssembKT(*args)

def mecaMAILx_ApplyDrvDofKT(*args):
    """


    apply drvdof pseudo mass matrix  

    python usage : mecaMAILx_ApplyDrvDofKT(i_list)  

    Parameters
    ----------
    i_list(list of integer) : list of bodies to apply drvdof on pseudo mass matrix if
        omitted works on all objects  

    """
    return _lmgc90.mecaMAILx_ApplyDrvDofKT(*args)

def mecaMAILx_AssembRHS(*args):
    """


    assembles right hand side of a list of bodies  

    python usage : mecaMAILx_AssembRHS(i_list)  

    Parameters
    ----------
    i_list(list of integer) : list of bodies to assemble right hand side if omitted
        works on all objects  

    """
    return _lmgc90.mecaMAILx_AssembRHS(*args)

def mecaMAILx_ComputeResidueNorm(*args):
    """


    computes the norm of the residue of a list of bodies  

    python usage : norm = mecaMAILx_ComputeResidueNorm(i_list)  

    Parameters
    ----------
    i_list(list of integer) : list of bodies to compute the norm of the residue if
        omitted works on all objects  

    Returns
    -------
    norm (double) : Residue Norm  

    """
    return _lmgc90.mecaMAILx_ComputeResidueNorm(*args)

def mecaMAILx_ComputeBulk(*args):
    """


    computes elementary stiffness and viscosity matrices and internal forces of a
    list of bodies  

    python usage : mecaMAILx_ComputeBulk(i_list)  

    Parameters
    ----------
    i_list(list of integer) : list of bodies to compute stiffness and viscosity
        matrices and internal forces if omitted works on all objects  

    """
    return _lmgc90.mecaMAILx_ComputeBulk(*args)

def mecaMAILx_ComputeField(*args):
    """


    computes elementary fields of a list of bodies  

    python usage : mecaMAILx_ComputeField(i_list)  

    Parameters
    ----------
    i_list(list of integer) : list of bodies to compute elementary fields if omitted
        works on all objects  

    """
    return _lmgc90.mecaMAILx_ComputeField(*args)

def mecaMAILx_ComputeFint(*args):
    """


    computes elementary internal forces of a list of bodies  

    python usage : mecaMAILx_ComputeFint(i_list)  

    Parameters
    ----------
    i_list(list of integer) : list of bodies to compute internal forces if omitted
        works on all objects  

    """
    return _lmgc90.mecaMAILx_ComputeFint(*args)

def mecaMAILx_UpdateBulk(*args):
    """


    update begin elementary fields with current elementary fields of a list of
    bodies  

    python usage : mecaMAILx_UpdateBulk(i_list)  

    Parameters
    ----------
    i_list(list of integer) : list of bodies to compute elementary fields if omitted
        works on all objects  

    """
    return _lmgc90.mecaMAILx_UpdateBulk(*args)

def mecaMAILx_UpdateDof(*args):
    """


    update begin d.o.f. with current d.o.f. of a list of bodies  

    python usage : mecaMAILx_UpdateDof(i_list)  

    Parameters
    ----------
    i_list(list of integer) : list of bodies to update current d.o.f if omitted works
        on all objects  

    """
    return _lmgc90.mecaMAILx_UpdateDof(*args)

def mecaMAILx_ComputeDof(*args):
    """


    computes the current d.o.f knowing all the forces (free + contact) of a list of
    bodies  

    python usage : mecaMAILx_ComputeDof(i_list)  

    Parameters
    ----------
    i_list(list of integer) : list of bodies to compute current d.o.f if omitted works
        on all objects  

    """
    return _lmgc90.mecaMAILx_ComputeDof(*args)

def mecaMAILx_IncrementStep(*args):
    """


    initializes the current d.o.f and some driven d.o.f values  

    python usage : mecaMAILx_IncrementStep()  

    """
    return _lmgc90.mecaMAILx_IncrementStep(*args)

def mecaMAILx_ComputeFext(*args):
    """


    compute elementary external forces of a list of bodies  

    python usage : mecaMAILx_ComputeFext(i_list)  

    Parameters
    ----------
    i_list(list of integer) : list of bodies to compute external forces if omitted
        works on all objects  

    """
    return _lmgc90.mecaMAILx_ComputeFext(*args)

def mecaMAILx_ComputeMass(*args):
    """


    compute elementary mass and inertia of a list of bodies  

    python usage : mecaMAILx_ComputeMass(i_list)  

    Parameters
    ----------
    i_list(list of integer) : list of bodies to compute mass and inertia if omitted
        works on all objects  

    """
    return _lmgc90.mecaMAILx_ComputeMass(*args)

def mecaMAILx_FatalDamping(*args):
    """


    set to 0 current velocities of a list of bodies  

    This keyword must be between the ComputeDof and UpdateDof ones.  

    python usage : mecaMAILx_FatalDamping(i_list)  

    Parameters
    ----------
    i_list(list of integer) : list of bodies to reset current velocity if omitted
        works on all objects  

    """
    return _lmgc90.mecaMAILx_FatalDamping(*args)

def mecaMAILx_CheckEquilibriumState(*args):
    """


    Check if the bodies riches an equilibrium state (velocities almost equal to 0)  

    python usage : iconv = mecaMAILx_CheckEquilibriumState()  

    Returns
    -------
    iconv (boolean) : True if in equilibrium state  

    """
    return _lmgc90.mecaMAILx_CheckEquilibriumState(*args)

def mecaMAILx_SetEquilibriumNorm(*args):
    """


    set the norm for CheckEquilibriumState  

    Type of check test:  

    *   Qvlcy : quadratic norm of velocy  
    *   Maxm : maximum norm of velocy  

    python usage : mecaMAILx_SetEquilibriumNorm(checktype, tol)  

    Parameters
    ----------
    checktype(char[5]) : type of check test  
    tol(double) : tolerance  

    """
    return _lmgc90.mecaMAILx_SetEquilibriumNorm(*args)

def mecaMAILx_ReadDrivenDof(*args):
    """


    Read DRV_DOF.DAT.  

    python usage : mecaMAILx_ReadDrivenDof()  

    """
    return _lmgc90.mecaMAILx_ReadDrivenDof(*args)

def mecaMAILx_ReadIniGPV(*args):
    """


    Read GPV file.  

    If num <= 0 : DATBOX/GPV.INI file is read  

    Else : OUTBOX/GPV.OUT.num is read, num being the parameter used in
    TimeEvolution_ReadIniGPV last call  

    python usage : mecaMAILx_ReadIniGPV(num=0)  

    Parameters
    ----------
    num(integer) : which GPV file to read  

    """
    return _lmgc90.mecaMAILx_ReadIniGPV(*args)

def mecaMAILx_ReadIniDof(*args):
    """


    Read DOF file.  

    If num <= 0 : DATBOX/DOF.INI file is read  

    Else : OUTBOX/DOF.OUT.num is read, num being the parameter used in
    TimeEvolution_ReadIniDof last call  

    python usage : mecaMAILx_ReadIniDof(num=0)  

    Parameters
    ----------
    num(integer) : which DOF file to read  

    """
    return _lmgc90.mecaMAILx_ReadIniDof(*args)

def mecaMAILx_LoadBehaviours(*args):
    """


    load behaviours from bulk_behav  

    python usage : mecaMAILx_LoadBehaviours()  

    """
    return _lmgc90.mecaMAILx_LoadBehaviours(*args)

def mecaMAILx_LoadModels(*args):
    """


    load models from models  

    python usage : mecaMAILx_LoadModels()  

    """
    return _lmgc90.mecaMAILx_LoadModels(*args)

def mecaMAILx_WriteDrivenDof(*args):
    """


    Write DRV_DOF.OUT.  

    python usage : mecaMAILx_WriteDrivenDof()  

    """
    return _lmgc90.mecaMAILx_WriteDrivenDof(*args)

def mecaMAILx_WriteLastDof(*args):
    """


    Write ascii DOF.LAST file.  

    python usage : mecaMAILx_WriteLastDof()  

    """
    return _lmgc90.mecaMAILx_WriteLastDof(*args)

def mecaMAILx_WriteOutDof(*args):
    """


    Write ascii DOF.OUT file. Can be activate only each N step.  

    python usage : mecaMAILx_WriteOutDof()  

    """
    return _lmgc90.mecaMAILx_WriteOutDof(*args)

def mecaMAILx_DisplayOutDof(*args):
    """


    Display body degrees of freedom.  

    python usage : mecaMAILx_DisplayOutDof()  

    """
    return _lmgc90.mecaMAILx_DisplayOutDof(*args)

def mecaMAILx_DisplayBulkElement(*args):
    """


    Display fields of a bulk element.  

    Parameters
    ----------
    IdBody(int) : id of the concern body  
    IdElem(int) : id of the concern element python usage :
        mecaMAILx_DisplayBulkElement(IdBody,IdElem)  

    """
    return _lmgc90.mecaMAILx_DisplayBulkElement(*args)

def mecaMAILx_WriteLastRnod(*args):
    """


    Write ascii Rnod.LAST file of a list of bodies.  

    python usage : mecaMAILx_WriteLastRnod(i_list)  

    Parameters
    ----------
    i_list(list of integer) : list of bodies to write in Rnod.LAST if omitted works on
        all objects  

    """
    return _lmgc90.mecaMAILx_WriteLastRnod(*args)

def mecaMAILx_WriteOutRnod(*args):
    """


    Write ascii Rnod.OUT file of a list of bodies. Can be activat only each N step.  

    python usage : mecaMAILx_WriteOutRnod(i_list)  

    Parameters
    ----------
    i_list(list of integer) : list of bodies to write in Rnod.OUT if omitted works on
        all objects  

    """
    return _lmgc90.mecaMAILx_WriteOutRnod(*args)

def mecaMAILx_DisplayOutRnod(*args):
    """


    Display body forces of a list of bodies.  

    python usage : mecaMAILx_DisplayOutRnod(i_list)  

    Parameters
    ----------
    i_list(list of integer) : list of bodies to display body forces if omitted works
        on all objects  

    """
    return _lmgc90.mecaMAILx_DisplayOutRnod(*args)

def mecaMAILx_WriteLastNodalForces(*args):
    """


    Write ascii Rnod.LAST file of a list of bodies.  

    This function is almost like WriteLastRnod, but write also internal and inertial
    forces.  

    python usage : mecaMAILx_WriteLastNodalForces(i_list)  

    Parameters
    ----------
    i_list(list of integer) : list of bodies to write in Rnod.LAST if omitted works on
        all objects  

    """
    return _lmgc90.mecaMAILx_WriteLastNodalForces(*args)

def mecaMAILx_WriteOutNodalForces(*args):
    """


    Write ascii Rnod.OUT file of a list of bodies. Can be activat only each N step.  

    This function is almost like WriteOutRnod, but write also internal and inertial
    forces.  

    python usage : mecaMAILx_WriteOutNodalForces(i_list)  

    Parameters
    ----------
    i_list(list of integer) : list of bodies to write in Rnod.OUT if omitted works on
        all objects  

    """
    return _lmgc90.mecaMAILx_WriteOutNodalForces(*args)

def mecaMAILx_DisplayOutNodalForces(*args):
    """


    Display computed nodal forces of a list of bodies.  

    python usage : mecaMAILx_DisplayOutNodalForces(i_list)  

    Parameters
    ----------
    i_list(list of integer) : list of bodies to display body forces if omitted works
        on all objects  

    """
    return _lmgc90.mecaMAILx_DisplayOutNodalForces(*args)

def mecaMAILx_GetScalarFieldRank(*args):
    """


    Get the rank of scalar field of an element of a body from its name.  

    python usage : f_rank = mecaMAILx_GetScalarFieldRank(ibdyty, iblmty, name)  

    Parameters
    ----------
    ibdyty(integer) : id of the concern body  
    iblmty(integer) : id of the concern element  
    name(string) : name of the desired field  

    Returns
    -------
    f_rank (integer) : rank of the corresponding field  

    """
    return _lmgc90.mecaMAILx_GetScalarFieldRank(*args)

def mecaMAILx_SetScalarFieldByNode(*args):
    """


    Update elementary scalar field through a nodal external field on a given body.  

    Use the form functions of the elements and input values to compute and store
    field values at Gauss points.  

    python usage : mecaMAILx_SetScalarFieldByNode(IdBody, f_rank, f)  

    Parameters
    ----------
    IdBody(integer) : id of the concern body  
    f_rank(integer) : rank of the field to set  
    f(double array) : value of the field  

     You need to declare this field in your MODELS.DAT  

    """
    return _lmgc90.mecaMAILx_SetScalarFieldByNode(*args)

def mecaMAILx_SetScalarFieldByElement(*args):
    """


    Update elementary scalar field through a element external field on a given body.  

    Field values are stored at Gauss point, on an element all Gauss point have the
    element value  

    python usage : mecaMAILx_SetScalarFieldByElement(IdBody, f_rank, f)  

    Parameters
    ----------
    IdBody(integer) : id of the concern body  
    f_rank(integer) : rank of the field to set  
    f(double array) : value of the field  

     You need to declare this field in your MODELS.DAT  

    """
    return _lmgc90.mecaMAILx_SetScalarFieldByElement(*args)

def mecaMAILx_GetVectorFieldRank(*args):
    """


    Get the rank of field of an element of a body from its name.  

    python usage : f_rank = mecaMAILx_GetVectorFieldRank(ibdyty, iblmty, name)  

    Parameters
    ----------
    ibdyty(integer) : id of the concern body  
    iblmty(integer) : id of the concern element  
    name(string) : name of the desired vector field  

    Returns
    -------
    f_rank (integer) : rank of the corresponding vector field  

    """
    return _lmgc90.mecaMAILx_GetVectorFieldRank(*args)

def mecaMAILx_SetVectorFieldByNode(*args):
    """


    Update elementary fields through a nodal external field on a given body.  

    Use the form functions of the elements and input values to compute and store
    field values at Gauss points.  

    You need to declare this field in your MODELS.DAT  

    python usage : mecaMAILx_SetVectorFieldByNode(IdBody, f_rank, f)  

    Parameters
    ----------
    IdBody(integer) : id of the concern body  
    f_rank(integer) : rank of the vector field to set  
    f(double array) : value of the vector field  

    """
    return _lmgc90.mecaMAILx_SetVectorFieldByNode(*args)

def mecaMAILx_SetVectorFieldByElement(*args):
    """


    Update elementary fields through a nodal external field on a given body.  

    Use the form functions of the elements and input values to compute and store
    field values at Gauss points.  

    You need to declare this field in your MODELS.DAT  

    python usage : mecaMAILx_SetVectorFieldByElement(IdBody, f_rank, f)  

    Parameters
    ----------
    IdBody(integer) : id of the concern body  
    f_rank(integer) : rank of the vector field to set  
    f(double array) : value of the vector field  

    """
    return _lmgc90.mecaMAILx_SetVectorFieldByElement(*args)

def mecaMAILx_Terminate(*args):
    """


    Stop job properly.  

    python usage : mecaMAILx_Terminate()  

    """
    return _lmgc90.mecaMAILx_Terminate(*args)

def mecaMAILx_ComputeOrthoFrame(*args):
    """


    Use user routine to compute the ortho frame of a list of bodies.  

    This method uses a routine define by the user in user.f90  

    python usage : mecaMAILx_ComputeOrthoFrame(i_list)  

    Parameters
    ----------
    i_list(list of integer) : list of bodies to compute ortho frame with user routine
        if omitted works on all objects  

    """
    return _lmgc90.mecaMAILx_ComputeOrthoFrame(*args)

def mecaMAILx_ComputeUserField(*args):
    """


    Use user routine to compute a field at gp.  

    python usage : mecaMAILx_ComputeUserField(ifield, i_list)  

    Parameters
    ----------
    ifield(integer) : id of the field to compute  
    i_list(list of integer) : list of bodies to compute user fields on if omitted
        works on all objects  

    """
    return _lmgc90.mecaMAILx_ComputeUserField(*args)

def mecaMAILx_SetVisible(*args):
    """


    set visible a given mecaMAILx  

    python usage : mecaMAILx_SetVisible(ibdyty)  

    Parameters
    ----------
    ibdyty(integer): index of the mecaMAILx  

    """
    return _lmgc90.mecaMAILx_SetVisible(*args)

def mecaMAILx_SetInvisible(*args):
    """


    rended a given mecaMAILx invisible  

    python usage : mecaMAILx_SetInvisible(ibdyty)  

    Parameters
    ----------
    ibdyty(integer): index of the mecaMAILx  

    """
    return _lmgc90.mecaMAILx_SetInvisible(*args)

def mecaMAILx_IsVisible(*args):
    """


    return if a given body visible  

    python usage : visible = mecaMAILx_IsVisible(ibdyty)  

    Parameters
    ----------
    idbdy(integer): id of the body we want visibility  

    Returns
    -------
    visible (integer) : 1 if body is visible, 0 else  

    """
    return _lmgc90.mecaMAILx_IsVisible(*args)

def mecaMAILx_ComputeRayleighDamping(*args):
    """


    compute the Rayleigh damping: C=alpha*M+beta*K of a list of bodies  

    python usage : mecaMAILx_ComputeRayleighDamping(alpha,beta,i_list)  

    Parameters
    ----------
    alpha(real) : damping value  
    beta(real) : damping value  
    i_list(list of integer) : list of bodies to compute Rayleigh damping if omitted
        works on all objects  

    """
    return _lmgc90.mecaMAILx_ComputeRayleighDamping(*args)

def mecaMAILx_ComputeRayleighDampingDiscreteElement(*args):
    """


    set damping for discrete FE element of a list of bodies  

    python usage : mecaMAILx_ComputeRayleighDampingDiscreteElement(damp, i_list)  

    Parameters
    ----------
    ref_size(real) : damping value  
    i_list(list of integer) : list of bodies to compute damping for discrete FE
        element if omitted works on all objects  

    """
    return _lmgc90.mecaMAILx_ComputeRayleighDampingDiscreteElement(*args)

def mecaMAILx_GetNodeCoorTT(*args):
    """


    return TT node coordinates  

    python usage : vec = mecaMAILx_GetNodeCoorTT(ibdyty,inodty)  

    Parameters
    ----------
    idbdy(integer): id of the body  
    inodty(integer): id of the node  

    Returns
    -------
    vec (float vector) : TT node coordinates  

    """
    return _lmgc90.mecaMAILx_GetNodeCoorTT(*args)

def mecaMAILx_GetNodeCooref(*args):
    """


    return ref node coordinates  

    python usage : vec = mecaMAILx_GetNodeCoorref(ibdyty,inodty)  

    Parameters
    ----------
    idbdy(integer): id of the body  
    inodty(integer): id of the node  

    Returns
    -------
    vec (float vector) : ref node coordinates  

    """
    return _lmgc90.mecaMAILx_GetNodeCooref(*args)

def mecaMAILx_GetBodyMatrix(*args):
    """


    Get a copy of a matrix of a given body.  

    Possible values for datatype field are "mass_", "stiff", "damp_"  

    Python usage : matrix = mecaMAILx_GetBodyMatrix(datatype, ibdyty)  

    Parameters
    ----------
    datatype(string of size 5) : the matrix to get  
    ibdyty(integer) : rank of considered body  

    Returns
    -------
    matrix (double array) : the desired matrix  

    """
    return _lmgc90.mecaMAILx_GetBodyMatrix(*args)

def mecaMAILx_getDrvVlocy(*args):
    """


    Get the driven dof of a body.  

    python usage : [drvdof_indices, drvdof_values] = mecaMAILx_getDrvVlocy(ibdyty)  

    Parameters
    ----------
    ibdyty(integer) : index of the mecaMAILx  
    drvdof_indices(integer array) : indices list of driven dof  
    drvdof_values(real array) : values of the driven dof  

    """
    return _lmgc90.mecaMAILx_getDrvVlocy(*args)

def mecaMAILx_computeDrvVlocy(*args):
    """


    Compute the value of the driven velocity of a body a current time.  

    In place replacement in the input array of the new value(s) of the driven
    velocity  

    python usage : mecaMAILx_computeDrvVlocy(ibdyty, values)  

    Parameters
    ----------
    ibdyty(integer) : index of the mecaMAILx  
    values(double array) : numpy array, input old values of imposed velocity, output
        new ones  

    """
    return _lmgc90.mecaMAILx_computeDrvVlocy(*args)

def mecaMAILx_SetVlocyDrivenDof(*args):
    """


    Apply Drv Dof on a given body.  

    python usage : mecaMAILx_SetVlocyDrivenDof(IdBody, f_dof, f_node, f_value)  

    Parameters
    ----------
    IdBody(integer) : id of the concern body  
    f_dof(integer) : dof of the concern node  
    f_node(integer) : node  
    f_value(double) : value of the drvdof  

    """
    return _lmgc90.mecaMAILx_SetVlocyDrivenDof(*args)

def mecaMAILx_ComputeContactDetectionConfiguration(*args):
    """


    compute the contact detection configuration of a list of bodies  

    python usage : mecaMAILx_ComputeContactDetectionConfiguration(i_list)  

    Parameters
    ----------
    i_list(list of integer) : list of bodies to compute contact detection
        configuration if omitted works on all objects  

    """
    return _lmgc90.mecaMAILx_ComputeContactDetectionConfiguration(*args)

def mecaMAILx_NullifyReac(*args):
    """


    set to 0 the reac of the IdBody mecaMAILx  

    python usage : mecaMAILx_NullifyReac(datatype, IdBody)  

    Parameters
    ----------
    datatype(string of size 5) : the vector to set  
    IdBody(integer) : id of the concerned body  

    """
    return _lmgc90.mecaMAILx_NullifyReac(*args)

def mecaMAILx_GetAll(*args):
    """


    return mechanical data computed for idBody  

    python usage : array = mecaMAILx_GetAll(idBody)  

    Parameters
    ----------
    IdBody(integer) : id of the concerned body  

    Returns
    -------
    array (double 2D-array) : mechanical data  

    """
    return _lmgc90.mecaMAILx_GetAll(*args)

def mecaMAILx_GetCooref(*args):
    """


    return node coordinates of idBody  

    python usage : array = mecaMAILx_GetCooref(idBody)  

    Parameters
    ----------
    IdBody(integer) : id of the concerned body  

    Returns
    -------
    array (double 2D-array) : coordinates  

    """
    return _lmgc90.mecaMAILx_GetCooref(*args)

def mecaMAILx_GetConnectivity(*args):
    """


    return connectivity of idBody elements  

    python usage : vector = mecaMAILx_GetConnectivity(idBody)  

    Parameters
    ----------
    IdBody(integer) : id of the concerned body  

    Returns
    -------
    vector (integer) : connectivity  

    """
    return _lmgc90.mecaMAILx_GetConnectivity(*args)

def mecaMAILx_GetElementsVolume(*args):
    """


    return volume of elements  

    python usage : volumes = mecaMAILx_GetElementsVolume(idBody)  

    Parameters
    ----------
    IdBody(integer) : id of the concerned body  

    Returns
    -------
    volumes[nb_ele] (double) : volume  

    """
    return _lmgc90.mecaMAILx_GetElementsVolume(*args)

def mecaMAILx_GetGpCoor(*args):
    """


    return Gauss points coordinates of idBody  

    python usage : array = mecaMAILx_GetGpCoor(idBody)  

    Parameters
    ----------
    IdBody(integer) : id of the concerned body  

    Returns
    -------
    array (double 2D-array) : coordinates of all Gauss points  

    """
    return _lmgc90.mecaMAILx_GetGpCoor(*args)

def mecaMAILx_GetGpStrain(*args):
    """


    return strain values stored at a gp  

    python usage : strain = mecaMAILx_GetGpStrain(idBody,idEle,idGp)  

    Parameters
    ----------
    IdBody(integer) : id of the concerned body  
    IdEle(integer) : id of the concerned element  
    IdGp(integer) : id of the concerned gauss point  

    Returns
    -------
    strain[size] (double) : value of strain  

    """
    return _lmgc90.mecaMAILx_GetGpStrain(*args)

def mecaMAILx_GetGpStress(*args):
    """


    return stress values stored at a gp  

    python usage : stress = mecaMAILx_GetGpStress(idBody,idEle,idGp)  

    Parameters
    ----------
    IdBody(integer) : id of the concerned body  
    IdEle(integer) : id of the concerned element  
    IdGp(integer) : id of the concerned gauss point  

    Returns
    -------
    stress[size] (double) : value of stress  

    """
    return _lmgc90.mecaMAILx_GetGpStress(*args)

def mecaMAILx_GetGpInternals(*args):
    """


    return internal values stored at a gp  

    python usage : internals = mecaMAILx_GetGpInternals(idBody,idEle,idGp)  

    Parameters
    ----------
    IdBody(integer) : id of the concerned body  
    IdEle(integer) : id of the concerned element  
    IdGp(integer) : id of the concerned gauss point  

    Returns
    -------
    internals[nb_internals] (double) : value of internals  

    """
    return _lmgc90.mecaMAILx_GetGpInternals(*args)

def mecaMAILx_GetGpPrincipalField(*args):
    """


    return principal field (strain or stress) at a gp  

    python usage : field = mecaMAILx_GetGpPrincipalField(idBody,idEle,idGp,idField)  

    Parameters
    ----------
    IdBody(integer) : id of the concerned body  
    IdEle(integer) : id of the concerned element  
    IdGp(integer) : id of the concerned gauss point  
    IdField(integer): id of the field (1: strain, 2: stress)  

    Returns
    -------
    field (double array): tensor field with principal values  

    """
    return _lmgc90.mecaMAILx_GetGpPrincipalField(*args)

def mecaMAILx_GetElementsInternal(*args):
    """


    return a value over elements of an internal stored at gp  

    python usage : internals = mecaMAILx_GetElementsInternal(idBody,id,f)  

    Parameters
    ----------
    IdBody(integer) : id of the concerned body  
    Id(integer) : id of the internal  
    f(integer) : flag 1: mean, 2: sum, 3:max, 4: min  

    Returns
    -------
    internals[nb_ele] (double) : value of internal  

    """
    return _lmgc90.mecaMAILx_GetElementsInternal(*args)

def mecaMAILx_GetElementsInternalIntegral(*args):
    """


    return integral over elements of an internal stored at gp  

    python usage : internals = mecaMAILx_GetElementsInternalIntegral(idBody,id)  

    Parameters
    ----------
    IdBody(integer) : id of the concerned body  
    Id(integer) : id of the internal  

    Returns
    -------
    internals[nb_ele] (double) : value of internal  

    """
    return _lmgc90.mecaMAILx_GetElementsInternalIntegral(*args)

def mecaMAILx_GetElementsCenter(*args):
    """


    return center of elements  

    python usage : centers = mecaMAILx_GetElementsCenter(idBody)  

    Parameters
    ----------
    IdBody(integer) : id of the concerned body  

    Returns
    -------
    centers[3*nb_ele] (double) : center  

    """
    return _lmgc90.mecaMAILx_GetElementsCenter(*args)

def mecaMAILx_GetElementsJacobian(*args):
    """


    return jacobian of elements  

    python usage : jacobians = mecaMAILx_GetElementsJacobian(idBody)  

    Parameters
    ----------
    IdBody(integer) : id of the concerned body  

    Returns
    -------
    jacobians[nb_ele] (double) : jacobian  

    """
    return _lmgc90.mecaMAILx_GetElementsJacobian(*args)

def mecaMAILx_ComputeElementsEnergy(*args):
    """


    return energy of elements  

    python usage : mecaMAILx_ComputeElementsEnergy()  

    """
    return _lmgc90.mecaMAILx_ComputeElementsEnergy(*args)

def mecaMAILx_GetPtrElementsEnergy(*args):
    """


    return energy of elements  

    python usage : energies = mecaMAILx_GetElementsEnergy(idBody)  

    Parameters
    ----------
    IdBody(integer) : id of the concerned body  

    Returns
    -------
    energies (double array) : reference on the desired vector seen as a numpy array  

    """
    return _lmgc90.mecaMAILx_GetPtrElementsEnergy(*args)

def mecaMAILx_GetElementsNeighbor(*args):
    """


    return elements in the tol-neighbor of an element of idBody  

    python usage : neighbors = mecaMAILx_GetElementsNeighbor(idBody,tol)  

    Parameters
    ----------
    IdBody(integer) : id of the concerned body  
    tol(double) : tolerance  

    Returns
    -------
    array (double 2D-array) : neighbor[nb_ele,max_neighbors]  

    """
    return _lmgc90.mecaMAILx_GetElementsNeighbor(*args)

def mecaMAILx_GetPtrElementsVisibility(*args):
    """


    Get a pointer on the elements visibility vector.  

    python usage : eviz = mecaMAILx_GetPtrElementsVisibility(ibdyty)  

    Parameters
    ----------
    ibdyty(integer) : rank of the mecaMAILx  

    Returns
    -------
    eviz (int array) : reference on the desired vector seen as a numpy array  

    """
    return _lmgc90.mecaMAILx_GetPtrElementsVisibility(*args)

def mecaMAILx_AddNodalFieldDivergence(*args):
    """


    Add the divergence of a diagonal field to external forces.  

    python usage : mecaMAILx_AddNodalFieldDivergence(ibdyty, ifield)  

    Parameters
    ----------
    ibdyty(integer) : rank of body  
    ifield(integer) : rank of field  

    """
    return _lmgc90.mecaMAILx_AddNodalFieldDivergence(*args)

def mecaMAILx_CleanMemory(*args):
    """


    Free all memory allocated within mecaMAILx module.  

    python usage : mecaMAILx_CleanMemory()  

    """
    return _lmgc90.mecaMAILx_CleanMemory(*args)

def mecaMAILx_ComputeInfoPrincipalStressField(*args):
    """


    Get info on the principal stress field: min,mean,max.  

    Python usage : info = mecaMAILx_ComputeInfoPrincipalStressField(ibdyty)  

    Parameters
    ----------
    ibdyty(integer) : rank of considered body  

    Returns
    -------
    info (double array) : the desired info  

    """
    return _lmgc90.mecaMAILx_ComputeInfoPrincipalStressField(*args)

def mecaMAILx_ComputePDFPressure(*args):
    """


    Get pdf on the pressure.  

    Python usage : pdf = mecaMAILx_ComputePDFPressure()  

    Returns
    -------
    pdf (double array) : the desired info  

    """
    return _lmgc90.mecaMAILx_ComputePDFPressure(*args)

def mecaMAILx_GetDeformationEnergy(*args):
    """


    Get the deformation energy of a given displacement field.  

    python usage : energy = mecaMAILx_GetDeformationEnergy(id,displacement)  

    Parameters
    ----------
    ibdyty(integer) : rank of considered body  
    displacement(double vector) : displacement field  

    Returns
    -------
    energy (double) : deformation energy  

    """
    return _lmgc90.mecaMAILx_GetDeformationEnergy(*args)

def mecaMAILx_GetKineticEnergy(*args):
    """


    Get the kinetic energy of a given velocity field.  

    python usage : energy = mecaMAILx_GetKineticEnergy(id,velocity)  

    Parameters
    ----------
    ibdyty(integer) : rank of considered body  
    velocity(double vector) : velocity field  

    Returns
    -------
    energy (double) : kinetic energy  

    """
    return _lmgc90.mecaMAILx_GetKineticEnergy(*args)

def mecaMAILx_GetNeighborElementsToElement(*args):
    """


    return neighbor elements to element idEle of body idBody  

    python usage : vector = mecaMAILx_GetNeighborElementsToElement(idBody,idEle)  

    Parameters
    ----------
    IdBody(integer) : id of the concerned body  
    IdEle(integer) : id of the concerned element  

    Returns
    -------
    vector (integer) : list of elements  

    """
    return _lmgc90.mecaMAILx_GetNeighborElementsToElement(*args)

def mecaMAILx_GetNeighborElementsToNode(*args):
    """


    return neighbor elements to node idNode of body idBody  

    python usage : vector = mecaMAILx_GetNeighborElementsToNode(idBody,idNode)  

    Parameters
    ----------
    IdBody(integer) : id of the concerned body  
    IdNode(integer) : id of the concerned node  

    Returns
    -------
    vector (integer) : list of elements  

    """
    return _lmgc90.mecaMAILx_GetNeighborElementsToNode(*args)

def mecaMAILx_GetBoundaryElements(*args):
    """


    return boundary elements  

    python usage : vector = mecaMAILx_GetBoundaryElements(idBody)  

    Parameters
    ----------
    IdBody(integer) : id of the concerned body  

    Returns
    -------
    vector (integer) : for each element =0 no boundary, otherwise gives the number
    of free edge/face  

    """
    return _lmgc90.mecaMAILx_GetBoundaryElements(*args)

def mecaMAILx_LoadWPreconBody(*args):
    """


    load the precomputed W matrix on support node dofs of contactors for one body.
    Assumes bulk behaviour is linear.  

    python usage : mecaMAILx_LoadWPreconBody(ivalue)  

    Parameters
    ----------
    ivalue(integer) : id of body to set precon  

    """
    return _lmgc90.mecaMAILx_LoadWPreconBody(*args)

def mecaMAILx_GetPtrPreconW(*args):
    """


    Get a pointer on the preconW Matrix of a given body.  

    python usage : pcW = mecaMAILx_GetPtrPreconW(ibdyty)  

    Parameters
    ----------
    ibdyty(integer) : rank of the mecaMAILx  

    Returns
    -------
    pcW (double array) : reference on the desired vector seen as a numpy array  

    """
    return _lmgc90.mecaMAILx_GetPtrPreconW(*args)

def mecaMAILx_GetInternalVariable(*args):
    """


    Get a copy of the internal variable of a given body.  

    Python usage : internal = mecaMAILx_GetInternalVariable(ibdyty)  

    Parameters
    ----------
    ibdyty(integer) : rank of considered body  

    Returns
    -------
    internal (double array) : internal variable of desired body  

    """
    return _lmgc90.mecaMAILx_GetInternalVariable(*args)

def mecaMAILx_GetNbInternal(*args):
    """


    Get the number of internal variable of a given body.  

    python usage : nb_internal = mecaMAILx_GetNbInternal(ibdyty)  

    Parameters
    ----------
    ivalue(integer) : rank of the body  

    Returns
    -------
    nb_internal (integer) : number of internal variable of a body  

    """
    return _lmgc90.mecaMAILx_GetNbInternal(*args)

def mecaMAILx_GetPtrBodyVector(*args):
    """


    return pointer on body vector cvalue1_c of body IdBody  

    Reac and Raux are impulsions (and not forces)  

    python usage : vector_ptr = mecaMAILx_GetPtrBodyVector( cvalue1_c, IdBody )  

    Parameters
    ----------
    cvalue1_c(string of size 5) : name of the body vector  
    IdBody(integer) : id of the body  

    Returns
    -------
    vector_ptr (double array) : reference on the desired body vector  

    """
    return _lmgc90.mecaMAILx_GetPtrBodyVector(*args)

def mecaMAILx_GetDofStatus(*args):
    """


    Get the status of nodes: 0 free, 1 x, 10 y.  

    Python usage : vector = mecaMAILx_GetDofStatus(ibdyty)  

    Parameters
    ----------
    ibdyty(integer) : rank of considered body  

    Returns
    -------
    vector (double 2D-array) : the desired data  

    """
    return _lmgc90.mecaMAILx_GetDofStatus(*args)

def mecaMAILx_PrepGlobalSolver(*args):
    """


    computes free velocity of a list of bodies  

    python usage : mecaMAILx_PrepGlobalSolver(i_list)  

    Parameters
    ----------
    i_list(list of integer) : list of bodies to compute free velocity if omitted works
        on all objects  

    """
    return _lmgc90.mecaMAILx_PrepGlobalSolver(*args)

def mecaMAILx_PostGlobalSolver(*args):
    """


    computes the current d.o.f knowing all the forces (free + contact) of a list of
    bodies  

    python usage : mecaMAILx_PostGlobalSolver(i_list)  

    Parameters
    ----------
    i_list(list of integer) : list of bodies to compute current d.o.f if omitted works
        on all objects  

    """
    return _lmgc90.mecaMAILx_PostGlobalSolver(*args)

def mecaMAILx_AddBodyForceToFext(*args):
    """


    Add a body force (M*gamma) to Fext for a given body.  

    python usage : mecaMAILx_AddBodyForceToFext(ibdyty, matrix)  

    Parameters
    ----------
    ibdyty(integer) : rank of body  
    matrix(double array) : the new value  

    """
    return _lmgc90.mecaMAILx_AddBodyForceToFext(*args)

def mecaMAILx_CheckProperties(*args):
    """


    check if model and material are matching ; set material parameter if external
    model  

    python usage : mecaMAILx_CheckProperties()  

    """
    return _lmgc90.mecaMAILx_CheckProperties(*args)

def mecaMAILx_GetNbGpByElem(*args):
    """


    Get the list of finite elements for MECAx models and the associated number of
    Gauss Points.  

    Here memory is allocated within lmgc90 so that the pointer can be freely
    modified by third parties without nasty effect on lmgc90 functioning.  

    python usage : names, nb_gps = mecaMAILx_GetNbGpByElem()  

    Returns
    -------
    names (string list) : list of the finite elements nb_gps (integer list): list of
    the number of Gauss Points  

    """
    return _lmgc90.mecaMAILx_GetNbGpByElem(*args)

def mecaMAILx_MassScaling(*args):
    """


    set mass scaling (default 1.d0)  

    python usage : mecaMAILx_MassScaling(scale)  

    Parameters
    ----------
    scale(double) : scaling  

    """
    return _lmgc90.mecaMAILx_MassScaling(*args)

def mecaMAILx_GetGpAllJoint(*args):
    """


    return GP value for joints  

    python usage : vec = mecaMAILx_GetGpAllJoint()  

    Returns
    -------
    vec (float matrix) : value at GP  

    """
    return _lmgc90.mecaMAILx_GetGpAllJoint(*args)

def mecaMAILx_SetVisibleVlocyDrivenDof(*args):
    """


    allows to (re)activate a given vlocydrivendof (i.e. which has been declared in
    preprocessing)  

    python usage : mecaMAILx_SetVisibleVlocyDrivenDof(ibdyty, inod, idof)  

    Parameters
    ----------
    ibdyty(integer): index of the mecaMAILx  
    inod(integer): index of the node to set visible  
    idof(integer): index of the dof of the node to set visible  

    """
    return _lmgc90.mecaMAILx_SetVisibleVlocyDrivenDof(*args)

def mecaMAILx_SetInvisibleVlocyDrivenDof(*args):
    """


    allows to deactivate a given vlocydrivendof (i.e. which has been declared in
    preprocessing)  

    python usage : mecaMAILx_SetInvisibleVlocyDrivenDof(ibdyty, inod, idof)  

    Parameters
    ----------
    ibdyty(integer): index of the mecaMAILx  
    inod(integer): index of the node to set invisible  
    idof(integer): index of the dof of the node to set invisible  

    """
    return _lmgc90.mecaMAILx_SetInvisibleVlocyDrivenDof(*args)

def mecaMAILx_UpdateVlocyDrivenDofStructures(*args):
    """


    takes into account modifications on Vlocy driven dof status  

    python usage : mecaMAILx_UpdateVlocyDrivenDofStructures(ibdyty)  

    Parameters
    ----------
    ibdyty(integer): index of the mecaMAILx  

    """
    return _lmgc90.mecaMAILx_UpdateVlocyDrivenDofStructures(*args)

def therMAILx_GetNbTherMAILx(*args):
    """


    Get the number of therMAILx.  

    python usage : nb_therMAILx = therMAILx_GetNbTherMAILx()  

    Returns
    -------
    nb_therMAILx (integer) : number of therMAILx  

    """
    return _lmgc90.therMAILx_GetNbTherMAILx(*args)

def therMAILx_GetNbNodes(*args):
    """


    Get the number of nodes of a therMAILx.  

    python usage : nb_nodes = therMAILx_GetNbNodes(ibdyty)  

    Parameters
    ----------
    ivalue(integer) : id of the therMAILx  

    Returns
    -------
    nb_nodes (integer) : number of nodes of a therMAILx  

    """
    return _lmgc90.therMAILx_GetNbNodes(*args)

def therMAILx_GetNbElements(*args):
    """


    Get the number of nodes of a therMAILx.  

    python usage : nb_nodes = therMAILx_GetNbElements(ibdyty)  

    Parameters
    ----------
    ivalue(integer) : id of the therMAILx  

    Returns
    -------
    nb_nodes (integer) : number of nodes of a therMAILx  

    """
    return _lmgc90.therMAILx_GetNbElements(*args)

def therMAILx_GetNbDofs(*args):
    """


    Get the number of dofs for the therMAILX.  

    python usage : nb_dofs = therMAILx_GetNbDofs(int ibdyty)  

    Returns
    -------
    nb_dofs (integer) : number of dofs of the body for the model  

    """
    return _lmgc90.therMAILx_GetNbDofs(*args)

def therMAILx_IncrementStep(*args):
    """


    initializes current dof  

    python usage : therMAILx_IncrementStep()  

    """
    return _lmgc90.therMAILx_IncrementStep(*args)

def therMAILx_ComputeConductivity(*args):
    """


    computes the elementary conductivity matrices of a list of bodies  

    If the input list is empty, the conductivities of all bodies will be computed  

    python usage : therMAILx_ComputeConductivity(i_list)  

    Parameters
    ----------
    i_list(list of integer) : list of bodies to compute conductivities if omitted
        works on all objects  

    """
    return _lmgc90.therMAILx_ComputeConductivity(*args)

def therMAILx_ComputeCapacity(*args):
    """


    computes the elemetary capacity matrices  

    python usage : therMAILx_ComputeCapacity(i_list)  

    Parameters
    ----------
    i_list(list of integer) : list of bodies to compute conductivities if omitted
        works on all objects  

    """
    return _lmgc90.therMAILx_ComputeCapacity(*args)

def therMAILx_ComputeConvection(*args):
    """


    compute elementary convection terms  

    python usage : therMAILx_ComputeConvection(i_list)  

    Parameters
    ----------
    i_list(list of integer) : list of bodies to compute conductivities if omitted
        works on all objects  

    """
    return _lmgc90.therMAILx_ComputeConvection(*args)

def therMAILx_ComputeInternalFlux(*args):
    """


    compute elementary internal flux  

    python usage : therMAILx_ComputeInternalFlux(i_list)  

    Parameters
    ----------
    i_list(list of integer) : list of bodies to compute conductivities if omitted
        works on all objects  

    """
    return _lmgc90.therMAILx_ComputeInternalFlux(*args)

def therMAILx_ComputeExternalFlux(*args):
    """


    compute elementary external flux  

    python usage : therMAILx_ComputeExternalFlux(i_list)  

    Parameters
    ----------
    i_list(list of integer) : list of bodies to compute conductivities if omitted
        works on all objects  

    """
    return _lmgc90.therMAILx_ComputeExternalFlux(*args)

def therMAILx_AssembThermKT(*args):
    """


    assembles elementary matrices  

    python usage : therMAILx_AssembKT(i_list)  

    Parameters
    ----------
    i_list(list of integer) : list of bodies to compute conductivities if omitted
        works on all objects  

    """
    return _lmgc90.therMAILx_AssembThermKT(*args)

def therMAILx_AssembThermRHS(*args):
    """


    assembles elementary vectors  

    python usage : therMAILx_AssembRHS(i_list)  

    Parameters
    ----------
    i_list(list of integer) : list of bodies to compute conductivities if omitted
        works on all objects  

    """
    return _lmgc90.therMAILx_AssembThermRHS(*args)

def therMAILx_ComputeThermDof(*args):
    """


    computes current dof  

    python usage : therMAILx_ComputeThermDof(i_list)  

    Parameters
    ----------
    i_list(list of integer) : list of bodies to compute conductivities if omitted
        works on all objects  

    """
    return _lmgc90.therMAILx_ComputeThermDof(*args)

def therMAILx_ComputeThermFields(*args):
    """


    computes elementary fields  

    python usage : therMAILx_ComputeThermFields(i_list)  

    Parameters
    ----------
    i_list(list of integer) : list of bodies to compute conductivities if omitted
        works on all objects  

    """
    return _lmgc90.therMAILx_ComputeThermFields(*args)

def therMAILx_UpdateThermDof(*args):
    """


    update begin dof with current dof  

    python usage : therMAILx_UpdateThermDof(i_list)  

    Parameters
    ----------
    i_list(list of integer) : list of bodies to compute conductivities if omitted
        works on all objects  

    """
    return _lmgc90.therMAILx_UpdateThermDof(*args)

def therMAILx_UpdateThermBulk(*args):
    """


    update begin elementary fields with current elementary fields  

    python usage : therMAILx_UpdateThermBulk(i_list)  

    Parameters
    ----------
    i_list(list of integer) : list of bodies to compute conductivities if omitted
        works on all objects  

    """
    return _lmgc90.therMAILx_UpdateThermBulk(*args)

def therMAILx_ComputeResidueNorm(*args):
    """


    compute the residue of the thermal equation  

    python usage : norm = therMAILx_ComputeResidueNorm(i_list)  

    Parameters
    ----------
    i_list(list of integer) : list of bodies to compute conductivities if omitted
        works on all objects  

    Returns
    -------
    norm (double) : value of the norm  

    """
    return _lmgc90.therMAILx_ComputeResidueNorm(*args)

def therMAILx_ReadDrivenDof(*args):
    """


    Read DRV_DOF.DAT.  

    python usage : therMAILx_ReadDrivenDof()  

    """
    return _lmgc90.therMAILx_ReadDrivenDof(*args)

def therMAILx_WriteDrivenDof(*args):
    """


    Write DRV_DOF.OUT.  

    python usage : therMAILx_WriteDrivenDof()  

    """
    return _lmgc90.therMAILx_WriteDrivenDof(*args)

def therMAILx_LoadModels(*args):
    """


    loads models frol models module  

    python usage : therMAILx_LoadModels()  

    """
    return _lmgc90.therMAILx_LoadModels(*args)

def therMAILx_LoadBehaviours(*args):
    """


    loads bulk behaviors parameters from bulk_behav module  

    python usage : therMAILx_LoadBehaviours()  

    """
    return _lmgc90.therMAILx_LoadBehaviours(*args)

def therMAILx_ReadIniDof(*args):
    """


    Read DOF file.  

    If num <= 0 : DATBOX/DOF.INI file is read Else : OUTBOX/DOF.OUT.num is read, num
    being the parameter used in TimeEvolution_ReadIniDof last call  

    python usage : therMAILx_ReadIniDof(num=0)  

    Parameters
    ----------
    num(integer) : which DOF file to read  

    """
    return _lmgc90.therMAILx_ReadIniDof(*args)

def therMAILx_ReadIniGPV(*args):
    """


    Read GPV file.  

    If num <= 0 : DATBOX/GPV.INI file is read  

    Else : OUTBOX/GPV.OUT.num is read, num being the parameter used in
    TimeEvolution_ReadIniGPV last call  

    python usage : therMAILx_ReadIniGPV(num=0)  

    Parameters
    ----------
    num(integer) : which GPV file to read  

    """
    return _lmgc90.therMAILx_ReadIniGPV(*args)

def therMAILx_WriteLastDof(*args):
    """


    Write ascii DOF.LAST file.  

    python usage : therMAILx_WriteLastDof()  

    """
    return _lmgc90.therMAILx_WriteLastDof(*args)

def therMAILx_WriteOutDof(*args):
    """


    Write ascii DOF.OUT file. Can be activate only each N step.  

    python usage : therMAILx_WriteOutDof()  

    """
    return _lmgc90.therMAILx_WriteOutDof(*args)

def therMAILx_DisplayOutDof(*args):
    """


    Display body degrees of freedom.  

    python usage : therMAILx_DisplayOutDof()  

    """
    return _lmgc90.therMAILx_DisplayOutDof(*args)

def therMAILx_PutBodyVector(*args):
    """


    Set a vector of a given body.  

    Possible values for datatype field are:  

    *   "T____": Temperature in computed configuration  
    *   "Tbeg_": Temperature at beginning of time step  
    *   "Taux_": Temperature in working array  
    *   "Fext_": external flux  
    *   "Fint_": internal flux  

    Uses copy  

    python usage : therMAILx_PutBodyVector(datatype, ibdyty, matrix)  

    Parameters
    ----------
    datatype(string of size 5) : the vector to set  
    ibdyty(integer) : rank of body  
    matrix(double array) : the new values  

    """
    return _lmgc90.therMAILx_PutBodyVector(*args)

def therMAILx_GetBodyVector(*args):
    """


    Get a copy of a vector of a given body.  

    Possible values for datatype field are:  

    *   "Coor0": reference coordinates  
    *   "T____": Temperature in computed configuration  
    *   "Tbeg_": Temperature at beginning of time step  
    *   "Taux_": Temperature in working array  
    *   "Fext_": external flux  
    *   "Fint_": internal flux  

    Uses copy  

    python usage : vector = therMAILx_GetBodyVector(datatype, ibdyty)  

    Parameters
    ----------
    datatype(string of size 5) : the vector to get  
    ibdyty(integer) : rank of considered body  

    Returns
    -------
    vector (double 2D-array) : the desired vector  

    """
    return _lmgc90.therMAILx_GetBodyVector(*args)

def therMAILx_GetScalarFieldRank(*args):
    """


    Get the rank of field of an element of a body from its name.  

    python usage : f_rank = therMAILx_GetScalarFieldRank(ibdyty, iblmty, name)  

    Parameters
    ----------
    ibdyty(integer) : id of the concern body  
    iblmty(integer) : id of the concern element  
    name(string) : name of the desired field  

    Returns
    -------
    f_rank (integer) : rank of the corresponding field  

    """
    return _lmgc90.therMAILx_GetScalarFieldRank(*args)

def therMAILx_SetScalarFieldByNode(*args):
    """


    Update an external field on a given body.  

    You need to set this field in your models.dat  

    python usage : therMAILx_SetScalarFieldByNode(IdBody, f_rank, f)  

    Parameters
    ----------
    IdBody(integer) : id of the concern body  
    f_rank(integer) : rank of the field to set  
    f(double array) : value of the field  

    """
    return _lmgc90.therMAILx_SetScalarFieldByNode(*args)

def therMAILx_SetScalarFieldByElement(*args):
    """


    Update elementary scalar field through a element external field on a given body.  

    Field values are stored at Gauss point, on an element all Gauss point have the
    element value  

    You need to declare this field in your MODELS.DAT  

    python usage : therMAILx_SetScalarFieldByElement(IdBody, f_rank, f)  

    Parameters
    ----------
    IdBody(integer) : id of the concern body  
    f_rank(integer) : rank of the field to set  
    f(double array) : value of the field  

    """
    return _lmgc90.therMAILx_SetScalarFieldByElement(*args)

def therMAILx_GetVectorFieldRank(*args):
    """


    Get the rank of field of an element of a body from its name.  

    python usage : f_rank = therMAILx_GetVectorFieldRank(ibdyty, iblmty, name)  

    Parameters
    ----------
    ibdyty(integer) : id of the concern body  
    iblmty(integer) : id of the concern element  
    name(string) : name of the desired vector field  

    Returns
    -------
    f_rank (integer) : rank of the corresponding vector field  

    """
    return _lmgc90.therMAILx_GetVectorFieldRank(*args)

def therMAILx_SetVectorFieldByNode(*args):
    """


    Update elementary fields through a nodal external field on a given body.  

    Use the form functions of the elements and input values to compute and store
    field values at Gauss points.  

    You need to declare this field in your MODELS.DAT  

    python usage : therMAILx_SetFieldByNode(IdBody, f_rank, f)  

    Parameters
    ----------
    IdBody(integer) : id of the concern body  
    f_rank(integer) : rank of the vector field to set  
    f(double array) : value of the vector field  

    """
    return _lmgc90.therMAILx_SetVectorFieldByNode(*args)

def therMAILx_SetVectorFieldByElement(*args):
    """


    Update elementary fields through a nodal external field on a given body.  

    Use the form functions of the elements and input values to compute and store
    field values at Gauss points.  

    You need to declare this field in your MODELS.DAT  

    python usage : therMAILx_SetFieldByElement(IdBody, f_rank, f)  

    Parameters
    ----------
    IdBody(integer) : id of the concern body  
    f_rank(integer) : rank of the vector field to set  
    f(double array) : value of the vector field  

    """
    return _lmgc90.therMAILx_SetVectorFieldByElement(*args)

def therMAILx_AddSource(*args):
    """


    Add a volumic source into a given body.  

    python usage : therMAILx_AddSource(ibdyty, ifield)  

    Parameters
    ----------
    ibdyty(integer) : rank of body  
    ifield(integer) : rank of field  

    """
    return _lmgc90.therMAILx_AddSource(*args)

def therMAILx_AddNodalFieldDivergence(*args):
    """


    Add the divergence of a field to external flux.  

    python usage : therMAILx_AddNodalFieldDivergence(ibdyty, ifield)  

    Parameters
    ----------
    ibdyty(integer) : rank of body  
    ifield(integer) : rank of field  

    """
    return _lmgc90.therMAILx_AddNodalFieldDivergence(*args)

def therMAILx_PushProperties(*args):
    """


    declares to module model the couples (model,behavior) used  

    python usage : therMAILx_PushProperties()  

    """
    return _lmgc90.therMAILx_PushProperties(*args)

def therMAILx_WithoutRenumbering(*args):
    """


    skip renumbering of the unknowns using a rcc method  

    python usage : therMAILx_WithoutRenumbering()  

    """
    return _lmgc90.therMAILx_WithoutRenumbering(*args)

def therMAILx_BandStorage(*args):
    """


    use band matrix  

    python usage : therMAILx_BandStorage()  

    """
    return _lmgc90.therMAILx_BandStorage(*args)

def therMAILx_SparseStorage(*args):
    """


    use sparse matrix  

    python usage : therMAILx_SparseStorage()  

    """
    return _lmgc90.therMAILx_SparseStorage(*args)

def therMAILx_ExplodedStorage(*args):
    """


    use element by element matrix  

    python usage : therMAILx_ExplodedStorage()  

    """
    return _lmgc90.therMAILx_ExplodedStorage(*args)

def therMAILx_DiagonalStorage(*args):
    """


    use diagonal matrix  

    python usage : therMAILx_DiagonalStorage()  

    """
    return _lmgc90.therMAILx_DiagonalStorage(*args)

def therMAILx_SkylineStorage(*args):
    """


    use skyline matrix  

    python usage : therMAILx_SkylineStorage()  

    """
    return _lmgc90.therMAILx_SkylineStorage(*args)

def therMAILx_FullStorage(*args):
    """


    use full matrix  

    python usage : therMAILx_FullStorage()  

    """
    return _lmgc90.therMAILx_FullStorage(*args)

def therMAILx_SymmetricShape(*args):
    """


    assume matrix is symmetrical  

    python usage : therMAILx_SymmetricShape()  

    """
    return _lmgc90.therMAILx_SymmetricShape(*args)

def therMAILx_UnspecifiedShape(*args):
    """


    does not assume any thing on matrix shape  

    python usage : therMAILx_UnspecifiedShape()  

    """
    return _lmgc90.therMAILx_UnspecifiedShape(*args)

def therMAILx_GetGrad(*args):
    """


    Get a copy of a gradient of a given body.  

    Python usage : grad_T = therMAILx_GetGrad(ibdyty)  

    Parameters
    ----------
    ibdyty(integer) : rank of considered body  

    Returns
    -------
    grad_T (double 2D-array) : the desired gradient  

    """
    return _lmgc90.therMAILx_GetGrad(*args)

def therMAILx_GetFlux(*args):
    """


    Get a copy of a gradient of a given body.  

    Python usage : Flux_T = therMAILx_GetFlux(ibdyty)  

    Parameters
    ----------
    ibdyty(integer) : rank of considered body  

    Returns
    -------
    Flux_T (double array) : the desired flux  

    """
    return _lmgc90.therMAILx_GetFlux(*args)

def therMAILx_InitializeElementaryFlux(*args):
    """


    set elementary flux to 0  

    python usage : therMAILx_InitializeElementaryFlux()  

    """
    return _lmgc90.therMAILx_InitializeElementaryFlux(*args)

def therMAILx_GetCoor(*args):
    """


    return node coordinates of idBody  

    python usage : array = therMAILx_GetCoor(idBody)  

    Parameters
    ----------
    IdBody(integer) : id of the concerned body  

    Returns
    -------
    array (double 2D-array) : coordinates  

    """
    return _lmgc90.therMAILx_GetCoor(*args)

def therMAILx_GetConnectivity(*args):
    """


    return connectivity of idBody elements  

    python usage : vector = therMAILx_GetConnectivity(idBody)  

    Parameters
    ----------
    IdBody(integer) : id of the concerned body  

    Returns
    -------
    vector (integer) : connectivity  

    """
    return _lmgc90.therMAILx_GetConnectivity(*args)

def therMAILx_GetAll(*args):
    """


    return mechanical data computed for idBody  

    python usage : array = therMAILx_GetAll(idBody)  

    Parameters
    ----------
    IdBody(integer) : id of the concerned body  

    Returns
    -------
    array (double 2D-array) : mechanical data  

    """
    return _lmgc90.therMAILx_GetAll(*args)

def therMAILx_GetGpCoor(*args):
    """


    return Gauss points coordinates of idBody  

    python usage : array = therMAILx_GetGpCoor(idBody)  

    Parameters
    ----------
    IdBody(integer) : id of the concerned body  

    Returns
    -------
    array (double 2D-array) : coordinates of all Gauss points  

    """
    return _lmgc90.therMAILx_GetGpCoor(*args)

def therMAILx_GetGpField(*args):
    """


    return field values stored at a gp  

    python usage : field = therMAILx_GetGpField(idBody,idEle,idGp,idField)  

    Parameters
    ----------
    IdBody(integer) : id of the concerned body  
    IdEle(integer) : id of the concerned element  
    IdGp(integer) : id of the concerned gauss point  
    IdField(integer) : id of the concerned field  

    Returns
    -------
    field (double array) : field value  

    """
    return _lmgc90.therMAILx_GetGpField(*args)

def therMAILx_TrialAssembThermKT(*args):
    """


    [experimental] assembles elementary matrices  

    python usage : therMAILx_AssembThermKT()  

    """
    return _lmgc90.therMAILx_TrialAssembThermKT(*args)

def therMAILx_TrialAssembThermRHS(*args):
    """


    [experimental] assembles elementary vectors  

    python usage : therMAILx_AssembThermRHS()  

    """
    return _lmgc90.therMAILx_TrialAssembThermRHS(*args)

def therMAILx_CleanMemory(*args):
    """


    Free all memory allocated within therMAILx module.  

    python usage : therMAILx_CleanMemory()  

    """
    return _lmgc90.therMAILx_CleanMemory(*args)

def therMAILx_CheckProperties(*args):
    """


    check if model and material are matching ; set material parameter if external
    model  

    python usage : therMAILx_CheckProperties()  

    """
    return _lmgc90.therMAILx_CheckProperties(*args)

def therMAILx_GetNbGpByElem(*args):
    """


    Get the list of finite elements for therx models and the associated number of
    Gauss Points.  

    Here memory is allocated within lmgc90 so that the pointer can be freely
    modified by third parties without nasty effect on lmgc90 functioning.  

    python usage : names, nb_gps = therMAILx_GetNbGpByElem()  

    Returns
    -------
    names (string list) : list of the finite elements nb_gps (integer list): list of
    the number of Gauss Points  

    """
    return _lmgc90.therMAILx_GetNbGpByElem(*args)

def therMAILx_GetNbGp(*args):
    """


    Get the number of Gauss points of an element of a therMAILx.  

    python usage : nb_gp = therMAILx_GetNbElements(ibdyty, iblmty)  

    Parameters
    ----------
    ibdyty(integer) : id of the therMAILx  
    iblmty(integer) : id of the element  

    Returns
    -------
    nb_gp (integer) : number of Gauss point of an element of a therMAILx  

    """
    return _lmgc90.therMAILx_GetNbGp(*args)

def poroMAILx_LoadModels(*args):
    """


    load from MAILx and models  

    python usage : poroMAILx_LoadModels()  

    """
    return _lmgc90.poroMAILx_LoadModels(*args)

def poroMAILx_LoadBehaviours(*args):
    """


    load from bulk_behav  

    python usage : pordMAILx_LoadBehaviours()  

    """
    return _lmgc90.poroMAILx_LoadBehaviours(*args)

def poroMAILx_PushProperties(*args):
    """


    declares to models couple (model,behav)  

    python usage : poroMAILx_PushProperties()  

    """
    return _lmgc90.poroMAILx_PushProperties(*args)

def poroMAILx_ReadDrivenDof(*args):
    """


    Read DRV_DOF.DAT.  

    python usage : poroMAILx_ReadDrivenDof()  

    """
    return _lmgc90.poroMAILx_ReadDrivenDof(*args)

def poroMAILx_WriteDrivenDof(*args):
    """


    Write DRV_DOF.OUT.  

    python usage : poroMAILx_WriteDrivenDof()  

    """
    return _lmgc90.poroMAILx_WriteDrivenDof(*args)

def poroMAILx_ReadIniDof(*args):
    """


    Read DOF.INI.  

    If num <= 0 : DATBOX/DOF.INI file is read  

    Else : OUTBOX/DOF.OUT.num is read, num being the parameter used in
    TimeEvolution_ReadIniDof last call  

    python usage : poroMAILx_ReadIniDof(num=0)  

    Parameters
    ----------
    num(integer) : which DOF file to read  

    """
    return _lmgc90.poroMAILx_ReadIniDof(*args)

def poroMAILx_ReadIniMecaDof(*args):
    """


    Read DOF file.  

    If num <= 0 : DATBOX/DOF.INI file is read  

    Else : OUTBOX/DOF.OUT.num is read, num being the parameter used in
    TimeEvolution_ReadIniMecaDof last call  

    python usage : poroMAILx_ReadIniMecaDof(num=0)  

    Parameters
    ----------
    num(integer) : which DOF file to read  

    """
    return _lmgc90.poroMAILx_ReadIniMecaDof(*args)

def poroMAILx_ReadIniGPV(*args):
    """


    Read GPV file.  

    If num <= 0 : DATBOX/GPV.INI file is read  

    Else : OUTBOX/GPV.OUT.num is read, num being the parameter used in
    TimeEvolution_ReadIniGPV last call  

    python usage : poroMAILx_ReadIniGPV(num=0)  

    Parameters
    ----------
    num(integer) : which GPV file to read  

    """
    return _lmgc90.poroMAILx_ReadIniGPV(*args)

def poroMAILx_ReadIniMecaGPV(*args):
    """


    Read GPV file.  

    If num <= 0 : DATBOX/GPV.INI file is read Else : OUTBOX/GPV.OUT.num is read, num
    being the parameter used in TimeEvolution_ReadIniMecaGPV last call  

    python usage : poroMAILx_ReadIniMecaGPV(num=0)  

    Parameters
    ----------
    num(integer) : which GPV file to read  

    """
    return _lmgc90.poroMAILx_ReadIniMecaGPV(*args)

def poroMAILx_WriteLastDof(*args):
    """


    Write ascii DOF.LAST file.  

    python usage : poroMAILx_WriteLastDof()  

    """
    return _lmgc90.poroMAILx_WriteLastDof(*args)

def poroMAILx_ComputeMass(*args):
    """


    compute elementary mass and inertia of bodies  

    python usage : poroMAILx_ComputeMass()  

    """
    return _lmgc90.poroMAILx_ComputeMass(*args)

def poroMAILx_ComputeFext(*args):
    """


    compute elementary external forces  

    python usage : poroMAILx_ComputeFext()  

    """
    return _lmgc90.poroMAILx_ComputeFext(*args)

def poroMAILx_ComputeBulk(*args):
    """


    compute elementary stiffness  

    python usage : poroMAILx_ComputeBulk()  

    """
    return _lmgc90.poroMAILx_ComputeBulk(*args)

def poroMAILx_ComputeDamping(*args):
    """


    compute elemenatry damping  

    python usage : poroMAILx_ComputeDamping()  

    """
    return _lmgc90.poroMAILx_ComputeDamping(*args)

def poroMAILx_AssembKT(*args):
    """


    assembles matrice  

    python usage : poroMAILx_AssembKT()  

    """
    return _lmgc90.poroMAILx_AssembKT(*args)

def poroMAILx_AssembRHS(*args):
    """


    assembles RHS  

    python usage : poroMAILx_AssembRHS()  

    """
    return _lmgc90.poroMAILx_AssembRHS(*args)

def poroMAILx_ComputeFreeVelocity(*args):
    """


    computes free motion (without contact contribution)  

    python usage : poroMAILx_ComputeFreeVelocity()  

    """
    return _lmgc90.poroMAILx_ComputeFreeVelocity(*args)

def poroMAILx_ComputeDof(*args):
    """


    computes motion (free + contact)  

    python usage : poroMAILx_ComputeDof()  

    """
    return _lmgc90.poroMAILx_ComputeDof(*args)

def poroMAILx_DisplayOutDof(*args):
    """


    Display body degrees of freedom.  

    python usage : poroMAILx_DisplayOutDof()  

    """
    return _lmgc90.poroMAILx_DisplayOutDof(*args)

def poroMAILx_UpdateDof(*args):
    """


    update begin dof with current dof  

    python usage : poroMAILx_UpdateDof()  

    """
    return _lmgc90.poroMAILx_UpdateDof(*args)

def poroMAILx_UpdateBulk(*args):
    """


    update begin elementary fields with current elementary fields  

    python usage : poroMAILx_UpdateBulk(void)  

    """
    return _lmgc90.poroMAILx_UpdateBulk(*args)

def poroMAILx_ComputeGrad(*args):
    """


    apply elementary fields gradient  

    python usage : poroMAILx_ComputeGrad(void)  

    """
    return _lmgc90.poroMAILx_ComputeGrad(*args)

def poroMAILx_GetBodyVector(*args):
    """


    Get a copy of a vector of a given body.  

    *   "Xbeg_": cumulated displacements over time at beginning of time step  
    *   "X____": cumulated displacements over time in computed configuration  
    *   "Vbeg_": velocity at beginning of time step  
    *   "V____": velocity in computed configuration  
    *   "VbALE": fluid velocity at beginning of time step  
    *   "V_ALE": fluid velocity at beginning of time step  
    *   "Vaux_": working array for velocity  
    *   "Vfree": velocity free of contacts  
    *   "Reac_": contact reaction force  
    *   "Fext_": external forces  
    *   "Fint_": internal forces  
    *   "Pbeg_": pressure at beginning of time step  
    *   "P____": pressure in computed configuration  
    *   "Qext_": external fluxes  
    *   "Qint_": internal luxces  
    *   "NodId":  

    Possible values for datatype field are "X____", "Xbeg_", "V____",
    "Vbeg_", "Vaux_", "Reac_", "Vfree", "Fext_", "Fint_"  

    Python usage : vector = poroMAILx_GetBodyVector(datatype, ibdyty)  

    Parameters
    ----------
    datatype(string of size 5) : the vector to get  
    ibdyty(integer) : rank of considered body  

    Returns
    -------
    vector (double 2D-array) : the desired vector  

    """
    return _lmgc90.poroMAILx_GetBodyVector(*args)

def poroMAILx_GetNbNodes(*args):
    """


    Get the number of nodes of a poroMAILx.  

    python usage : nb_nodes = poroMAILx_GetNbNodes(ibdyty)  

    Parameters
    ----------
    ivalue(integer) : id of the poroMAILx  

    Returns
    -------
    nb_nodes (integer) : number of nodes of a poroMAILx  

    """
    return _lmgc90.poroMAILx_GetNbNodes(*args)

def poroMAILx_GetNbElements(*args):
    """


    Get the number of elements of a poroMAILx.  

    python usage : nb_elements = poroMAILx_GetNbElements(ibdyty)  

    Parameters
    ----------
    ivalue(integer) : id of the poroMAILx  

    Returns
    -------
    nb_nodes (integer) : number of elements of a poroMAILx  

    """
    return _lmgc90.poroMAILx_GetNbElements(*args)

def poroMAILx_IncrementStep(*args):
    """


    correction of the configuration parameter using the theta-method  

    python usage : poroMAILx_IncrementStep()  

    """
    return _lmgc90.poroMAILx_IncrementStep(*args)

def poroMAILx_WithoutRenumbering(*args):
    """


    skip renumbering of the unknowns using a rcc method  

    python usage : poroMAILx_WithoutRenumbering()  

    """
    return _lmgc90.poroMAILx_WithoutRenumbering(*args)

def poroMAILx_BandStorage(*args):
    """


    use band matrix  

    python usage : poroMAILx_BandStorage()  

    """
    return _lmgc90.poroMAILx_BandStorage(*args)

def poroMAILx_SparseStorage(*args):
    """


    use sparse matrix  

    python usage : poroMAILx_SparseStorage()  

    """
    return _lmgc90.poroMAILx_SparseStorage(*args)

def poroMAILx_ExplodedStorage(*args):
    """


    use element by element matrix  

    python usage : poroMAILx_ExplodedStorage()  

    """
    return _lmgc90.poroMAILx_ExplodedStorage(*args)

def poroMAILx_DiagonalStorage(*args):
    """


    use diagonal matrix  

    python usage : poroMAILx_DiagonalStorage()  

    """
    return _lmgc90.poroMAILx_DiagonalStorage(*args)

def poroMAILx_SkylineStorage(*args):
    """


    use skyline matrix  

    python usage : poroMAILx_SkylineStorage()  

    """
    return _lmgc90.poroMAILx_SkylineStorage(*args)

def poroMAILx_FullStorage(*args):
    """


    use full matrix  

    python usage : poroMAILx_FullStorage()  

    """
    return _lmgc90.poroMAILx_FullStorage(*args)

def poroMAILx_SymmetricShape(*args):
    """


    assume matrix is symmetrical  

    python usage : poroMAILx_SymmetricShape()  

    """
    return _lmgc90.poroMAILx_SymmetricShape(*args)

def poroMAILx_UnspecifiedShape(*args):
    """


    does not assume any thing on matrix shape  

    python usage : poroMAILx_UnspecifiedShape()  

    """
    return _lmgc90.poroMAILx_UnspecifiedShape(*args)

def poroMAILx_SetMecaScalarFieldByNode(*args):
    """


    Update an external field on a given body.  

    python usage : poroMAILx_SetMecaScalarFieldByNode(IdBody, f_rank, f)  

    Parameters
    ----------
    IdBody(integer) : id of the concern body  
    f_rank(integer) : rank of the field to set  
    f(double array) : value of the field  

     You need to set this field in your models.dat  

    """
    return _lmgc90.poroMAILx_SetMecaScalarFieldByNode(*args)

def poroMAILx_SetTherScalarFieldByNode(*args):
    """


    Update an external field on a given body.  

    python usage : poroMAILx_SetTherieldByNode(IdBody, f_rank, f)  

    Parameters
    ----------
    IdBody(integer) : id of the concern body  
    f_rank(integer) : rank of the field to set  
    f(double array) : value of the field  

     You need to set this field in your models.dat  

    """
    return _lmgc90.poroMAILx_SetTherScalarFieldByNode(*args)

def poroMAILx_SetMecaScalarFieldByElement(*args):
    """


    Update elementary scalar field through a element external field on a given body.  

    Field values are stored at Gauss point, on an element all Gauss point have the
    element value  

    You need to declare this field in your MODELS.DAT  

    python usage : poroMAILx_SetMecaScalarFieldByElement(IdBody, f_rank, f)  

    Parameters
    ----------
    IdBody(integer) : id of the concern body  
    f_rank(integer) : rank of the field to set  
    f(double array) : value of the field  

    """
    return _lmgc90.poroMAILx_SetMecaScalarFieldByElement(*args)

def poroMAILx_SetTherScalarFieldByElement(*args):
    """


    Update elementary scalar field through a element external field on a given body.  

    Field values are stored at Gauss point, on an element all Gauss point have the
    element value  

    You need to declare this field in your MODELS.DAT  

    python usage : poroMAILx_SetTherScalarFieldByElement(IdBody, f_rank, f)  

    Parameters
    ----------
    IdBody(integer) : id of the concern body  
    f_rank(integer) : rank of the field to set  
    f(double array) : value of the field  

    """
    return _lmgc90.poroMAILx_SetTherScalarFieldByElement(*args)

def poroMAILx_GetMecaScalarFieldRank(*args):
    """


    Get the rank of field of an element of a body from its name.  

    python usage : f_rank = poroMAILx_GetMecaScalarFieldRank(ibdyty, iblmty, name)  

    Parameters
    ----------
    ibdyty(integer) : id of the concern body  
    iblmty(integer) : id of the concern element  
    name(string) : name of the desired scalar field  

    Returns
    -------
    f_rank (integer) : rank of the corresponding scalar field  

    """
    return _lmgc90.poroMAILx_GetMecaScalarFieldRank(*args)

def poroMAILx_GetMecaVectorFieldRank(*args):
    """


    Get the rank of field of an element of a body from its name.  

    python usage : f_rank = poroMAILx_GetMecaVectorFieldRank(ibdyty, iblmty, name)  

    Parameters
    ----------
    ibdyty(integer) : id of the concern body  
    iblmty(integer) : id of the concern element  
    name(string) : name of the desired vector field  

    Returns
    -------
    f_rank (integer) : rank of the corresponding vector field  

    """
    return _lmgc90.poroMAILx_GetMecaVectorFieldRank(*args)

def poroMAILx_GetTherScalarFieldRank(*args):
    """


    Get the rank of field of an element of a body from its name.  

    python usage : f_rank = poroMAILx_GetTherScalarFieldRank(ibdyty, iblmty, name)  

    Parameters
    ----------
    ibdyty(integer) : id of the concern body  
    iblmty(integer) : id of the concern element  
    name(string) : name of the desired scalar field  

    Returns
    -------
    f_rank (integer) : rank of the corresponding scalar field  

    """
    return _lmgc90.poroMAILx_GetTherScalarFieldRank(*args)

def poroMAILx_GetTherVectorFieldRank(*args):
    """


    Get the rank of field of an element of a body from its name.  

    python usage : f_rank = poroMAILx_GetTherVectorFieldRank(ibdyty, iblmty, name)  

    Parameters
    ----------
    ibdyty(integer) : id of the concern body  
    iblmty(integer) : id of the concern element  
    name(string) : name of the desired vector field  

    Returns
    -------
    f_rank (integer) : rank of the corresponding vector field  

    """
    return _lmgc90.poroMAILx_GetTherVectorFieldRank(*args)

def poroMAILx_SetMecaVectorFieldByNode(*args):
    """


    Update elementary fields through a nodal external field on a given body.  

    Use the form functions of the elements and input values to compute and store
    field values at Gauss points.  

    You need to declare this field in your MODELS.DAT  

    python usage : poroMAILx_SetFieldByNode(IdBody, f_rank, f)  

    Parameters
    ----------
    IdBody(integer) : id of the concern body  
    f_rank(integer) : rank of the vector field to set  
    f(double array) : value of the vector field  

    """
    return _lmgc90.poroMAILx_SetMecaVectorFieldByNode(*args)

def poroMAILx_SetMecaVectorFieldByElement(*args):
    """


    Update elementary fields through a nodal external field on a given body.  

    Use the form functions of the elements and input values to compute and store
    field values at Gauss points.  

    You need to declare this field in your MODELS.DAT  

    python usage : poroMAILx_SetVectorFieldByElement(IdBody, f_rank, f)  

    Parameters
    ----------
    IdBody(integer) : id of the concern body  
    f_rank(integer) : rank of the vector field to set  
    f(double array) : value of the vector field  

    """
    return _lmgc90.poroMAILx_SetMecaVectorFieldByElement(*args)

def poroMAILx_SetTherVectorFieldByNode(*args):
    """


    Update elementary fields through a nodal external field on a given body.  

    Use the form functions of the elements and input values to compute and store
    field values at Gauss points.  

    You need to declare this field in your MODELS.DAT  

    python usage : poroMAILx_SetFieldByNode(IdBody, f_rank, f)  

    Parameters
    ----------
    IdBody(integer) : id of the concern body  
    f_rank(integer) : rank of the vector field to set  
    f(double array) : value of the vector field  

    """
    return _lmgc90.poroMAILx_SetTherVectorFieldByNode(*args)

def poroMAILx_SetTherVectorFieldByElement(*args):
    """


    Update elementary fields through a nodal external field on a given body.  

    Use the form functions of the elements and input values to compute and store
    field values at Gauss points.  

    You need to declare this field in your MODELS.DAT  

    python usage : poroMAILx_SetFieldByElement(IdBody, f_rank, f)  

    Parameters
    ----------
    IdBody(integer) : id of the concern body  
    f_rank(integer) : rank of the vector field to set  
    f(double array) : value of the vector field  

    """
    return _lmgc90.poroMAILx_SetTherVectorFieldByElement(*args)

def poroMAILx_LoadALE(*args):
    """


    Apply an ALE Formulation in Fluid zone.  

    python usage : poroMAILx_LoadALE(IdBody)  

    """
    return _lmgc90.poroMAILx_LoadALE(*args)

def poroMAILx_PutBodyVector(*args):
    """


    Set a vector of a given body.  

    *   "Xbeg_": cumulated displacements over time at beginning of time step  
    *   "X____": cumulated displacements over time in computed configuration  
    *   "Vbeg_": velocity at beginning of time step  
    *   "V____": velocity in computed configuration  
    *   "VbALE": fluid velocity at beginning of time step  
    *   "V_ALE": fluid velocity at beginning of time step  
    *   "Raux_": working array for reaction  
    *   "Vfree": velocity free of contacts  
    *   "Reac_": contact reaction force  
    *   "Fext_": external forces  
    *   "Fint_": internal forces  
    *   "Qext_": external fluxes  
    *   "Qint_": internal luxces  
    *   "Pbeg_": pressure at beginning of time step  
    *   "P____": pressure in computed configuration  

    python usage : poroMAILx_PutBodyVector(datatype, ibdyty, matrix)  

    Parameters
    ----------
    datatype(string of size 5) : the vector to set  
    ibdyty(integer) : rank of body  
    matrix(double array) : the new values  

    """
    return _lmgc90.poroMAILx_PutBodyVector(*args)

def poroMAILx_ComputeResidueNorm(*args):
    """


    computes the norm of the residue  

    python usage : norm = poroMAILx_ComputeResidueNorm()  

    Returns
    -------
    norm (double) : Residue Norm  

    """
    return _lmgc90.poroMAILx_ComputeResidueNorm(*args)

def poroMAILx_GetStress(*args):
    """


    Get a copy of a stress of a given body.  

    Python usage : stress = poroMAILx_GetStress(ibdyty,required_field=0)  

    Parameters
    ----------
    ibdyty(integer) : rank of considered body  
    required_field(integer) : required additional field  

    Returns
    -------
    matrix_out (double 2D-array) : the desired stress  

    """
    return _lmgc90.poroMAILx_GetStress(*args)

def poroMAILx_GetStrain(*args):
    """


    Get a copy of a strain of a given body.  

    Python usage : strain = poroMAILx_GetStrain(ibdyty, required_field=0)  

    Parameters
    ----------
    ibdyty(integer) : rank of considered body  
    required_field(integer) : required additional field  

    Returns
    -------
    strain (double 2D-array) : the desired strain  

    """
    return _lmgc90.poroMAILx_GetStrain(*args)

def poroMAILx_ComputeContactDetectionConfiguration(*args):
    """


    compute the contact detection configuration  

    python usage : poroMAILx_ComputeContactDetectionConfiguration()  

    """
    return _lmgc90.poroMAILx_ComputeContactDetectionConfiguration(*args)

def poroMAILx_SetPreconAllBodies(*args):
    """


    ask for precomputation of the W matrix on support node dofs of contactors for
    all bodies. Assumes bulk behaviour is linear.  

    python usage : poroMAILx_SetPreconAllBodies()  

    """
    return _lmgc90.poroMAILx_SetPreconAllBodies(*args)

def poroMAILx_ComputePreconW(*args):
    """


    compute the precon W on precon bodies  

    python usage : poroMAILx_ComputePreconW()  

    """
    return _lmgc90.poroMAILx_ComputePreconW(*args)

def poroMAILx_GetNbPoroMAILx(*args):
    """


    Get the number of poroMAILx.  

    python usage : nb_poroMAILx = poroMAILx_GetNbPoroMAILx()  

    Returns
    -------
    nb_poroMAILx (integer) : number of poroMAILx  

    """
    return _lmgc90.poroMAILx_GetNbPoroMAILx(*args)

def poroMAILx_GetCoor(*args):
    """


    return node coordinates of idBody  

    python usage : array = poroMAILx_GetCoor(idBody)  

    Parameters
    ----------
    IdBody(integer) : id of the concerned body  

    Returns
    -------
    array (double 2D-array) : coordinates  

    """
    return _lmgc90.poroMAILx_GetCoor(*args)

def poroMAILx_GetAll(*args):
    """


    return poro mechanical data computed for idBody  

    python usage : array = poroMAILx_GetAll(idBody)  

    Parameters
    ----------
    IdBody(integer) : id of the concerned body  

    Returns
    -------
    array (double 2D-array) : poro mechanical data  

    """
    return _lmgc90.poroMAILx_GetAll(*args)

def poroMAILx_GetGrad(*args):
    """


    Get a copy of a grad P of a given body.  

    Python usage : grad = poroMAILx_GetGrad(ibdyty)  

    Parameters
    ----------
    ibdyty(integer) : rank of considered body  

    Returns
    -------
    grad (double 2D-array) : the desired grad  

    """
    return _lmgc90.poroMAILx_GetGrad(*args)

def poroMAILx_GetFlux(*args):
    """


    Get a copy of a Darcy Flux of a given body.  

    Python usage : flux = poroMAILx_GetFlux(ibdyty)  

    Parameters
    ----------
    ibdyty(integer) : rank of considered body  

    Returns
    -------
    flux (double 2D-array) : the desired flux  

    """
    return _lmgc90.poroMAILx_GetFlux(*args)

def poroMAILx_GetInternal(*args):
    """


    return internal mechanical data computed for idBody  

    python usage : array = poroMAILx_GetInternal(idBody)  

    Parameters
    ----------
    IdBody(integer) : id of the concerned body  

    Returns
    -------
    array (double 2D-array) : mechanical internal data  

    """
    return _lmgc90.poroMAILx_GetInternal(*args)

def poroMAILx_GetConnectivity(*args):
    """


    return connectivity of idBody elements  

    python usage : vector = poroMAILx_GetConnectivity(idBody)  

    Parameters
    ----------
    IdBody(integer) : id of the concerned body  

    Returns
    -------
    vector (integer) : connectivity  

    """
    return _lmgc90.poroMAILx_GetConnectivity(*args)

def poroMAILx_SetVlocyDrivenDof(*args):
    """


    Apply Drv Dof on a given body.  

    python usage : poroMAILx_SetVlocyDrivenDof(IdBody, f_dof, f_node, f_value)  

    Parameters
    ----------
    IdBody(integer) : id of the concern body  
    f_dof(integer) : dof of the concern node  
    f_node(integer) : node  
    f_value(double) : value of the drvdof  

    """
    return _lmgc90.poroMAILx_SetVlocyDrivenDof(*args)

def poroMAILx_AddFieldLoad(*args):
    """


    Add elementary load through a nodal external field on a given body.  

    python usage : poroMAILx_AddFieldLoad(IdBody, Ideriv, f)  

    Parameters
    ----------
    IdBody(integer) : id of the concern body  
    f(double array) : value of the field  

    """
    return _lmgc90.poroMAILx_AddFieldLoad(*args)

def poroMAILx_WriteOutDof(*args):
    """


    Write ascii DOF.OUT file. Can be activate only each N step.  

    python usage : poroMAILx_WriteOutDof()  

    """
    return _lmgc90.poroMAILx_WriteOutDof(*args)

def poroMAILx_PostModels(*args):
    """


    load from MAILx and models for post  

    python usage : poroMAILx_PostModels()  

    """
    return _lmgc90.poroMAILx_PostModels(*args)

def poroMAILx_CleanMemory(*args):
    """


    Free all memory allocated within poroMAILx module.  

    python usage : poroMAILx_CleanMemory()  

    """
    return _lmgc90.poroMAILx_CleanMemory(*args)

def poroMAILx_CheckProperties(*args):
    """


    check if model and material are matching ; set material parameter if external
    model  

    python usage : poroMAILx_CheckProperties()  

    """
    return _lmgc90.poroMAILx_CheckProperties(*args)

def poroMAILx_GetNbGpByElem(*args):
    """


    Get the list of finite elements for porox models and the associated number of
    Gauss Points for MECA and THER physics.  

    Here memory is allocated within lmgc90 so that the pointer can be freely
    modified by third parties without nasty effect on lmgc90 functioning.  

    python usage : names, meca_nb, ther_nb = poroMAILx_GetNbGpByElem()  

    Returns
    -------
    names (string list) : list of the finite elements meca_nb (integer list): list
    of the number of Gauss Points for MECA ther_nb (integer list): list of the
    number of Gauss Points for THER  

    """
    return _lmgc90.poroMAILx_GetNbGpByElem(*args)

def multiMAILx_UsePicardScheme(*args):
    """


    use Picard scheme (fixed point method)  

    python usage : multiMAILx_UsePicardScheme()  

    """
    return _lmgc90.multiMAILx_UsePicardScheme(*args)

def multiMAILx_UseNewtonScheme(*args):
    """


    use Newton scheme  

    python usage : multiMAILx_UseNewtonScheme()  

    """
    return _lmgc90.multiMAILx_UseNewtonScheme(*args)

def multiMAILx_WithoutRenumbering(*args):
    """


    skip renumbering of the unknowns using a rcc method  

    python usage : multiMAILx_WithoutRenumbering()  

    """
    return _lmgc90.multiMAILx_WithoutRenumbering(*args)

def multiMAILx_BandStorage(*args):
    """


    use band matrix  

    python usage : multiMAILx_BandStorage()  

    """
    return _lmgc90.multiMAILx_BandStorage(*args)

def multiMAILx_SparseStorage(*args):
    """


    use sparse matrix  

    python usage : multiMAILx_SparseStorage()  

    """
    return _lmgc90.multiMAILx_SparseStorage(*args)

def multiMAILx_ExplodedStorage(*args):
    """


    use element by element matrix  

    python usage : multiMAILx_ExplodedStorage()  

    """
    return _lmgc90.multiMAILx_ExplodedStorage(*args)

def multiMAILx_DiagonalStorage(*args):
    """


    use diagonal matrix  

    python usage : multiMAILx_DiagonalStorage()  

    """
    return _lmgc90.multiMAILx_DiagonalStorage(*args)

def multiMAILx_SkylineStorage(*args):
    """


    use skyline matrix  

    python usage : multiMAILx_SkylineStorage()  

    """
    return _lmgc90.multiMAILx_SkylineStorage(*args)

def multiMAILx_FullStorage(*args):
    """


    use full matrix  

    python usage : multiMAILx_FullStorage()  

    """
    return _lmgc90.multiMAILx_FullStorage(*args)

def multiMAILx_SymmetricShape(*args):
    """


    assume matrix is symmetrical  

    python usage : multiMAILx_SymmetricShape()  

    """
    return _lmgc90.multiMAILx_SymmetricShape(*args)

def multiMAILx_UnspecifiedShape(*args):
    """


    does not assume any thing on matrix shape  

    python usage : multiMAILx_UnspecifiedShape()  

    """
    return _lmgc90.multiMAILx_UnspecifiedShape(*args)

def multiMAILx_GetNb(*args):
    """


    Get the number of multiMAILx.  

    python usage : nb_multiMAILx = multiMAILx_GetNb()  

    Returns
    -------
    nb_multiMAILx (integer) : number of multiMAILx  

    """
    return _lmgc90.multiMAILx_GetNb(*args)

def multiMAILx_GetNbNodes(*args):
    """


    Get the number of nodes of a multiMAILx.  

    python usage : nb_nodes = multiMAILx_GetNbNodes(ibdyty)  

    Parameters
    ----------
    ivalue(integer) : id of the multiMAILx  

    Returns
    -------
    nb_nodes (integer) : number of nodes of a multiMAILx  

    """
    return _lmgc90.multiMAILx_GetNbNodes(*args)

def multiMAILx_GetNbElements(*args):
    """


    Get the number of elements of a multiMAILx.  

    python usage : nb_elements = multiMAILx_GetNbElements(ibdyty)  

    Parameters
    ----------
    ivalue(integer) : id of the multiMAILx  

    Returns
    -------
    nb_nodes (integer) : number of elements of a multiMAILx  

    """
    return _lmgc90.multiMAILx_GetNbElements(*args)

def multiMAILx_IsVisible(*args):
    """


    return if a given body visible  

    python usage : visible = multiMAILx_IsVisible(ibdyty)  

    Parameters
    ----------
    idbdy(integer): id of the body we want visibility  

    Returns
    -------
    visible (integer) : 1 if body is visible, 0 else  

    """
    return _lmgc90.multiMAILx_IsVisible(*args)

def multiMAILx_GetBodyVector(*args):
    """


    Get a copy of a vector of a given body.  

    Possible values for datatype field are:  

    *   "Coor0": reference coordinates  
    *   "X____": cumulated displacements over time in computed configuration  
    *   "Xbeg_": cumulated displacements over time at beginning of time step  
    *   "V____": velocity in computed configuration  
    *   "Vbeg_": velocity at beginning of time step  
    *   "Pcbeg": pressure of 1st fluid at beginning of time step  
    *   "Pc___": pressure of 1st fluid in computed configuration  
    *   "Pnbeg": pressure of 2nd fluid at beginning of time step  
    *   "Pn___": pressure of 2nd fluid in computed configuration  
    *   "U_Fex": external forces  
    *   "PcFex": external pressure for 1st fluid  
    *   "PnFex": external pressure for 2nd fluid  
    *   "U_Fin": internal forces  
    *   "PcFin": internal pressure for 1st fluid  
    *   "PnFin": internal pressure for 2nd fluid  
    *   "U_Fdp":  
    *   "PcFdp":  
    *   "PnFdp":  
    *   "U_Fdy":  
    *   "PcFdy":  
    *   "PnFdy":  

    Possible values for datatype field are "X____", "Xbeg_", "V____",
    "Vbeg_", "Pw___", "Pwbeg", "Pn___", "Pnbeg"  

    Python usage : vector = multiMAILx_GetBodyVector(datatype, ibdyty)  

    Parameters
    ----------
    datatype(string of size 5) : the vector to get  
    ibdyty(integer) : rank of considered body  

    Returns
    -------
    vector (double 2D-array) : the desired data  

    """
    return _lmgc90.multiMAILx_GetBodyVector(*args)

def multiMAILx_PutBodyVector(*args):
    """


    Set a vector of a given body.  

    Possible values for datatype field are:  

    *   "X____": cumulated displacements over time in computed configuration  
    *   "Xbeg_": cumulated displacements over time at beginning of time step  
    *   "V____": velocity in computed configuration  
    *   "Vbeg_": velocity at beginning of time step  
    *   "Pcbeg": pressure of 1st fluid at beginning of time step  
    *   "Pc___": pressure of 1st fluid in computed configuration  
    *   "Pnbeg": pressure of 2nd fluid at beginning of time step  
    *   "Pn___": pressure of 2nd fluid in computed configuration  

    python usage : multiMAILx_PutBodyVector(datatype, ibdyty, matrix)  

    Parameters
    ----------
    datatype(string of size 5) : the vector to set  
    ibdyty(integer) : rank of body  
    matrix(double array) : the new values  

    """
    return _lmgc90.multiMAILx_PutBodyVector(*args)

def multiMAILx_ReadDrivenDof(*args):
    """


    Read DRV_DOF.DAT.  

    python usage : multiMAILx_ReadDrivenDof()  

    """
    return _lmgc90.multiMAILx_ReadDrivenDof(*args)

def multiMAILx_WriteDrivenDof(*args):
    """


    Write DRV_DOF.OUT.  

    python usage : multiMAILx_WriteDrivenDof()  

    """
    return _lmgc90.multiMAILx_WriteDrivenDof(*args)

def multiMAILx_ReadIniGPV(*args):
    """


    Read GPV file.  

    If num <= 0 : DATBOX/GPV.INI file is read  

    Else : OUTBOX/GPV.OUT.num is read, num being the parameter used in
    TimeEvolution_ReadIniGPV last call  

    python usage : multiMAILx_ReadIniGPV(num=0)  

    Parameters
    ----------
    num(integer) : which GPV file to read  

    """
    return _lmgc90.multiMAILx_ReadIniGPV(*args)

def multiMAILx_ReadIniDof(*args):
    """


    Read DOF file.  

    If num <= 0 : DATBOX/DOF.INI file is read  

    Else : OUTBOX/DOF.OUT.num is read, num being the parameter used in
    TimeEvolution_ReadIniDof last call  

    python usage : multiMAILx_ReadIniDof(num=0)  

    Parameters
    ----------
    num(integer) : which DOF file to read  

    """
    return _lmgc90.multiMAILx_ReadIniDof(*args)

def multiMAILx_WriteLastDof(*args):
    """


    Write DOF.LAST file.  

    python usage : multiMAILx_WriteLastDof(i_list)  

    Parameters
    ----------
    i_list(list of integer) : list of bodies to write dof if omitted works on all
        objects  

    """
    return _lmgc90.multiMAILx_WriteLastDof(*args)

def multiMAILx_WriteOutDof(*args):
    """


    Write DOF.OUT file.  

    python usage : multiMAILx_WriteOutDof(i_list)  

    Parameters
    ----------
    i_list(list of integer) : list of bodies to write dof if omitted works on all
        objects  

    """
    return _lmgc90.multiMAILx_WriteOutDof(*args)

def multiMAILx_LoadBehaviours(*args):
    """


    load behaviours from bulk_behav  

    python usage : multiMAILx_LoadBehaviours()  

    """
    return _lmgc90.multiMAILx_LoadBehaviours(*args)

def multiMAILx_LoadModels(*args):
    """


    load models from models  

    python usage : multiMAILx_LoadModels()  

    """
    return _lmgc90.multiMAILx_LoadModels(*args)

def multiMAILx_PushProperties(*args):
    """


    gives to model the couple of model,behavior used at gauss point  

    python usage : multiMAILx_PushProperties()  

    """
    return _lmgc90.multiMAILx_PushProperties(*args)

def multiMAILx_IncrementStep(*args):
    """


    initializes the current d.o.f and some driven d.o.f values  

    python usage : multiMAILx_IncrementStep()  

    """
    return _lmgc90.multiMAILx_IncrementStep(*args)

def multiMAILx_ComputeMass(*args):
    """


    compute elementary mass and inertia of a list of bodies  

    python usage : multiMAILx_ComputeMass(i_list)  

    Parameters
    ----------
    i_list(list of integer) : list of bodies to compute mass and inertia if omitted
        works on all objects  

    """
    return _lmgc90.multiMAILx_ComputeMass(*args)

def multiMAILx_ComputeBulk(*args):
    """


    computes elementary stiffness and viscosity matrices of a list of bodies  

    python usage : multiMAILx_ComputeBulk(i_list)  

    Parameters
    ----------
    i_list(list of integer) : list of bodies to compute stiffness and viscosity
        matrices if omitted works on all objects  

    """
    return _lmgc90.multiMAILx_ComputeBulk(*args)

def multiMAILx_ComputeFext(*args):
    """


    compute elementary external forces of a list of bodies  

    python usage : multiMAILx_ComputeFext(i_list)  

    Parameters
    ----------
    i_list(list of integer) : list of bodies to compute external forces if omitted
        works on all objects  

    """
    return _lmgc90.multiMAILx_ComputeFext(*args)

def multiMAILx_AssembKT(*args):
    """


    assemble pseudo mass matrix and apply drvdof of a list of bodies  

    python usage : multiMAILx_AssembKT(i_list)  

    Parameters
    ----------
    i_list(list of integer) : list of bodies to assemble pseudo mass matrix and apply
        drvdof if omitted works on all objects  

    """
    return _lmgc90.multiMAILx_AssembKT(*args)

def multiMAILx_AssembRHS(*args):
    """


    assembles right hand side of a list of bodies  

    python usage : multiMAILx_AssembRHS(i_list)  

    Parameters
    ----------
    i_list(list of integer) : list of bodies to assemble right hand side if omitted
        works on all objects  

    """
    return _lmgc90.multiMAILx_AssembRHS(*args)

def multiMAILx_ComputeResidueNorm(*args):
    """


    computes the norm of the residue of a list of bodies  

    python usage : norm = multiMAILx_ComputeResidueNorm(i_list)  

    Parameters
    ----------
    i_list(list of integer) : list of bodies to compute the norm of the residue if
        omitted works on all objects  

    Returns
    -------
    norm (double) : Residue Norm  

    """
    return _lmgc90.multiMAILx_ComputeResidueNorm(*args)

def multiMAILx_ComputeFreeState(*args):
    """


    computes free (of interactions) state of a list of bodies  

    python usage : multiMAILx_ComputeFreeState(i_list)  

    Parameters
    ----------
    i_list(list of integer) : list of bodies to compute free state if omitted works on
        all objects  

    """
    return _lmgc90.multiMAILx_ComputeFreeState(*args)

def multiMAILx_ComputeDof(*args):
    """


    computes the current d.o.f knowing all the forces/fluxses (free + contact) of a
    list of bodies  

    python usage : multiMAILx_ComputeDof(i_list)  

    Parameters
    ----------
    i_list(list of integer) : list of bodies to compute current d.o.f if omitted works
        on all objects  

    """
    return _lmgc90.multiMAILx_ComputeDof(*args)

def multiMAILx_ComputeField(*args):
    """


    computes elementary fields of a list of bodies  

    python usage : multiMAILx_ComputeField(i_list)  

    Parameters
    ----------
    i_list(list of integer) : list of bodies to compute elementary fields if omitted
        works on all objects  

    """
    return _lmgc90.multiMAILx_ComputeField(*args)

def multiMAILx_UpdateBulk(*args):
    """


    update begin elementary fields with current elementary fields of a list of
    bodies  

    python usage : multiMAILx_UpdateBulk(i_list)  

    Parameters
    ----------
    i_list(list of integer) : list of bodies to compute elementary fields if omitted
        works on all objects  

    """
    return _lmgc90.multiMAILx_UpdateBulk(*args)

def multiMAILx_UpdateDof(*args):
    """


    update begin d.o.f. with current d.o.f. of a list of bodies  

    python usage : multiMAILx_UpdateDof(i_list)  

    Parameters
    ----------
    i_list(list of integer) : list of bodies to update current d.o.f if omitted works
        on all objects  

    """
    return _lmgc90.multiMAILx_UpdateDof(*args)

def multiMAILx_GetScalarFieldRank(*args):
    """


    Get the rank of field of an element of a body from its name.  

    python usage : f_rank = multiMAILx_GetScalarFieldRank(ibdyty, iblmty, name)  

    Parameters
    ----------
    ibdyty(integer) : id of the concern body  
    iblmty(integer) : id of the concern element  
    name(string) : name of the desired field  

    Returns
    -------
    f_rank (integer) : rank of the corresponding field  

    """
    return _lmgc90.multiMAILx_GetScalarFieldRank(*args)

def multiMAILx_SetScalarFieldByNode(*args):
    """


    Update elementary fields through a nodal external field on a given body.  

    You need to declare this field in your MODELS.DAT  

    python usage : multiMAILx_SetScalarFieldByNode(IdBody, f_rank, f)  

    Parameters
    ----------
    IdBody(integer) : id of the concern body  
    f_rank(integer) : rank of the field to set  
    f(double array) : value of the field  

    """
    return _lmgc90.multiMAILx_SetScalarFieldByNode(*args)

def multiMAILx_SetScalarFieldByElement(*args):
    """


    Update elementary scalar field through a element external field on a given body.  

    Field values are stored at Gauss point, on an element all Gauss point have the
    element value  

    You need to declare this field in your MODELS.DAT  

    python usage : multiMAILx_SetScalarFieldByElement(IdBody, f_rank, f)  

    Parameters
    ----------
    IdBody(integer) : id of the concern body  
    f_rank(integer) : rank of the field to set  
    f(double array) : value of the field  

    """
    return _lmgc90.multiMAILx_SetScalarFieldByElement(*args)

def multiMAILx_GetVectorFieldRank(*args):
    """


    Get the rank of field of an element of a body from its name.  

    python usage : f_rank = multiMAILx_GetVectorFieldRank(ibdyty, iblmty, name)  

    Parameters
    ----------
    ibdyty(integer) : id of the concern body  
    iblmty(integer) : id of the concern element  
    name(string) : name of the desired vector field  

    Returns
    -------
    f_rank (integer) : rank of the corresponding vector field  

    """
    return _lmgc90.multiMAILx_GetVectorFieldRank(*args)

def multiMAILx_SetVectorFieldByNode(*args):
    """


    Update elementary fields through a nodal external field on a given body.  

    Use the form functions of the elements and input values to compute and store
    field values at Gauss points.  

    You need to declare this field in your MODELS.DAT  

    python usage : multiMAILx_SetFieldByNode(IdBody, f_rank, f)  

    Parameters
    ----------
    IdBody(integer) : id of the concern body  
    f_rank(integer) : rank of the vector field to set  
    f(double array) : value of the vector field  

    """
    return _lmgc90.multiMAILx_SetVectorFieldByNode(*args)

def multiMAILx_SetVectorFieldByElement(*args):
    """


    Update elementary fields through a nodal external field on a given body.  

    Use the form functions of the elements and input values to compute and store
    field values at Gauss points.  

    You need to declare this field in your MODELS.DAT  

    python usage : multiMAILx_SetFieldByElement(IdBody, f_rank, f)  

    Parameters
    ----------
    IdBody(integer) : id of the concern body  
    f_rank(integer) : rank of the vector field to set  
    f(double array) : value of the vector field  

    """
    return _lmgc90.multiMAILx_SetVectorFieldByElement(*args)

def multiMAILx_GetConnectivity(*args):
    """


    return connectivity of idBody elements  

    python usage : vector = multiMAILx_GetConnectivity(idBody)  

    Parameters
    ----------
    IdBody(integer) : id of the concerned body  

    Returns
    -------
    vector (integer) : connectivity  

    """
    return _lmgc90.multiMAILx_GetConnectivity(*args)

def multiMAILx_GetCoor(*args):
    """


    return node coordinates of idBody  

    python usage : array = multiMAILx_GetCoor(idBody)  

    Parameters
    ----------
    IdBody(integer) : id of the concerned body  

    Returns
    -------
    array (double 2D-array) : coordinates  

    """
    return _lmgc90.multiMAILx_GetCoor(*args)

def multiMAILx_GetAll(*args):
    """


    return mechanical data computed for idBody  

    python usage : array = multiMAILx_GetAll(idBody)  

    Parameters
    ----------
    IdBody(integer) : id of the concerned body  

    Returns
    -------
    array (double 2D-array) : mechanical data  

    """
    return _lmgc90.multiMAILx_GetAll(*args)

def multiMAILx_GetElementsVolume(*args):
    """


    return volume of elements  

    python usage : volumes = multiMAILx_GetElementsVolume(idBody)  

    Parameters
    ----------
    IdBody(integer) : id of the concerned body  

    Returns
    -------
    volumes[nb_ele] (double) : volume  

    """
    return _lmgc90.multiMAILx_GetElementsVolume(*args)

def multiMAILx_GetElementsNeighbor(*args):
    """


    return elements in the tol-neighbor of an element of idBody  

    python usage : neighbors =
    multiMAILx_GetElementsNeighbor(idBody,tol,max_neighbors)  

    Parameters
    ----------
    IdBody(integer) : id of the concerned body  
    tol(double) : tolerance  

    Returns
    -------
    array (double 2D-array) : neighbor[nb_ele,max_neighbors]  

    """
    return _lmgc90.multiMAILx_GetElementsNeighbor(*args)

def multiMAILx_GetPtrElementsEnergy(*args):
    """


    return pointer on energy of elements  

    python usage : energies = multiMAILx_GetPtrElementsEnergy(idBody)  

    Parameters
    ----------
    IdBody(integer) : id of the concerned body  

    Returns
    -------
    energies[nb_ele] (double) : energy  

    """
    return _lmgc90.multiMAILx_GetPtrElementsEnergy(*args)

def multiMAILx_ComputeElementsEnergy(*args):
    """


    compute energy of elements  

    python usage : multiMAILx_ComputeElementsEnergy(idBody)  

    """
    return _lmgc90.multiMAILx_ComputeElementsEnergy(*args)

def multiMAILx_GetPtrElementsJacobian(*args):
    """


    return jacobian of elements  

    python usage : jacobians = multiMAILx_GetPtrElementsJacobian(idBody)  

    Parameters
    ----------
    IdBody(integer) : id of the concerned body  

    Returns
    -------
    jacobians[nb_ele] (double) : jacobian  

    """
    return _lmgc90.multiMAILx_GetPtrElementsJacobian(*args)

def multiMAILx_ComputeElementsJacobian(*args):
    """


    compute jacobian of elements  

    python usage : multiMAILx_ComputeElementsJacobian(idBody)  

    """
    return _lmgc90.multiMAILx_ComputeElementsJacobian(*args)

def multiMAILx_GetPtrElementsVisibility(*args):
    """


    Get a pointer on the elements visibility vector.  

    python usage : eviz = multiMAILx_GetPtrElementsVisibility(ibdyty)  

    Parameters
    ----------
    ibdyty(integer) : rank of the multiMAILx  

    Returns
    -------
    eviz (int array) : reference on the desired vector seen as a numpy array  

    """
    return _lmgc90.multiMAILx_GetPtrElementsVisibility(*args)

def multiMAILx_GetDeformationEnergy(*args):
    """


    Get the deformation energy of a given displacement field.  

    python usage : energy = multiMAILx_GetDeformationEnergy(id,displacement)  

    Parameters
    ----------
    ibdyty(integer) : rank of considered body  
    displacement(double matrix) : displacement field  

    Returns
    -------
    energy (double) : deformation energy  

    """
    return _lmgc90.multiMAILx_GetDeformationEnergy(*args)

def multiMAILx_GetPtrBoundaryElements(*args):
    """


    return boundary elements  

    python usage : vector = multiMAILx_GetPtrBoundaryElements(idBody)  

    Parameters
    ----------
    IdBody(integer) : id of the concerned body  

    Returns
    -------
    vector (integer) : for each element =0 no boundary, otherwise gives the number
    of free edge/face  

    """
    return _lmgc90.multiMAILx_GetPtrBoundaryElements(*args)

def multiMAILx_CleanMemory(*args):
    """


    Free all memory allocated within multiMAILx module.  

    python usage : multiMAILx_CleanMemory()  

    """
    return _lmgc90.multiMAILx_CleanMemory(*args)

def ExternalModels_InitModels(*args):
    """


    Initialize the external models (if any)  

    python usage : ExternalModels_InitModels()  

    """
    return _lmgc90.ExternalModels_InitModels(*args)

def ExternalModels_StoreProperties(*args):
    """


    Store external models (if any)  

    python usage : ExternalModels_StoreProperties()  

    """
    return _lmgc90.ExternalModels_StoreProperties(*args)

def ExternalModels_CleanMemory(*args):
    """


    Free all memory allocated within ExternalModels module.  

    python usage : ExternalModels_CleanMemory()  

    """
    return _lmgc90.ExternalModels_CleanMemory(*args)

def bulk_behav_ReadBehaviours(*args):
    """


    read gravity and behaviors from DATBOX/BULK_BEHAV.DAT file  

    python usage : bulk_behav_ReadBehaviours()  

    """
    return _lmgc90.bulk_behav_ReadBehaviours(*args)

def bulk_behav_WriteBehaviours(*args):
    """


    write gravity and behaviors to OUTBOX/BULK_BEHAV.OUT file  

    python usage : bulk_behav_WriteBehaviours()  

    """
    return _lmgc90.bulk_behav_WriteBehaviours(*args)

def bulk_behav_CollectOutBulkBehav(*args):
    """


    read gravity and behaviors from OUTBOX/BULK_BEHAV.OUT file  

    python usage : bulk_behav_CollectOutBulkBehav()  

    """
    return _lmgc90.bulk_behav_CollectOutBulkBehav(*args)

def bulk_behav_CleanOutBulkBehav(*args):
    """


    write (replacing) gravity and behaviors to OUTBOX/BULK_BEHAV.OUT file  

    python usage : bulk_behav_CleanOutBulkBehav()  

    """
    return _lmgc90.bulk_behav_CleanOutBulkBehav(*args)

def bulk_behav_AppendOutBulkBehav(*args):
    """


    write (appending) gravity and behaviors to OUTBOX/BULK_BEHAV.OUT file  

    python usage : bulk_behav_AppendOutBulkBehav()  

    """
    return _lmgc90.bulk_behav_AppendOutBulkBehav(*args)

def bulk_behav_RebuildInBulkBehav(*args):
    """


    write (replace) gravity and behaviors to DATBOX/BULK_BEHAV.DAT file  

    python usage : bulk_behav_RebuildInBulkBehav()  

    """
    return _lmgc90.bulk_behav_RebuildInBulkBehav(*args)

def bulk_behav_GetGravity(*args):
    """


    get the gravity acceleration used  

    python usage : gravity = bulk_behav_GetGravity()  

    Returns
    -------
    gravity (double array) : gravity vector  

    """
    return _lmgc90.bulk_behav_GetGravity(*args)

def bulk_behav_SetGravity(*args):
    """


    set the gravity acceleration to be used  

    python usage : bulk_behav_SetGravity(gravity)  

    Parameters
    ----------
    gravity(double array) : gravity vector (size 3)  

    """
    return _lmgc90.bulk_behav_SetGravity(*args)

def bulk_behav_SetConductivity(*args):
    """


    set the conductivity parameter to be used  

    python usage : bulk_behav_SetConductivity(cvalue ,ivalue, rvalue)  

    Parameters
    ----------
    cvalue(string of size 5) : nickname of bulk behaviour  
    ivalue(integer) : type of parameter: 0 = constant, 1 = field  
    rvalue(real) : conductivity value  

    """
    return _lmgc90.bulk_behav_SetConductivity(*args)

def bulk_behav_SetCapacity(*args):
    """


    set the Capacity parameter to be used  

    python usage : bulk_behav_SetCapacity(cvalue ,ivalue, rvalue)  

    Parameters
    ----------
    cvalue(string of size 5) : nickname of bulk behaviour  
    ivalue(integer) : type of parameter: 0 = constant, 1 = field  
    rvalue(real) : Capacity value  

    """
    return _lmgc90.bulk_behav_SetCapacity(*args)

def bulk_behav_SetBiot(*args):
    """


    set the Biot parameter to be used  

    python usage : bulk_behav_SetBiot(cvalue ,ivalue, rvalue)  

    Parameters
    ----------
    cvalue(string of size 5) : nickname of bulk behaviour  
    ivalue(integer) : type of parameter: 0 = constant, 1 = field  
    rvalue(real) : Biot value  

    """
    return _lmgc90.bulk_behav_SetBiot(*args)

def bulk_behav_SetExternalFlux(*args):
    """


    set the External Flux parameter to be used  

    python usage : bulk_behav_SetExternalFlux(cvalue ,ivalue, rvalue)  

    Parameters
    ----------
    cvalue(string of size 5) : nickname of bulk behaviour  
    ivalue(integer) : type of parameter: 0 = constant, 1 = field  
    rvalue(real) : External Flux value  

    """
    return _lmgc90.bulk_behav_SetExternalFlux(*args)

def bulk_behav_SetDensity(*args):
    """


    set the Density parameter to be used  

    python usage : bulk_behav_SetDensity(cvalue , rvalue)  

    Parameters
    ----------
    cvalue(string of size 5) : nickname of bulk behaviour  
    rvalue(real) : Density value  

    """
    return _lmgc90.bulk_behav_SetDensity(*args)

def bulk_behav_GetNbBulkBehav(*args):
    """


    get the number of bulk laws  

    python usage : nb_bulk_behav = bulk_behav_GetNbBulkBehav()  

    Parameters
    ----------
    nb_bulk_behav(integer) : number of bulk behaviour in lmgc90  

    """
    return _lmgc90.bulk_behav_GetNbBulkBehav(*args)

def bulk_behav_GetBulkBehav(*args):
    """


    get a given bulk law  

    python usage : lawty, behav = bulk_behav_GetBulkBehav(i_bb)  

    Parameters
    ----------
    i_bb(integer) : index of the desired bulk_behav  
    lawty(string) : type of the bulk law  
    behav(string) : name of the bulk law  
    param(real vector) : parameters of the law  

    """
    return _lmgc90.bulk_behav_GetBulkBehav(*args)

def bulk_behav_CleanMemory(*args):
    """


    Free all memory allocated within bulk_behav module.  

    python usage : bulk_behav_CleanMemory()  

    """
    return _lmgc90.bulk_behav_CleanMemory(*args)

def models_ReadModels(*args):
    """


    read models from DATBOX/MODELS.DAT  

    python usage : models_ReadModels()  

    """
    return _lmgc90.models_ReadModels(*args)

def models_WriteModels(*args):
    """


    write models to OUTBOX/MODELS.OUT  

    python usage : models_WriteModels()  

    """
    return _lmgc90.models_WriteModels(*args)

def models_InitModels(*args):
    """


    initialize models  

    python usage : models_InitModels()  

    """
    return _lmgc90.models_InitModels(*args)

def models_InitProperties(*args):
    """


    initialize properties  

    In face re-initialize properties (since it is done in InitModels). Necessary if
    a Store has been done and it is wanted again to LoadModel  

    python usage : models_InitProperties()  

    """
    return _lmgc90.models_InitProperties(*args)

def models_StoreProperties(*args):
    """


    create properties (couple of model and models)  

    python usage : models_StoreProperties()  

    """
    return _lmgc90.models_StoreProperties(*args)

def models_CleanMemory(*args):
    """


    Free all memory allocated within models module.  

    python usage : models_CleanMemory()  

    """
    return _lmgc90.models_CleanMemory(*args)

def overall_Initialize(*args):
    """


    Initialize LMGC90.  

    python usage : overall_Initialize()  

    """
    return _lmgc90.overall_Initialize(*args)

def overall_Finalize(*args):
    """


    Finalize LMGC90.  

    python usage : overall_Finalize()  

    """
    return _lmgc90.overall_Finalize(*args)

def overall_InitEntityList(*args):
    """


    Initialize entity list : must be done after LoadTactors.  

    python usage : overall_InitEntityList()  

    """
    return _lmgc90.overall_InitEntityList(*args)

def TimeEvolution_SetTimeStep(*args):
    """


    Set value of the time step.  

    python usage : TimeEvolution_SetTimeStep(dt)  

    Parameters
    ----------
    dt(double) : value of time step  

    """
    return _lmgc90.TimeEvolution_SetTimeStep(*args)

def TimeEvolution_IncrementStep(*args):
    """


    Increment curent time, time step and eventually initialize NR loop counter.  

    python usage : TimeEvolution_IncrementStep()  

    """
    return _lmgc90.TimeEvolution_IncrementStep(*args)

def TimeEvolution_UpdateStep(*args):
    """


    update the initial time to the current time  

    python usage : TimeEvolution_UpdateStep()  

    """
    return _lmgc90.TimeEvolution_UpdateStep(*args)

def TimeEvolution_DisplayStep(*args):
    """


    Display time evolution step informations.  

    python usage : TimeEvolution_DisplayStep()  

    """
    return _lmgc90.TimeEvolution_DisplayStep(*args)

def TimeEvolution_SetInitialStep(*args):
    """


    Set the rank of the first time step.  

    python usage : TimeEvolution_SetInitialStep(first_step)  

    Parameters
    ----------
    first_step(integer) : rank of the first time step  

    """
    return _lmgc90.TimeEvolution_SetInitialStep(*args)

def TimeEvolution_SetInitialTime(*args):
    """


    Set initial time.  

    python usage : TimeEvolution_SetInitialTime(t_init)  

    Parameters
    ----------
    t_init(double) : initial time  

    """
    return _lmgc90.TimeEvolution_SetInitialTime(*args)

def TimeEvolution_GetTime(*args):
    """


    get current time  

    python usage : time = TimeEvolution_GetTime()  

    Returns
    -------
    time (double) : current time  

    """
    return _lmgc90.TimeEvolution_GetTime(*args)

def TimeEvolution_GetTimeStep(*args):
    """


    get current time step  

    python usage : dt = TimeEvolution_GetTimeStep()  

    Returns
    -------
    dt (double) : time step  

    """
    return _lmgc90.TimeEvolution_GetTimeStep(*args)

def TimeEvolution_GetStep(*args):
    """


    get current step number  

    python usage : it = TimeEvolution_GetStep()  

    Returns
    -------
    it (int) : current step number  

    """
    return _lmgc90.TimeEvolution_GetStep(*args)

def TimeEvolution_WriteLastDof(*args):
    """


    python usage : TimeEvolution_WriteLastDof()  

    """
    return _lmgc90.TimeEvolution_WriteLastDof(*args)

def TimeEvolution_WriteOutDof(*args):
    """


    python usage : TimeEvolution_WriteOutDof(Nstep_writeDof)  

    Parameters
    ----------
    Nstep_writeDof(integer) : periodicity of DOF write  

    """
    return _lmgc90.TimeEvolution_WriteOutDof(*args)

def TimeEvolution_DisplayOutDof(*args):
    """


    python usage : TimeEvolution_DisplayOutDof()  

    """
    return _lmgc90.TimeEvolution_DisplayOutDof(*args)

def TimeEvolution_WriteLastRnod(*args):
    """


    python usage : TimeEvolution_WriteLastRnod()  

    """
    return _lmgc90.TimeEvolution_WriteLastRnod(*args)

def TimeEvolution_WriteOutRnod(*args):
    """


    python usage : TimeEvolution_WriteOutRnod(nstep)  

    Parameters
    ----------
    nstep(integer) : a freq of writing  

    """
    return _lmgc90.TimeEvolution_WriteOutRnod(*args)

def TimeEvolution_DisplayOutRnod(*args):
    """


    python usage : TimeEvolution_DisplayOutRnod()  

    """
    return _lmgc90.TimeEvolution_DisplayOutRnod(*args)

def TimeEvolution_WriteLastVlocRloc(*args):
    """


    python usage : TimeEvolution_WriteLastVlocRloc()  

    """
    return _lmgc90.TimeEvolution_WriteLastVlocRloc(*args)

def TimeEvolution_WriteOutVlocRloc(*args):
    """


    python usage : TimeEvolution_WriteOutVlocRloc(nstep)  

    Parameters
    ----------
    nstep(integer) : a freq of writing  

    """
    return _lmgc90.TimeEvolution_WriteOutVlocRloc(*args)

def TimeEvolution_DisplayOutVlocRloc(*args):
    """


    python usage : TimeEvolution_DisplayOutVlocRloc()  

    """
    return _lmgc90.TimeEvolution_DisplayOutVlocRloc(*args)

def TimeEvolution_WriteLastGPV(*args):
    """


    python usage : TimeEvolution_WriteLastGPV()  

    """
    return _lmgc90.TimeEvolution_WriteLastGPV(*args)

def TimeEvolution_WriteOutGPV(*args):
    """


    python usage : TimeEvolution_WriteOutGPV(nstep)  

    Parameters
    ----------
    nstep(integer) : a freq of writing  

    """
    return _lmgc90.TimeEvolution_WriteOutGPV(*args)

def TimeEvolution_ReadIniDof(*args):
    """


    Read header of a DOF file.  

    python usage : TimeEvolution_ReadIniDof(num=0)  

    Parameters
    ----------
    num(integer) : num of file to read  

    """
    return _lmgc90.TimeEvolution_ReadIniDof(*args)

def TimeEvolution_ReadIniVlocRloc(*args):
    """


    Read header of a VlocRloc file.  

    python usage : TimeEvolution_ReadIniVlocRloc(num=0)  

    Parameters
    ----------
    num(integer) : num of file to read  

    """
    return _lmgc90.TimeEvolution_ReadIniVlocRloc(*args)

def TimeEvolution_ReadIniGPV(*args):
    """


    Read header of a GPV file.  

    python usage : TimeEvolution_ReadIniGPV(num=0)  

    Parameters
    ----------
    num(integer) : num of file to read  

    """
    return _lmgc90.TimeEvolution_ReadIniGPV(*args)

def NewtonRaphson_Initialize(*args):
    """


    initialize Newton Raphson Loop  

    python usage : NewtonRaphson_Initialize(tol)  

    Parameters
    ----------
    tol(double) : tolerance  

    """
    return _lmgc90.NewtonRaphson_Initialize(*args)

def NewtonRaphson_CheckConvergence(*args):
    """


    check if Newton Raphson loop converges  

    python usage : iconv = NewtonRaphson_CheckConvergence(norm)  

    Parameters
    ----------
    norm(double) : value to check  

    Returns
    -------
    iconv (integer) : convergence status  

    *   iconv = 0 : converges  
    *   iconv = 1 : unknown  
    *   iconv = 2 : diverges  

    """
    return _lmgc90.NewtonRaphson_CheckConvergence(*args)

def NewtonRaphson_ComputeTimeStep(*args):
    """


    manages time step evolution depending on newton raphson convergence  

    python usage : itodo = NewtonRaphson_ComputeTimeStep()  

    Returns
    -------
    itodo (integer) : what to do now  

    *   itodo = 0 : just keep going (time step may have been modified)  
    *   itodo = 1 : redo time step (time step has been decreased)  
    *   itodo = 2 : it's hopeless just stop where you are  

    """
    return _lmgc90.NewtonRaphson_ComputeTimeStep(*args)

def NewtonRaphson_SetMinTimeStep(*args):
    """


    Set value of the mininum possible time step.  

    python usage : NewtonRaphson_SetMinTimeStep(dt)  

    Parameters
    ----------
    dt(double) : minimum value of time step  

     Needed only if adaptive time step feature is used  

    """
    return _lmgc90.NewtonRaphson_SetMinTimeStep(*args)

def NewtonRaphson_SetMaxTimeStep(*args):
    """


    Set value of the maximum possible time step.  

    python usage : NewtonRaphson_SetMaxTimeStep(dt)  

    Parameters
    ----------
    dt(double) : maximum value of time step  

     Needed only if adaptive time step feature is used  

    """
    return _lmgc90.NewtonRaphson_SetMaxTimeStep(*args)

def NewtonRaphson_SetFinalTime(*args):
    """


    Set final time.  

    python usage : NewtonRaphson_SetFinalTime(t_final)  

    Parameters
    ----------
    t_final(double) : final time  

    """
    return _lmgc90.NewtonRaphson_SetFinalTime(*args)

def NewtonRaphson_SetMaxIter(*args):
    """


    Max number of iterations - default is 50.  

    python usage : NewtonRaphson_SetMaxIter(max_iter)  

    Parameters
    ----------
    max_iter(integer) :  

    """
    return _lmgc90.NewtonRaphson_SetMaxIter(*args)

def NewtonRaphson_SetGoodIter(*args):
    """


    Set the max number of iterations for good convergence - default is 10.  

    python usage : NewtonRaphson_SetGoodIter(good_iter)  

    Parameters
    ----------
    good_iter(integer) :  

    """
    return _lmgc90.NewtonRaphson_SetGoodIter(*args)

def NewtonRaphson_SetBadIter(*args):
    """


    Set the max number of iterations for bad convergence - default is 30.  

    python usage : NewtonRaphson_SetBadIter(bad_iter)  

    Parameters
    ----------
    bad_iter(integer) :  

    """
    return _lmgc90.NewtonRaphson_SetBadIter(*args)

def NewtonRaphson_SetIncPatience(*args):
    """


    Set the number of increments to adapt the time step when successive good
    convergence (increase time step) or bad convergence (decrease time step) -
    default is 3.  

    python usage : NewtonRaphson_SetIncPatience(patience)  

    Parameters
    ----------
    patience(integer) :  

    """
    return _lmgc90.NewtonRaphson_SetIncPatience(*args)

def overall_SelectProxTactors(*args):
    """


    Prepare contact detection.  

    python usage : overall_SelectProxTactors(Nstep_rough_seek)  

    Parameters
    ----------
    Nstep_rough_seek(integer) : periodicity of rough detection  

    """
    return _lmgc90.overall_SelectProxTactors(*args)

def overall_DisplayProxTactors(*args):
    """


    python usage : overall_DisplayProxTactors()  

    """
    return _lmgc90.overall_DisplayProxTactors(*args)

def overall_DIME(*args):
    """


    set space dimension and in 2D the modelling assumption  

    python usage : overall_DIME(idim, imod)  

    Parameters
    ----------
    idim(integer) : dimension (2 or 3)  
    imod(integer) : kind of model (2D only)  

    *   imod = 1 => plane strain  
    *   imod = 2 => plane stress  
    *   imod = 3 => axisymmetric  

    """
    return _lmgc90.overall_DIME(*args)

def Integrator_InitTheta(*args):
    """


    python usage : Integrator_InitTheta(theta)  

    Parameters
    ----------
    theta(double) : value of theta in integrator  

    """
    return _lmgc90.Integrator_InitTheta(*args)

def Integrator_InitQS(*args):
    """


    python usage : Integrator_InitQS()  

    """
    return _lmgc90.Integrator_InitQS(*args)

def Integrator_InitCrankNickolson(*args):
    """


    python usage : Integrator_InitCrankNickolson(theta)  

    Parameters
    ----------
    theta(double) : value of theta in integrator  

    """
    return _lmgc90.Integrator_InitCrankNickolson(*args)

def Integrator_InitGear(*args):
    """


    python usage : Integrator_InitGear()  

    """
    return _lmgc90.Integrator_InitGear(*args)

def Integrator_InitVerlet(*args):
    """


    python usage : Integrator_InitVerlet()  

    """
    return _lmgc90.Integrator_InitVerlet(*args)

def Integrator_InitBeta2(*args):
    """


    python usage : Integrator_InitBeta2(value)  

    Parameters
    ----------
    value(double) : numeric diffusion ([0.5,1] and 0.5 is conservative)  

    """
    return _lmgc90.Integrator_InitBeta2(*args)

def Integrator_SetContactDetectionConfiguration(*args):
    """


    set the parameters necessary to define the contact detection configuration
    (default: 1-theta, 0.)  

    python usage : Integrator_SetContactDetectionConfiguration(alpha_b,alpha_e)  

    Parameters
    ----------
    alpha_b(double) : value of the V_begin weight  
    alpha_e(double) : value of the V weight  

    """
    return _lmgc90.Integrator_SetContactDetectionConfiguration(*args)

def overall_RequireXxlComputation(*args):
    """


    python usage : overall_RequireXxlComputation()  

    """
    return _lmgc90.overall_RequireXxlComputation(*args)

def overall_UpdatePostData(*args):
    """


    python usage : overall_UpdatePostData()  

    """
    return _lmgc90.overall_UpdatePostData(*args)

def overall_InitPostData(*args):
    """


    python usage : overall_InitPostData(ifirst, ilast)  

    Parameters
    ----------
    ifirst(integer) :  
    ilast(integer) :  

    """
    return _lmgc90.overall_InitPostData(*args)

def overall_SetWorkingDirectory(*args):
    """


    python usage : overall_SetWorkingDirectory(path)  

    Parameters
    ----------
    path(string) : set path to DATBOX directory  

    """
    return _lmgc90.overall_SetWorkingDirectory(*args)

def overall_GetWorkingDirectory(*args):
    """


    python usage : path = overall_GetWorkingDirectory()  

    Returns
    -------
    path (string) : working directory  

    """
    return _lmgc90.overall_GetWorkingDirectory(*args)

def overall_WriteDrivenDof(*args):
    """


    python usage : overall_WriteDrivenDof()  

    """
    return _lmgc90.overall_WriteDrivenDof(*args)

def overall_WriteOutDisplayFile(*args):
    """


    python usage : overall_WriteOutDisplayFile(freq_display)  

    Parameters
    ----------
    freq_display(integer) : periodicity of display write  

    """
    return _lmgc90.overall_WriteOutDisplayFile(*args)

def TimeEvolution_ReadIniMpValues(*args):
    """


    Read header of a MP_VALUES file.  

    python usage : TimeEvolution_ReadIniMpValues(num=0)  

    Parameters
    ----------
    num(integer) : num of file to read  

    """
    return _lmgc90.TimeEvolution_ReadIniMpValues(*args)

def TimeEvolution_WriteOutMpValues(*args):
    """


    python usage : TimeEvolution_WriteOutMpValues(nstep)  

    Parameters
    ----------
    nstep(integer) : a freq of writing  

    """
    return _lmgc90.TimeEvolution_WriteOutMpValues(*args)

def TimeEvolution_WriteLastMpValues(*args):
    """


    python usage : TimeEvolution_WriteLastMpValues()  

    """
    return _lmgc90.TimeEvolution_WriteLastMpValues(*args)

def overall_WriteBodies(*args):
    """


    python usage : overall_WriteBodies()  

    """
    return _lmgc90.overall_WriteBodies(*args)

def overall_CleanOutBodies(*args):
    """


    python usage : overall_CleanOutBodies()  

    """
    return _lmgc90.overall_CleanOutBodies(*args)

def overall_RebuildInBodies(*args):
    """


    python usage : overall_RebuildInBodies()  

    """
    return _lmgc90.overall_RebuildInBodies(*args)

def overall_CleanWriteOutFlags(*args):
    """


    python usage : overall_CleanWriteOutFlags()  

    """
    return _lmgc90.overall_CleanWriteOutFlags(*args)

def overall_UseExperimentalDev(*args):
    """


    Activate some unstable devs.  

    python usage : overall_UseExperimentalDev()  

    """
    return _lmgc90.overall_UseExperimentalDev(*args)

def overall_UseExternalFem(*args):
    """


    Allow to use the externalFem library instead of lmgc90 Fem lib.  

    python usage : overall_UseExternalFem()  

    """
    return _lmgc90.overall_UseExternalFem(*args)

def overall_GetMaxInternalTact(*args):
    """


    get max of internal for tact  

    python usage : nb = overall_GetMaxInternalTact()  

    Returns
    -------
    nb (integer) : maximum number of internal for interactions  

    """
    return _lmgc90.overall_GetMaxInternalTact(*args)

def tact_behav_OpenBehavContainer(*args):
    """


    open the container (access as a linked list) in order to add/remove objects  

    python usage : tact_behav_OpenBehavContainer()  

    """
    return _lmgc90.tact_behav_OpenBehavContainer(*args)

def tact_behav_CloseBehavContainer(*args):
    """


    close the container (access as an array)  

    python usage : tact_behav_TactBehavContainer()  

    """
    return _lmgc90.tact_behav_CloseBehavContainer(*args)

def tact_behav_OpenSeeContainer(*args):
    """


    open the container (access as a linked list) in order to add/remove objects  

    python usage : tact_behav_OpenSeeContainer()  

    """
    return _lmgc90.tact_behav_OpenSeeContainer(*args)

def tact_behav_CloseSeeContainer(*args):
    """


    close the container (access as an array)  

    python usage : tact_behav_CloseSeeContainer()  

    """
    return _lmgc90.tact_behav_CloseSeeContainer(*args)

def tact_behav_FillContainersFromFile(*args):
    """


    read DATBOX/TACT_BEHAV.DAT and fill the containers (see and tact)  

    python usage : tact_behav_FillContainersFromFile()  

    """
    return _lmgc90.tact_behav_FillContainersFromFile(*args)

def tact_behav_AddToSeeContainer(*args):
    """


    add a see table to the container  

    python usage :
    tact_behav_AddToSeeContainer(cdbdy,cdtac,cdcol,behav,anbdy,antac,ancol,alert,global_alert)  

    """
    return _lmgc90.tact_behav_AddToSeeContainer(*args)

def tact_behav_ReadBehaviours(*args):
    """


    open + fill + close  

    python usage : tact_behav_ReadBehaviours()  

    """
    return _lmgc90.tact_behav_ReadBehaviours(*args)

def tact_behav_CollectOutTactBehav(*args):
    """


    old fashion read from OUTBOX/TACT_BEHAV.OUT  

    python usage : tact_behav_CollectOutTactBehav()  

    """
    return _lmgc90.tact_behav_CollectOutTactBehav(*args)

def tact_behav_WriteBehaviours(*args):
    """


    write (replace) tact and see to OUTBOX/TACT_BEHAV.OUT  

    python usage : tact_behav_WriteBehaviours()  

    """
    return _lmgc90.tact_behav_WriteBehaviours(*args)

def tact_behav_AppendOutTactBehav(*args):
    """


    write (append) tact and see to OUTBOX/TACT_BEHAV.OUT  

    python usage : tact_behav_AppendOutTactBehav()  

    """
    return _lmgc90.tact_behav_AppendOutTactBehav(*args)

def tact_behav_RebuildInTactBehav(*args):
    """


    write (replace) tact and see to DATBOX/TACT_BEHAV.DAT  

    python usage : tact_behav_RebuildInTactBehav()  

    """
    return _lmgc90.tact_behav_RebuildInTactBehav(*args)

def tact_behav_CleanOutTactBehav(*args):
    """


    erase OUTBOX/TACT_BEHAV.OUT  

    python usage : tact_behav_CleanOutTactBehav()  

    """
    return _lmgc90.tact_behav_CleanOutTactBehav(*args)

def tact_behav_GetNbTactBehav(*args):
    """


    get the number of tact laws  

    python usage : nb_tact_behav = tact_behav_GetNbTactBehav()  

    Parameters
    ----------
    nb_tact_behav(integer) : number of contact behaviour in lmgc90  

    """
    return _lmgc90.tact_behav_GetNbTactBehav(*args)

def tact_behav_GetTactBehav(*args):
    """


    get information related to a given tact law  

    python usage : [lawty, behav, param] = tact_behav_GetTactBehav(i_tb)  

    Parameters
    ----------
    i_tb(integer) : rank (in the contact laws list) of the desired tact_behav  
    lawty(string) : type of the contact law  
    behav(string) : name of the contact law  
    param(real vector) : parameters of the law  

    """
    return _lmgc90.tact_behav_GetTactBehav(*args)

def tact_behav_GetInternalComment(*args):
    """


    Get internal variables comment of a given interaction law.  

    python usage : comment = tact_behav_GetInternalComment(ilaw)  

    Parameters
    ----------
    ilaw(integer) : rank of the interaction law  

    Returns
    -------
    comment (char[100]) : the string to get  

    """
    return _lmgc90.tact_behav_GetInternalComment(*args)

def tact_behav_SetCZMwithInitialFriction(*args):
    """


    define the way friction evolve with damage: =0. constant value, (1. - beta)**pow
    otherwize  

    python usage : tact_behav_SetCZMwithInitialFriction(pow)  

    Parameters
    ----------
    pow(real) : parameter of power law evlution for friction
        mu(beta)=mu_s*(1-beta)**pow  

    """
    return _lmgc90.tact_behav_SetCZMwithInitialFriction(*args)

def tact_behav_initFrictionEvolution(*args):
    """


    [experimental] read a friction time evolution map  

    python usage : tact_behav_initFrictionEvolution()  

    """
    return _lmgc90.tact_behav_initFrictionEvolution(*args)

def tact_behav_setRandomFriction(*args):
    """


    Active variation of local friction.  

    python usage : tact_behav_setRandomFriction(r8)  

    """
    return _lmgc90.tact_behav_setRandomFriction(*args)

def tact_behav_GetTactBehavRankFromName(*args):
    """


    get the rank (in the list of tact laws) of a tact behav law  

    python usage : rank = tact_behav_GetTactBehavRankFromName(c5)  

    """
    return _lmgc90.tact_behav_GetTactBehavRankFromName(*args)

def tact_behav_GetParamRankFromName(*args):
    """


    get the rank of a param for a given tact behav law  

    python usage : rank = tact_behav_GetParamRankFromName(i_tact,c5)  

    """
    return _lmgc90.tact_behav_GetParamRankFromName(*args)

def tact_behav_GetParam(*args):
    """


    get the value of a parameter  

    python usage : param = tact_behav_GetParam(i_tact,i_param)  

    Parameters
    ----------
    i_tact(integer) : rank of the interaction law  
    i_param(integer) : rank of the parameter  
    param(real ) : value of the parameter  

    """
    return _lmgc90.tact_behav_GetParam(*args)

def tact_behav_SetParam(*args):
    """


    set the value ...  

    python usage : tact_behav_SetParam(i_tact, i_param, param)  

    Parameters
    ----------
    i_tact(integer) : rank of the interaction law  
    i_param(integer) : rank of the parameter  
    param(real ) : value of the parameter  

    """
    return _lmgc90.tact_behav_SetParam(*args)

def tact_behav_GetLawInternalComment(*args):
    """


    """
    return _lmgc90.tact_behav_GetLawInternalComment(*args)

def tact_behav_SetRNcap(*args):
    """


    set a maximal compression value  

    python usage : tact_behav_SetRNcap(param)  

    """
    return _lmgc90.tact_behav_SetRNcap(*args)

def tact_behav_SetDilatancyParameters(*args):
    """


    set dilatancy parameters  

    python usage : tact_behav_SetDilatancyParameters(fric,height)  

    """
    return _lmgc90.tact_behav_SetDilatancyParameters(*args)

def tact_behav_SetPressureParameters(*args):
    """


    set pressure parameters  

    Parameters
    ----------
    ibehav(integer) : rank of the tact behav  
    flag(integer) : kind of build-in pressure law (0 no pressure, 1: time dependent,
        2: linearly progressive since crack starts, 3: exponentially progressive
        since crack starts, 4: external)  
    params(double array) : the new value of the params [p0,dp,tau,alpha]  

    python usage : tact_behav_SetPressureParameters(ibehav,flag,params)  

    """
    return _lmgc90.tact_behav_SetPressureParameters(*args)

def tact_behav_CleanMemory(*args):
    """


    Free all memory allocated within tact_behav module.  

    python usage : tact_behav_CleanMemory()  

    """
    return _lmgc90.tact_behav_CleanMemory(*args)

def timer_InitializeTimers(*args):
    """


    Set all timers to 0.  

    python usage : timer_InitializeTimers()  

    """
    return _lmgc90.timer_InitializeTimers(*args)

def timer_WriteOutTimers(*args):
    """


    write the cumulated times of all the timers  

    python usage : timer_WriteOutTimers()  

    """
    return _lmgc90.timer_WriteOutTimers(*args)

def timer_GetNewTimer(*args):
    """


    create a new timer  

    python usage : id = timer_GetNewTimer(name)  

    Parameters
    ----------
    name(string) : name of new timer  

    Returns
    -------
    id (integer) : id of the timer created  

    """
    return _lmgc90.timer_GetNewTimer(*args)

def timer_StartTimer(*args):
    """


    start a given timer  

    python usage : timer_StartTimer(timer_id)  

    Parameters
    ----------
    timer_id(integer) : id of the timer to start  

    """
    return _lmgc90.timer_StartTimer(*args)

def timer_StopTimer(*args):
    """


    stop a given timer, and add the elapsed time since start to the time  

    python usage : timer_StopTimer(timer_id)  

    Parameters
    ----------
    timer_id(integer) : id of the timer to stop  

    """
    return _lmgc90.timer_StopTimer(*args)

def timer_ClearAll(*args):
    """


    clear all timers (internal, external and user)  

    python usage : timer_ClearAll()  

    """
    return _lmgc90.timer_ClearAll(*args)

def utilities_logMes(*args):
    """


    ask to write a message  

    If the message is too long (more than 256 characters) it will be truncated  

    python usage : utilities_logMes(message)  

    Parameters
    ----------
    message(string) : log message to add  
    length(integer) : length of the message string  

    """
    return _lmgc90.utilities_logMes(*args)

def utilities_DisableLogMes(*args):
    """


    disable printing of messages  

    python usage : utilities_DisableLogMes()  

    """
    return _lmgc90.utilities_DisableLogMes(*args)

def utilities_EnableLogMes(*args):
    """


    enable priting of messages  

    python usage : utilities_EnableLogMes()  

    """
    return _lmgc90.utilities_EnableLogMes(*args)

def utilities_setIoUnitLimits(*args):
    """


    set the interval of unit numbers lmgc90 can use to open file  

    """
    return _lmgc90.utilities_setIoUnitLimits(*args)

def utilities_setStopMode(*args):
    """


    Decide to stop or store a message in case of fatal error.  

    python usage : utilities_setStopMode()  

    """
    return _lmgc90.utilities_setStopMode(*args)

def utilities_resetFatal(*args):
    """


    Clean fatal error state.  

    This function is not intended to be used in python but by swig to throw an
    excpetion  

    """
    return _lmgc90.utilities_resetFatal(*args)

def utilities_checkFatal(*args):
    """


    """
    return _lmgc90.utilities_checkFatal(*args)

def utilities_OpenFileStandardOutput(*args):
    """


    Select the file for standard and errors outputs.  

    If the filename is too long (more than 256 characters) it will be truncated  

    python usage : utilities_OpenFileStandardOutput(filename)  

    Parameters
    ----------
    filename(string) : the name of file  
    length(integer) : length the name of the file  

    """
    return _lmgc90.utilities_OpenFileStandardOutput(*args)

def utilities_CloseFileStandardOutput(*args):
    """


    Close the file for standard and errors outputs.  

    python usage : utilities_CloseFileStandardOutput()  

    """
    return _lmgc90.utilities_CloseFileStandardOutput(*args)

def utilities_InitRandomSeed(*args):
    """


    Re-initialize the seed of the build-in random function.  

    python usage : utilities_InitRandomSeed([seed])  

    Parameters
    ----------
    seed(integer array) : an optional desired input seed  

    """
    return _lmgc90.utilities_InitRandomSeed(*args)

def utilities_Finalize(*args):
    """


    End of simulation operations.  

    Only close all possibly opened units by the program.  

    python usage : utilities_Finalize()  

    """
    return _lmgc90.utilities_Finalize(*args)

def a_EF_InterpolateField(*args):
    """


    """
    return _lmgc90.a_EF_InterpolateField(*args)

def a_EF_ComputeCenter(*args):
    """


    Compute the geometric center of an element.  

    python usage : center = a_EF_ComputeCenter(coor)  

    Parameters
    ----------
    coor(double array) : coordinates the nodes of the element  

    Returns
    -------
    center (double array) : computed center of the element  

    """
    return _lmgc90.a_EF_ComputeCenter(*args)

def MecaPolyg_CentralKernel(*args):
    """


    Compute the central kernel of an input surface (which may be composed of several
    polygons)  

    python usage : ck_pts = MecaPolyg_CentralKernel(points, sizes)  

    Parameters
    ----------
    points(double array) : coordinates of the points of the surface (2D)  
    sizes(integer array) : number of vertices of each polygons of the surface  

    Returns
    -------
    ck_pts (double array) : coordinates of the points of the central kernel  

    """
    return _lmgc90.MecaPolyg_CentralKernel(*args)

def MecaPolyg_StressField(*args):
    """


    """
    return _lmgc90.MecaPolyg_StressField(*args)

def parameters_getPhysicTypeId(*args):
    """


    Get the id a body type from its name.  

    usage i_param = parameters_getPhysicTypeId(bodyName)  

    Parameters
    ----------
    bodyName(string): body type name  

    Returns
    -------
    i_param (int) : body type parameter  

    """
    return _lmgc90.parameters_getPhysicTypeId(*args)

def parameters_getPhysicTypeNames(*args):
    """


    Get the list of body types.  

    usage bodyNames = parameters_getPhysicTypeName()  

    Returns
    -------
    bodyName (string array) : body type names  

    """
    return _lmgc90.parameters_getPhysicTypeNames(*args)

def parameters_getBodyModelId(*args):
    """


    Get the id a body model from its name.  

    usage i_param = parameters_getBodyModelId(bodyName)  

    Parameters
    ----------
    bodyName(string): body model name  

    Returns
    -------
    i_param (int) : body model parameter  

    """
    return _lmgc90.parameters_getBodyModelId(*args)

def parameters_getBodyModelNames(*args):
    """


    Get the list of body types.  

    usage bodyNames = parameters_getBodyModelName()  

    Returns
    -------
    bodyName (string array) : body model names  

    """
    return _lmgc90.parameters_getBodyModelNames(*args)

def parameters_getContactorId(*args):
    """


    Get the id a contactor from its name.  

    usage i_param = parameters_getContactorId(bodyName)  

    Parameters
    ----------
    bodyName(string): contactor name  

    Returns
    -------
    i_param (int) : contactor parameter  

    """
    return _lmgc90.parameters_getContactorId(*args)

def parameters_getContactorNames(*args):
    """


    Get the list of contactors.  

    usage bodyNames = parameters_getContactorName()  

    Returns
    -------
    bodyName (string array) : contactor names  

    """
    return _lmgc90.parameters_getContactorNames(*args)

def parameters_getInteractionId(*args):
    """


    Get the id a interaction from its name.  

    usage i_param = parameters_getInteractionId(bodyName)  

    Parameters
    ----------
    bodyName(string): interaction name  

    Returns
    -------
    i_param (int) : interaction parameter  

    """
    return _lmgc90.parameters_getInteractionId(*args)

def parameters_getInteractionNames(*args):
    """


    Get the list of interactions.  

    usage bodyNames = parameters_getInteractionName()  

    Returns
    -------
    bodyName (string array) : interaction names  

    """
    return _lmgc90.parameters_getInteractionNames(*args)

def parameters_getMatrixStorageId(*args):
    """


    Get the id a matrix storage from its name.  

    usage i_param = parameters_getMatrixStorageId(bodyName)  

    Parameters
    ----------
    bodyName(string): matrix storage name  

    Returns
    -------
    i_param (int) : matrix storage parameter  

    """
    return _lmgc90.parameters_getMatrixStorageId(*args)

def parameters_getMatrixStorageNames(*args):
    """


    Get the list of matrix storages.  

    usage bodyNames = parameters_getMatrixStorageName()  

    Returns
    -------
    bodyName (string array) : matrix storage names  

    """
    return _lmgc90.parameters_getMatrixStorageNames(*args)

def parameters_getMatrixShapeId(*args):
    """


    Get the id a matrix shape from its name.  

    usage i_param = parameters_getMatrixShapeId(bodyName)  

    Parameters
    ----------
    bodyName(string): matrix shape name  

    Returns
    -------
    i_param (int) : matrix shape parameter  

    """
    return _lmgc90.parameters_getMatrixShapeId(*args)

def parameters_getMatrixShapeNames(*args):
    """


    Get the list of matrix shapes.  

    usage bodyNames = parameters_getMatrixShapeName()  

    Returns
    -------
    bodyName (string array) : matrix shape names  

    """
    return _lmgc90.parameters_getMatrixShapeNames(*args)

def parameters_getGeneralizedCoordinatesId(*args):
    """


    Get the id a generalized coordinates from its name.  

    usage i_param = parameters_getGeneralizedCoordinatesId(bodyName)  

    Parameters
    ----------
    bodyName(string): generalized coordinates name  

    Returns
    -------
    i_param (int) : generalized coordinates parameter  

    """
    return _lmgc90.parameters_getGeneralizedCoordinatesId(*args)

def parameters_getGeneralizedCoordinatesNames(*args):
    """


    Get the list of generalized coordinatess.  

    usage bodyNames = parameters_getGeneralizedCoordinatesName()  

    Returns
    -------
    bodyName (string array) : generalized coordinates names  

    """
    return _lmgc90.parameters_getGeneralizedCoordinatesNames(*args)

def parameters_getSurfaceEnergyStatusId(*args):
    """


    Get the id a surface energy status from its name.  

    usage i_param = parameters_getSurfaceEnergyStatusId(bodyName)  

    Parameters
    ----------
    bodyName(string): surface energy status name  

    Returns
    -------
    i_param (int) : surface energy status parameter  

    """
    return _lmgc90.parameters_getSurfaceEnergyStatusId(*args)

def parameters_getSurfaceEnergyStatusNames(*args):
    """


    Get the list of surface energy statuss.  

    usage bodyNames = parameters_getSurfaceEnergyStatusName()  

    Returns
    -------
    bodyName (string array) : surface energy status names  

    """
    return _lmgc90.parameters_getSurfaceEnergyStatusNames(*args)

def parameters_getInterLawId(*args):
    """


    Get the id a inter law from its name.  

    usage i_param = parameters_getInterLawId(bodyName)  

    Parameters
    ----------
    bodyName(string): inter law name  

    Returns
    -------
    i_param (int) : inter law parameter  

    """
    return _lmgc90.parameters_getInterLawId(*args)

def parameters_getInterLawNames(*args):
    """


    Get the list of inter laws.  

    usage bodyNames = parameters_getInterLawName()  

    Returns
    -------
    bodyName (string array) : inter law names  

    """
    return _lmgc90.parameters_getInterLawNames(*args)

def parameters_getIntegratorId(*args):
    """


    Get the id a integrator from its name.  

    usage i_param = parameters_getIntegratorId(bodyName)  

    Parameters
    ----------
    bodyName(string): integrator name  

    Returns
    -------
    i_param (int) : integrator parameter  

    """
    return _lmgc90.parameters_getIntegratorId(*args)

def parameters_getIntegratorNames(*args):
    """


    Get the list of integrators.  

    usage bodyNames = parameters_getIntegratorName()  

    Returns
    -------
    bodyName (string array) : integrator names  

    """
    return _lmgc90.parameters_getIntegratorNames(*args)

def parameters_getNodeId(*args):
    """


    Get the id a node from its name.  

    usage i_param = parameters_getNodeId(bodyName)  

    Parameters
    ----------
    bodyName(string): node name  

    Returns
    -------
    i_param (int) : node parameter  

    """
    return _lmgc90.parameters_getNodeId(*args)

def parameters_getNodeNames(*args):
    """


    Get the list of nodes.  

    usage bodyNames = parameters_getNodeName()  

    Returns
    -------
    bodyName (string array) : node names  

    """
    return _lmgc90.parameters_getNodeNames(*args)

def parameters_getDimeModeId(*args):
    """


    Get the id a dime mode from its name.  

    usage i_param = parameters_getDimeModeId(bodyName)  

    Parameters
    ----------
    bodyName(string): dime mode name  

    Returns
    -------
    i_param (int) : dime mode parameter  

    """
    return _lmgc90.parameters_getDimeModeId(*args)

def parameters_getDimeModeNames(*args):
    """


    Get the list of dime modes.  

    usage bodyNames = parameters_getDimeModeName()  

    Returns
    -------
    bodyName (string array) : dime mode names  

    """
    return _lmgc90.parameters_getDimeModeNames(*args)

def parameters_getBodyVectorId(*args):
    """


    Get the id a body vector from its name.  

    usage i_param = parameters_getBodyVectorId(bodyName)  

    Parameters
    ----------
    bodyName(string): body vector name  

    Returns
    -------
    i_param (int) : body vector parameter  

    """
    return _lmgc90.parameters_getBodyVectorId(*args)

def parameters_getBodyVectorNames(*args):
    """


    Get the list of body vectors.  

    usage bodyNames = parameters_getBodyVectorName()  

    Returns
    -------
    bodyName (string array) : body vector names  

    """
    return _lmgc90.parameters_getBodyVectorNames(*args)

def parameters_getContactStatusId(*args):
    """


    Get the id a contact status from its name.  

    usage i_param = parameters_getContactStatusId(bodyName)  

    Parameters
    ----------
    bodyName(string): contact status name  

    Returns
    -------
    i_param (int) : contact status parameter  

    """
    return _lmgc90.parameters_getContactStatusId(*args)

def parameters_getContactStatusNames(*args):
    """


    Get the list of contact statuss.  

    usage bodyNames = parameters_getContactStatusName()  

    Returns
    -------
    bodyName (string array) : contact status names  

    """
    return _lmgc90.parameters_getContactStatusNames(*args)

def parameters_checkAll(*args):
    """


    Check the consistency of all parameters id and name.  

    usage parameters_checkAll()  

    """
    return _lmgc90.parameters_checkAll(*args)

def CLALp_SelectProxTactors(*args):
    """


    contact detection between CLxxx and ALpxx tactors  

    First recup coordinate prediction, then proceed to a box selection to found
    rough contact list and finally compute the final contact list.  
    If reset not equal to 0, the initialization flag is reset and detection skipped  

    python usage : CLALp_SelectProxTactors(reset=0, use_external=0)  

    Parameters
    ----------
    reset(integer) : if not 0, detection is skipped but the boxes will be computed
        anew at next call  
    use_external(integer) : if not 0, external detection is used  

    """
    return _lmgc90.CLALp_SelectProxTactors(*args)

def CLALp_UpdateWear(*args):
    """


    python usage : CLALp_UpdateWear()  

    """
    return _lmgc90.CLALp_UpdateWear(*args)

def CLALp_WriteLastVlocRloc(*args):
    """


    write last local values of all CLALp contacts  

    The values written are relative velocity, forces and local frame  

    python usage : CLALp_WriteLastVlocRloc()  

    """
    return _lmgc90.CLALp_WriteLastVlocRloc(*args)

def CLALp_WriteOutVlocRloc(*args):
    """


    write local values of all CLALp contacts  

    The values written are relative velocity, forces and local frame  

    python usage : CLALp_WriteOutVlocRloc()  

    """
    return _lmgc90.CLALp_WriteOutVlocRloc(*args)

def CLALp_DisplayOutVlocRloc(*args):
    """


    display local values of all CLALp contacts  

    The values displayed are relative velocity, forces and local frame  

    python usage : CLALp_DisplayOutVlocRloc()  

    """
    return _lmgc90.CLALp_DisplayOutVlocRloc(*args)

def CLALp_DisplayProxTactors(*args):
    """


    display contacts  

    python usage : CLALp_DisplayProxTactors()  

    """
    return _lmgc90.CLALp_DisplayProxTactors(*args)

def CLALp_ReadIniVlocRloc(*args):
    """


    Read VlocRloc file.  

    *   If num <= 0 : DATBOX/VlocRloc.INI file is read  
    *   Else : OUTBOX/VlocRloc.OUT.num is read, num being +the parameter used in
        TimeEvolution_ReadIniVlocRloc last call  

    python usage : CLALp_ReadIniVlocRloc(num=0)  

    Parameters
    ----------
    num(integer) : which VlocRloc file to read  

    """
    return _lmgc90.CLALp_ReadIniVlocRloc(*args)

def CLALp_SetNonSymmetricDetection(*args):
    """


    this function allows non symmetric detection i.e. only one interaction is kept
    when two bodies with candidate and antagonist contactors see each other  

    python usage : CLALp_SetNonSymmetricDetection()  

    """
    return _lmgc90.CLALp_SetNonSymmetricDetection(*args)

def CLALp_Trim(*args):
    """


    trim contact (only contact within a line - not with extremities)  

    python usage : CLALp_Trim()  

    """
    return _lmgc90.CLALp_Trim(*args)

def CLALp_CleanMemory(*args):
    """


    Free all memory allocated within CLALp module.  

    python usage : CLALp_CleanMemory()  

    """
    return _lmgc90.CLALp_CleanMemory(*args)

def CLJCx_SelectProxTactors(*args):
    """


    contact detection between CLxxx and JCxxx tactors  

    First recup coordinate prediction, then proceed to a box selection to found
    rough contact list and finally compute the final contact list.  

    python usage : CLJCx_SelectProxTactors(reset=0)  

    Parameters
    ----------
    reset(integer) : if not 0, detection is skipped but the boxes will be computed
        anew at next call  

    """
    return _lmgc90.CLJCx_SelectProxTactors(*args)

def CLJCx_WriteLastVlocRloc(*args):
    """


    write last local values of all CLJCx contacts  

    The values written are relative velocity, forces and local frame  

    python usage : CLJCx_WriteLastVlocRloc()  

    """
    return _lmgc90.CLJCx_WriteLastVlocRloc(*args)

def CLJCx_WriteOutVlocRloc(*args):
    """


    write local values of all CLJCx contacts  

    The values written are relative velocity, forces and local frame  

    python usage : CLJCx_WriteOutVlocRloc()  

    """
    return _lmgc90.CLJCx_WriteOutVlocRloc(*args)

def CLJCx_DisplayOutVlocRloc(*args):
    """


    display local values of all CLJCx contacts  

    The values displayed are relative velocity, forces and local frame  

    python usage : CLJCx_DisplayOutVlocRloc()  

    """
    return _lmgc90.CLJCx_DisplayOutVlocRloc(*args)

def CLJCx_DisplayProxTactors(*args):
    """


    display contacts  

    python usage : CLJCx_DisplayProxTactors()  

    """
    return _lmgc90.CLJCx_DisplayProxTactors(*args)

def CLJCx_ReadIniVlocRloc(*args):
    """


    Read VlocRloc file.  

    *   If num <= 0 : DATBOX/VlocRloc.INI file is read  
    *   Else : OUTBOX/VlocRloc.OUT.num is read, num being +the parameter used in
        TimeEvolution_ReadIniVlocRloc last call  

    usage : CLJCx_ReadIniVlocRloc(num=0)  

    Parameters
    ----------
    num(integer) : which VlocRloc file to read  

    """
    return _lmgc90.CLJCx_ReadIniVlocRloc(*args)

def CLJCx_CleanMemory(*args):
    """


    Free all memory allocated within CLJCx module.  

    python usage : CLJCx_CleanMemory()  

    """
    return _lmgc90.CLJCx_CleanMemory(*args)

def DKALp_SelectProxTactors(*args):
    """


    contact detection between DISKx and ALpxx tactors  

    First recup coordinate prediction, then proceed to a box selection to found
    rough contact list and finally compute the final contact list.  

    python usage : DKALp_SelectProxTactors(reset=0)  

    Parameters
    ----------
    reset(integer) : if not 0, detection is skipped but the boxes will be computed
        anew at next call  

    """
    return _lmgc90.DKALp_SelectProxTactors(*args)

def DKALp_WriteLastVlocRloc(*args):
    """


    write last local values of all DKALp contacts  

    The values written are relative velocity, forces and local frame  

    python usage : DKALp_WriteLastVlocRloc()  

    """
    return _lmgc90.DKALp_WriteLastVlocRloc(*args)

def DKALp_WriteOutVlocRloc(*args):
    """


    write local values of all DKALp contacts  

    The values written are relative velocity, forces and local frame  

    python usage : DKALp_WriteOutVlocRloc()  

    """
    return _lmgc90.DKALp_WriteOutVlocRloc(*args)

def DKALp_DisplayOutVlocRloc(*args):
    """


    display local values of all DKALp contacts  

    The values displayed are relative velocity, forces and local frame  

    python usage : DKALp_DisplayOutVlocRloc()  

    """
    return _lmgc90.DKALp_DisplayOutVlocRloc(*args)

def DKALp_DisplayProxTactors(*args):
    """


    display contacts  

    python usage : DKALp_DisplayProxTactors()  

    """
    return _lmgc90.DKALp_DisplayProxTactors(*args)

def DKALp_ReadIniVlocRloc(*args):
    """


    Read VlocRloc file.  

    *   If num <= 0 : DATBOX/VlocRloc.INI file is read  
    *   Else : OUTBOX/VlocRloc.OUT.num is read, num being +the parameter used in
        TimeEvolution_ReadIniVlocRloc last call  

    python usage : DKALp_ReadIniVlocRloc(num=0)  

    Parameters
    ----------
    num(integer) : which VlocRloc file to read  

    """
    return _lmgc90.DKALp_ReadIniVlocRloc(*args)

def DKALp_CleanMemory(*args):
    """


    Free all memory allocated within DKALp module.  

    python usage : DKALp_CleanMemory()  

    """
    return _lmgc90.DKALp_CleanMemory(*args)

def DKDKL_SelectProxTactors(*args):
    """


    contact detection between DISKx and DISKL tactors  

    First recup coordinate prediction, then proceed to a box selection to found
    rough contact list and finally compute the final contact list.  

    python usage : DKDKL_SelectProxTactors(reset=0)  

    Parameters
    ----------
    reset(integer) : if not 0, detection is skipped but the boxes will be computed
        anew at next call  

    """
    return _lmgc90.DKDKL_SelectProxTactors(*args)

def DKDKL_SmoothForceComputation(*args):
    """


    explicit computation of contact forces  

    python usage : DKDKL_SmoothForceComputation  

    """
    return _lmgc90.DKDKL_SmoothForceComputation(*args)

def DKDKL_WriteLastVlocRloc(*args):
    """


    write last local values of all DKDKL contacts  

    The values written are relative velocity, forces and local frame  

    python usage : DKDKL_WriteLastVlocRloc()  

    The values written are relative velocity, forces and local frame  

    """
    return _lmgc90.DKDKL_WriteLastVlocRloc(*args)

def DKDKL_WriteOutVlocRloc(*args):
    """


    write local values of all DKDKL contacts  

    The values written are relative velocity, forces and local frame  

    python usage : DKDKL_WriteOutVlocRloc()  

    """
    return _lmgc90.DKDKL_WriteOutVlocRloc(*args)

def DKDKL_DisplayOutVlocRloc(*args):
    """


    display local values of all DKDKL contacts  

    The values displayed are relative velocity, forces and local frame  

    python usage : DKDKL_DisplayOutVlocRloc()  

    """
    return _lmgc90.DKDKL_DisplayOutVlocRloc(*args)

def DKDKL_DisplayProxTactors(*args):
    """


    display contacts  

    python usage : DKDKL_DisplayProxTactors()  

    """
    return _lmgc90.DKDKL_DisplayProxTactors(*args)

def DKDKL_ReadIniVlocRloc(*args):
    """


    Read VlocRloc file.  

    *   If num <= 0 : DATBOX/VlocRloc.INI file is read  
    *   Else : OUTBOX/VlocRloc.OUT.num is read, num being
        -   the parameter used in TimeEvolution_ReadIniVlocRloc last call  

    python usage : DKDKL_ReadIniVlocRloc(num=0)  

    Parameters
    ----------
    num(integer) : which VlocRloc file to read  

    """
    return _lmgc90.DKDKL_ReadIniVlocRloc(*args)

def DKDKL_SetPeriodicCondition(*args):
    """


    initialize data for simulation using periodic condition  

    python usage : DKDKL_SetPeriodicCondition(period)  

    Parameters
    ----------
    period(double) : value of the period  

    """
    return _lmgc90.DKDKL_SetPeriodicCondition(*args)

def DKDKL_CleanMemory(*args):
    """


    Free all memory allocated within DKDKL module.  

    python usage : DKDKL_CleanMemory()  

    """
    return _lmgc90.DKDKL_CleanMemory(*args)

def DKDKx_SelectProxTactors(*args):
    """


    contact detection between CLxxx and JCxxx tactors  

    First recup coordinate prediction, then proceed to a box selection to found
    rough contact list and finally compute the final contact list.  

    python usage : DKDKx_SelectProxTactors(reset=0)  

    Parameters
    ----------
    reset(integer) : if not 0, detection is skipped but the boxes will be computed
        anew at next call  

    """
    return _lmgc90.DKDKx_SelectProxTactors(*args)

def DKDKx_SmoothForceComputation(*args):
    """


    explicit computation of contact forces  

    python usage : DKDKx_SmoothForceComputation()  

    """
    return _lmgc90.DKDKx_SmoothForceComputation(*args)

def DKDKx_UseVaVDetection(*args):
    """


    allow to increase the number of contact for a pair cd/an.  

    python usage : DKDKx_UseVaVDetection(nb)  

    Parameters
    ----------
    nb(integer) : number of contact points for a couple (cd,an)  

    """
    return _lmgc90.DKDKx_UseVaVDetection(*args)

def DKDKx_WriteLastVlocRloc(*args):
    """


    write last local values of all DKDKx contacts  

    The values written are relative velocity, forces and local frame  

    python usage : DKDKx_WriteLastVlocRloc()  

    """
    return _lmgc90.DKDKx_WriteLastVlocRloc(*args)

def DKDKx_WriteOutVlocRloc(*args):
    """


    write local values of all DKDKx contacts  

    The values written are relative velocity, forces and local frame  

    python usage : DKDKx_WriteOutVlocRloc()  

    """
    return _lmgc90.DKDKx_WriteOutVlocRloc(*args)

def DKDKx_DisplayOutVlocRloc(*args):
    """


    display local values of all DKDKx contacts  

    The values displayed are relative velocity, forces and local frame  

    python usage : DKDKx_DisplayOutVlocRloc()  

    """
    return _lmgc90.DKDKx_DisplayOutVlocRloc(*args)

def DKDKx_DisplayProxTactors(*args):
    """


    display contacts  

    python usage : DKDKx_DisplayProxTactors()  

    """
    return _lmgc90.DKDKx_DisplayProxTactors(*args)

def DKDKx_ReadIniVlocRloc(*args):
    """


    Read VlocRloc file.  

    *   If num <= 0 : DATBOX/VlocRloc.INI file is read  
    *   Else : OUTBOX/VlocRloc.OUT.num is read, num being
        -   the parameter used in TimeEvolution_ReadIniVlocRloc last call  

    python usage : DKDKx_ReadIniVlocRloc(num=0)  

    Parameters
    ----------
    num(integer) : which VlocRloc file to read  

    """
    return _lmgc90.DKDKx_ReadIniVlocRloc(*args)

def DKDKx_SetPeriodicCondition(*args):
    """


    initialize data for simulation using periodic condition  

    python usage : DKDKx_SetPeriodicCondition(period)  

    Parameters
    ----------
    period(double) : value of the period  

    """
    return _lmgc90.DKDKx_SetPeriodicCondition(*args)

def DKDKx_SetFrictionModel(*args):
    """


    initialize data for simulation using evolutive local friction  

    python usage : DKDKx_SetFrictionModel(cflag)  

    Parameters
    ----------
    cflag(char) : model to use ('min', 'max' or 'ave')  

    """
    return _lmgc90.DKDKx_SetFrictionModel(*args)

def DKDKx_SetSurfaceSectors(*args):
    """


    Set the number of angular sectors of the surface of contactors.  

    python usage : DKDKx_SetSurfaceSectors(nbsect)  

    Parameters
    ----------
    nbsect(integer) : number of sectors  

    """
    return _lmgc90.DKDKx_SetSurfaceSectors(*args)

def DKDKx_UpdateSurfaceEnergySector(*args):
    """


    update surface energy sector  

    python usage : DKDKx_UpdateSurfaceEnergySector()  

    """
    return _lmgc90.DKDKx_UpdateSurfaceEnergySector(*args)

def DKDKx_ComputeStress(*args):
    """


    update surface energy sector  

    python usage : DKDKx_ComputeStress()  

    """
    return _lmgc90.DKDKx_ComputeStress(*args)

def DKDKx_ComputeBetai(*args):
    """


    compute equivalent damage parameter  

    python usage : DKDKx_ComputeBetai()  

    """
    return _lmgc90.DKDKx_ComputeBetai(*args)

def DKDKx_ComputeCZMEnergy(*args):
    """


    compute and decompose local contact energy with CZM law  

    python usage : DKDKx_ComputeCZMEnergy()  

    """
    return _lmgc90.DKDKx_ComputeCZMEnergy(*args)

def DKDKx_CleanMemory(*args):
    """


    Free all memory allocated within DKDKx module.  

    python usage : DKDKx_CleanMemory()  

    """
    return _lmgc90.DKDKx_CleanMemory(*args)

def DKDKx_GetCZMEnergy(*args):
    """


    Get the CZM energy of a given contact.  

    python usage : energy = DKDKx_GetCZMEnergy(icdan)  

    Parameters
    ----------
    icdan(int): index of the DKDKx contact  

    Returns
    -------
    energy(double[4]) : energy value  

    """
    return _lmgc90.DKDKx_GetCZMEnergy(*args)

def DKJCx_SelectProxTactors(*args):
    """


    contact detection between DISKx and JONCx tactors  

    First recup coordinate prediction, then proceed to a box selection to found
    rough contact list and finally compute the final contact list.  

    python usage : DKJCx_SelectProxTactors(reset=0)  

    Parameters
    ----------
    reset(integer) : if not 0, detection is skipped but the boxes will be computed
        anew at next call  

    """
    return _lmgc90.DKJCx_SelectProxTactors(*args)

def DKJCx_SmoothForceComputation(*args):
    """


    explicit computation of contact forces  

    python usage : DKJCx_SmoothForceComputation()  

    """
    return _lmgc90.DKJCx_SmoothForceComputation(*args)

def DKJCx_WriteLastVlocRloc(*args):
    """


    write last local values of all DKJCx contacts  

    The values written are relative velocity, forces and local frame  

    python usage : DKJCx_WriteLastVlocRloc()  

    """
    return _lmgc90.DKJCx_WriteLastVlocRloc(*args)

def DKJCx_WriteOutVlocRloc(*args):
    """


    write local values of all DKJCx contacts  

    The values written are relative velocity, forces and local frame  

    python usage : DKJCx_WriteOutVlocRloc()  

    """
    return _lmgc90.DKJCx_WriteOutVlocRloc(*args)

def DKJCx_DisplayOutVlocRloc(*args):
    """


    display local values of all DKJCx contacts  

    The values displayed are relative velocity, forces and local frame  

    python usage : DKJCx_DisplayOutVlocRloc()  

    """
    return _lmgc90.DKJCx_DisplayOutVlocRloc(*args)

def DKJCx_DisplayProxTactors(*args):
    """


    display contacts  

    python usage : DKJCx_DisplayProxTactors()  

    """
    return _lmgc90.DKJCx_DisplayProxTactors(*args)

def DKJCx_ReadIniVlocRloc(*args):
    """


    Read VlocRloc file.  

    *   If num <= 0 : DATBOX/VlocRloc.INI file is read  
    *   Else : OUTBOX/VlocRloc.OUT.num is read, num being
        -   the parameter used in TimeEvolution_ReadIniVlocRloc last call  

    python usage : DKJCx_ReadIniVlocRloc(num=0)  

    Parameters
    ----------
    num(integer) : which VlocRloc file to read  

    """
    return _lmgc90.DKJCx_ReadIniVlocRloc(*args)

def DKJCx_SetSurfaceSectors(*args):
    """


    Set the number of angular sectors of the surface of contactors.  

    python usage : DKJCx_SetSurfaceSectors(nbsect)  

    Parameters
    ----------
    nbsect(integer) : number of sectors  

    """
    return _lmgc90.DKJCx_SetSurfaceSectors(*args)

def DKJCx_ComputeStress(*args):
    """


    compute the DKJC contribution to the equivalent stress tensor  

    python usage : DKJCx_ComputeStress()  

    """
    return _lmgc90.DKJCx_ComputeStress(*args)

def DKJCx_CleanMemory(*args):
    """


    Free all memory allocated within DKJCx module.  

    python usage : DKJCx_CleanMemory()  

    """
    return _lmgc90.DKJCx_CleanMemory(*args)

def DKJCx_SetFrictionModel(*args):
    """


    initialize data for simulation using evolutive local friction  

    python usage : DKJCx_SetFrictionModel(cflag)  

    Parameters
    ----------
    cflag(char) : model to use ('min', 'max' or 'ave')  

    """
    return _lmgc90.DKJCx_SetFrictionModel(*args)

def DKKDx_SelectProxTactors(*args):
    """


    contact detection between DISKx and xKSID tactors  

    First recup coordinate prediction, then proceed to a box selection to found
    rough contact list and finally compute the final contact list.  

    python usage : DKKDx_SelectProxTactors(reset=0)  

    Parameters
    ----------
    reset(integer) : if not 0, detection is skipped but the boxes will be computed
        anew at next call  

    """
    return _lmgc90.DKKDx_SelectProxTactors(*args)

def DKKDx_SmoothForceComputation(*args):
    """


    explicit computation of contact forces  

    python usage : DKKDx_SmoothForceComputation()  

    """
    return _lmgc90.DKKDx_SmoothForceComputation(*args)

def DKKDx_WriteLastVlocRloc(*args):
    """


    write last local values of all DKKDx contacts  

    The values written are relative velocity, forces and local frame  

    python usage : DKKDx_WriteLastVlocRloc()  

    """
    return _lmgc90.DKKDx_WriteLastVlocRloc(*args)

def DKKDx_WriteOutVlocRloc(*args):
    """


    write local values of all DKKDx contacts  

    The values written are relative velocity, forces and local frame  

    python usage : DKKDx_WriteOutVlocRloc()  

    """
    return _lmgc90.DKKDx_WriteOutVlocRloc(*args)

def DKKDx_DisplayOutVlocRloc(*args):
    """


    display local values of all DKKDx contacts  

    The values displayed are relative velocity, forces and local frame  

    python usage : DKKDx_DisplayOutVlocRloc()  

    """
    return _lmgc90.DKKDx_DisplayOutVlocRloc(*args)

def DKKDx_DisplayProxTactors(*args):
    """


    display contacts  

    python usage : DKKDx_DisplayProxTactors()  

    """
    return _lmgc90.DKKDx_DisplayProxTactors(*args)

def DKKDx_ReadIniVlocRloc(*args):
    """


    Read VlocRloc file.  

    *   If num <= 0 : DATBOX/VlocRloc.INI file is read  
    *   Else : OUTBOX/VlocRloc.OUT.num is read, num being
        -   the parameter used in TimeEvolution_ReadIniVlocRloc last call  

    python usage : DKKDx_ReadIniVlocRloc(num=0)  

    Parameters
    ----------
    num(integer) : which VlocRloc file to read  

    """
    return _lmgc90.DKKDx_ReadIniVlocRloc(*args)

def DKKDx_SetSurfaceSectors(*args):
    """


    Set the number of angular sectors of the surface of contactors.  

    python usage : DKKDx_SetSurfaceSectors(nbsect)  

    Parameters
    ----------
    nbsect(integer) : number of sectors  

    """
    return _lmgc90.DKKDx_SetSurfaceSectors(*args)

def DKKDx_CleanMemory(*args):
    """


    Free all memory allocated within DKKDx module.  

    python usage : DKKDx_CleanMemory()  

    """
    return _lmgc90.DKKDx_CleanMemory(*args)

def DKPLx_SelectProxTactors(*args):
    """


    contact detection between DISKx and POLYG tactors  

    First recup coordinate prediction, then proceed to a box selection to found
    rough contact list and finally compute the final contact list.  

    python usage : DKPLx_SelectProxTactors(reset=0)  

    Parameters
    ----------
    reset(integer) : if not 0, detection is skipped but the boxes will be computed
        anew at next call  

    """
    return _lmgc90.DKPLx_SelectProxTactors(*args)

def DKPLx_WriteLastVlocRloc(*args):
    """


    write last local values of all DKPLx contacts  

    The values written are relative velocity, forces and local frame  

    python usage : DKPLx_WriteLastVlocRloc()  

    """
    return _lmgc90.DKPLx_WriteLastVlocRloc(*args)

def DKPLx_WriteOutVlocRloc(*args):
    """


    write local values of all DKPLx contacts  

    The values written are relative velocity, forces and local frame  

    python usage : DKPLx_WriteOutVlocRloc()  

    """
    return _lmgc90.DKPLx_WriteOutVlocRloc(*args)

def DKPLx_DisplayOutVlocRloc(*args):
    """


    display local values of all DKPLx contacts  

    The values displayed are relative velocity, forces and local frame  

    python usage : DKPLx_DisplayOutVlocRloc()  

    """
    return _lmgc90.DKPLx_DisplayOutVlocRloc(*args)

def DKPLx_DisplayProxTactors(*args):
    """


    display contacts  

    python usage : DKPLx_DisplayProxTactors()  

    """
    return _lmgc90.DKPLx_DisplayProxTactors(*args)

def DKPLx_ReadIniVlocRloc(*args):
    """


    Read VlocRloc file.  

    *   If num <= 0 : DATBOX/VlocRloc.INI file is read  
    *   Else : OUTBOX/VlocRloc.OUT.num is read, num being
        -   the parameter used in TimeEvolution_ReadIniVlocRloc last call  

    python usage : DKPLx_ReadIniVlocRloc(num=0)  

    Parameters
    ----------
    num(integer) : which VlocRloc file to read  

    """
    return _lmgc90.DKPLx_ReadIniVlocRloc(*args)

def DKPLx_SetPeriodicCondition(*args):
    """


    initialize data for simulation using periodic condition  

    python usage : DKPLx_SetPeriodicCondition(period)  

    Parameters
    ----------
    period(double) : value of the period  

    """
    return _lmgc90.DKPLx_SetPeriodicCondition(*args)

def DKPLx_CleanMemory(*args):
    """


    Free all memory allocated within DKPLx module.  

    python usage : DKPLx_CleanMemory()  

    """
    return _lmgc90.DKPLx_CleanMemory(*args)

def P2P2L_SelectProxTactors(*args):
    """


    contact detection between PT2DL tactors  

    First recup coordinate prediction, then proceed to a box selection to found
    rough contact list and finally compute the final contact list.  

    python usage : P2P2L_SelectProxTactors(reset=0)  

    Parameters
    ----------
    reset(integer) : if not 0, detection is skipped but the boxes will be computed
        anew at next call  

    """
    return _lmgc90.P2P2L_SelectProxTactors(*args)

def P2P2L_WriteLastVlocRloc(*args):
    """


    write last local values of all P2P2L contacts  

    The values written are relative velocity, forces and local frame  

    python usage : P2P2L_WriteLastVlocRloc()  

    """
    return _lmgc90.P2P2L_WriteLastVlocRloc(*args)

def P2P2L_WriteOutVlocRloc(*args):
    """


    write local values of all P2P2L contacts  

    The values written are relative velocity, forces and local frame  

    python usage : P2P2L_WriteOutVlocRloc()  

    """
    return _lmgc90.P2P2L_WriteOutVlocRloc(*args)

def P2P2L_DisplayOutVlocRloc(*args):
    """


    display local values of all P2P2L contacts  

    The values displayed are relative velocity, forces and local frame  

    python usage : P2P2L_DisplayOutVlocRloc()  

    """
    return _lmgc90.P2P2L_DisplayOutVlocRloc(*args)

def P2P2L_DisplayProxTactors(*args):
    """


    display contacts  

    python usage : P2P2L_DisplayProxTactors()  

    """
    return _lmgc90.P2P2L_DisplayProxTactors(*args)

def P2P2L_ReadIniVlocRloc(*args):
    """


    Read VlocRloc file.  

    *   If num <= 0 : DATBOX/VlocRloc.INI file is read  
    *   Else : OUTBOX/VlocRloc.OUT.num is read, num being
        -   the parameter used in TimeEvolution_ReadIniVlocRloc last call  

    python usage : P2P2L_ReadIniVlocRloc(num=0)  

    Parameters
    ----------
    num(integer) : which VlocRloc file to read  

    """
    return _lmgc90.P2P2L_ReadIniVlocRloc(*args)

def P2P2L_CleanMemory(*args):
    """


    Free all memory allocated within P2P2L module.  

    python usage : P2P2L_CleanMemory()  

    """
    return _lmgc90.P2P2L_CleanMemory(*args)

def PLALp_SelectProxTactors(*args):
    """


    contact detection between POLYG and ALpxx tactors  

    First recup coordinate prediction, then proceed to a box selection to found
    rough contact list and finally compute the final contact list.  

    python usage : PLALp_SelectProxTactors(reset=0)  

    Parameters
    ----------
    reset(integer) : if not 0, detection is skipped but the boxes will be computed
        anew at next call  

    """
    return _lmgc90.PLALp_SelectProxTactors(*args)

def PLALp_WriteLastVlocRloc(*args):
    """


    write last local values of all PLALp contacts  

    The values written are relative velocity, forces and local frame  

    python usage : PLALp_WriteLastVlocRloc()  

    """
    return _lmgc90.PLALp_WriteLastVlocRloc(*args)

def PLALp_WriteOutVlocRloc(*args):
    """


    write local values of all PLALp contacts  

    The values written are relative velocity, forces and local frame  

    python usage : PLALp_WriteOutVlocRloc()  

    """
    return _lmgc90.PLALp_WriteOutVlocRloc(*args)

def PLALp_DisplayOutVlocRloc(*args):
    """


    display local values of all PLALp contacts  

    The values displayed are relative velocity, forces and local frame  

    python usage : PLALp_DisplayOutVlocRloc()  

    """
    return _lmgc90.PLALp_DisplayOutVlocRloc(*args)

def PLALp_DisplayProxTactors(*args):
    """


    display contacts  

    python usage : PLALp_DisplayProxTactors()  

    """
    return _lmgc90.PLALp_DisplayProxTactors(*args)

def PLALp_ReadIniVlocRloc(*args):
    """


    Read VlocRloc file.  

    -If num <= 0 : DATBOX/VlocRloc.INI file is read -Else : OUTBOX/VlocRloc.OUT.num
    is read, num being  

    *   the parameter used in TimeEvolution_ReadIniVlocRloc last call  

    python usage : PLALp_ReadIniVlocRloc(num=0)  

    Parameters
    ----------
    num(integer) : which VlocRloc file to read  

    """
    return _lmgc90.PLALp_ReadIniVlocRloc(*args)

def PLALp_CleanMemory(*args):
    """


    Free all memory allocated within PLALp module.  

    python usage : PLALp_CleanMemory()  

    """
    return _lmgc90.PLALp_CleanMemory(*args)

def PLJCx_SelectProxTactors(*args):
    """


    contact detection between POLYG and JONCx tactors  

    First recup coordinate prediction, then proceed to a box selection to found
    rough contact list and finally compute the final contact list.  

    python usage : PLJCx_SelectProxTactors(reset=0)  

    Parameters
    ----------
    reset(integer) : if not 0, detection is skipped but the boxes will be computed
        anew at next call  

    """
    return _lmgc90.PLJCx_SelectProxTactors(*args)

def PLJCx_WriteLastVlocRloc(*args):
    """


    write last local values of all PLJCx contacts  

    The values written are relative velocity, forces and local frame  

    python usage : PLJCx_WriteLastVlocRloc()  

    """
    return _lmgc90.PLJCx_WriteLastVlocRloc(*args)

def PLJCx_WriteOutVlocRloc(*args):
    """


    write local values of all PLJCx contacts  

    The values written are relative velocity, forces and local frame  

    python usage : PLJCx_WriteOutVlocRloc()  

    """
    return _lmgc90.PLJCx_WriteOutVlocRloc(*args)

def PLJCx_DisplayOutVlocRloc(*args):
    """


    display local values of all PLJCx contacts  

    The values displayed are relative velocity, forces and local frame  

    python usage : PLJCx_DisplayOutVlocRloc()  

    """
    return _lmgc90.PLJCx_DisplayOutVlocRloc(*args)

def PLJCx_DisplayProxTactors(*args):
    """


    display contacts  

    python usage : PLJCx_DisplayProxTactors()  

    """
    return _lmgc90.PLJCx_DisplayProxTactors(*args)

def PLJCx_ReadIniVlocRloc(*args):
    """


    Read VlocRloc file.  

    *   If num <= 0 : DATBOX/VlocRloc.INI file is read  
    *   Else : OUTBOX/VlocRloc.OUT.num is read, num being
        -   the parameter used in TimeEvolution_ReadIniVlocRloc last call  

    python usage : PLJCx_ReadIniVlocRloc(num=0)  

    Parameters
    ----------
    num(integer) : which VlocRloc file to read  

    """
    return _lmgc90.PLJCx_ReadIniVlocRloc(*args)

def PLJCx_ComputeStress(*args):
    """


    compute the PLJC contribution to the equivalent stress tensor  

    python usage : PLJCx_ComputeStress()  

    """
    return _lmgc90.PLJCx_ComputeStress(*args)

def PLJCx_CleanMemory(*args):
    """


    Free all memory allocated within PLJCx module.  

    python usage : PLJCx_CleanMemory()  

    """
    return _lmgc90.PLJCx_CleanMemory(*args)

def PLJCx_SetFrictionModel(*args):
    """


    initialize data for simulation using evolutive local friction  

    python usage : PLJCx_SetFrictionModel(cflag)  

    Parameters
    ----------
    cflag(char) : model to use ('min', 'max' or 'ave')  

    """
    return _lmgc90.PLJCx_SetFrictionModel(*args)

def PLPLx_SelectProxTactors(*args):
    """


    contact detection between POLYG tactors  

    First recup coordinate prediction, then proceed to a box selection to found
    rough contact list and finally compute the final contact list.  

    python usage : PLPLx_SelectProxTactors(reset=0)  

    Parameters
    ----------
    reset(integer) : if not 0, detection is skipped but the boxes will be computed
        anew at next call  

    """
    return _lmgc90.PLPLx_SelectProxTactors(*args)

def PLPLx_WriteLastVlocRloc(*args):
    """


    write last local values of all PLPLx contacts  

    The values written are relative velocity, forces and local frame  

    python usage : PLPLx_WriteLastVlocRloc()  

    """
    return _lmgc90.PLPLx_WriteLastVlocRloc(*args)

def PLPLx_WriteOutVlocRloc(*args):
    """


    write local values of all PLPLx contacts  

    The values written are relative velocity, forces and local frame  

    python usage : PLPLx_WriteOutVlocRloc()  

    """
    return _lmgc90.PLPLx_WriteOutVlocRloc(*args)

def PLPLx_DisplayOutVlocRloc(*args):
    """


    display local values of all PLPLx contacts  

    The values displayed are relative velocity, forces and local frame  

    python usage : PLPLx_DisplayOutVlocRloc()  

    """
    return _lmgc90.PLPLx_DisplayOutVlocRloc(*args)

def PLPLx_DisplayProxTactors(*args):
    """


    display contacts  

    python usage : PLPLx_DisplayProxTactors()  

    """
    return _lmgc90.PLPLx_DisplayProxTactors(*args)

def PLPLx_ReadIniVlocRloc(*args):
    """


    Read VlocRloc file.  

    *   If num <= 0 : DATBOX/VlocRloc.INI file is read  
    *   Else : OUTBOX/VlocRloc.OUT.num is read, num being
        -   the parameter used in TimeEvolution_ReadIniVlocRloc last call  

    python usage : PLPLx_ReadIniVlocRloc(num=0)  

    Parameters
    ----------
    num(integer) : which VlocRloc file to read  

    """
    return _lmgc90.PLPLx_ReadIniVlocRloc(*args)

def PLPLx_SetPeriodicCondition(*args):
    """


    initialize data for simulation using periodic condition  

    python usage : PLPLx_SetPeriodicCondition(period)  

    Parameters
    ----------
    period(double) : value of the period  

    """
    return _lmgc90.PLPLx_SetPeriodicCondition(*args)

def PLPLx_SetFrictionModel(*args):
    """


    initialize data for simulation using evolutive local friction  

    python usage : PLPLx_SetFrictionModel(cflag)  

    Parameters
    ----------
    cflag(char) : model to use ('min', 'max' or 'ave')  

    """
    return _lmgc90.PLPLx_SetFrictionModel(*args)

def PLPLx_SetBigPolygTolerance(*args):
    """


    python usage : PLPLx_SetBigPolygTolerance(tol)  

    Parameters
    ----------
    period(double) : value of the tolerance  

    """
    return _lmgc90.PLPLx_SetBigPolygTolerance(*args)

def PLPLx_ComputeStress(*args):
    """


    compute stress  

    python usage : PLPLx_ComputeStress()  

    """
    return _lmgc90.PLPLx_ComputeStress(*args)

def PLPLx_ComputeBetai(*args):
    """


    compute equivalent damage parameter  

    python usage : PLPLx_ComputeBetai()  

    """
    return _lmgc90.PLPLx_ComputeBetai(*args)

def PLPLx_ComputeCZMEnergy(*args):
    """


    compute and decompose local contact energy with CZM law  

    python usage : PLPLx_ComputeCZMEnergy()  

    """
    return _lmgc90.PLPLx_ComputeCZMEnergy(*args)

def PLPLx_CleanMemory(*args):
    """


    Free all memory allocated within PLPLx module.  

    python usage : PLPLx_CleanMemory()  

    """
    return _lmgc90.PLPLx_CleanMemory(*args)

def PLPLx_GetCZMEnergy(*args):
    """


    Get the CZM energy of a given contact.  

    python usage energy = PLPLx_GetCZMEnergy(icdan)  

    Parameters
    ----------
    icdan(int): index of the PLPLx contact  

    Returns
    -------
    energy(double[4]) : energy value  

    """
    return _lmgc90.PLPLx_GetCZMEnergy(*args)

def PLPLx_UseNcDetection(*args):
    """


    chooses contact detection methode between non-convex shapes  

    python usage : PLPLx_UseNcDetection()  

    """
    return _lmgc90.PLPLx_UseNcDetection(*args)

def PLPLx_ShrinkPolygFaces(*args):
    """


    Shrink the face of the polygon for the detection.  

    python usage : PLPLx_ShrinkPolygFaces(shrink)  

    Parameters
    ----------
    shrink(real) :  

    """
    return _lmgc90.PLPLx_ShrinkPolygFaces(*args)

def PTPT2_SelectProxTactors(*args):
    """


    contact detection between PT2Dx tactors  

    python usage : PTPT2_SelectProxTactors(reset=0) param[in] reset (integer) : if
    not 0, detection is skipped but the boxes will be computed anew at next call  

    First recup coordinate prediction, then proceed to a box selection to found
    rough contact list and finally compute the final contact list.  

    """
    return _lmgc90.PTPT2_SelectProxTactors(*args)

def PTPT2_WriteLastVlocRloc(*args):
    """


    write last local values of all PTPT2 contacts  

    python usage : PTPT2_WriteLastVlocRloc()  


     the values written are relative velocity, forces and local frame  

    """
    return _lmgc90.PTPT2_WriteLastVlocRloc(*args)

def PTPT2_WriteOutVlocRloc(*args):
    """


    write local values of all PTPT2 contacts  

    python usage : PTPT2_WriteOutVlocRloc()  


     the values written are relative velocity, forces and local frame  

    """
    return _lmgc90.PTPT2_WriteOutVlocRloc(*args)

def PTPT2_DisplayOutVlocRloc(*args):
    """


    display local values of all PTPT2 contacts  

    python usage : PTPT2_DisplayOutVlocRloc()  


     the values displayed are relative velocity, forces and local frame  

    """
    return _lmgc90.PTPT2_DisplayOutVlocRloc(*args)

def PTPT2_DisplayProxTactors(*args):
    """


    display contacts  

    python usage : PTPT2_DisplayProxTactors()  

    """
    return _lmgc90.PTPT2_DisplayProxTactors(*args)

def PTPT2_ReadIniVlocRloc(*args):
    """


    Read VlocRloc file.  

    If num <= 0 : DATBOX/VlocRloc.INI file is read Else : OUTBOX/VlocRloc.OUT.num is
    read, num being the parameter used in TimeEvolution_ReadIniVlocRloc last call  

    usage : PTPT2_ReadIniVlocRloc(num=0)  

    Parameters
    ----------
    num(integer) : which VlocRloc file to read  

    """
    return _lmgc90.PTPT2_ReadIniVlocRloc(*args)

def PTPT2_LoadNetwork(*args):
    """


    read a PTPT2 network from a file  

    python usage : PTPT2_LoadNetwork()  

    """
    return _lmgc90.PTPT2_LoadNetwork(*args)

def PTPT2_SetTolerance(*args):
    """


    set the maximum violation for a point to point link  

    python usage : PTPT2_SetTolerance(tol)  

    """
    return _lmgc90.PTPT2_SetTolerance(*args)

def PTPT2_SetExplicitLocalFrame(*args):
    """


    local frame is computed only once at the first step  

    python usage : PTPT2_SetExplicitLocalFrame()  

    """
    return _lmgc90.PTPT2_SetExplicitLocalFrame(*args)

def PTPT2_LoadParams(*args):
    """


    read a PTPT2 surface and l0 from a file  

    python usage : PTPT2_LoadParams()  

    """
    return _lmgc90.PTPT2_LoadParams(*args)

def PTPT2_UseCurrentNonuc0(*args):
    """


    Use GetCoor or value given from file insted of computing nonuc0 from reference
    coordinates.  

    python usage : PTPT2_UseCurrentNonuc0(to_use) param[in] to_use (integer) : 1 to
    activate, 0 to deactivate feature  

    """
    return _lmgc90.PTPT2_UseCurrentNonuc0(*args)

def PTPT2_CleanMemory(*args):
    """


    Free all memory allocated within PTPT2 module.  

    python usage : PTPT2_CleanMemory()  

    """
    return _lmgc90.PTPT2_CleanMemory(*args)

def inter_handler_2D_tgetNb(*args):
    """


    return the number of interactions of the selected type stored in this data
    structure  

    python usage : nb_inter = inter_handler_2D_tgetNb(inter_id)  

    Parameters
    ----------
    inter_id(integer) : type of interaction (lmgc90 parameter)  

    Returns
    -------
    nb_inter (integer) : number of interaction found of selected type  

    """
    return _lmgc90.inter_handler_2D_tgetNb(*args)

def inter_handler_2D_tgetTactLawNb(*args):
    """


    return the contact law number of an interaction stored this data structure  

    python usage : tact_law = inter_handler_2D_tgetTactLawNb(inter_id, icdan)  

    Parameters
    ----------
    inter_id(integer) : type of interaction (lmgc90 parameter)  
    icdan(integer) : index of the interaction of selected type  

    Returns
    -------
    tact_law (integer) : contact law number  

    """
    return _lmgc90.inter_handler_2D_tgetTactLawNb(*args)

def inter_handler_2D_tgetIdBodies(*args):
    """


    return the serial numbers of contacting objects for an interaction stored in
    this data structure  

    python usage : idBodies = inter_handler_2D_tgetIdBodies(inter_id, icdan)  

    Parameters
    ----------
    inter_id(integer) : type of interaction (lmgc90 parameter)  
    icdan(integer) : index of the interaction of selected type  

    Returns
    -------
    idBodies (integer) : array with cd and an bodies serial number  

    """
    return _lmgc90.inter_handler_2D_tgetIdBodies(*args)

def inter_handler_2D_tgetIData(*args):
    """


    Get the integer data of an interaction stored in this data structure.  

    idata vector holds cd body type, an body type, cd body id, an body id, cd
    contactor type, an contactory type, cd contactor id, an contactor id, cd
    subcontactor id, an subcontactor id, tact law id, status, number of internals  

    usage : idata = inter_handler_2D_tgetIData(inter_id, icdan)  

    Parameters
    ----------
    inter_id(integer) : type of interaction (lmgc90 parameter)  
    icdan(integer) : index of the interaction of selected type  

    Returns
    -------
    idata (integer array) : the values array  

    """
    return _lmgc90.inter_handler_2D_tgetIData(*args)

def inter_handler_2D_tgetRData(*args):
    """


    return the real data associated with an interactions  

    Get an output array with, in this order, : coor, tuc, nuc, vlt, vln, rlt, rln,
    gapTT  

    python usage : rdata = inter_handler_2D_tgetRData(inter_id, icdan)  

    Parameters
    ----------
    inter_id(integer) : type of interaction (lmgc90 parameter)  
    icdan(integer) : index of the interaction of selected type  

    Returns
    -------
    rdata (double array) : array with real data of the interaction  

    """
    return _lmgc90.inter_handler_2D_tgetRData(*args)

def inter_handler_2D_tsetInternal(*args):
    """


    Set the internal of an interaction (either the array or a single value) stored
    in this data structure.  

    Uses copy. If internal array is provided, the whole array is set. Otherwise
    index and value must be provided and a single value is set.  

    usage : inter_handler_2D_tsetInternal(inter_id, icdan, internal) or
    inter_handler_2D_tsetInternal(inter_id, icdan, index, value)  

    Parameters
    ----------
    inter_id(integer) : type of interaction (lmgc90 parameter)  
    icdan(integer) : index of the interaction of selected type  
    internal(double array) : the new values  
    index(integer) : the index where to set single value  
    value(double ) : the new value to put at index  

    """
    return _lmgc90.inter_handler_2D_tsetInternal(*args)

def inter_handler_2D_tgetInternal(*args):
    """


    Get the internal of an interaction stored in this data structure.  

    usage : internal = inter_handler_2D_tgetInternal(inter_id, icdan)  

    Parameters
    ----------
    inter_id(integer) : type of interaction (lmgc90 parameter)  
    icdan(integer) : index of the interaction of selected type  
    internal(double array) : the new values array  

    """
    return _lmgc90.inter_handler_2D_tgetInternal(*args)

def inter_handler_2D_getNbRecup(*args):
    """


    return the number of recuped interactions of the selected type  

    python usage : nb_recup = inter_handler_2D_getNbRecup(inter_id)  

    Parameters
    ----------
    inter_id(integer) : type of interaction (lmgc90 parameter)  

    Returns
    -------
    nb_inter (integer) : number of interaction recuped of selected type  

    """
    return _lmgc90.inter_handler_2D_getNbRecup(*args)

def inter_handler_2D_getNb(*args):
    """


    return the number of interactions of the selected type stored in verlet data
    structure  

    python usage : nb_inter = inter_handler_2D_getNb(inter_id)  

    Parameters
    ----------
    inter_id(integer) : type of interaction (lmgc90 parameter)  

    Returns
    -------
    nb_inter (integer) : number of interaction found of selected type  

    """
    return _lmgc90.inter_handler_2D_getNb(*args)

def inter_handler_2D_getAllTactLawNb(*args):
    """


    return the tact law number of all interactions stored in verlet data structure  

    python usage : vector = inter_handler_2D_getAllTactLawNb(inter_id)  

    Parameters
    ----------
    inter_id(integer) : type of interaction (lmgc90 parameter)  

    Returns
    -------
    vector (int 1D-array) : mechanical data  

    """
    return _lmgc90.inter_handler_2D_getAllTactLawNb(*args)

def inter_handler_2D_getAll(*args):
    """


    return coorx,coory,tx,ty,nx,ny,rlt,rln,vlt,vln,gaptt for all interactions stored
    in verlet data structure  

    python usage : array = inter_handler_2D_getAll(inter_id)  

    Parameters
    ----------
    inter_id(integer) : type of interaction (lmgc90 parameter)  

    Returns
    -------
    array (double 2D-array) : mechanical data  

    """
    return _lmgc90.inter_handler_2D_getAll(*args)

def inter_handler_2D_getAllInternal(*args):
    """


    return internal variables for all interactions stored in verlet data structure  

    python usage : array = inter_handler_2D_getAllInternal(inter_id)  

    Parameters
    ----------
    inter_id(integer) : type of interaction (lmgc90 parameter)  

    Returns
    -------
    array (double 2D-array) : mechanical data  

    """
    return _lmgc90.inter_handler_2D_getAllInternal(*args)

def inter_handler_2D_getAllIdata(*args):
    """


    return all integer data of all 'verlet' interaction  

    Which are in order cd body type, an body type, cd body id, an body id, cd
    contactor type, an contactory type, cd contactor id, an contactor id, cd
    subcontactor id, an subcontactor id, tact law id, status, number of internals  

    python usage : array = inter_handler_2D_getAllIdata(inter_id)  

    Parameters
    ----------
    inter_id(integer) : type of interaction (lmgc90 parameter)  

    Returns
    -------
    array (int 2D-array) : identification data  

    """
    return _lmgc90.inter_handler_2D_getAllIdata(*args)

def inter_handler_2D_getVerletAdjsz(*args):
    """


    return integer number of verlet interaction of a candidate  

    python usage : iantac = inter_handler_2D_getVerletAdjsz(inter_id, icdtac)  

    Parameters
    ----------
    inter_id(integer) : type of interaction (lmgc90 parameter)  
    icdtac(integer) : candidate contactor id  

    Returns
    -------
    iantac (integer) : number of verlet interactions on candidate  

    """
    return _lmgc90.inter_handler_2D_getVerletAdjsz(*args)

def inter_handler_2D_getVerletIantac(*args):
    """


    return integer antagonist contact of a verlet interaction  

    python usage : iantac = inter_handler_2D_getVerletIantac(inter_id, icdtac, iadj)  

    Parameters
    ----------
    inter_id(integer) : type of interaction (lmgc90 parameter)  
    icdtac(integer) : candidate contactor id  
    iadj(integer) : id of adjacent of candidate  

    Returns
    -------
    iantac (integer) : id of antagonist contactor corresponding to verlet
    interaction  

    """
    return _lmgc90.inter_handler_2D_getVerletIantac(*args)

def inter_handler_2D_computeRnod(*args):
    """


    Put back the reac value of bodies from (this) interactions.  

    """
    return _lmgc90.inter_handler_2D_computeRnod(*args)

def inter_handler_2D_stockRloc(*args):
    """


    stock from this to verlet  

    python usage : inter_handler_2D_stockRloc(inter_id)  

    Parameters
    ----------
    inter_id(integer) : type of interaction (lmgc90 parameter)  

    """
    return _lmgc90.inter_handler_2D_stockRloc(*args)

def inter_handler_2D_recupRloc(*args):
    """


    recup from verlet to this  

    python usage : inter_handler_2D_recupRloc(inter_id)  

    Parameters
    ----------
    inter_id(integer) : type of interaction (lmgc90 parameter)  

    """
    return _lmgc90.inter_handler_2D_recupRloc(*args)

def inter_handler_2D_recupRlocByPos(*args):
    """


    recup from verlet to this using position as criteria  

    Only available for CLALp and PLPLx inter_id  

    python usage : inter_handler_2D_recupRloc(inter_id, rtol)  

    Parameters
    ----------
    inter_id(integer) : type of interaction (lmgc90 parameter)  
    rtol(real) : tolerance to decide if contact is recup  

    """
    return _lmgc90.inter_handler_2D_recupRlocByPos(*args)

def CDCDx_SelectProxTactors(*args):
    """


    contact detection between CYLND and CYLND tactors  

    First recup coordinate prediction, then proceed to a box selection to found
    rough contact list and finally compute the final contact list  

    python usage : CDCDx_SelectProxTactors(reset=0)  

    Parameters
    ----------
    reset(integer) : if not 0, detection is skipped but the boxes will be computed
        anew at next call  

    """
    return _lmgc90.CDCDx_SelectProxTactors(*args)

def CDCDx_SmoothForceComputation(*args):
    """


    computes smooth contact forces (if any)  

    python usage : CDCDx_SmoothForceComputation()  

    """
    return _lmgc90.CDCDx_SmoothForceComputation(*args)

def CDCDx_WriteLastVlocRloc(*args):
    """


    write last local values of all CDCDx contacts  

    The values written are relative velocity, forces and local frame  

    python usage : CDCDx_WriteLastVlocRloc()  

    """
    return _lmgc90.CDCDx_WriteLastVlocRloc(*args)

def CDCDx_WriteOutVlocRloc(*args):
    """


    write local values of all CDCDx contacts  

    The values written are relative velocity, forces and local frame  

    python usage : CDCDx_WriteOutVlocRloc()  

    """
    return _lmgc90.CDCDx_WriteOutVlocRloc(*args)

def CDCDx_DisplayOutVlocRloc(*args):
    """


    display local values of all CDCDx contacts  

    The values displayed are relative velocity, forces and local frame  

    python usage : CDCDx_DisplayOutVlocRloc()  

    """
    return _lmgc90.CDCDx_DisplayOutVlocRloc(*args)

def CDCDx_DisplayProxTactors(*args):
    """


    display detected contacts  

    python usage : CDCDx_DisplayProxTactors()  

    """
    return _lmgc90.CDCDx_DisplayProxTactors(*args)

def CDCDx_ReadIniVlocRloc(*args):
    """


    Read VlocRloc file.  

    *   If num <= 0 : DATBOX/VlocRloc.INI file is read  
    *   Else : OUTBOX/VlocRloc.OUT.num is read,
        -   num being the parameter used in TimeEvolution_ReadIniVlocRloc last call  

    python usage : CDCDx_ReadIniVlocRloc(num=0)  

    Parameters
    ----------
    num(integer) : which VlocRloc file to read  

    """
    return _lmgc90.CDCDx_ReadIniVlocRloc(*args)

def CDCDx_SetXPeriodicCondition(*args):
    """


    initialise data for simulation using periodic condition along X  

    python usage : CDCDx_SetXPeriodicCondition(xperiod)  

    Parameters
    ----------
    xperiod(double) : period on x axis  

    """
    return _lmgc90.CDCDx_SetXPeriodicCondition(*args)

def CDCDx_SetYPeriodicCondition(*args):
    """


    initialise data for simulation using periodic condition along Y  

    python usage : CDCDx_SetYPeriodicCondition(yperiod)  

    Parameters
    ----------
    yperiod(double) : period on y axis  

    """
    return _lmgc90.CDCDx_SetYPeriodicCondition(*args)

def CDCDx_SetNumberInterByContact(*args):
    """


    define the number of interaction by contact (experimental)  

    python usage : CDCDx_SetNumberInterByContact(nb_interactions)  

    Parameters
    ----------
    nb_interactions(integer) : number of interactions per contact  

    """
    return _lmgc90.CDCDx_SetNumberInterByContact(*args)

def CDCDx_SetContactRadius(*args):
    """


    define the contact radius (experimental)  

    python usage : CDCDx_SetContactRadius(radius)  

    Parameters
    ----------
    radius(double) : contact radius  

    """
    return _lmgc90.CDCDx_SetContactRadius(*args)

def CDCDx_CleanMemory(*args):
    """


    Free all memory allocated within CDCDx module.  

    python usage : CDCDx_CleanMemory()  

    """
    return _lmgc90.CDCDx_CleanMemory(*args)

def CDPLx_SelectProxTactors(*args):
    """


    contact detection between CYLND and PLANx tactors  

    First recup coordinate prediction, then proceed to a box selection to found
    rough contact list and finally compute the final contact list  

    python usage : CDPLx_SelectProxTactors(reset=0)  

    Parameters
    ----------
    reset(integer) : if not 0, detection is skipped but the boxes will be computed
        anew at next call  

    """
    return _lmgc90.CDPLx_SelectProxTactors(*args)

def CDPLx_SmoothForceComputation(*args):
    """


    computes smooth forces (if any)  

    python usage : CDPLx_SmoothForceComputation()  

    """
    return _lmgc90.CDPLx_SmoothForceComputation(*args)

def CDPLx_WriteLastVlocRloc(*args):
    """


    write last local values of all CDPLx contacts  

    The values written are relative velocity, forces and local frame  

    python usage : CDPLx_WriteLastVlocRloc()  

    """
    return _lmgc90.CDPLx_WriteLastVlocRloc(*args)

def CDPLx_WriteOutVlocRloc(*args):
    """


    write local values of all CDPLx contacts  

    The values written are relative velocity, forces and local frame  

    python usage : CDPLx_WriteOutVlocRloc()  

    """
    return _lmgc90.CDPLx_WriteOutVlocRloc(*args)

def CDPLx_DisplayOutVlocRloc(*args):
    """


    display local values of all CDPLx contacts  

    The values displayed are relative velocity, forces and local frame  

    python usage : CDPLx_DisplayOutVlocRloc()  

    """
    return _lmgc90.CDPLx_DisplayOutVlocRloc(*args)

def CDPLx_DisplayProxTactors(*args):
    """


    display contacts  

    python usage : CDPLx_DisplayProxTactors()  

    """
    return _lmgc90.CDPLx_DisplayProxTactors(*args)

def CDPLx_ReadIniVlocRloc(*args):
    """


    Read VlocRloc file.  

    *   If num <= 0 : DATBOX/VlocRloc.INI file is read  
    *   Else : OUTBOX/VlocRloc.OUT.num is read, num being
        -   the parameter used in TimeEvolution_ReadIniVlocRloc last call  

    python usage : CDPLx_ReadIniVlocRloc(num=0)  

    Parameters
    ----------
    num(integer) : which VlocRloc file to read  

    """
    return _lmgc90.CDPLx_ReadIniVlocRloc(*args)

def CDPLx_CleanMemory(*args):
    """


    Free all memory allocated within CDPLx module.  

    python usage : CDPLx_CleanMemory()  

    """
    return _lmgc90.CDPLx_CleanMemory(*args)

def CSASp_SelectProxTactors(*args):
    """


    contact detection between CSxxx and ASpxx tactors  

    First recup coordinate prediction, then proceed to a box selection to found
    rough contact list and finally compute the final contact list.  

    If reset not equal to 0, the initialization flag is reset and detection skipped  

    python usage : CSASp_SelectProxTactors(reset=0,use_external=0)  

    Parameters
    ----------
    reset(integer) : if not 0, detection is skipped but the boxes will be computed
        anew at next call  
    use_external(integer) : if not 0, external detection is used  

    """
    return _lmgc90.CSASp_SelectProxTactors(*args)

def CSASp_WriteLastVlocRloc(*args):
    """


    write last local values of all CSASp contacts  

    The values written are relative velocity, forces and local frame  

    python usage : CSASp_WriteLastVlocRloc()  

    """
    return _lmgc90.CSASp_WriteLastVlocRloc(*args)

def CSASp_WriteOutVlocRloc(*args):
    """


    write local values of all CSASp contacts  

    The values written are relative velocity, forces and local frame  

    python usage : CSASp_WriteOutVlocRloc()  

    """
    return _lmgc90.CSASp_WriteOutVlocRloc(*args)

def CSASp_DisplayOutVlocRloc(*args):
    """


    display local values of all CSASp contacts  

    The values displayed are relative velocity, forces and local frame  

    python usage : CSASp_DisplayOutVlocRloc()  

    """
    return _lmgc90.CSASp_DisplayOutVlocRloc(*args)

def CSASp_DisplayProxTactors(*args):
    """


    display contacts  

    python usage : CSASp_DisplayProxTactors()  

    """
    return _lmgc90.CSASp_DisplayProxTactors(*args)

def CSASp_ReadIniVlocRloc(*args):
    """


    Read VlocRloc file.  

    *   If num <= 0 : DATBOX/VlocRloc.INI file is read  
    *   Else : OUTBOX/VlocRloc.OUT.num is read, num being +the parameter used in
        TimeEvolution_ReadIniVlocRloc last call  

    usage : CSASp_ReadIniVlocRloc(num=0)  

    Parameters
    ----------
    num(integer) : which VlocRloc file to read  

    """
    return _lmgc90.CSASp_ReadIniVlocRloc(*args)

def CSASp_SkipAutoContact(*args):
    """


    avoid CSxxx/ASpxx contact detection when they belong to the same entity  

    python usage : CSASp_SkipAutoContact()  

    """
    return _lmgc90.CSASp_SkipAutoContact(*args)

def CSASp_SetNonSymmetricDetection(*args):
    """


    this function allows non symetric detection i.e. only one interaction is kept
    when two bodies with candidate and antagonist contactors see each other  

    python usage : CSASp_SetNonSymmetricDetection()  

    """
    return _lmgc90.CSASp_SetNonSymmetricDetection(*args)

def CSASp_Trim(*args):
    """


    trim contact (only contact within surface - not with extremities)  

    python usage : CSASp_Trim()  

    """
    return _lmgc90.CSASp_Trim(*args)

def CSASp_SetTrimAngle(*args):
    """


    set the trim angle (only contact within surface - not with extremities)  

    python usage : CSASp_SetTrimAngle(angle)  

    Parameters
    ----------
    angle(real) : angle in degree - default 87 deg  

    """
    return _lmgc90.CSASp_SetTrimAngle(*args)

def CSASp_AddReac(*args):
    """


    add contact force to body Reac  

    python usage : CSASp_AddReac()  

    """
    return _lmgc90.CSASp_AddReac(*args)

def CSASp_AssumeOldFiles(*args):
    """


    to read file with the CSpxx rank instead of CSxxx one  

    python usage : CSASp_AssumeOldFiles()  

    """
    return _lmgc90.CSASp_AssumeOldFiles(*args)

def CSASp_CleanMemory(*args):
    """


    Free all memory allocated within CSASp module.  

    python usage : CSASp_CleanMemory()  

    """
    return _lmgc90.CSASp_CleanMemory(*args)

def CSPRx_SelectProxTactors(*args):
    """


    contact detection between CSxxx and PRxxx tactors  

    First recup coordinate prediction, then proceed to a box selection to found
    rough contact list and finally compute the final contact list.  

    python usage : CSPRx_SelectProxTactors(int reset=0)  

    Parameters
    ----------
    reset(integer) : if not 0, detection is skipped but the boxes will be computed
        anew at next call  

    """
    return _lmgc90.CSPRx_SelectProxTactors(*args)

def CSPRx_WriteLastVlocRloc(*args):
    """


    write last local values of all CSPRx contacts  

    The values written are relative velocity, forces and local frame  

    python usage : CSPRx_WriteLastVlocRloc()  

    The values written are relative velocity, forces and local frame  

    """
    return _lmgc90.CSPRx_WriteLastVlocRloc(*args)

def CSPRx_WriteOutVlocRloc(*args):
    """


    write local values of all CSPRx contacts  

    The values written are relative velocity, forces and local frame  

    python usage : CSPRx_WriteOutVlocRloc()  

    """
    return _lmgc90.CSPRx_WriteOutVlocRloc(*args)

def CSPRx_DisplayOutVlocRloc(*args):
    """


    display local values of all CSPRx contacts  

    The values displayed are relative velocity, forces and local frame  

    python usage : CSPRx_DisplayOutVlocRloc()  

    """
    return _lmgc90.CSPRx_DisplayOutVlocRloc(*args)

def CSPRx_DisplayProxTactors(*args):
    """


    display contacts  

    python usage : CSPRx_DisplayProxTactors()  

    """
    return _lmgc90.CSPRx_DisplayProxTactors(*args)

def CSPRx_ReadIniVlocRloc(*args):
    """


    Read VlocRloc file.  

    *   If num <= 0 : DATBOX/VlocRloc.INI file is read  
    *   Else : OUTBOX/VlocRloc.OUT.num is read, num being +the parameter used in
        TimeEvolution_ReadIniVlocRloc last call  

    usage : CSPRx_ReadIniVlocRloc(num=0)  

    Parameters
    ----------
    num(integer) : which VlocRloc file to read  

    """
    return _lmgc90.CSPRx_ReadIniVlocRloc(*args)

def CSPRx_Trim(*args):
    """


    trim contact (only node face contact)  

    python usage : CSPRx_Trim()  

    """
    return _lmgc90.CSPRx_Trim(*args)

def CSPRx_GetInfo(*args):
    """


    return contact info for the icdan CSPRx contact  

    python usage : a = CSPRx_GetInfo(icdan)  

    Parameters
    ----------
    icdan(integer) : contact identifiant  

    Returns
    -------
    a (array integer) : info array  

    """
    return _lmgc90.CSPRx_GetInfo(*args)

def CSPRx_Smoothing(*args):
    """


    smooth contact reaction  

    python usage : CSPRx_Smmothing()  

    """
    return _lmgc90.CSPRx_Smoothing(*args)

def CSPRx_AddReac(*args):
    """


    add contact force to body Reac  

    python usage : CSPRx_AddReac()  

    """
    return _lmgc90.CSPRx_AddReac(*args)

def CSPRx_CleanMemory(*args):
    """


    Free all memory allocated within CSPRx module.  

    python usage : CSPRx_CleanMemory()  

    """
    return _lmgc90.CSPRx_CleanMemory(*args)

def PRASp_SelectProxTactors(*args):
    """


    contact detection between PRxxx and ASpxx tactors  

    python usage : PRASp_SelectProxTactors(int reset=0) param[in] reset (integer) :
    if not 0, detection is skipped but the boxes will be computed anew at next call  

    First recup coordinate prediction, then proceed to a box selection to found
    rough contact list and finally compute the final contact list.  

    """
    return _lmgc90.PRASp_SelectProxTactors(*args)

def PRASp_WriteLastVlocRloc(*args):
    """


    write last local values of all PRASp contacts  

    python usage : PRASp_WriteLastVlocRloc()  


     the values written are relative velocity, forces and local frame  

    """
    return _lmgc90.PRASp_WriteLastVlocRloc(*args)

def PRASp_WriteOutVlocRloc(*args):
    """


    write local values of all PRASp contacts  

    python usage : PRASp_WriteOutVlocRloc()  


     the values written are relative velocity, forces and local frame  

    """
    return _lmgc90.PRASp_WriteOutVlocRloc(*args)

def PRASp_DisplayOutVlocRloc(*args):
    """


    display local values of all PRASp contacts  

    python usage : PRASp_DisplayOutVlocRloc()  


     the values displayed are relative velocity, forces and local frame  

    """
    return _lmgc90.PRASp_DisplayOutVlocRloc(*args)

def PRASp_DisplayProxTactors(*args):
    """


    display contacts  

    python usage : PRASp_DisplayProxTactors()  

    """
    return _lmgc90.PRASp_DisplayProxTactors(*args)

def PRASp_ReadIniVlocRloc(*args):
    """


    Read VlocRloc file.  

    If num <= 0 : DATBOX/VlocRloc.INI file is read Else : OUTBOX/VlocRloc.OUT.num is
    read, num being the parameter used in TimeEvolution_ReadIniVlocRloc last call  

    usage : PRASp_ReadIniVlocRloc(num=0)  

    Parameters
    ----------
    num(integer) : which VlocRloc file to read  

    """
    return _lmgc90.PRASp_ReadIniVlocRloc(*args)

def PRASp_CleanMemory(*args):
    """


    Free all memory allocated within PRASp module.  

    python usage : PRASp_CleanMemory()  

    """
    return _lmgc90.PRASp_CleanMemory(*args)

def PRPLx_SelectProxTactors(*args):
    """


    contact detection between PRxxx and PLxxx tactors  

    python usage : PRPLx_SelectProxTactors(reset=0) param[in] reset (integer) : if
    not 0, detection is skipped but the boxes will be computed anew at next call  

    First recup coordinate prediction, then proceed to a box selection to found
    rough contact list and finally compute the final contact list.  

    """
    return _lmgc90.PRPLx_SelectProxTactors(*args)

def PRPLx_WriteLastVlocRloc(*args):
    """


    write last local values of all PRPLx contacts  

    python usage : PRPLx_WriteLastVlocRloc()  


     the values written are relative velocity, forces and local frame  

    """
    return _lmgc90.PRPLx_WriteLastVlocRloc(*args)

def PRPLx_WriteOutVlocRloc(*args):
    """


    write local values of all PRPLx contacts  

    python usage : PRPLx_WriteOutVlocRloc()  


     the values written are relative velocity, forces and local frame  

    """
    return _lmgc90.PRPLx_WriteOutVlocRloc(*args)

def PRPLx_DisplayOutVlocRloc(*args):
    """


    display local values of all PRPLx contacts  

    python usage : PRPLx_DisplayOutVlocRloc()  


     the values displayed are relative velocity, forces and local frame  

    """
    return _lmgc90.PRPLx_DisplayOutVlocRloc(*args)

def PRPLx_DisplayProxTactors(*args):
    """


    display contacts  

    python usage : PRPLx_DisplayProxTactors()  

    """
    return _lmgc90.PRPLx_DisplayProxTactors(*args)

def PRPLx_ReadIniVlocRloc(*args):
    """


    Read VlocRloc file.  

    If num <= 0 : DATBOX/VlocRloc.INI file is read Else : OUTBOX/VlocRloc.OUT.num is
    read, num being the parameter used in TimeEvolution_ReadIniVlocRloc last call  

    usage : PRPLx_ReadIniVlocRloc(num=0)  

    Parameters
    ----------
    num(integer) : which VlocRloc file to read  

    """
    return _lmgc90.PRPLx_ReadIniVlocRloc(*args)

def PRPLx_CleanMemory(*args):
    """


    Free all memory allocated within PRPLx module.  

    python usage : PRPLx_CleanMemory()  

    """
    return _lmgc90.PRPLx_CleanMemory(*args)

def PRPRx_SelectProxTactors(*args):
    """


    contact detection between PRxxx and PRxxx tactors  

    First recup coordinate prediction, then proceed to a box selection to found
    rough contact list and finally compute the final contact list.  

    python usage : PRPRx_SelectProxTactors(reset=0)  

    Parameters
    ----------
    reset(integer) : if not 0, detection is skipped but the boxes will be computed
        anew at next call  

    """
    return _lmgc90.PRPRx_SelectProxTactors(*args)

def PRPRx_UseCpCundallDetection(*args):
    """


    chooses the Cundall iterative detection method  

    If shrink parameters are provided they may be conflicting with a call to
    PRPRx_ShrinkPolyrFaces function. Remind that that the shrink parameters provided
    here are lengths.  

    python usage : PRPRx_UseCpCundallDetection(nb_iter, cd_shrink=0., an_shrink=0.,
    delta=0.)  

    Parameters
    ----------
    nb_iter(integer) : max number of iterations  
    cd_shrink(real) : shrink parameter (length) in clipper for candidate  
    an_shrink(real) : shrink parameter (length) in clipper for antagonist  
    delta(real) : intersection simplification parameter in clipper  

    """
    return _lmgc90.PRPRx_UseCpCundallDetection(*args)

def PRPRx_UseCpF2fExplicitDetection(*args):
    """


    chooses the face 2 face combinatory detection method  

    If shrink parameters are provided they may be conflicting with a call to
    PRPRx_ShrinkPolyrFaces function. Remind that that the shrink parameters provided
    here are lengths.  

    python usage : PRPRx_UseCpF2fExplicitDetection(tol, cd_shrink=0., an_shrink=0.,
    delta=0.)  

    Parameters
    ----------
    tol(real) : tolerance on normal orientations  
    cd_shrink(real) : shrink parameter (length) in clipper for candidate  
    an_shrink(real) : shrink parameter (length) in clipper for antagonist  
    delta(real) : intersection simplification parameter in clipper  

    """
    return _lmgc90.PRPRx_UseCpF2fExplicitDetection(*args)

def PRPRx_UseCpF2fDetection(*args):
    """


    chooses a mix of the face 2 face and Cundall detection method  

    If shrink parameters are provided they may be conflicting with a call to
    PRPRx_ShrinkPolyrFaces function. Remind that that the shrink parameters provided
    here are lengths.  

    python usage : PRPRx_UseCpF2fDetection(tol, iter, cd_shrink=0., an_shrink=0.,
    delta=0.)  

    Parameters
    ----------
    tol(real) : tolerance on normal orientations  
    iter(integer) : max number of iterations  
    cd_shrink(real) : shrink parameter (length) in clipper for candidate  
    an_shrink(real) : shrink parameter (length) in clipper for antagonist  
    delta(real) : intersection simplification parameter in clipper  

    """
    return _lmgc90.PRPRx_UseCpF2fDetection(*args)

def PRPRx_UseNcDetection(*args):
    """


    chooses contact detection methode between non-convex shapes  

    python usage : PRPRx_UseNcDetection(gdist)  

    Parameters
    ----------
    gdist(real) : global distance  

    """
    return _lmgc90.PRPRx_UseNcDetection(*args)

def PRPRx_UseNcF2fDetection(*args):
    """


    chooses contact detection between between non-convex shapes using f2f strategy  

    python usage : PRPRx_UseNcF2fDetection(gdist,tol)  

    Parameters
    ----------
    gdist(real) : global distance  
    tol(real) : tolerance on normal orientations  

    """
    return _lmgc90.PRPRx_UseNcF2fDetection(*args)

def PRPRx_UseNcF2fExplicitDetection(*args):
    """


    chooses contact detection between between non-convex shapes using f2f strategy  

    python usage : PRPRx_UseNcF2fExplicitDetection(gdist,tol)  

    Parameters
    ----------
    gdist(real) : global distance  
    tol(real) : tolerance on normal orientations  

    """
    return _lmgc90.PRPRx_UseNcF2fExplicitDetection(*args)

def PRPRx_UseTrianglesIntersectionDetection(*args):
    """


    chooses contact detection finding intersection in a soup of triangles.  

    The number of point provided is an internal parameter of the algorithm which
    control the maximum number of intersection points stored when looking for the
    triangles intersection before restricting it to only 4 of them. So it must be
    strictly superior to 4.  

    python usage : PRPRx_UseTrianglesIntersectionDetection(nb_max_pt=16)  

    Parameters
    ----------
    nb_max_pt(integer): maximum contact points to store/check during detection  

    """
    return _lmgc90.PRPRx_UseTrianglesIntersectionDetection(*args)

def PRPRx_SetF2fMinimalSurfaceSize(*args):
    """


    set the minimum contact surface size with f2f algo otherwize contact is not
    computed  

    python usage : PRPRx_SetF2fMinimalSurfaceSize(tol)  

    Parameters
    ----------
    tol(real) : minimum surface size  

    """
    return _lmgc90.PRPRx_SetF2fMinimalSurfaceSize(*args)

def PRPRx_UseExternalDetection(*args):
    """


    chooses external contact detection (bindings)  

    python usage : PRPRx_UseExternalDetection()  

    """
    return _lmgc90.PRPRx_UseExternalDetection(*args)

def PRPRx_WriteLastVlocRloc(*args):
    """


    write last local values of all PRPRx contacts  

    The values written are relative velocity, forces and local frame  

    python usage : PRPRx_WriteLastVlocRloc()  

    """
    return _lmgc90.PRPRx_WriteLastVlocRloc(*args)

def PRPRx_WriteOutVlocRloc(*args):
    """


    write local values of all PRPRx contacts  

    The values written are relative velocity, forces and local frame  

    python usage : PRPRx_WriteOutVlocRloc()  

    """
    return _lmgc90.PRPRx_WriteOutVlocRloc(*args)

def PRPRx_DisplayOutVlocRloc(*args):
    """


    display local values of all PRPRx contacts  

    The values displayed are relative velocity, forces and local frame  

    python usage : PRPRx_DisplayOutVlocRloc()  

    """
    return _lmgc90.PRPRx_DisplayOutVlocRloc(*args)

def PRPRx_DisplayProxTactors(*args):
    """


    display contacts  

    python usage : PRPRx_DisplayProxTactors()  

    """
    return _lmgc90.PRPRx_DisplayProxTactors(*args)

def PRPRx_ReadIniVlocRloc(*args):
    """


    Read VlocRloc file.  

    *   If num <= 0 : DATBOX/VlocRloc.INI file is read  
    *   Else : OUTBOX/VlocRloc.OUT.num is read, num being
        -   the parameter used in TimeEvolution_ReadIniVlocRloc last call  

    python usage : PRPRx_ReadIniVlocRloc(num=0)  

    Parameters
    ----------
    num(integer) : which VlocRloc file to read  

    """
    return _lmgc90.PRPRx_ReadIniVlocRloc(*args)

def PRPRx_ShrinkPolyrFaces(*args):
    """


    Shrink the face of the candidate polyhedron for the detection.  

    May be conflicting with the shrink parameters of the detections functions used
    by clipper library. The difference is that clipper use a single length for all
    sample, whereas this function use a scale factor to retract the vertices of the
    candidate polyhedron inside the the surface.  

    python usage : PRPRx_ShrinkPolyrFaces(shrink)  

    Parameters
    ----------
    shrink(real) : scale factor allowing to shrink candidate surface  

        1.  no shrink, 1. no surface  

    """
    return _lmgc90.PRPRx_ShrinkPolyrFaces(*args)

def PRPRx_LowSizeArrayPolyr(*args):
    """


    abscons parameter to manage memory allocation  

    python usage : PRPRx_LowSizeArrayPolyr(sfactor)  

    Parameters
    ----------
    sfactor(integer) :  

    """
    return _lmgc90.PRPRx_LowSizeArrayPolyr(*args)

def PRPRx_SaveProxTactorsToFile(*args):
    """


    write selected contacts to file  

    python usage : PRPRx_SaveProxTactorsToFile()  

    """
    return _lmgc90.PRPRx_SaveProxTactorsToFile(*args)

def PRPRx_LoadProxTactorsFromFile(*args):
    """


    load selected contact from files  

    python usage : PRPRx_LoadProxTactorsFromFile()  

    """
    return _lmgc90.PRPRx_LoadProxTactorsFromFile(*args)

def PRPRx_SetXPeriodicCondition(*args):
    """


    initialise data for simulation using periodic condition  

    python usage : PRPRx_SetXPeriodicCondition(xperiod)  

    Parameters
    ----------
    xperiod(real) : periode on x axis  

    """
    return _lmgc90.PRPRx_SetXPeriodicCondition(*args)

def PRPRx_SetYPeriodicCondition(*args):
    """


    initialise data for simulation using periodic condition  

    python usage : PRPRx_SetYPeriodicCondition(yperiod)  

    Parameters
    ----------
    yperiod(real) : period on y axis  
    yperiod(double) : period on y axis  

    """
    return _lmgc90.PRPRx_SetYPeriodicCondition(*args)

def PRPRx_VerboseF2F(*args):
    """


    ask for verbose comment concerning contact detection between cd and an  

    python usage : PRPRx_VerboseF2F(cd,an)  

    Parameters
    ----------
    cd(integer) : candidate  
    an(integer) : antagoniste  

    """
    return _lmgc90.PRPRx_VerboseF2F(*args)

def PRPRx_GetNbF2f(*args):
    """


    Get the number of f2f structures stored This is the real size of the array, and
    not the number of active f2f structure.  

    python usage : nb_f2f = PRPRx_GetNbF2f()  

    Returns
    -------
    nb_f2f (integer) : the size of the f2f array  

    """
    return _lmgc90.PRPRx_GetNbF2f(*args)

def PRPRx_GetF2f2Inters(*args):
    """


    Get the list of interactions for each face-to-face structure Array of integer
    with number of f2f, then for each f2f, the number of interactions then the list
    of interaction id.  

    python usage : f2f_inters = PRPRx_GetF2f2Inters()  

    Returns
    -------
    f2f_inters (integer array) : the integer array  

    """
    return _lmgc90.PRPRx_GetF2f2Inters(*args)

def PRPRx_GetF2fOutlines(*args):
    """


    Get the connectivity of all intersection polytopes of all face2face and the
    corresponding coordinates.  

    The connectivity containes first the number of f2f, then for each, the number of
    polytope, then for each the number of vertices.  

    The coordinates must be counted from this ordering...  

    python usage : connec, points = PRPRx_GetF2fOutlines()  

    Returns
    -------

    *   connec (integer array) : the connectivities  
    *   points (double array) : the coordinates  

    """
    return _lmgc90.PRPRx_GetF2fOutlines(*args)

def PRPRx_GetF2fAllIdata(*args):
    """


    Get topological face id of cd/an for all F2f structure.  

    python usage : idata = PRPRx_GetF2fAllIdata()  

    Returns
    -------

    *   idata (integer array) : size [nb_f2fx2] with the face id  

    """
    return _lmgc90.PRPRx_GetF2fAllIdata(*args)

def PRPRx_GetF2fCentralKernel(*args):
    """


    Give the central kernel coordinates, the equivalent normal stress and if the
    center of pressure is inside.  

    python usage : ck_coor, sn, is_in = PRPRx_GetF2fStress(i_f2f)  

    Returns
    -------  

    """
    return _lmgc90.PRPRx_GetF2fCentralKernel(*args)

def PRPRx_GetF2fStress(*args):
    """


    Give the polygons of the compressed and decompressed part and linear stress
    repartition.  

    In the case when the minimization algorithm failed, the decompression value is
    set to -99. so that when writing the vtk files, the 'ids' numbering is kept
    consistent.  

    python usage : coorC, sizeC, coorD, sizeD, sigma, decomp =
    PRPRx_GetF2fStress(i_f2f)  

    Returns
    -------  

    """
    return _lmgc90.PRPRx_GetF2fStress(*args)

def PRPRx_SetCundallNeighbor(*args):
    """


    set a neighbor distance around common plane to select projected nodes  

    python usage : PRPRx_SetCundallNeighbor(neighbor)  

    Parameters
    ----------
    neighbor(real) : ratio of a reference size  

    """
    return _lmgc90.PRPRx_SetCundallNeighbor(*args)

def PRPRx_CpUseOldCcpm(*args):
    """


    use the old method for computing contact point position  

    python usage : PRPRx_CpUseOldCcpm()  

    """
    return _lmgc90.PRPRx_CpUseOldCcpm(*args)

def PRPRx_SetReactionTrackingLength(*args):
    """


    function which makes possible to set the length of the hexaedra glyph
    representing the visavis reaction  

    python usage : PRPRx_SetReactionTrackingLength(length)  

    Parameters
    ----------
    length(real) : length the hexaedra glyph  

    """
    return _lmgc90.PRPRx_SetReactionTrackingLength(*args)

def PRPRx_SetTolRecupRloc(*args):
    """


    set the distance tolerance used in PRPRx_RecupRloc  

    python usage : PRPRx_SetTolRecupRloc(tol)  

    Parameters
    ----------
    tol(double) : tolerance  

    """
    return _lmgc90.PRPRx_SetTolRecupRloc(*args)

def PRPRx_GetInteractionVector(*args):
    """


    Get a copy of a vector of a PRPRx.  

    possible values for datatype field are "Coor_", "N____"  

    python usage : vector = PRPRx_GetInteractionVector(datatype, icdan)  

    Parameters
    ----------
    datatype(string [5]) : the vector to get  
    icdan(integer) : rank of the PRPRx  

    Returns
    -------
    vector (double array) : output vector  

    """
    return _lmgc90.PRPRx_GetInteractionVector(*args)

def PRPRx_SetInteractionInternal(*args):
    """


    Set a value of the internal vector of a PRPRx.  

    python usage : PRPRx_SetInteractionInternal(i, icdan, value)  

    Parameters
    ----------
    i(integer) : rank of internal  
    icdan(integer) : rank of the PRPRx  
    value(double) : value to set  

    """
    return _lmgc90.PRPRx_SetInteractionInternal(*args)

def PRPRx_GetInteractionInternal(*args):
    """


    Get a value from the internal vector of a PRPRx.  

    python usage : value = PRPRx_GetInteractionInternal(i, icdan)  

    Parameters
    ----------
    i(integer) : rank of internal  
    icdan(integer) : rank of the PRPRx  
    value(double) : value to get  

    """
    return _lmgc90.PRPRx_GetInteractionInternal(*args)

def PRPRx_GetInteractionInternalComment(*args):
    """


    Get internal comment of a given interaction.  

    python usage : comment=PRPRx_GetInteractionInternalComment(icdan)  

    Parameters
    ----------
    icdan(integer) : rank of the PRPRx  

    Returns
    -------
    comment (char[100]) : the string to get  

    """
    return _lmgc90.PRPRx_GetInteractionInternalComment(*args)

def PRPRx_WithNodalContact(*args):
    """


    use cd contact points at nodes instead at faces with NcDetection  

    python usage : PRPRx_WithNodalContact()  

    """
    return _lmgc90.PRPRx_WithNodalContact(*args)

def PRPRx_SetInternalSurface(*args):
    """


    Set the value of a surface type (point, line or surf) for wti detection.  

    For surface, if the value is left to 0., then the surface of the triangle is
    computed To select the type of surface : 1->point, 2->line, 3->surface  

    python usage : PRPRx_SetInternalSurface(itype, value)  

    Parameters
    ----------
    itype(integer) : the type of surface to set  
    value(double) : value to set  

    """
    return _lmgc90.PRPRx_SetInternalSurface(*args)

def PRPRx_UseStoDetection(*args):
    """


    chooses contact detection between between non-convex shapes using f2f strategy  

    Face to face detection implemented by Stono which can mix between the standard
    f2f detection and the non convex one. Furthermor the decompression parameter can
    help with putting the contact points either near the  

    python usage : PRPRx_UseFCDetection(explicite, decompression, tol, kappa)  

    Parameters
    ----------
    explicite(boolean) : use explicit detection  
    decompression(double) : surface decompression (value in [-1., 1.])  
    tol(real) : tolerance on normal orientations  
    kappa(boolean) : compute kappas coefficient  

    """
    return _lmgc90.PRPRx_UseStoDetection(*args)

def PRPRx_ForceF2fDetection(*args):
    """


    force f2f detection method even for non-convex surfaces  

    python usage : PRPRx_ForceF2fDetection()  

    """
    return _lmgc90.PRPRx_ForceF2fDetection(*args)

def PRPRx_ForceNcDetection(*args):
    """


    force nc detection method even for flat surfaces  

    python usage : PRPRx_ForceNcDetection()  

    """
    return _lmgc90.PRPRx_ForceNcDetection(*args)

def PRPRx_CleanMemory(*args):
    """


    Free all memory allocated within PRPRx module.  

    python usage : PRPRx_CleanMemory()  

    """
    return _lmgc90.PRPRx_CleanMemory(*args)

def PTPT3_SelectProxTactors(*args):
    """


    contact detection between PTxxx and PTxxx tactors  

    python usage : PTPT3_SelectProxTactors(reset=0) param[in] reset (integer) : if
    not 0, detection is skipped but the boxes will be computed anew at next call  

    First recup coordinate prediction, then proceed to a box selection to found
    rough contact list and finally compute the final contact list.  

    """
    return _lmgc90.PTPT3_SelectProxTactors(*args)

def PTPT3_SmoothForceComputation(*args):
    """


    computes smooth forces (if any)  

    python usage : PTPT3_SmoothForceComputation()  

    """
    return _lmgc90.PTPT3_SmoothForceComputation(*args)

def PTPT3_WriteLastVlocRloc(*args):
    """


    write last local values of all PTPT3 contacts  

    python usage : PTPT3_WriteLastVlocRloc()  


     the values written are relative velocity, forces and local frame  

    """
    return _lmgc90.PTPT3_WriteLastVlocRloc(*args)

def PTPT3_WriteOutVlocRloc(*args):
    """


    write local values of all PTPT3 contacts  

    python usage : PTPT3_WriteOutVlocRloc()  


     the values written are relative velocity, forces and local frame  

    """
    return _lmgc90.PTPT3_WriteOutVlocRloc(*args)

def PTPT3_DisplayOutVlocRloc(*args):
    """


    display local values of all PTPT3 contacts  

    python usage : PTPT3_DisplayOutVlocRloc()  


     the values displayed are relative velocity, forces and local frame  

    """
    return _lmgc90.PTPT3_DisplayOutVlocRloc(*args)

def PTPT3_DisplayProxTactors(*args):
    """


    display contacts  

    python usage : PTPT3_DisplayProxTactors()  

    """
    return _lmgc90.PTPT3_DisplayProxTactors(*args)

def PTPT3_LoadNetwork(*args):
    """


    read a PTPT3 network from a file  

    python usage : PTPT3_LoadNetwork()  

    """
    return _lmgc90.PTPT3_LoadNetwork(*args)

def PTPT3_ReadIniVlocRloc(*args):
    """


    Read VlocRloc file.  

    If num <= 0 : DATBOX/VlocRloc.INI file is read Else : OUTBOX/VlocRloc.OUT.num is
    read, num being the parameter used in TimeEvolution_ReadIniVlocRloc last call  

    usage : PTPT3_ReadIniVlocRloc(num=0)  

    Parameters
    ----------
    num(integer) : which VlocRloc file to read  

    """
    return _lmgc90.PTPT3_ReadIniVlocRloc(*args)

def PTPT3_SetXPeriodicCondition(*args):
    """


    initialise data for simulation using periodic condition  

    python usage : PTPT3_SetXPeriodicCondition(xperiod)  

    Parameters
    ----------
    xperiod(real) : period on x axis  

    """
    return _lmgc90.PTPT3_SetXPeriodicCondition(*args)

def PTPT3_SetYPeriodicCondition(*args):
    """


    initialise data for simulation using periodic condition  

    python usage : PTPT3_SetYPeriodicCondition(yperiod)  

    Parameters
    ----------
    yperiod(real) : period on y axis  

    """
    return _lmgc90.PTPT3_SetYPeriodicCondition(*args)

def PTPT3_SetExplicitLocalFrame(*args):
    """


    local frame is computed only once at the first step  

    python usage : PTPT3_SetExplicitLocalFrame()  

    """
    return _lmgc90.PTPT3_SetExplicitLocalFrame(*args)

def PTPT3_LoadParams(*args):
    """


    read a PTPT3 surface and l0 from a file  

    python usage : PTPT3_LoadParams()  

    """
    return _lmgc90.PTPT3_LoadParams(*args)

def PTPT3_UseCurrentNonuc0(*args):
    """


    Use GetCoor or value given from file insted of computing nonuc0 from reference
    coordinates.  

    python usage : PTPT3_UseCurrentNonuc0(to_use) param[in] to_use (integer) : 1 to
    activate, 0 to deactivate feature  

    """
    return _lmgc90.PTPT3_UseCurrentNonuc0(*args)

def PTPT3_CleanMemory(*args):
    """


    Free all memory allocated within PTPT3 module.  

    python usage : PTPT3_CleanMemory()  

    """
    return _lmgc90.PTPT3_CleanMemory(*args)

def SPCDx_SelectProxTactors(*args):
    """


    contact detection between SPxxx and CDxxx tactors  

    python usage : SPCDx_SelectProxTactors(reset=0) param[in] reset (integer) : if
    not 0, detection is skipped but the boxes will be computed anew at next call  

    First recup coordinate prediction, then proceed to a box selection to found
    rough contact list and finally compute the final contact list.  

    """
    return _lmgc90.SPCDx_SelectProxTactors(*args)

def SPCDx_SmoothForceComputation(*args):
    """


    computes smooth forces (if any)  

    python usage : SPCDx_SmoothForceComputation()  

    """
    return _lmgc90.SPCDx_SmoothForceComputation(*args)

def SPCDx_WriteLastVlocRloc(*args):
    """


    write last local values of all SPCDx contacts  

    python usage : SPCDx_WriteLastVlocRloc()  


     the values written are relative velocity, forces and local frame  

    """
    return _lmgc90.SPCDx_WriteLastVlocRloc(*args)

def SPCDx_WriteOutVlocRloc(*args):
    """


    write local values of all SPCDx contacts  

    python usage : SPCDx_WriteOutVlocRloc()  


     the values written are relative velocity, forces and local frame  

    """
    return _lmgc90.SPCDx_WriteOutVlocRloc(*args)

def SPCDx_DisplayOutVlocRloc(*args):
    """


    display local values of all SPCDx contacts  

    python usage : SPCDx_DisplayOutVlocRloc()  


     the values displayed are relative velocity, forces and local frame  

    """
    return _lmgc90.SPCDx_DisplayOutVlocRloc(*args)

def SPCDx_DisplayProxTactors(*args):
    """


    display contacts  

    python usage : SPCDx_DisplayProxTactors()  

    """
    return _lmgc90.SPCDx_DisplayProxTactors(*args)

def SPCDx_ReadIniVlocRloc(*args):
    """


    Read VlocRloc file.  

    If num <= 0 : DATBOX/VlocRloc.INI file is read Else : OUTBOX/VlocRloc.OUT.num is
    read, num being the parameter used in TimeEvolution_ReadIniVlocRloc last call  

    usage : SPCDx_ReadIniVlocRloc(num=0)  

    Parameters
    ----------
    num(integer) : which VlocRloc file to read  

    """
    return _lmgc90.SPCDx_ReadIniVlocRloc(*args)

def SPCDx_CleanMemory(*args):
    """


    Free all memory allocated within SPCDx module.  

    python usage : SPCDx_CleanMemory()  

    """
    return _lmgc90.SPCDx_CleanMemory(*args)

def SPDCx_SelectProxTactors(*args):
    """


    contact detection between SPxxx and DCxxx tactors  

    python usage : SPDCx_SelectProxTactors(reset=0) param[in] reset (integer) : if
    not 0, detection is skipped but the boxes will be computed anew at next call  

    First recup coordinate prediction, then proceed to a box selection to found
    rough contact list and finally compute the final contact list.  

    """
    return _lmgc90.SPDCx_SelectProxTactors(*args)

def SPDCx_SmoothForceComputation(*args):
    """


    computes smooth forces (if any)  

    python usage : SPDCx_SmoothForceComputation()  

    """
    return _lmgc90.SPDCx_SmoothForceComputation(*args)

def SPDCx_WriteLastVlocRloc(*args):
    """


    write last local values of all SPDCx contacts  

    python usage : SPDCx_WriteLastVlocRloc()  


     the values written are relative velocity, forces and local frame  

    """
    return _lmgc90.SPDCx_WriteLastVlocRloc(*args)

def SPDCx_WriteOutVlocRloc(*args):
    """


    write local values of all SPDCx contacts  

    python usage : SPDCx_WriteOutVlocRloc()  


     the values written are relative velocity, forces and local frame  

    """
    return _lmgc90.SPDCx_WriteOutVlocRloc(*args)

def SPDCx_DisplayOutVlocRloc(*args):
    """


    display local values of all SPDCx contacts  

    python usage : SPDCx_DisplayOutVlocRloc()  


     the values displayed are relative velocity, forces and local frame  

    """
    return _lmgc90.SPDCx_DisplayOutVlocRloc(*args)

def SPDCx_DisplayProxTactors(*args):
    """


    display contacts  

    python usage : SPDCx_DisplayProxTactors()  

    """
    return _lmgc90.SPDCx_DisplayProxTactors(*args)

def SPDCx_ReadIniVlocRloc(*args):
    """


    Read VlocRloc file.  

    If num <= 0 : DATBOX/VlocRloc.INI file is read Else : OUTBOX/VlocRloc.OUT.num is
    read, num being the parameter used in TimeEvolution_ReadIniVlocRloc last call  

    usage : SPDCx_ReadIniVlocRloc(num=0)  

    Parameters
    ----------
    num(integer) : which VlocRloc file to read  

    """
    return _lmgc90.SPDCx_ReadIniVlocRloc(*args)

def SPDCx_CleanMemory(*args):
    """


    Free all memory allocated within SPDCx module.  

    python usage : SPDCx_CleanMemory()  

    """
    return _lmgc90.SPDCx_CleanMemory(*args)

def SPPLx_SelectProxTactors(*args):
    """


    contact detection between SPxxx and PLxxx tactors  

    python usage : SPPLx_SelectProxTactors(reset=0) param[in] reset (integer) : if
    not 0, detection is skipped but the boxes will be computed anew at next call  

    First recup coordinate prediction, then proceed to a box selection to found
    rough contact list and finally compute the final contact list.  

    """
    return _lmgc90.SPPLx_SelectProxTactors(*args)

def SPPLx_SmoothForceComputation(*args):
    """


    compute smooth contact law (in any)  

    python usage : SPPLx_SmoothForceComputation()  

    """
    return _lmgc90.SPPLx_SmoothForceComputation(*args)

def SPPLx_WriteLastVlocRloc(*args):
    """


    write last local values of all SPPLx contacts  

    python usage : SPPLx_WriteLastVlocRloc()  


     the values written are relative velocity, forces and local frame  

    """
    return _lmgc90.SPPLx_WriteLastVlocRloc(*args)

def SPPLx_WriteOutVlocRloc(*args):
    """


    write local values of all SPPLx contacts  

    python usage : SPPLx_WriteOutVlocRloc()  


     the values written are relative velocity, forces and local frame  

    """
    return _lmgc90.SPPLx_WriteOutVlocRloc(*args)

def SPPLx_DisplayOutVlocRloc(*args):
    """


    display local values of all SPPLx contacts  

    python usage : SPPLx_DisplayOutVlocRloc()  


     the values displayed are relative velocity, forces and local frame  

    """
    return _lmgc90.SPPLx_DisplayOutVlocRloc(*args)

def SPPLx_DisplayProxTactors(*args):
    """


    display contacts  

    python usage : SPPLx_DisplayProxTactors()  

    """
    return _lmgc90.SPPLx_DisplayProxTactors(*args)

def SPPLx_ReadIniVlocRloc(*args):
    """


    Read VlocRloc file.  

    If num <= 0 : DATBOX/VlocRloc.INI file is read Else : OUTBOX/VlocRloc.OUT.num is
    read, num being the parameter used in TimeEvolution_ReadIniVlocRloc last call  

    usage : SPPLx_ReadIniVlocRloc(num=0)  

    Parameters
    ----------
    num(integer) : which VlocRloc file to read  

    """
    return _lmgc90.SPPLx_ReadIniVlocRloc(*args)

def SPPLx_CleanMemory(*args):
    """


    Free all memory allocated within SPPLx module.  

    python usage : SPPLx_CleanMemory()  

    """
    return _lmgc90.SPPLx_CleanMemory(*args)

def SPPRx_SelectProxTactors(*args):
    """


    contact detection between SPxxx and PLxxx tactors  

    python usage : SPPRx_SelectProxTactors(reset=0) param[in] reset (integer) : if
    not 0, detection is skipped but the boxes will be computed anew at next call  

    First recup coordinate prediction, then proceed to a box selection to found
    rough contact list and finally compute the final contact list.  

    """
    return _lmgc90.SPPRx_SelectProxTactors(*args)

def SPPRx_SmoothForceComputation(*args):
    """


    compute smooth contact law (in any)  

    python usage : SPPRx_SmoothForceComputation()  

    """
    return _lmgc90.SPPRx_SmoothForceComputation(*args)

def SPPRx_WriteLastVlocRloc(*args):
    """


    write last local values of all SPPRx contacts  

    python usage : SPPRx_WriteLastVlocRloc()  


     the values written are relative velocity, forces and local frame  

    """
    return _lmgc90.SPPRx_WriteLastVlocRloc(*args)

def SPPRx_WriteOutVlocRloc(*args):
    """


    write local values of all SPPRx contacts  

    python usage : SPPRx_WriteOutVlocRloc()  


     the values written are relative velocity, forces and local frame  

    """
    return _lmgc90.SPPRx_WriteOutVlocRloc(*args)

def SPPRx_DisplayOutVlocRloc(*args):
    """


    display local values of all SPPRx contacts  

    python usage : SPPRx_DisplayOutVlocRloc()  


     the values displayed are relative velocity, forces and local frame  

    """
    return _lmgc90.SPPRx_DisplayOutVlocRloc(*args)

def SPPRx_DisplayProxTactors(*args):
    """


    display contacts  

    python usage : SPPRx_DisplayProxTactors()  

    """
    return _lmgc90.SPPRx_DisplayProxTactors(*args)

def SPPRx_ReadIniVlocRloc(*args):
    """


    Read VlocRloc file.  

    If num <= 0 : DATBOX/VlocRloc.INI file is read Else : OUTBOX/VlocRloc.OUT.num is
    read, num being the parameter used in TimeEvolution_ReadIniVlocRloc last call  

    usage : SPPRx_ReadIniVlocRloc(num=0)  

    Parameters
    ----------
    num(integer) : which VlocRloc file to read  

    """
    return _lmgc90.SPPRx_ReadIniVlocRloc(*args)

def SPPRx_SetXPeriodicCondition(*args):
    """


    initialise data for simulation using periodic condition  

    python usage : SPPRx_SetXPeriodicCondition(xperiod)  

    Parameters
    ----------
    xperiod(real) : period on x axis  

    """
    return _lmgc90.SPPRx_SetXPeriodicCondition(*args)

def SPPRx_SetYPeriodicCondition(*args):
    """


    initialise data for simulation using periodic condition  

    python usage : SPPRx_SetYPeriodicCondition(yperiod)  

    Parameters
    ----------
    yperiod(real) : period on y axis  

    """
    return _lmgc90.SPPRx_SetYPeriodicCondition(*args)

def SPPRx_CleanMemory(*args):
    """


    Free all memory allocated within SPPRx module.  

    python usage : SPPRx_CleanMemory()  

    """
    return _lmgc90.SPPRx_CleanMemory(*args)

def SPSPx_SelectProxTactors(*args):
    """


    contact detection between SPxxx and SPxxx tactors  

    python usage : SPSPx_SelectProxTactors(reset=0) param[in] reset (integer) : if
    not 0, detection is skipped but the boxes will be computed anew at next call  

    First recup coordinate prediction, then proceed to a box selection to found
    rough contact list and finally compute the final contact list.  

    """
    return _lmgc90.SPSPx_SelectProxTactors(*args)

def SPSPx_SmoothForceComputation(*args):
    """


    recup values of local contact forces of the last time step  

    python usage : SPSPx_SmoothForceComputation()  

    """
    return _lmgc90.SPSPx_SmoothForceComputation(*args)

def SPSPx_WriteLastVlocRloc(*args):
    """


    write last local values of all SPSPx contacts  

    python usage : SPSPx_WriteLastVlocRloc()  


     the values written are relative velocity, forces and local frame  

    """
    return _lmgc90.SPSPx_WriteLastVlocRloc(*args)

def SPSPx_WriteOutVlocRloc(*args):
    """


    write local values of all SPSPx contacts  

    python usage : SPSPx_WriteOutVlocRloc()  


     the values written are relative velocity, forces and local frame  

    """
    return _lmgc90.SPSPx_WriteOutVlocRloc(*args)

def SPSPx_DisplayOutVlocRloc(*args):
    """


    display local values of all SPSPx contacts  

    python usage : SPSPx_DisplayOutVlocRloc()  


     the values displayed are relative velocity, forces and local frame  

    """
    return _lmgc90.SPSPx_DisplayOutVlocRloc(*args)

def SPSPx_DisplayProxTactors(*args):
    """


    display contacts  

    python usage : SPSPx_DisplayProxTactors()  

    """
    return _lmgc90.SPSPx_DisplayProxTactors(*args)

def SPSPx_ReadIniVlocRloc(*args):
    """


    Read VlocRloc file.  

    If num <= 0 : DATBOX/VlocRloc.INI file is read Else : OUTBOX/VlocRloc.OUT.num is
    read, num being the parameter used in TimeEvolution_ReadIniVlocRloc last call  

    usage : SPSPx_ReadIniVlocRloc(num=0)  

    Parameters
    ----------
    num(integer) : which VlocRloc file to read  

    """
    return _lmgc90.SPSPx_ReadIniVlocRloc(*args)

def SPSPx_SetXPeriodicCondition(*args):
    """


    initialise data for simulation using periodic condition  

    python usage : SPSPx_SetXPeriodicCondition(xperiod)  

    Parameters
    ----------
    xperiod(real) : period on x axis  

    """
    return _lmgc90.SPSPx_SetXPeriodicCondition(*args)

def SPSPx_SetYPeriodicCondition(*args):
    """


    initialise data for simulation using periodic condition  

    python usage : SPSPx_SetYPeriodicCondition(yperiod)  

    Parameters
    ----------
    yperiod(real) : period on y axis  

    """
    return _lmgc90.SPSPx_SetYPeriodicCondition(*args)

def SPSPx_SetNumberInterByContact(*args):
    """


    define the number of interaction by contact (experimental)  

    python usage : SPSPx_SetNumberInterByContact(nb_interactions)  

    Parameters
    ----------
    nb_interactions(integer) : number of interactions per contact  

    """
    return _lmgc90.SPSPx_SetNumberInterByContact(*args)

def SPSPx_SetContactRadius(*args):
    """


    define the contact radius (experimental)  

    python usage : SPSPx_SetContactRadius(radius)  

    Parameters
    ----------
    radius(real) : contact radius  

    """
    return _lmgc90.SPSPx_SetContactRadius(*args)

def SPSPx_FdSelectProxTactors(*args):
    """


    contact detection between SPHER and SPHER tactors  

    python usage : SPSPx_FdSelectProxTactors()  

    First recup coordinate prediction, then proceed to a box selection to found
    rough contact list and finally compute the final contact list.  

    """
    return _lmgc90.SPSPx_FdSelectProxTactors(*args)

def SPSPx_CleanMemory(*args):
    """


    Free all memory allocated within SPSPx module.  

    python usage : SPSPx_CleanMemory()  

    """
    return _lmgc90.SPSPx_CleanMemory(*args)

def inter_handler_3D_tgetNb(*args):
    """


    return the number of interactions of the selected type stored in this data
    structure  

    python usage : nb_inter = inter_handler_3D_tgetNb(inter_id)  

    Parameters
    ----------
    inter_id(integer) : type of interaction (lmgc90 parameter)  

    Returns
    -------
    nb_inter (integer) : number of interaction found of selected type  

    """
    return _lmgc90.inter_handler_3D_tgetNb(*args)

def inter_handler_3D_tgetTactLawNb(*args):
    """


    return the contact law number of an interaction stored in this data structure  

    python usage : tact_law = inter_handler_3D_tgetTactLawNb(inter_id, icdan)  

    Parameters
    ----------
    inter_id(integer) : type of interaction (lmgc90 parameter)  
    icdan(integer) : index of the interaction of selected type  

    Returns
    -------
    tact_law (integer) : contact law number  

    """
    return _lmgc90.inter_handler_3D_tgetTactLawNb(*args)

def inter_handler_3D_tgetIdBodies(*args):
    """


    return the serial numbers of contacting objects of an interaction stored in this
    data structure  

    python usage : idBodies = inter_handler_3D_tgetIdBodies(inter_id, icdan)  

    Parameters
    ----------
    inter_id(integer) : type of interaction (lmgc90 parameter)  
    icdan(integer) : index of the interaction of selected type  

    Returns
    -------
    idBodies (integer) : array with cd and an bodies serial number  

    """
    return _lmgc90.inter_handler_3D_tgetIdBodies(*args)

def inter_handler_3D_tgetIData(*args):
    """


    Get the integer data of an interaction stored in this data structure.  

    idata vector holds cd body type, an body type, cd body id, an body id, cd
    contactor type, an contactory type, cd contactor id, an contactor id, cd
    subcontactor id, an subcontactor id, tact law id, status, number of internals  

    usage : idata = inter_handler_3D_tgetIData(inter_id, icdan)  

    Parameters
    ----------
    inter_id(integer) : type of interaction (lmgc90 parameter)  
    icdan(integer) : index of the interaction of selected type  

    Returns
    -------
    idata (integer array) : the values array  

    """
    return _lmgc90.inter_handler_3D_tgetIData(*args)

def inter_handler_3D_tgetRData(*args):
    """


    return the real data associated with an interactions  

    Get an output array with, in this order, : coor, t/n/suc, rlt/n/s, vlt/n/s,
    gapTT  

    python usage : rdata = inter_handler_3D_tgetRData(inter_id, icdan)  

    Parameters
    ----------
    inter_id(integer) : type of interaction (lmgc90 parameter)  
    icdan(integer) : index of the interaction of selected type  

    Returns
    -------
    rdata (double array) : array with real data of the interaction  

    """
    return _lmgc90.inter_handler_3D_tgetRData(*args)

def inter_handler_3D_tsetInternal(*args):
    """


    Set the internal of an interaction (either the array or a single value) stored
    in this data structure.  

    Uses copy. If internal array is provided, the whole array is set. Otherwise
    index and value must be provided and a single value is set.  

    usage : inter_handler_3D_tsetInternal(inter_id, icdan, internal) or
    inter_handler_3D_tsetInternal(inter_id, icdan, index, value)  

    Parameters
    ----------
    inter_id(integer) : type of interaction (lmgc90 parameter)  
    icdan(integer) : index of the interaction of selected type  
    internal(double array) : the new values array  
    index(integer) : the index where to set single value  
    value(double ) : the new value to put at index  

    """
    return _lmgc90.inter_handler_3D_tsetInternal(*args)

def inter_handler_3D_tgetInternal(*args):
    """


    Get the internal of an interaction stored in this data structure.  

    usage : internal = inter_handler_3D_tgetInternal(inter_id, icdan)  

    Parameters
    ----------
    inter_id(integer) : type of interaction (lmgc90 parameter)  
    icdan(integer) : index of the interaction of selected type  
    internal(double array) : the new values array  

    """
    return _lmgc90.inter_handler_3D_tgetInternal(*args)

def inter_handler_3D_getNbRecup(*args):
    """


    return the number of recup interactions of the selected type  

    python usage : nb_recup = inter_handler_3D_getNbRecup(inter_id)  

    Parameters
    ----------
    inter_id(integer) : type of interaction (lmgc90 parameter)  

    Returns
    -------
    nb_recup (integer) : number of interaction recup of selected type  

    """
    return _lmgc90.inter_handler_3D_getNbRecup(*args)

def inter_handler_3D_getNb(*args):
    """


    return the number of interactions of the selected type stored in verlet data
    structure  

    python usage : nb_inter = inter_handler_3D_getNb(inter_id)  

    Parameters
    ----------
    inter_id(integer) : type of interaction (lmgc90 parameter)  

    Returns
    -------
    nb_inter (integer) : number of interaction found of selected type  

    """
    return _lmgc90.inter_handler_3D_getNb(*args)

def inter_handler_3D_getAllTactLawNb(*args):
    """


    return the tact law number of all interactions stored in verlet data structure  

    python usage : vector = inter_handler_3D_getAllTactLawNb(inter_id)  

    Parameters
    ----------
    inter_id(integer) : type of interaction (lmgc90 parameter)  

    Returns
    -------
    vector (int 1D-array) : mechanical data  

    """
    return _lmgc90.inter_handler_3D_getAllTactLawNb(*args)

def inter_handler_3D_getAll(*args):
    """


    return
    coorx,coory,coorz,tx,ty,tz,nx,ny,nz,sx,sy,sz,rlt,rln,rls,vlt,vln,vls,gaptt of
    all 'verlet' interactions  

    python usage : array = inter_handler_3D_getAll(inter_id)  

    Parameters
    ----------
    inter_id(integer) : type of interaction (lmgc90 parameter)  

    Returns
    -------
    array (double 2D-array) : mechanical data  

    """
    return _lmgc90.inter_handler_3D_getAll(*args)

def inter_handler_3D_getAllInternal(*args):
    """


    return contact point internal variables of all 'verlet' interactions  

    python usage : array = inter_handler_3D_getAllInternal()  

    Parameters
    ----------
    inter_id(integer) : type of interaction (lmgc90 parameter)  

    Returns
    -------
    array (double 2D-array) : mechanical data  

    """
    return _lmgc90.inter_handler_3D_getAllInternal(*args)

def inter_handler_3D_getAllIdata(*args):
    """


    return all integer data of all 'verlet' interaction  

    Which are in order cd body type, an body type, cd body id, an body id, cd
    contactor type, an contactory type, cd contactor id, an contactor id, cd
    subcontactor id, an subcontactor id, tact law id, status, number of internals  

    python usage : array = inter_handler_3D_getAllIdata(inter_id)  

    Parameters
    ----------
    inter_id(integer) : type of interaction (lmgc90 parameter)  

    Returns
    -------
    array (int 2D-array) : identification data  

    """
    return _lmgc90.inter_handler_3D_getAllIdata(*args)

def inter_handler_3D_getVerletAdjsz(*args):
    """


    return integer number of verlet interaction of a candidate  

    python usage : iantac = inter_handler_3D_getVerletAdjsz(inter_id, icdtac)  

    Parameters
    ----------
    inter_id(integer) : type of interaction (lmgc90 parameter)  
    icdtac(integer) : candidate contactor id  

    Returns
    -------
    iantac (integer) : number of verlet interactions on candidate  

    """
    return _lmgc90.inter_handler_3D_getVerletAdjsz(*args)

def inter_handler_3D_getVerletIantac(*args):
    """


    return integer antagonist contact of a verlet interaction  

    python usage : iantac = inter_handler_3D_getVerletIantac(inter_id, icdtac, iadj)  

    Parameters
    ----------
    inter_id(integer) : type of interaction (lmgc90 parameter)  
    icdtac(integer) : candidate contactor id  
    iadj(integer) : id of adjacent of candidate  

    Returns
    -------
    iantac (integer) : id of antagonist contactor corresponding to verlet
    interaction  

    """
    return _lmgc90.inter_handler_3D_getVerletIantac(*args)

def inter_handler_3D_computeRnod(*args):
    """


    Put back the Reac value of bodies from (this) interactions.  

    """
    return _lmgc90.inter_handler_3D_computeRnod(*args)

def inter_handler_3D_stockRloc(*args):
    """


    stock from this to verlet  

    python usage : inter_handler_3D_stockRloc(inter_id)  

    Parameters
    ----------
    inter_id(integer) : type of interaction (lmgc90 parameter)  

    """
    return _lmgc90.inter_handler_3D_stockRloc(*args)

def inter_handler_3D_recupRloc(*args):
    """


    recup from verlet to this  

    python usage : inter_handler_3D_recupRloc(inter_id)  

    Parameters
    ----------
    inter_id(integer) : type of interaction (lmgc90 parameter)  

    """
    return _lmgc90.inter_handler_3D_recupRloc(*args)

def inter_handler_3D_recupRlocByPos(*args):
    """


    recup from verlet to this using position as criteria  

    Only available for CSASp inter_id  

    python usage : inter_handler_3D_recupRloc(inter_id, rtol)  

    Parameters
    ----------
    inter_id(integer) : type of interaction (lmgc90 parameter)  
    rtol(real) : tolerance to decide if contact is recup  

    """
    return _lmgc90.inter_handler_3D_recupRlocByPos(*args)

def cpg_ExIter(*args):
    """


    Execute one CPG iteration over the contact loop.  

    python usage cpg_ExIter()  

    """
    return _lmgc90.cpg_ExIter(*args)

def cpg_AfterIterCheck(*args):
    """


    Control CPG convergence.  

    python usage cpg_AfterIterCheck()  

    """
    return _lmgc90.cpg_AfterIterCheck(*args)

def cpg_ExPost(*args):
    """


    Transfer local solution.  

    python usage cpg_ExPost()  

    """
    return _lmgc90.cpg_ExPost(*args)

def cpg_ExPrep(*args):
    """


    prepare the matrix and the RHS of the contact problem  

    python usage cpg_ExPrep()  

    """
    return _lmgc90.cpg_ExPrep(*args)

def cpg_ScaleRloc(*args):
    """


    scale all local contact forces of a factor equal to 0.9 < f < 1.1  

    python usage cpg_ScaleRloc()  

    """
    return _lmgc90.cpg_ScaleRloc(*args)

def cpg_SetDiagonalPrecond(*args):
    """


    active diagonal preconditioner  

    python usage cpg_SetDiagonalPrecond()  

    """
    return _lmgc90.cpg_SetDiagonalPrecond(*args)

def cpg_SetFrictionless(*args):
    """


    active frictionless solver  

    python usage cpg_SetFrictionless()  

    """
    return _lmgc90.cpg_SetFrictionless(*args)

def cpg_SetNoConjugaison(*args):
    """


    desactive conjugaison  

    python usage cpg_SetNoConjugaison()  

    """
    return _lmgc90.cpg_SetNoConjugaison(*args)

def cpg_SetCheckType(*args):
    """


    define numerical convergence of the NLGS algorithm  

    python usage cpg_SetCheckType(checktype, tol)  

    Parameters
    ----------
    chekctype(char[5]) : type of convergence check  
    tol(double) : norm tolerance  

     convergence check keywords:  
     Quad : quadratic norm (faulty contacts are redeemed by accurate contacts;
    laxist norm)  
     Maxm : maximum norm (faulty contacts must comply; severe norm)  
     QM/16 : maximum of Quad and Maxm/16 norms (a compromise). For large dense
    collections Quad ranges usually around 1/16 Maxm  
     where Quad,Maxm,QM/16 are keywords for the check test, and the following real
    number is the tolerance value.  

    """
    return _lmgc90.cpg_SetCheckType(*args)

def cpg_NormCheck(*args):
    """


    Active one step norm evolution.  

    python usage : cpg_norm_check()  

    """
    return _lmgc90.cpg_NormCheck(*args)

def cpg_ExSolver(*args):
    """


    Solve fully the local contact problem.  

    python usage : cpg_ExSolver(checktype, tol, nb_iter_check, nb_block_iter)  

    Parameters
    ----------
    checktype(char[5]) c : convergentce test keyword  
    tol(double) : tolerance value  
    nb_iter_check(integer) : number of iteration between convergence test  
    nb_block_iter(integer) : number of block iterations  

    """
    return _lmgc90.cpg_ExSolver(*args)

def cpg_3D_ExIter(*args):
    """


    Execute one CPG iteration over the contact loop.  

    python usage cpg_3D_ExIter()  

    """
    return _lmgc90.cpg_3D_ExIter(*args)

def cpg_3D_AfterIterCheck(*args):
    """


    Control CPG convergence.  

    python usage cpg_3D_AfterIterCheck()  

    """
    return _lmgc90.cpg_3D_AfterIterCheck(*args)

def cpg_3D_ExPost(*args):
    """


    Transfer local solution.  

    python usage cpg_3D_ExPost()  

    """
    return _lmgc90.cpg_3D_ExPost(*args)

def cpg_3D_ExPrep(*args):
    """


    prepare the matrix and the RHS of the contact problem  

    python usage cpg_3D_ExPrep()  

    """
    return _lmgc90.cpg_3D_ExPrep(*args)

def cpg_3D_ScaleRloc(*args):
    """


    scale all local contact forces of a factor equal to 0.9 < f < 1.1  

    python usage cpg_3D_ScaleRloc()  

    """
    return _lmgc90.cpg_3D_ScaleRloc(*args)

def cpg_3D_SetDiagonalPrecond(*args):
    """


    active diagonal preconditioner  

    python usage cpg_3D_SetDiagonalPrecond()  

    """
    return _lmgc90.cpg_3D_SetDiagonalPrecond(*args)

def cpg_3D_SetFrictionless(*args):
    """


    active frictionless solver  

    python usage cpg_3D_SetFrictionless()  

    """
    return _lmgc90.cpg_3D_SetFrictionless(*args)

def cpg_3D_BimodalContactOrder(*args):
    """


    active bimodal list  

    python usage : cpg_3D_BimodalContactOrder()  

    """
    return _lmgc90.cpg_3D_BimodalContactOrder(*args)

def cpg_3D_SetCheckType(*args):
    """


    define numerical convergence of the NLGS algorithm  

    python usage cpg_3D_SetCheckType(checktype, tol, idproj)  

    Parameters
    ----------
    chekctype(char[5]) : type of convergence check  
    tol(double) : norm tolerance  
    idproj(integer) :  

     convergence check keywords:  
     Quad : quadratic norm (faulty contacts are redeemed by accurate contacts;
    laxist norm)  
     Maxm : maximum norm (faulty contacts must comply; severe norm)  
     where Quad,Maxm,QM/16 are keywords for the check test, and the following real
    number is the tolerance value.  
     The identifiant projection parameter corrsponds to :  
     PYRAMIDAL APPROXIMATION (1)  
     Efficient but no more isotropic friction  
     NORMAL PROJECTION (2)  
     The basic projection but not really efficient  
     HYBRID CORRECTION (3)  
     Efficient for sphere but not really sense for other bodies.  

    """
    return _lmgc90.cpg_3D_SetCheckType(*args)

def cpg_3D_NormCheck(*args):
    """


    Active one step norm evolution.  

    python usage : cpg_3D_norm_check()  

    """
    return _lmgc90.cpg_3D_NormCheck(*args)

def cpg_3D_ExSolver(*args):
    """


    Solve fully the local contact problem.  

    python usage : cpg_3D_ExSolver(checktype, tol, idpoj, nb_iter_check,
    nb_block_iter)  

    Parameters
    ----------
    checktype(char[5]) : convergentce test keyword  
    tol(double) : tolerance value  
    idproj(integer) :  
    nb_iter_check(integer) : number of iteration between convergence test  
    nb_block_iter(integer) : number of block iterations  

    """
    return _lmgc90.cpg_3D_ExSolver(*args)

def mp_solver_ReadMpBehaviour(*args):
    """


    python usage : mp_solver_ReadMpBehaviour()  

    """
    return _lmgc90.mp_solver_ReadMpBehaviour(*args)

def mp_solver_WriteMpBehaviour(*args):
    """


    python usage : mp_solver_WriteMpBehaviour()  

    """
    return _lmgc90.mp_solver_WriteMpBehaviour(*args)

def mp_solver_ReadIniMpValues(*args):
    """


    Read MP_VALUES file.  

    If num <= 0 : DATBOX/MP_VALUES.INI file is read Else : OUTBOX/MP_VALUES.OUT.num
    is read, num being the parameter used in TimeEvolution_ReadIniDof last call  

    usage : mp_solver_ReadIniMpValues(num=0)  

    Parameters
    ----------
    num(integer) : which file to read  

    """
    return _lmgc90.mp_solver_ReadIniMpValues(*args)

def mp_solver_WriteOutMpValues(*args):
    """


    python usage : mp_solver_WriteOutMpValues()  

    """
    return _lmgc90.mp_solver_WriteOutMpValues(*args)

def mp_solver_WriteLastMpValues(*args):
    """


    python usage : mp_solver_WriteLastMpValues()  

    """
    return _lmgc90.mp_solver_WriteLastMpValues(*args)

def mp_solver_SolveElectro1G(*args):
    """


    python usage : mp_solver_SolveElectro1G()  

    """
    return _lmgc90.mp_solver_SolveElectro1G(*args)

def mp_solver_SolveNlElectro1G(*args):
    """


    python usage : mp_solver_SolveNlElectro1G()  

    """
    return _lmgc90.mp_solver_SolveNlElectro1G(*args)

def mp_solver_SolveThermoProblem(*args):
    """


    python usage : mp_solver_SolveThermoProblem()  

    """
    return _lmgc90.mp_solver_SolveThermoProblem(*args)

def mp_solver_UpdateThermoProblem(*args):
    """


    python usage : mp_solver_UpdateThermoProblem()  

    """
    return _lmgc90.mp_solver_UpdateThermoProblem(*args)

def mp_solver_RecupTemperature(*args):
    """


    python usage : mp_solver_RecupTemperature()  

    """
    return _lmgc90.mp_solver_RecupTemperature(*args)

def mp_solver_RecupPotential(*args):
    """


    python usage : mp_solver_RecupPotential()  

    """
    return _lmgc90.mp_solver_RecupPotential(*args)

def mp_solver_UpdateConductivity(*args):
    """


    python usage : mp_solver_UpdateConductivity()  

    """
    return _lmgc90.mp_solver_UpdateConductivity(*args)

def mp_solver_InitThermalConductivity(*args):
    """


    python usage : mp_solver_InitThermalConductivity()  

    """
    return _lmgc90.mp_solver_InitThermalConductivity(*args)

def mp_solver_GetBrancheValues(*args):
    """


    """
    return _lmgc90.mp_solver_GetBrancheValues(*args)

def mp_solver_PutHeatGenerationFactor(*args):
    """


    python usage : value = mp_solver_PutHeatGenerationFactor(ivalue)  

    """
    return _lmgc90.mp_solver_PutHeatGenerationFactor(*args)

def mp_solver_PutHeatConductionContinueFactor(*args):
    """


    python usage : value = mp_solver_PutHeatConductionContinueFactor(ivalue)  

    """
    return _lmgc90.mp_solver_PutHeatConductionContinueFactor(*args)

def mp_solver_3D_ReadMpBehaviour(*args):
    """


    python usage : mp_solver_3D_ReadMpBehaviour()  

    """
    return _lmgc90.mp_solver_3D_ReadMpBehaviour(*args)

def mp_solver_3D_WriteMpBehaviour(*args):
    """


    python usage : mp_solver_3D_WriteMpBehaviour()  

    """
    return _lmgc90.mp_solver_3D_WriteMpBehaviour(*args)

def mp_solver_3D_ReadIniMpValues(*args):
    """


    Read MP_VALUES file.  

    If num <= 0 : DATBOX/MP_VALUES.INI file is read Else : OUTBOX/MP_VALUES.OUT.num
    is read, num being the parameter used in TimeEvolution_ReadIniDof last call  

    usage : mp_solver_3D_ReadIniMpValues(num=0)  

    Parameters
    ----------
    num(integer) : which file to read  

    """
    return _lmgc90.mp_solver_3D_ReadIniMpValues(*args)

def mp_solver_3D_WriteOutMpValues(*args):
    """


    python usage : mp_solver_3D_WriteOutMpValues()  

    """
    return _lmgc90.mp_solver_3D_WriteOutMpValues(*args)

def mp_solver_3D_WriteLastMpValues(*args):
    """


    python usage : mp_solver_3D_WriteLastMpValues()  

    """
    return _lmgc90.mp_solver_3D_WriteLastMpValues(*args)

def mp_solver_3D_SolveElectro1G(*args):
    """


    python usage : mp_solver_3D_SolveElectro1G()  

    """
    return _lmgc90.mp_solver_3D_SolveElectro1G(*args)

def mp_solver_3D_SolveNlElectro1G(*args):
    """


    python usage : mp_solver_3D_SolveNlElectro1G()  

    """
    return _lmgc90.mp_solver_3D_SolveNlElectro1G(*args)

def mp_solver_3D_SolveThermoProblem(*args):
    """


    python usage : mp_solver_3D_SolveThermoProblem()  

    """
    return _lmgc90.mp_solver_3D_SolveThermoProblem(*args)

def mp_solver_3D_UpdateThermoProblem(*args):
    """


    python usage : mp_solver_3D_UpdateThermoProblem()  

    """
    return _lmgc90.mp_solver_3D_UpdateThermoProblem(*args)

def mp_solver_3D_RecupTemperature(*args):
    """


    python usage : mp_solver_3D_RecupTemperature()  

    """
    return _lmgc90.mp_solver_3D_RecupTemperature(*args)

def mp_solver_3D_RecupPotential(*args):
    """


    python usage : mp_solver_3D_RecupPotential()  

    """
    return _lmgc90.mp_solver_3D_RecupPotential(*args)

def mp_solver_3D_UpdateConductivity(*args):
    """


    python usage : mp_solver_3D_UpdateConductivity()  

    """
    return _lmgc90.mp_solver_3D_UpdateConductivity(*args)

def nlgs_ExPrep(*args):
    """


    Prepare matrix storage.  

    python usage : nlgs_ExPrep(storage)  

    Parameters
    ----------
    sotrage(char[30]) : matrix storage  

     prepare the matrix and the RHS of the contact problem in regards of the
    selected matrix storage:  

    *   Exchange_Local_Global (the standard case) only the diagonal blocks are
        computed and stored.  
    *   Stored_Delassus_Loops (faster but memory expensive) the complete Delassus
        matrix is computed.  

    """
    return _lmgc90.nlgs_ExPrep(*args)

def nlgs_ExIter(*args):
    """


    Execute NLGS iterations over the contact loop.  

    python usage : nlgs_ExIter(nb_iter) param[in] nb_iter (integer) : number of
    iterations to do  

    """
    return _lmgc90.nlgs_ExIter(*args)

def nlgs_ExPost(*args):
    """


    Run a jacobi iteration with the solution obtained with the NLGS algorithm.  

    python usage : nlgs_ExPost()  

    """
    return _lmgc90.nlgs_ExPost(*args)

def nlgs_AfterIterCheck(*args):
    """


    Control NLGS convergence.  

    python usage : convergence = nlgs_AfterIterCheck()  

    Returns
    -------
    convergence (integer) :  

    """
    return _lmgc90.nlgs_AfterIterCheck(*args)

def nlgs_DisplayAfterIterCheck(*args):
    """


    Display NLGS convergence results.  

    python usage : nlgs_DisplayAfterIterCheck()  

    """
    return _lmgc90.nlgs_DisplayAfterIterCheck(*args)

def nlgs_NormCheck(*args):
    """


    Active one step norm evolution.  

    python usage : nlgs_NormCheck()  

    """
    return _lmgc90.nlgs_NormCheck(*args)

def nlgs_UpdateTactBehav(*args):
    """


    Update internal parameters of contact lawz for each contact.  

    python usage : nlgs_UpdateTactBehav()  

    """
    return _lmgc90.nlgs_UpdateTactBehav(*args)

def nlgs_SetCheckType(*args):
    """


    Define numerical convergence of the NLGS algorithm.  

    python usage : nlgs_SetCheckType(check_type, tolerance, relaxation)  

    Parameters
    ----------
    check_type(char[5]) : type of convergence check  
    tolerance(double) : norm tolerance  
    relaxation(double) : relaxation factor  

     convergence check keywords:  
     Quad : quadratic norm (faulty contacts are redeemed by accurate contacts;
    laxist norm)  
     Maxm : maximum norm (faulty contacts must comply; severe norm)  
     QM/16 : maximum of Quad and Maxm/16 norms (a compromise). For large dense
    collections Quad ranges usually around 1/16 Maxm  
     where Quad,Maxm,QM/16 are keywords for the check test, and the following real
    number is the tolerance value.  

    """
    return _lmgc90.nlgs_SetCheckType(*args)

def nlgs_ScrambleContactOrder(*args):
    """


    Random renumbering of the contact list.  

    python usage : nlgs_ScrambleContactOrder()  

    """
    return _lmgc90.nlgs_ScrambleContactOrder(*args)

def nlgs_QuickScrambleContactOrder(*args):
    """


    Random renumbering of the contact list.  

    python usage : nlgs_QuickScrambleContactOrder()  

    """
    return _lmgc90.nlgs_QuickScrambleContactOrder(*args)

def nlgs_SetWithQuickScramble(*args):
    """


    active quick scramble in macro function ExSolver  

    python usage : nlgs_SetWithQuickScramble()  

    """
    return _lmgc90.nlgs_SetWithQuickScramble(*args)

def nlgs_ReverseContactOrder(*args):
    """


    Reverse the numbering of the contact list.  

    python usage : nlgs_ReverseContactOrder()  

    """
    return _lmgc90.nlgs_ReverseContactOrder(*args)

def nlgs_BimodalContactOrder(*args):
    """


    Renumbering of the contact list using the definition of weak and strong network
    in granular assemblies.  

    python usage : nlgs_BimodalContactOrder()  

    """
    return _lmgc90.nlgs_BimodalContactOrder(*args)

def nlgs_ScaleRloc(*args):
    """


    Scale all local contact forces of a factor equal to * 0.9 < f < 1.1.  

    python usage : nlgs_ScaleRloc()  

    """
    return _lmgc90.nlgs_ScaleRloc(*args)

def nlgs_ComputeRnod(*args):
    """


    mapping from local contact forces to global ones  

    python usage : nlgs_ComputeRnod()  

    """
    return _lmgc90.nlgs_ComputeRnod(*args)

def nlgs_DisplayRlocNSum(*args):
    """


    Display the sum of normal contact forces.  

    python usage : nlgs_DisplayRlocNSum()  

    """
    return _lmgc90.nlgs_DisplayRlocNSum(*args)

def nlgs_ExSolver(*args):
    """


    Solve fully the local contact problem.  

    python usage : nlgs_ExSolver(storage, checktype, tol, relax, nb_iter_check,
    nb_block_iter)  

    Parameters
    ----------
    storage(char[30]) : matrix storage (cf nlgs_ExPrep)  
    checktype(char[5]) : convergentce test keyword  
    tolerance(double) : tolerance value  
    relaxation(double) : relaxation number  
    nb_iter_check(integer) : number of iteration between convergence test  
    nb_block_iter(integer) : number of block iterations  

    """
    return _lmgc90.nlgs_ExSolver(*args)

def nlgs_UpdateCohesiveBehav(*args):
    """


    update internal parameters of contact laws for each contact  

    python usage : nlgs_UpdateCohesiveBehav(void)  

    """
    return _lmgc90.nlgs_UpdateCohesiveBehav(*args)

def nlgs_UpdateFrictionalBehav(*args):
    """


    update internal parameters of contact laws for each contact  

    python usage : nlgs_UpdateFrictionalBehav(void)  

    """
    return _lmgc90.nlgs_UpdateFrictionalBehav(*args)

def nlgs_GetAllThis(*args):
    """


    Get all interactions in "this" array.  

    Each interaction has (in this order): coor, tuc, nuc, rlt, rln, vlt, vln  

    usage : interactions = nlgs_GetAllThis()  

    Returns
    -------
    interactions (double 2D-array) : the interactions  

    """
    return _lmgc90.nlgs_GetAllThis(*args)

def nlgs_UseJacobiSolver(*args):
    """


    Use a Jacobi solver instead of Gauss Seidel solver.  

    usage : nlgs_UseJacobiSolver(True) or nlgs_UseJacobiSolver(False)  

    """
    return _lmgc90.nlgs_UseJacobiSolver(*args)

def nlgs_UseRegularization(*args):
    """


    use some regularization heuristics on interaction laws  

    python usage : nlgs_UseRegularization(krn, krt)  

    Parameters
    ----------
    krn(double) : normal penality (default 1e14)  
    krt(double) : tangential penality (default 1e14)  

    """
    return _lmgc90.nlgs_UseRegularization(*args)

def nlgs_SetTemporaryVariable(*args):
    """


    set temporary variables used in nlgs ; ivalue2 == 3 gives access to post crack
    pressure  

    python usage : nlgs_SetTemporaryVariable(icdan,id,val)  

    Parameters
    ----------
    icdan(int) : interaction rank  
    id(int) : value rank  
    val(double) : value  

    """
    return _lmgc90.nlgs_SetTemporaryVariable(*args)

def nlgs_GetTemporaryVariable(*args):
    """


    get temporary variables used in nlgs ; ivalue2 == 3 gives access to post crack
    pressure  

    python usage : val = nlgs_GetTemporaryVariable(icdan,id)  

    Parameters
    ----------
    icdan(int) : interaction rank  
    id(int) : value rank  
    val(double) : value  

    """
    return _lmgc90.nlgs_GetTemporaryVariable(*args)

def nlgs_IsInitialized(*args):
    """


    In case of restart say that nlgs is initialized or reset it.  

    python usage : nlgs_IsInitialized(is_init=1)  

    """
    return _lmgc90.nlgs_IsInitialized(*args)

def nlgs_3D_ExIter(*args):
    """


    Executes nb_iter NLGS iterations.  

    python usage : nlgs_3D_ExIter(nb_iter) param[in] nb_iter (integer) : number of
    iterations to do  

    """
    return _lmgc90.nlgs_3D_ExIter(*args)

def nlgs_3D_ExIterJacobi(*args):
    """


    Executes nb_iter NLJacobi iterations.  

    python usage : nlgs_3D_ExIterJacobi(nb_iter) param[in] nb_iter (integer) :
    number of iterations to do  

    """
    return _lmgc90.nlgs_3D_ExIterJacobi(*args)

def nlgs_3D_AfterIterCheck(*args):
    """


    Control NLGS convergence.  

    python usage : convergence = nlgs_3D_AfterIterCheck()  

    Returns
    -------
    convergence (integer) :  

    """
    return _lmgc90.nlgs_3D_AfterIterCheck(*args)

def nlgs_3D_AfterIterCheckJacobi(*args):
    """


    Control NLGS convergence.  

    python usage : convergence = nlgs_3D_AfterIterCheckJacobi()  

    Returns
    -------
    convergence (integer) :  

    """
    return _lmgc90.nlgs_3D_AfterIterCheckJacobi(*args)

def nlgs_3D_ScrambleContactOrder(*args):
    """


    Random renumbering of the contact list.  

    python usage : nlgs_3D_ScrambleContactOrder()  

    """
    return _lmgc90.nlgs_3D_ScrambleContactOrder(*args)

def nlgs_3D_QuickScrambleContactOrder(*args):
    """


    Random renumbering of the contact list.  

    python usage : nlgs_3D_QuickScrambleContactOrder()  

    """
    return _lmgc90.nlgs_3D_QuickScrambleContactOrder(*args)

def nlgs_3D_ReverseContactOrder(*args):
    """


    reverse the numbering of the contact list  

    python usage : nlgs_3D_ReverseContactOrder()  

    """
    return _lmgc90.nlgs_3D_ReverseContactOrder(*args)

def nlgs_3D_DisplayAfterIterCheck(*args):
    """


    display NLGS convergence results  

    python usage : nlgs_3D_DisplayAfterIterCheck()  

    """
    return _lmgc90.nlgs_3D_DisplayAfterIterCheck(*args)

def nlgs_3D_ScaleRloc(*args):
    """


    scale all local contact forces of a factor equal to 0.9 < f < 1.1  

    python usage : nlgs_3D_ScaleRloc()  

    """
    return _lmgc90.nlgs_3D_ScaleRloc(*args)

def nlgs_3D_ComputeRnod(*args):
    """


    mapping from local contact forces to global ones  

    python usage : nlgs_3D_ComputeRnod()  

    """
    return _lmgc90.nlgs_3D_ComputeRnod(*args)

def nlgs_3D_ExPost(*args):
    """


    run a jacobi iteration with the solution obtain with the NLGS algorithm  

    python usage : nlgs_3D_ExPost()  

    """
    return _lmgc90.nlgs_3D_ExPost(*args)

def nlgs_3D_ExPostJacobi(*args):
    """


    run a jacobi iteration with the solution obtain with the NLGS algorithm  

    python usage : nlgs_3D_ExPostJacobi()  

    """
    return _lmgc90.nlgs_3D_ExPostJacobi(*args)

def nlgs_3D_SetCheckType(*args):
    """


    define numerical convergence of the NLGS algorithm  

    python usage : nlgs_SetCheckType(check_type, tolerance, relaxation)  

    Parameters
    ----------
    chekctype_c(char[5]) : type of convergence check  
    tol(double) : norm tolerance  
    relax(double) : relaxation factor  

     convergence check keywords:  
     Quad : quadratic norm (faulty contacts are redeemed by accurate contacts;
    laxist norm)  
     Maxm : maximum norm (faulty contacts must comply; severe norm)  
     QM/16 : maximum of Quad and Maxm/16 norms (a compromise). For large dense
    collections Quad ranges usually around 1/16 Maxm  
     where Quad,Maxm,QM/16 are keywords for the check test, and the following real
    number is the tolerance value.  

    """
    return _lmgc90.nlgs_3D_SetCheckType(*args)

def nlgs_3D_ExPrep(*args):
    """


    Prepare matrix storage.  

    python usage : nlgs_ExPrep(storage)  

    Parameters
    ----------
    storage_c(char[30]): matrix storage  

     prepare the matrix and the RHS of the contact problem in regards of the
    selected matrix storage:  

    *   Exchange_Local_Global (the standard case) only the diagonal blocks are
        computed and stored.  
    *   Stored_Delassus_Loops (faster but memory expensive) the complete Delassus
        matrix is computed.  

    """
    return _lmgc90.nlgs_3D_ExPrep(*args)

def nlgs_3D_WriteNormCheck(*args):
    """


    write norm to file  

    python usage : nlgs_3D_WriteNormCheck()  

    """
    return _lmgc90.nlgs_3D_WriteNormCheck(*args)

def nlgs_3D_DiagonalResolution(*args):
    """


    python usage : nlgs_3D_DiagonalResolution()  

    """
    return _lmgc90.nlgs_3D_DiagonalResolution(*args)

def nlgs_3D_SetWithQuickScramble(*args):
    """


    Activate quick scramble in macro function ExSolver.  

    python usage : nlgs_3D_SetWithQuickScramble()  

    """
    return _lmgc90.nlgs_3D_SetWithQuickScramble(*args)

def nlgs_3D_SetWithReverseContactOrder(*args):
    """


    Activate reverse order in macro function ExSolver.  

    python usage : nlgs_3D_SetWithReverseContactOrder()  

    """
    return _lmgc90.nlgs_3D_SetWithReverseContactOrder(*args)

def nlgs_3D_UseJacobiSolver(*args):
    """


    Use a Jacobi solver instead of Gauss Seidel solver.  

    usage : nlgs_3D_UseJacobiSolver(True) or nlgs_UseJacobiSolver(False)  

    """
    return _lmgc90.nlgs_3D_UseJacobiSolver(*args)

def nlgs_3D_ExSolver(*args):
    """


    Solve fully the local contact problem.  

    python usage : nlgs_3D_ExSolver(storage, checktype, tol, relax, nb_iter_check,
    nb_block_iter)  

    Parameters
    ----------
    storage(char[30]) : matrix storage (cf nlgs_ExPrep)  
    checktype(char[5]) : convergentce test keyword  
    tolerance(double) : tolerance value  
    relaxation(double) : relaxation number  
    nb_iter_check(integer) : number of iteration between convergence test  
    nb_block_iter(integer) : number of block iterations  

    """
    return _lmgc90.nlgs_3D_ExSolver(*args)

def nlgs_3D_UpdateTactBehav(*args):
    """


    update internal parameters of contact laws for each contact  

    python usage : nlgs_3D_UpdateTactBehav()  

    """
    return _lmgc90.nlgs_3D_UpdateTactBehav(*args)

def nlgs_3D_IsInitialized(*args):
    """


    In case of restart say that nlgs is initialized.  

    python usage : nlgs_3D_IsInitialized(is_init=1)  

    """
    return _lmgc90.nlgs_3D_IsInitialized(*args)

def nlgs_3D_DisplayTacInfo(*args):
    """


    Display information concerning one contact.  

    python usage : nlgs_3D_DsplayTacInfo(itac) param[in] itac (integer) : contact
    rank  

    """
    return _lmgc90.nlgs_3D_DisplayTacInfo(*args)

def nlgs_3D_UseRegularization(*args):
    """


    use some regularization heuristics on interaction laws  

    python usage : nlgs_3D_UseRegularization(krn, krt)  

    Parameters
    ----------
    krn(double) : normal penality (default 1e14)  
    krt(double) : tangential penality (default 1e14)  

    """
    return _lmgc90.nlgs_3D_UseRegularization(*args)

def nlgs_3D_CutOpenCZM(*args):
    """


    If some czm contact have a gap greater than the given they are considered as
    broken ; works only with EXPO_CZM or IQS_EXPO_CZM.  

    python usage : nlgs_3D_CutOpenCZM(tol)  

    Parameters
    ----------
    tol(double) : threshold on positive distance (default 1e-6)  

    """
    return _lmgc90.nlgs_3D_CutOpenCZM(*args)

def nlgs_3D_ManageInterpenetratedCZM(*args):
    """


    Apply a g0 strategy if gap is negative and if gap is positive (without using
    nlgs_3D_CutOpenCZM) ; works only with EXPO_CZM or IQS_EXPO_CZM.  

    python usage : nlgs_3D_ManageInterpenetratedCZM()  

    """
    return _lmgc90.nlgs_3D_ManageInterpenetratedCZM(*args)

def gts_Initialize(*args):
    """


    Initialize global solver module.  

    python usage : gts_Initialize()  

    """
    return _lmgc90.gts_Initialize(*args)

def gts_AssembleSystem(*args):
    """


    Assembling of the global system.  

    python usage : gts_AssembleSystem()  

    """
    return _lmgc90.gts_AssembleSystem(*args)

def gts_PrepSystem(*args):
    """


    Preparing the global system.  

    python usage gts_PrepSystem()  

    """
    return _lmgc90.gts_PrepSystem(*args)

def gts_AssembleLHS(*args):
    """


    Assembling the lhs of the global system.  

    python usage : gts_AssemblerLHS()  

    """
    return _lmgc90.gts_AssembleLHS(*args)

def gts_AssembleRHS(*args):
    """


    Assembling the rhs of the global system.  

    i  

    python usage : gts_AssembleRHS()  

    """
    return _lmgc90.gts_AssembleRHS(*args)

def gts_Solve(*args):
    """


    Solving of the global system.  

    i  

    python usage : gts_Solve()  

    """
    return _lmgc90.gts_Solve(*args)

def gts_Finalize(*args):
    """


    Clean memory of global solver module.  

    python usage : gts_Finalize()  

    """
    return _lmgc90.gts_Finalize(*args)

def postpro_PostproDuringComputation(*args):
    """


    Scan postprocessing function which should be call during the computation
    process.  

    python usage : postpro_PostproDuringComputation()  

    """
    return _lmgc90.postpro_PostproDuringComputation(*args)

def postpro_ReadCommands(*args):
    """


    Scan postprocessing function which should be call during the computation
    process.  

    python usage : postpro_ReadCommands()  

    """
    return _lmgc90.postpro_ReadCommands(*args)

def postpro_PostproBeforeComputation(*args):
    """


    Data initialization and scan postprocessing function which should be called
    before the computation process.  

    python usage : postpro_PostproBeforeComputation(restart=0) param[in] restart
    (integer) : if the Postpro file must append to existing ones and starting index
    of CONTACT_FORCE_DISTRIBUTION files  

    """
    return _lmgc90.postpro_PostproBeforeComputation(*args)

def postpro_FlushDuringComputation(*args):
    """


    Flush all postpro files.  

    python usage : postpro_FlushDuringComputation()  

    """
    return _lmgc90.postpro_FlushDuringComputation(*args)

def postpro_ClosePostproFiles(*args):
    """


    Close all postpro files.  

    python usage : postpro_ClosePostproFiles()  

    """
    return _lmgc90.postpro_ClosePostproFiles(*args)

def postpro_SetCircularSelectionZone(*args):
    """


    Initialize data for postreatment using a circular selection.  

    python usage : postpro_SetCircularSelectionZone(rvalue1, rvalu2, rvalue3)  

    Parameters
    ----------
    rvalue1(double) : X coordinate  
    rvalue2(double) : Y coordinate  
    rvalue3(double) : radius selection  

    """
    return _lmgc90.postpro_SetCircularSelectionZone(*args)

def postpro_MoveCircularSelectionZone(*args):
    """


    Increment the position of the circular selection defined with
    CIRCULAR_SELECTION.  

    python usage : postpro_MoveCircularSelectionZone(rvalue1, rvalu2)  

    Parameters
    ----------
    rvalue1(double) : X translational velocity  
    rvalue2(double) : Y translational velocity  

    """
    return _lmgc90.postpro_MoveCircularSelectionZone(*args)

def postpro_CleanMemory(*args):
    """


    Free all memory allocated within postpro module.  

    python usage : postpro_CleanMemory()  

    """
    return _lmgc90.postpro_CleanMemory(*args)

def postpro_2D_GetKineticEnergy(*args):
    """


    Compute Kinetic Energy for all bodies (rigids and defo)  

    python usage : KE = postpro_2D_GetKineticEnergy()  

    """
    return _lmgc90.postpro_2D_GetKineticEnergy(*args)

def postpro_3D_PostproDuringComputation(*args):
    """


    Scan postprocessing function which should be call during the computation
    process.  

    python usage : postpro_3D_PostproDuringComputation()  

    """
    return _lmgc90.postpro_3D_PostproDuringComputation(*args)

def postpro_3D_FlushDuringComputation(*args):
    """


    Flush all postpro files.  

    python usage : postpro_3D_FlushDuringComputation()  

    """
    return _lmgc90.postpro_3D_FlushDuringComputation(*args)

def postpro_3D_ReadCommands(*args):
    """


    Scan postprocessing functions which should be call during the computation
    process.  

    python usage : postpro_3D_ReadCommands()  

    """
    return _lmgc90.postpro_3D_ReadCommands(*args)

def postpro_3D_PostproBeforeComputation(*args):
    """


    Data initialization.  

    python usage : postpro_3D_PostproBeforeComputation(restart=False) param[in]
    restart (integer) : if the Postpro file must append to existing ones and
    starting index of CONTACT_FORCE_DISTRIBUTION files  

    """
    return _lmgc90.postpro_3D_PostproBeforeComputation(*args)

def postpro_3D_ClosePostproFiles(*args):
    """


    Close all postpro files.  

    python usage : postpro_3D_ClosePostproFiles()  

    """
    return _lmgc90.postpro_3D_ClosePostproFiles(*args)

def postpro_3D_GetKineticEnergy(*args):
    """


    Compute Kinetic Energy for all bodies (rigids and defo)  

    python usage : KE = postpro_3D_GetKineticEnergy()  

    """
    return _lmgc90.postpro_3D_GetKineticEnergy(*args)

def postpro_3D_GetRBDY3PrincStress(*args):
    """


    Return the principal stresses on each RBDY3.  

    python usage : pstress = postpro_3D_GetRBDY3PrincStress()  

    Returns
    -------
    pstress (double 2D-array) : the interactions  

    """
    return _lmgc90.postpro_3D_GetRBDY3PrincStress(*args)

def postpro_3D_CleanMemory(*args):
    """


    Free all memory allocated within postpro_3D module.  

    python usage : postpro_3D_CleanMemory()  

    """
    return _lmgc90.postpro_3D_CleanMemory(*args)

def user_getWoodFrame(*args):
    """


    """
    return _lmgc90.user_getWoodFrame(*args)

def cut2D_Cut(*args):
    """


    """
    return _lmgc90.cut2D_Cut(*args)

def deposit2D_Potential(*args):
    """


    Computes a new deposit under potential with or without big particles.  

    python call: coor = deposit2D_Potential(in_radii, lx, potential[, dradii,
    dcoor])  

    Parameters
    ----------
    in_radii(double array): given radii list (i.e. granulometry)  
    lx(double): width of the box in which to deposit  
    potential(integer): for deposit (1->gravity, 2->wall, 3->big_particles)  
    dradii(double array) (optional) : a list of already deposited radii  
    dcoor(double array) (optional) : a list of already deposited coor (must be of
        size [nb_dradii,3])  

    Returns
    -------
    coor (double array): coordinates of deposited radii (shape [nb_radii,2]) PYDOC  

    """
    return _lmgc90.deposit2D_Potential(*args)

def deposit3D_InContainer(*args):
    """


    Computes a new deposit under gravity in a container.  

    i_shape = 0 : box  

    *   a point (x, y, z) is in the box iff x is in [-lx/2, lx/2], y is in [-ly/2,
        ly/2] and z is in [0, lz] i_shape = 1 : cylinder  
    *   a point (x, y, z) is in the cylinder iff x^2 + y^2 is in [0, R^2] and z is
        in [0, lz] i_shape = 2 : sphere  
    *   a point (x, y, z) is in the sphere iff x^2 + y^2 + z^2 is in [0, R^2]  

    python call: radii, coor = deposit3D_InContaier(in_radii, shape, p1, p2, p3[,
    dradii, dcoor, seed, with_log])  

    Parameters
    ----------
    in_radii(double array): given radii list (i.e. granulometry)  
    shape(integer)of container (0->box, 1->cylinder, 2->sphere)  
    p1(double): box-> lx, cylinder->R, sphere->R  
    p2(double): box-> ly, cylinder->lz, sphere->ignored  
    p3(double): box-> lz, cylinder->ignored, sphere->ignored  
    dradii(double array) (optional) : a list of already deposited radii  
    dcoor(double array) (optional) : a list of already deposited coor (must be of
        size [nb_dradii,3])  
    seed(integer array) (optional) : an input seed to control randomness  
    with_log(integer)de/activate log message  

    Returns
    -------
    radii (double array): list of deposited radii coor (double array): coordinates
    of deposited radii (shape [nb_radii,3]) PYDOC  

    """
    return _lmgc90.deposit3D_InContainer(*args)

def mesh2D_GetIndicesMeshQ4(*args):
    """


    this function gives the couple (i, j) of indices coresponding to a given node n  

    **Warning**: python call: [i, j]=mesh2D_GetIndicesMeshQ4(n)  

    Parameters
    ----------
    n(int): the given node  
    i(int *): index in the u direction  
    j(int *): index in the v direction  

    """
    return _lmgc90.mesh2D_GetIndicesMeshQ4(*args)

def mesh2D_SizeMeshQ4(*args):
    """


    this function computes the sizes of vectors used to store a mesh made of Q4 in
    the following generic format:  

    *   coor: vector of coordinates of the nodes [x1, y1, x2, y2, ...]  
    *   nb_node_per_ele: nb_node_per_ele(i) contains the number of nodes for element
        i, i in [1, number of elements]  
    *   conn: vector storing the connectivity of the elements [n11, n12n n13, n21,
        n22, n23, n24, ...] consider the following little mesh:  
         2 4 6  *---*---*  
         | 1 | 2 |  *---*---*  
         1 3 5  
        the vectors for this mesh read:  
    *   coor = [x1, y1, x2, y2, x3, y3, x4, y4, x5, y5, x6, y6]  
    *   nb_node_per_ele = [4, 4]  
    *   conn = [1, 3, 4, 2, 3, 5, 6, 4]  

        **Warning**: python call: [size_coor, size_nb_node_per_ele,
            size_conn]=mesh2D_SizeMeshQ4(nb_elem_x, nb_elem_y)  

        Parameters:  
        nb_elem_x(int): number of elements in the horizontal direction  
        nb_elem_y(int): number of elements in the vertical direction  
        size_coor(int *): size of coor  
        size_nb_node_per_ele(int *): size of nb_node_per_ele  
        size_conn(int *): size of conn  

    """
    return _lmgc90.mesh2D_SizeMeshQ4(*args)

def mesh2D_SizeMesh2T3(*args):
    """


    this function computes the sizes of vectors used to store a mesh made of T3 ---
    obtained by splitting a Q4 in two T3 --- in the following generic format:  

    *   coor: vector of coordinates of the nodes [x1, y1, x2, y2, ...]  
    *   nb_node_per_ele: nb_node_per_ele(i) contains the number of nodes for element
        i, i in [1, number of elements]  
    *   conn: vector storing the connectivity of the elements [n11, n12n n13, n21,
        n22, n23, n24, ...] consider the following little mesh:  
         2 4  *----*  
         | 1 /|  
         | / |  
         | / |  
         |/ 2 |  *----*  
         1 3  
        the vectors for this mesh read:  
    *   coor = [x1, y1, x2, y2, x3, y3, x4, y4]  
    *   nb_node_per_ele = [3, 3]  
    *   conn = [1, 3, 4, 2, 1, 4]  

        **Warning**: python call: [size_coor, size_nb_node_per_ele,
            size_conn]=mesh2D_SizeMesh2T3(nb_elem_x, nb_elem_y)  

        Parameters:  
        nb_elem_x(int): number of elements Q4 in the horizontal direction  
        nb_elem_y(int): number of elements Q4 in the vertical direction  
        size_coor(int *): size of coor  
        size_nb_node_per_ele(int *): size of nb_node_per_ele  
        size_conn(int *): size of conn  

    """
    return _lmgc90.mesh2D_SizeMesh2T3(*args)

def mesh2D_SizeMesh4T3(*args):
    """


    this function computes the sizes of vectors used to store a mesh made of T3 ---
    obtained by splitting a Q4 in four T3 --- in the following generic format:  

    *   coor: vector of coordinates of the nodes [x1, y1, x2, y2, ...]  
    *   nb_node_per_ele: nb_node_per_ele(i) contains the number of nodes for element
        i, i in [1, number of elements]  
    *   conn: vector storing the connectivity of the elements [n11, n12n n13, n21,
        n22, n23, n24, ...] consider the following little mesh:  
         2 4  *-----*  
         |\ 4 /|  
         | \ / |  
         |1 5 3|  
         | / \ |  
         |/ 2 |  *-----*  
         1 3  
        the vectors for this mesh read:  
    *   coor = [x1, y1, x2, y2, x3, y3, x4, y4, x5, y5]  
    *   nb_node_per_ele = [3, 3, 3, 3]  
    *   conn = [1, 5, 2, 1, 3, 5, 3, 4, 5, 2, 5, 4]  

        **Warning**: python call: [size_coor, size_nb_node_per_ele,
            size_conn]=mesh2D_SizeMesh4T3(nb_elem_x, nb_elem_y)  

        Parameters:  
        nb_elem_x(int): number of elements Q4 in the horizontal direction  
        nb_elem_y(int): number of elements Q4 in the vertical direction  
        size_coor(int *): size of coor  
        size_nb_node_per_ele(int *): size of nb_node_per_ele  
        size_conn(int *): size of conn  

    """
    return _lmgc90.mesh2D_SizeMesh4T3(*args)

def mesh2D_SizeMeshQ8(*args):
    """


    this function computes the sizes of vectors used to store a mesh made of Q8
    following generic format:  

    *   coor: vector of coordinates of the nodes [x1, y1, x2, y2, ...]  
    *   nb_node_per_ele: nb_node_per_ele(i) contains the number of nodes for element
        i, i in [1, number of elements]  
    *   conn: vector storing the connectivity of the elements [n11, n12n n13, n21,
        n22, n23, n24, ...] consider the following little mesh:  
         3 7 3  *---*---*  
         | |  
         | |  
         8 * 1 * 6  
         | |  
         | |  *---*---*  
         1 5 2  
        the vectors for this mesh read:  
    *   coor = [x1, y1, x2, y2, x3, y3, x4, y4, x5, y5, x6, y6, x7, y7, x8, y8]  
    *   nb_node_per_ele = [8]  
    *   conn = [1, 2, 3, 4, 5, 6, 7, 8]  

        **Warning**: python call: [size_coor, size_nb_node_per_ele,
            size_conn]=mesh2D_SizeMesh4T3(nb_elem_x, nb_elem_y)  

        Parameters:  
        nb_elem_x(int): number of elements Q4 in the horizontal direction  
        nb_elem_y(int): number of elements Q4 in the vertical direction  
        size_coor(int *): size of coor  
        size_nb_node_per_ele(int *): size of nb_node_per_ele  
        size_conn(int *): size of conn  

    """
    return _lmgc90.mesh2D_SizeMeshQ8(*args)

def mesh2D_MeshQ4(*args):
    """


    this function computes and returns a mesh made of Q4 in the following generic
    format:  

    *   coor: vector of coordinates of the nodes [x1, y1, x2, y2, ...]  
    *   nb_node_per_ele: nb_node_per_ele(i) contains the number of nodes for element
        i, i in [1, number of elements]  
    *   conn: vector storing the connectivity of the elements [n11, n12n n13, n21,
        n22, n23, n24, ...] consider the following little mesh:  
         2 4 6  *---*---*  
         | 1 | 2 |  *---*---*  
         1 3 5  
        the vectors for this mesh read:  
    *   coor = [x1, y1, x2, y2, x3, y3, x4, y4, x5, y5, x6, y6]  
    *   nb_node_per_ele = [4, 4]  
    *   conn = [1, 3, 4, 2, 3, 5, 6, 4]  

        **Warning**: python call: [coor, nb_node_per_ele, conn]=mesh2D_MeshQ4(x0,
            y0, lx, ly,
               nb_elem_x, nb_elem_y, size_coor, size_nb_node_per_ele, size_conn)  

        Parameters:  
        x0(double): abscissa of the lower left corner of the rectangle  
        y0(double): ordinate of the lower left corner of the rectangle  
        lx(double): length of the mesh, following the axis (Ox)  
        ly(double): length of the mesh, following the axis (Oy)  
        nb_elem_x(int): number of elements in the horizontal direction  
        nb_elem_y(int): number of elements in the vertical direction  
        size_coor(int): size of coor  
        size_nb_node_per_ele(int): size of nb_node_per_ele  
        size_conn(int): size of conn  
        coor(double *): vector of coordinates of the nodes [x1, y1, x2, y2, ...]  
        nb_node_per_ele(int *): nb_node_per_ele(i) contains the number of nodes for element i,
            i in [1, number of elements]  
        conn(int *): vector storing the connectivity of the elements [n11, n12n n13,
            n21, n22, n23, n24, ...]  

    """
    return _lmgc90.mesh2D_MeshQ4(*args)

def mesh2D_Mesh2T3(*args):
    """


    this function computes an returns a mesh made of T3 --- obtained by splitting a
    Q4 in two T3 --- in the following generic format:  

    *   coor: vector of coordinates of the nodes [x1, y1, x2, y2, ...]  
    *   nb_node_per_ele: nb_node_per_ele(i) contains the number of nodes for element
        i, i in [1, number of elements]  
    *   conn: vector storing the connectivity of the elements [n11, n12n n13, n21,
        n22, n23, n24, ...] consider the following little mesh:  
         2 4  *----*  
         | 1 /|  
         | / |  
         | / |  
         |/ 2 |  *----*  
         1 3  
        the vectors for this mesh read:  
    *   coor = [x1, y1, x2, y2, x3, y3, x4, y4]  
    *   nb_node_per_ele = [3, 3]  
    *   conn = [1, 3, 4, 2, 1, 4]  
    *   coor: vector of coordinates of the nodes [x1, y1, x2, y2, ...]  
    *   nb_node_per_ele: nb_node_per_ele(i) contains the number of nodes for element
        i, i in [1, number of elements]  
    *   conn: vector storing the connectivity of the elements [n11, n12n n13, n21,
        n22, n23, n24, ...]  

        **Warning**: python call: [coor, nb_node_per_ele, conn]=mesh2D_Mesh2T3(x0,
            y0, lx, ly,
               nb_elem_x, nb_elem_y, size_coor, size_nb_node_per_ele, size_conn)  

        Parameters:  
        x0(double): abscissa of the lower left corner of the rectangle  
        y0(double): ordinate of the lower left corner of the rectangle  
        lx(double): length of the mesh, following the axis (Ox)  
        ly(double): length of the mesh, following the axis (Oy)  
        nb_elem_x(int): number of elements Q4 in the horizontal direction  
        nb_elem_y(int): number of elements Q4 in the vertical direction  
        size_coor(int): size of coor  
        size_nb_node_per_ele(int): size of nb_node_per_ele  
        size_conn(int): size of conn  
        coor(double *): vector of coordinates of the nodes [x1, y1, x2, y2, ...]  
        nb_node_per_ele(int *): nb_node_per_ele(i) contains the number of nodes for element i,
            i in [1, number of elements]  
        conn(int *): vector storing the connectivity of the elements [n11, n12n n13,
            n21, n22, n23, n24, ...]  

    """
    return _lmgc90.mesh2D_Mesh2T3(*args)

def mesh2D_Mesh4T3(*args):
    """


    this function computes and return a mesh made of T3 --- obtained by splitting a
    Q4 in four T3 --- in the following generic format:  

    *   coor: vector of coordinates of the nodes [x1, y1, x2, y2, ...]  
    *   nb_node_per_ele: nb_node_per_ele(i) contains the number of nodes for element
        i, i in [1, number of elements]  
    *   conn: vector storing the connectivity of the elements [n11, n12n n13, n21,
        n22, n23, n24, ...] consider the following little mesh:  
         2 4  *-----*  
         |\ 4 /|  
         | \ / |  
         |1 5 3|  
         | / \ |  
         |/ 2 |  *-----*  
         1 3  
        the vectors for this mesh read:  
    *   coor = [x1, y1, x2, y2, x3, y3, x4, y4, x5, y5]  
    *   nb_node_per_ele = [3, 3, 3, 3]  
    *   conn = [1, 5, 2, 1, 3, 5, 3, 4, 5, 2, 5, 4]  

        **Warning**: python call: [coor, nb_node_per_ele, conn]=mesh2D_Mesh4T3(x0,
            y0, lx, ly,
               nb_elem_x, nb_elem_y, size_coor, size_nb_node_per_ele, size_conn)  

        Parameters:  
        x0(double): abscissa of the lower left corner of the rectangle  
        y0(double): ordinate of the lower left corner of the rectangle  
        lx(double): length of the mesh, following the axis (Ox)  
        ly(double): length of the mesh, following the axis (Oy)  
        nb_elem_x(int): number of elements Q4 in the horizontal direction  
        nb_elem_y(int): number of elements Q4 in the vertical direction  
        size_coor(int): size of coor  
        size_nb_node_per_ele(int): size of nb_node_per_ele  
        size_conn(int): size of conn  
        coor(double *): vector of coordinates of the nodes [x1, y1, x2, y2, ...]  
        nb_node_per_ele(int *): nb_node_per_ele(i) contains the number of nodes for element i,
            i in [1, number of elements]  
        conn(int *): vector storing the connectivity of the elements [n11, n12n n13,
            n21, n22, n23, n24, ...]  

    """
    return _lmgc90.mesh2D_Mesh4T3(*args)

def mesh2D_MeshQ8(*args):
    """


    this function computes and returns a mesh made of Q8 in the following generic
    format:  

    *   coor: vector of coordinates of the nodes [x1, y1, x2, y2, ...]  
    *   nb_node_per_ele: nb_node_per_ele(i) contains the number of nodes for element
        i, i in [1, number of elements]  
    *   conn: vector storing the connectivity of the elements [n11, n12n n13, n21,
        n22, n23, n24, ...] consider the following little mesh:  
         3 7 3  *---*---*  
         | |  
         | |  
         8 * 1 * 6  
         | |  
         | |  *---*---*  
         1 5 2  
        the vectors for this mesh read:  
    *   coor = [x1, y1, x2, y2, x3, y3, x4, y4, x5, y5, x6, y6, x7, y7, x8, y8]  
    *   nb_node_per_ele = [8]  
    *   conn = [1, 2, 3, 4, 5, 6, 7, 8]  

        **Warning**: python call: [coor, nb_node_per_ele, conn]=mesh2D_MeshQ8(x0,
            y0, lx, ly,
               nb_elem_x, nb_elem_y, size_coor, size_nb_node_per_ele, size_conn)  

        Parameters:  
        x0(double): abscissa of the lower left corner of the rectangle  
        y0(double): ordinate of the lower left corner of the rectangle  
        lx(double): length of the mesh, following the axis (Ox)  
        ly(double): length of the mesh, following the axis (Oy)  
        nb_elem_x(int): number of elements Q4 in the horizontal direction  
        nb_elem_y(int): number of elements Q4 in the vertical direction  
        size_coor(int): size of coor  
        size_nb_node_per_ele(int): size of nb_node_per_ele  
        size_conn(int): size of conn  
        coor(double *): vector of coordinates of the nodes [x1, y1, x2, y2, ...]  
        nb_node_per_ele(int *): nb_node_per_ele(i) contains the number of nodes for element i,
            i in [1, number of elements]  
        conn(int *): vector storing the connectivity of the elements [n11, n12n n13,
            n21, n22, n23, n24, ...]  

    """
    return _lmgc90.mesh2D_MeshQ8(*args)

def surface_T3_compute_volume_inertia(*args):
    """


    Computes the volume of an object described by a triangulated surface.  

    **Warning**: 1) we assume size_coor is three times the number of nodes and
        size_connec is three times the number of elements python call: x_G, I,
        vol=surface_T3_compute_volume_inertia(coor, connec, 3, 9)  

    Parameters
    ----------
    coor_size(int): size of coor  
    coor(double *): node coordinates  
    connec_size(int): size of connec  
    vol(double *): computed volume  
    x_G(double *): mass center coordinates  
    x_G_size(int): size of x_G  
    I(double *): inertia matrix, stored a a vector  
    I_size(int): size of I  

    """
    return _lmgc90.surface_T3_compute_volume_inertia(*args)

def surface_T3_identify_entities(*args):
    """


    Attributes an entity number to triangles, by computing connected components.  

    **Warning**: 1) we assume size_connec is three times the number of elements and
        size_ele2entity is the number of elements python call:
        ele2entity=surface_T3_identify_entities(nbnode, max_adj_ele_2_node, connec,
        nbele)  

    Parameters
    ----------
    nbnode(int): the number of nodes  
    max_adj_ele_2_node(int): the maximal number of adjacent elements per node  
    connec(int *): connecivity of elements  
    connec_size(int): size of connec  
    ele2entity(double *): entity number for each element  
    ele2entity_size(int): size of ele2entity  

    """
    return _lmgc90.surface_T3_identify_entities(*args)

def io_hdf5_initOutFile(*args):
    """


    Init HDF5 file in which to write results.  

    python usage : io_hdf5_initOutFile(filename)  

    Parameters
    ----------
    filename(string) : file in which to write  

    """
    return _lmgc90.io_hdf5_initOutFile(*args)

def io_hdf5_write(*args):
    """


    write output data in HDF5 file (GPV, DOF and VlocRloc).  

    python usage : io_hdf5_write()  

    """
    return _lmgc90.io_hdf5_write(*args)

def io_hdf5_write_last(*args):
    """


    write output data in HDF5 file (GPV, DOF and VlocRloc) in file  

    python usage : io_hdf5_write_last(filename)  

    Parameters
    ----------
    filename(string) : file in which to write  

    """
    return _lmgc90.io_hdf5_write_last(*args)

def io_hdf5_read(*args):
    """


    read output data from HDF5 file (DOF and VlocRloc).  

    python usage : io_hdf5_read(filename, step)  

    Parameters
    ----------
    filename(string) : file to read  
    step(integer) : step number to read  

    """
    return _lmgc90.io_hdf5_read(*args)

def io_hdf5_cleanMemory(*args):
    """


    cleanMemory of io_hdf5 module  

    python usage : io_hdf5_cleanMemory()  

    """
    return _lmgc90.io_hdf5_cleanMemory(*args)

def io_hdf5_fixVersion(*args):
    """


    Will try to fix the file when reading it.  

    Because the parameters changed within version 0, this flag is needed to fix the
    file whend reading it.  

    python usage : io_hdf5_fixVersion(version)  

    """
    return _lmgc90.io_hdf5_fixVersion(*args)
# This file is compatible with both classic and new-style classes.


